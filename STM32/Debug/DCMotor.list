
DCMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008368  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  08008508  08008508  00018508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088c4  080088c4  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  080088c4  080088c4  000188c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088cc  080088cc  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088cc  080088cc  000188cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088d0  080088d0  000188d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080088d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  200001d8  08008aac  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  08008aac  00020530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000db74  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021b6  00000000  00000000  0002ddbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d48  00000000  00000000  0002ff78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a51  00000000  00000000  00030cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000174ac  00000000  00000000  00031711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fa2a  00000000  00000000  00048bbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fc8b  00000000  00000000  000585e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004880  00000000  00000000  000e8274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000ecaf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080084f0 	.word	0x080084f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	080084f0 	.word	0x080084f0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <updatePID>:
#include "PID.h"

void updatePID(PID_Controller* pid, double current) {
 8000ef4:	b5b0      	push	{r4, r5, r7, lr}
 8000ef6:	b08a      	sub	sp, #40	; 0x28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	ed87 0b00 	vstr	d0, [r7]
    double error = pid->target - current;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8000f06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f0a:	f7ff f9c5 	bl	8000298 <__aeabi_dsub>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	460b      	mov	r3, r1
 8000f12:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // Proportional
    double P = pid->Kp * error;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000f20:	f7ff fb72 	bl	8000608 <__aeabi_dmul>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	e9c7 2306 	strd	r2, r3, [r7, #24]
    // Integral term (with anti-windup)
    pid->integral += pid->Ki * error * pid->dt;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000f38:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000f3c:	f7ff fb64 	bl	8000608 <__aeabi_dmul>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	4610      	mov	r0, r2
 8000f46:	4619      	mov	r1, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8000f4e:	f7ff fb5b 	bl	8000608 <__aeabi_dmul>
 8000f52:	4602      	mov	r2, r0
 8000f54:	460b      	mov	r3, r1
 8000f56:	4620      	mov	r0, r4
 8000f58:	4629      	mov	r1, r5
 8000f5a:	f7ff f99f 	bl	800029c <__adddf3>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	68f9      	ldr	r1, [r7, #12]
 8000f64:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    if (pid->integral > pid->max_output) {
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000f74:	f7ff fdd8 	bl	8000b28 <__aeabi_dcmpgt>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d006      	beq.n	8000f8c <updatePID+0x98>
        pid->integral = pid->max_output;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000f84:	68f9      	ldr	r1, [r7, #12]
 8000f86:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8000f8a:	e010      	b.n	8000fae <updatePID+0xba>
    } else if (pid->integral < pid->min_output) {
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000f98:	f7ff fda8 	bl	8000aec <__aeabi_dcmplt>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d005      	beq.n	8000fae <updatePID+0xba>
        pid->integral = pid->min_output;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000fa8:	68f9      	ldr	r1, [r7, #12]
 8000faa:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    }
    // Derivative
    double D = pid->Kd * (error - pid->prev_error) / pid->dt;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8000fba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000fbe:	f7ff f96b 	bl	8000298 <__aeabi_dsub>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4620      	mov	r0, r4
 8000fc8:	4629      	mov	r1, r5
 8000fca:	f7ff fb1d 	bl	8000608 <__aeabi_dmul>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4610      	mov	r0, r2
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8000fdc:	f7ff fc3e 	bl	800085c <__aeabi_ddiv>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    // Total
    pid->output = P + pid->integral + D;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8000fee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000ff2:	f7ff f953 	bl	800029c <__adddf3>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	4610      	mov	r0, r2
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001002:	f7ff f94b 	bl	800029c <__adddf3>
 8001006:	4602      	mov	r2, r0
 8001008:	460b      	mov	r3, r1
 800100a:	68f9      	ldr	r1, [r7, #12]
 800100c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    // Saturate output within limits
    if (pid->output > pid->max_output) {
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800101c:	f7ff fd84 	bl	8000b28 <__aeabi_dcmpgt>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d006      	beq.n	8001034 <updatePID+0x140>
    	pid->output = pid->max_output;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800102c:	68f9      	ldr	r1, [r7, #12]
 800102e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8001032:	e010      	b.n	8001056 <updatePID+0x162>
    } else if (pid->output < pid->min_output) {
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001040:	f7ff fd54 	bl	8000aec <__aeabi_dcmplt>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d005      	beq.n	8001056 <updatePID+0x162>
    	pid->output = pid->min_output;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001050:	68f9      	ldr	r1, [r7, #12]
 8001052:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    }
    pid->prev_error = error;
 8001056:	68f9      	ldr	r1, [r7, #12]
 8001058:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800105c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 8001060:	bf00      	nop
 8001062:	3728      	adds	r7, #40	; 0x28
 8001064:	46bd      	mov	sp, r7
 8001066:	bdb0      	pop	{r4, r5, r7, pc}

08001068 <ParseSBUS>:
#include "Sbus.h"

void ParseSBUS(tsbus* sbus){
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	sbus->ch[0]  = ( (sbus->ReceivedData[1]		| sbus->ReceivedData[2]<<8) 								& 0x07FF );
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	785b      	ldrb	r3, [r3, #1]
 8001074:	b21a      	sxth	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	789b      	ldrb	r3, [r3, #2]
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	b21b      	sxth	r3, r3
 800107e:	4313      	orrs	r3, r2
 8001080:	b21b      	sxth	r3, r3
 8001082:	b29b      	uxth	r3, r3
 8001084:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001088:	b29a      	uxth	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	835a      	strh	r2, [r3, #26]
	sbus->ch[1]  = ( (sbus->ReceivedData[2]>>3	| sbus->ReceivedData[3]<<5) 								& 0x07FF );
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	789b      	ldrb	r3, [r3, #2]
 8001092:	08db      	lsrs	r3, r3, #3
 8001094:	b2db      	uxtb	r3, r3
 8001096:	b21a      	sxth	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	78db      	ldrb	r3, [r3, #3]
 800109c:	015b      	lsls	r3, r3, #5
 800109e:	b21b      	sxth	r3, r3
 80010a0:	4313      	orrs	r3, r2
 80010a2:	b21b      	sxth	r3, r3
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	839a      	strh	r2, [r3, #28]
	sbus->ch[2]  = ( (sbus->ReceivedData[3]>>6	| sbus->ReceivedData[4]<<2 	| sbus->ReceivedData[5]<<10 ) 	& 0x07FF );
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	78db      	ldrb	r3, [r3, #3]
 80010b4:	099b      	lsrs	r3, r3, #6
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	791b      	ldrb	r3, [r3, #4]
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	4313      	orrs	r3, r2
 80010c4:	b21a      	sxth	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	795b      	ldrb	r3, [r3, #5]
 80010ca:	029b      	lsls	r3, r3, #10
 80010cc:	b21b      	sxth	r3, r3
 80010ce:	4313      	orrs	r3, r2
 80010d0:	b21b      	sxth	r3, r3
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010d8:	b29a      	uxth	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	83da      	strh	r2, [r3, #30]
	sbus->ch[3]  = ( (sbus->ReceivedData[5]>>1	| sbus->ReceivedData[6]<<7) 								& 0x07FF );
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	795b      	ldrb	r3, [r3, #5]
 80010e2:	085b      	lsrs	r3, r3, #1
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	b21a      	sxth	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	799b      	ldrb	r3, [r3, #6]
 80010ec:	01db      	lsls	r3, r3, #7
 80010ee:	b21b      	sxth	r3, r3
 80010f0:	4313      	orrs	r3, r2
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	841a      	strh	r2, [r3, #32]
	sbus->ch[4]  = ( (sbus->ReceivedData[6]>>4	| sbus->ReceivedData[7]<<4) 								& 0x07FF );
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	799b      	ldrb	r3, [r3, #6]
 8001104:	091b      	lsrs	r3, r3, #4
 8001106:	b2db      	uxtb	r3, r3
 8001108:	b21a      	sxth	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	79db      	ldrb	r3, [r3, #7]
 800110e:	011b      	lsls	r3, r3, #4
 8001110:	b21b      	sxth	r3, r3
 8001112:	4313      	orrs	r3, r2
 8001114:	b21b      	sxth	r3, r3
 8001116:	b29b      	uxth	r3, r3
 8001118:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800111c:	b29a      	uxth	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	845a      	strh	r2, [r3, #34]	; 0x22
	sbus->ch[5]  = ( (sbus->ReceivedData[7]>>7	| sbus->ReceivedData[8]<<1	| sbus->ReceivedData[9]<<9 ) 	& 0x07FF );
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	79db      	ldrb	r3, [r3, #7]
 8001126:	09db      	lsrs	r3, r3, #7
 8001128:	b2db      	uxtb	r3, r3
 800112a:	b21a      	sxth	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	7a1b      	ldrb	r3, [r3, #8]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	b21b      	sxth	r3, r3
 8001134:	4313      	orrs	r3, r2
 8001136:	b21a      	sxth	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	7a5b      	ldrb	r3, [r3, #9]
 800113c:	025b      	lsls	r3, r3, #9
 800113e:	b21b      	sxth	r3, r3
 8001140:	4313      	orrs	r3, r2
 8001142:	b21b      	sxth	r3, r3
 8001144:	b29b      	uxth	r3, r3
 8001146:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800114a:	b29a      	uxth	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	849a      	strh	r2, [r3, #36]	; 0x24
	sbus->ch[6]  = ( (sbus->ReceivedData[9]>>2 	| sbus->ReceivedData[10]<<6) 								& 0x07FF );
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	7a5b      	ldrb	r3, [r3, #9]
 8001154:	089b      	lsrs	r3, r3, #2
 8001156:	b2db      	uxtb	r3, r3
 8001158:	b21a      	sxth	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	7a9b      	ldrb	r3, [r3, #10]
 800115e:	019b      	lsls	r3, r3, #6
 8001160:	b21b      	sxth	r3, r3
 8001162:	4313      	orrs	r3, r2
 8001164:	b21b      	sxth	r3, r3
 8001166:	b29b      	uxth	r3, r3
 8001168:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800116c:	b29a      	uxth	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	84da      	strh	r2, [r3, #38]	; 0x26
	sbus->ch[7]  = ( (sbus->ReceivedData[10]>>5 | sbus->ReceivedData[11]<<3) 								& 0x07FF );
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	7a9b      	ldrb	r3, [r3, #10]
 8001176:	095b      	lsrs	r3, r3, #5
 8001178:	b2db      	uxtb	r3, r3
 800117a:	b21a      	sxth	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	7adb      	ldrb	r3, [r3, #11]
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	b21b      	sxth	r3, r3
 8001184:	4313      	orrs	r3, r2
 8001186:	b21b      	sxth	r3, r3
 8001188:	b29b      	uxth	r3, r3
 800118a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800118e:	b29a      	uxth	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	851a      	strh	r2, [r3, #40]	; 0x28
	sbus->ch[8]  = ( (sbus->ReceivedData[12]	| sbus->ReceivedData[13]<<8) 								& 0x07FF );
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	7b1b      	ldrb	r3, [r3, #12]
 8001198:	b21a      	sxth	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	7b5b      	ldrb	r3, [r3, #13]
 800119e:	021b      	lsls	r3, r3, #8
 80011a0:	b21b      	sxth	r3, r3
 80011a2:	4313      	orrs	r3, r2
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	855a      	strh	r2, [r3, #42]	; 0x2a
	sbus->ch[9]  = ( (sbus->ReceivedData[13]>>3 | sbus->ReceivedData[14]<<5) 								& 0x07FF );
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	7b5b      	ldrb	r3, [r3, #13]
 80011b6:	08db      	lsrs	r3, r3, #3
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	b21a      	sxth	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	7b9b      	ldrb	r3, [r3, #14]
 80011c0:	015b      	lsls	r3, r3, #5
 80011c2:	b21b      	sxth	r3, r3
 80011c4:	4313      	orrs	r3, r2
 80011c6:	b21b      	sxth	r3, r3
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	859a      	strh	r2, [r3, #44]	; 0x2c
	sbus->ch[10] = ( (sbus->ReceivedData[14]>>6 | sbus->ReceivedData[15]<<2 | sbus->ReceivedData[16]<<10) 	& 0x07FF );
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	7b9b      	ldrb	r3, [r3, #14]
 80011d8:	099b      	lsrs	r3, r3, #6
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	b21a      	sxth	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	7bdb      	ldrb	r3, [r3, #15]
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	b21b      	sxth	r3, r3
 80011e6:	4313      	orrs	r3, r2
 80011e8:	b21a      	sxth	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	7c1b      	ldrb	r3, [r3, #16]
 80011ee:	029b      	lsls	r3, r3, #10
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	4313      	orrs	r3, r2
 80011f4:	b21b      	sxth	r3, r3
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	85da      	strh	r2, [r3, #46]	; 0x2e
	sbus->ch[11] = ( (sbus->ReceivedData[16]>>1 | sbus->ReceivedData[17]<<7)								& 0x07FF );
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	7c1b      	ldrb	r3, [r3, #16]
 8001206:	085b      	lsrs	r3, r3, #1
 8001208:	b2db      	uxtb	r3, r3
 800120a:	b21a      	sxth	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	7c5b      	ldrb	r3, [r3, #17]
 8001210:	01db      	lsls	r3, r3, #7
 8001212:	b21b      	sxth	r3, r3
 8001214:	4313      	orrs	r3, r2
 8001216:	b21b      	sxth	r3, r3
 8001218:	b29b      	uxth	r3, r3
 800121a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800121e:	b29a      	uxth	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	861a      	strh	r2, [r3, #48]	; 0x30
	sbus->ch[12] = ( (sbus->ReceivedData[17]>>4 | sbus->ReceivedData[18]<<4)								& 0x07FF );
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	7c5b      	ldrb	r3, [r3, #17]
 8001228:	091b      	lsrs	r3, r3, #4
 800122a:	b2db      	uxtb	r3, r3
 800122c:	b21a      	sxth	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	7c9b      	ldrb	r3, [r3, #18]
 8001232:	011b      	lsls	r3, r3, #4
 8001234:	b21b      	sxth	r3, r3
 8001236:	4313      	orrs	r3, r2
 8001238:	b21b      	sxth	r3, r3
 800123a:	b29b      	uxth	r3, r3
 800123c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001240:	b29a      	uxth	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	865a      	strh	r2, [r3, #50]	; 0x32
	sbus->ch[13] = ( (sbus->ReceivedData[18]>>7 | sbus->ReceivedData[19]<<1 | sbus->ReceivedData[20]<<9) 	& 0x07FF );
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	7c9b      	ldrb	r3, [r3, #18]
 800124a:	09db      	lsrs	r3, r3, #7
 800124c:	b2db      	uxtb	r3, r3
 800124e:	b21a      	sxth	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	7cdb      	ldrb	r3, [r3, #19]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	b21b      	sxth	r3, r3
 8001258:	4313      	orrs	r3, r2
 800125a:	b21a      	sxth	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	7d1b      	ldrb	r3, [r3, #20]
 8001260:	025b      	lsls	r3, r3, #9
 8001262:	b21b      	sxth	r3, r3
 8001264:	4313      	orrs	r3, r2
 8001266:	b21b      	sxth	r3, r3
 8001268:	b29b      	uxth	r3, r3
 800126a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800126e:	b29a      	uxth	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	869a      	strh	r2, [r3, #52]	; 0x34
	sbus->ch[14] = ( (sbus->ReceivedData[20]>>2 | sbus->ReceivedData[21]<<6) 								& 0x07FF );
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	7d1b      	ldrb	r3, [r3, #20]
 8001278:	089b      	lsrs	r3, r3, #2
 800127a:	b2db      	uxtb	r3, r3
 800127c:	b21a      	sxth	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	7d5b      	ldrb	r3, [r3, #21]
 8001282:	019b      	lsls	r3, r3, #6
 8001284:	b21b      	sxth	r3, r3
 8001286:	4313      	orrs	r3, r2
 8001288:	b21b      	sxth	r3, r3
 800128a:	b29b      	uxth	r3, r3
 800128c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001290:	b29a      	uxth	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	86da      	strh	r2, [r3, #54]	; 0x36
	sbus->ch[15] = ( (sbus->ReceivedData[21]>>5 | sbus->ReceivedData[22]<<3) 								& 0x07FF );
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	7d5b      	ldrb	r3, [r3, #21]
 800129a:	095b      	lsrs	r3, r3, #5
 800129c:	b2db      	uxtb	r3, r3
 800129e:	b21a      	sxth	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	7d9b      	ldrb	r3, [r3, #22]
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	4313      	orrs	r3, r2
 80012aa:	b21b      	sxth	r3, r3
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	871a      	strh	r2, [r3, #56]	; 0x38
	sbus->ch[16] = (  sbus->ReceivedData[23] 	& 0x0001 ) ? 2047: 0;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	7ddb      	ldrb	r3, [r3, #23]
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d002      	beq.n	80012ca <ParseSBUS+0x262>
 80012c4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80012c8:	e000      	b.n	80012cc <ParseSBUS+0x264>
 80012ca:	2200      	movs	r2, #0
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	875a      	strh	r2, [r3, #58]	; 0x3a
	sbus->ch[17] = (  sbus->ReceivedData[23]>>1 & 0x0001 ) ? 2047: 0;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	7ddb      	ldrb	r3, [r3, #23]
 80012d4:	085b      	lsrs	r3, r3, #1
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d002      	beq.n	80012e6 <ParseSBUS+0x27e>
 80012e0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80012e4:	e000      	b.n	80012e8 <ParseSBUS+0x280>
 80012e6:	2200      	movs	r2, #0
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <GetEncoderValue>:
#include "encoder.h"
#include "main.h"

void GetEncoderValue(encoder_data *encoder){
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b089      	sub	sp, #36	; 0x24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	  int EncoderGrayCode = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	61bb      	str	r3, [r7, #24]
	  int GrayCodeConvert[]={0,1,3,2};
 8001304:	4b23      	ldr	r3, [pc, #140]	; (8001394 <GetEncoderValue+0x9c>)
 8001306:	f107 0408 	add.w	r4, r7, #8
 800130a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800130c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  //reading encoder value as gray code
	  EncoderGrayCode = GrayCodeConvert[(HAL_GPIO_ReadPin(encoder_A_GPIO_Port, encoder_A_Pin) <<1 | HAL_GPIO_ReadPin(encoder_B_GPIO_Port, encoder_B_Pin)) & 0x03];
 8001310:	2140      	movs	r1, #64	; 0x40
 8001312:	4821      	ldr	r0, [pc, #132]	; (8001398 <GetEncoderValue+0xa0>)
 8001314:	f001 fd90 	bl	8002e38 <HAL_GPIO_ReadPin>
 8001318:	4603      	mov	r3, r0
 800131a:	005c      	lsls	r4, r3, #1
 800131c:	2180      	movs	r1, #128	; 0x80
 800131e:	481e      	ldr	r0, [pc, #120]	; (8001398 <GetEncoderValue+0xa0>)
 8001320:	f001 fd8a 	bl	8002e38 <HAL_GPIO_ReadPin>
 8001324:	4603      	mov	r3, r0
 8001326:	4323      	orrs	r3, r4
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	3320      	adds	r3, #32
 8001330:	443b      	add	r3, r7
 8001332:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8001336:	61bb      	str	r3, [r7, #24]
	  //if encoder value updated
	  if (encoder->PreviusGrayCode != EncoderGrayCode){
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	429a      	cmp	r2, r3
 8001340:	d024      	beq.n	800138c <GetEncoderValue+0x94>
		  int EncoderDeltaValue;
		  EncoderDeltaValue = EncoderGrayCode-encoder->PreviusGrayCode;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	61fb      	str	r3, [r7, #28]
		  if (EncoderDeltaValue<0) {EncoderDeltaValue+=4;}
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	2b00      	cmp	r3, #0
 8001350:	da02      	bge.n	8001358 <GetEncoderValue+0x60>
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3304      	adds	r3, #4
 8001356:	61fb      	str	r3, [r7, #28]
		  if (EncoderDeltaValue ==1) {
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d108      	bne.n	8001370 <GetEncoderValue+0x78>
			  encoder->direction=CW;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2201      	movs	r2, #1
 8001362:	711a      	strb	r2, [r3, #4]
			  encoder->EncoderValue++;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	1c5a      	adds	r2, r3, #1
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	e00a      	b.n	8001386 <GetEncoderValue+0x8e>
		  }
		  else if (EncoderDeltaValue ==3){
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	2b03      	cmp	r3, #3
 8001374:	d107      	bne.n	8001386 <GetEncoderValue+0x8e>
			  encoder->direction=CCW;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2202      	movs	r2, #2
 800137a:	711a      	strb	r2, [r3, #4]
			  encoder->EncoderValue--;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	1e5a      	subs	r2, r3, #1
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	609a      	str	r2, [r3, #8]
		  }
		  encoder->PreviusGrayCode=EncoderGrayCode;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	601a      	str	r2, [r3, #0]
	  }
}
 800138c:	bf00      	nop
 800138e:	3724      	adds	r7, #36	; 0x24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd90      	pop	{r4, r7, pc}
 8001394:	08008508 	.word	0x08008508
 8001398:	40020000 	.word	0x40020000

0800139c <HAL_UART_RxCpltCallback>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_usart1_rx;

/* USER CODE BEGIN PV */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	if (huart == &huart1){
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a05      	ldr	r2, [pc, #20]	; (80013bc <HAL_UART_RxCpltCallback+0x20>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d102      	bne.n	80013b2 <HAL_UART_RxCpltCallback+0x16>
		ParseSBUS(&receivedSBUS);
 80013ac:	4804      	ldr	r0, [pc, #16]	; (80013c0 <HAL_UART_RxCpltCallback+0x24>)
 80013ae:	f7ff fe5b 	bl	8001068 <ParseSBUS>
	}
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200002f4 	.word	0x200002f4
 80013c0:	200001f4 	.word	0x200001f4

080013c4 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	if (huart == &huart2){
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4a06      	ldr	r2, [pc, #24]	; (80013e8 <HAL_UART_TxCpltCallback+0x24>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d102      	bne.n	80013da <HAL_UART_TxCpltCallback+0x16>
		uart2Free=1;
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <HAL_UART_TxCpltCallback+0x28>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	601a      	str	r2, [r3, #0]
	}
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000338 	.word	0x20000338
 80013ec:	20000000 	.word	0x20000000

080013f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f0:	b590      	push	{r4, r7, lr}
 80013f2:	b09f      	sub	sp, #124	; 0x7c
 80013f4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013f6:	f000 fe15 	bl	8002024 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013fa:	f000 f999 	bl	8001730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013fe:	f000 fb15 	bl	8001a2c <MX_GPIO_Init>
  MX_DMA_Init();
 8001402:	f000 faf3 	bl	80019ec <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001406:	f000 fac7 	bl	8001998 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800140a:	f000 f9f9 	bl	8001800 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800140e:	f000 fa97 	bl	8001940 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1, &receivedSBUS.ReceivedData[0], SBUS_LEN);
 8001412:	2219      	movs	r2, #25
 8001414:	496c      	ldr	r1, [pc, #432]	; (80015c8 <main+0x1d8>)
 8001416:	486d      	ldr	r0, [pc, #436]	; (80015cc <main+0x1dc>)
 8001418:	f003 f93c 	bl	8004694 <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim1);
 800141c:	486c      	ldr	r0, [pc, #432]	; (80015d0 <main+0x1e0>)
 800141e:	f002 fa25 	bl	800386c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001422:	2100      	movs	r1, #0
 8001424:	486a      	ldr	r0, [pc, #424]	; (80015d0 <main+0x1e0>)
 8001426:	f002 fadd 	bl	80039e4 <HAL_TIM_PWM_Start>
  SystemTime=HAL_GetTick();
 800142a:	f000 fe61 	bl	80020f0 <HAL_GetTick>
 800142e:	4603      	mov	r3, r0
 8001430:	4a68      	ldr	r2, [pc, #416]	; (80015d4 <main+0x1e4>)
 8001432:	6013      	str	r3, [r2, #0]
  TestEncoder.PreviusGrayCode=0;
 8001434:	4b68      	ldr	r3, [pc, #416]	; (80015d8 <main+0x1e8>)
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
  TestEncoder.EncoderValue=0;
 800143a:	4b67      	ldr	r3, [pc, #412]	; (80015d8 <main+0x1e8>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  TestEncoder.PreviousEncoderValue=0;
 8001440:	4b65      	ldr	r3, [pc, #404]	; (80015d8 <main+0x1e8>)
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
  TestEncoder.SpeedRPM=0;
 8001446:	4b64      	ldr	r3, [pc, #400]	; (80015d8 <main+0x1e8>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  TestEncoder.direction=CW;
 800144c:	4b62      	ldr	r3, [pc, #392]	; (80015d8 <main+0x1e8>)
 800144e:	2201      	movs	r2, #1
 8001450:	711a      	strb	r2, [r3, #4]
  PID.Kp=0.1;
 8001452:	4962      	ldr	r1, [pc, #392]	; (80015dc <main+0x1ec>)
 8001454:	a356      	add	r3, pc, #344	; (adr r3, 80015b0 <main+0x1c0>)
 8001456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145a:	e9c1 2300 	strd	r2, r3, [r1]
  PID.Ki=0.01;
 800145e:	495f      	ldr	r1, [pc, #380]	; (80015dc <main+0x1ec>)
 8001460:	a355      	add	r3, pc, #340	; (adr r3, 80015b8 <main+0x1c8>)
 8001462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001466:	e9c1 2302 	strd	r2, r3, [r1, #8]
  PID.Kd=0;
 800146a:	495c      	ldr	r1, [pc, #368]	; (80015dc <main+0x1ec>)
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	f04f 0300 	mov.w	r3, #0
 8001474:	e9c1 2304 	strd	r2, r3, [r1, #16]
  PID.dt=0.001;
 8001478:	4958      	ldr	r1, [pc, #352]	; (80015dc <main+0x1ec>)
 800147a:	a351      	add	r3, pc, #324	; (adr r3, 80015c0 <main+0x1d0>)
 800147c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001480:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
  PID.integral=0;
 8001484:	4955      	ldr	r1, [pc, #340]	; (80015dc <main+0x1ec>)
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	f04f 0300 	mov.w	r3, #0
 800148e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
  PID.min_output=100;
 8001492:	4952      	ldr	r1, [pc, #328]	; (80015dc <main+0x1ec>)
 8001494:	f04f 0200 	mov.w	r2, #0
 8001498:	4b51      	ldr	r3, [pc, #324]	; (80015e0 <main+0x1f0>)
 800149a:	e9c1 2306 	strd	r2, r3, [r1, #24]
  PID.max_output=1000;
 800149e:	494f      	ldr	r1, [pc, #316]	; (80015dc <main+0x1ec>)
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	4b4f      	ldr	r3, [pc, #316]	; (80015e4 <main+0x1f4>)
 80014a6:	e9c1 2308 	strd	r2, r3, [r1, #32]
  PID.output=0;
 80014aa:	494c      	ldr	r1, [pc, #304]	; (80015dc <main+0x1ec>)
 80014ac:	f04f 0200 	mov.w	r2, #0
 80014b0:	f04f 0300 	mov.w	r3, #0
 80014b4:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
  PID.target=0;
 80014b8:	4948      	ldr	r1, [pc, #288]	; (80015dc <main+0x1ec>)
 80014ba:	f04f 0200 	mov.w	r2, #0
 80014be:	f04f 0300 	mov.w	r3, #0
 80014c2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  //reading SBUS from remote controller and writing PWM output
	  if (!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){
 80014c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ca:	4847      	ldr	r0, [pc, #284]	; (80015e8 <main+0x1f8>)
 80014cc:	f001 fcb4 	bl	8002e38 <HAL_GPIO_ReadPin>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d11d      	bne.n	8001512 <main+0x122>
		  while(!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){}
 80014d6:	bf00      	nop
 80014d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014dc:	4842      	ldr	r0, [pc, #264]	; (80015e8 <main+0x1f8>)
 80014de:	f001 fcab 	bl	8002e38 <HAL_GPIO_ReadPin>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0f7      	beq.n	80014d8 <main+0xe8>
		  if (ToggleSetpointInput==0){ToggleSetpointInput=1;}
 80014e8:	4b40      	ldr	r3, [pc, #256]	; (80015ec <main+0x1fc>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d103      	bne.n	80014f8 <main+0x108>
 80014f0:	4b3e      	ldr	r3, [pc, #248]	; (80015ec <main+0x1fc>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	e00c      	b.n	8001512 <main+0x122>
		  else if (ToggleSetpointInput==1){
 80014f8:	4b3c      	ldr	r3, [pc, #240]	; (80015ec <main+0x1fc>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d108      	bne.n	8001512 <main+0x122>
			  ToggleSetpointInput=0;
 8001500:	4b3a      	ldr	r3, [pc, #232]	; (80015ec <main+0x1fc>)
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
			  PID.target=250;
 8001506:	4935      	ldr	r1, [pc, #212]	; (80015dc <main+0x1ec>)
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	4b38      	ldr	r3, [pc, #224]	; (80015f0 <main+0x200>)
 800150e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		  }
	  }
	  if (ToggleSetpointInput){
 8001512:	4b36      	ldr	r3, [pc, #216]	; (80015ec <main+0x1fc>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d02a      	beq.n	8001570 <main+0x180>
		  if (receivedSBUS.ch[2]>200 && receivedSBUS.ch[2]<2000){
 800151a:	4b2b      	ldr	r3, [pc, #172]	; (80015c8 <main+0x1d8>)
 800151c:	8bdb      	ldrh	r3, [r3, #30]
 800151e:	2bc8      	cmp	r3, #200	; 0xc8
 8001520:	d91e      	bls.n	8001560 <main+0x170>
 8001522:	4b29      	ldr	r3, [pc, #164]	; (80015c8 <main+0x1d8>)
 8001524:	8bdb      	ldrh	r3, [r3, #30]
 8001526:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800152a:	d219      	bcs.n	8001560 <main+0x170>
			  PID.target = ((receivedSBUS.ch[2]-200)/2)*1000/700;
 800152c:	4b26      	ldr	r3, [pc, #152]	; (80015c8 <main+0x1d8>)
 800152e:	8bdb      	ldrh	r3, [r3, #30]
 8001530:	3bc8      	subs	r3, #200	; 0xc8
 8001532:	0fda      	lsrs	r2, r3, #31
 8001534:	4413      	add	r3, r2
 8001536:	105b      	asrs	r3, r3, #1
 8001538:	461a      	mov	r2, r3
 800153a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153e:	fb02 f303 	mul.w	r3, r2, r3
 8001542:	4a2c      	ldr	r2, [pc, #176]	; (80015f4 <main+0x204>)
 8001544:	fb82 1203 	smull	r1, r2, r2, r3
 8001548:	1212      	asrs	r2, r2, #8
 800154a:	17db      	asrs	r3, r3, #31
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	4618      	mov	r0, r3
 8001550:	f7fe fff0 	bl	8000534 <__aeabi_i2d>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4920      	ldr	r1, [pc, #128]	; (80015dc <main+0x1ec>)
 800155a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 800155e:	e066      	b.n	800162e <main+0x23e>
		  }
		  else{
			  PID.target=0;
 8001560:	491e      	ldr	r1, [pc, #120]	; (80015dc <main+0x1ec>)
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	f04f 0300 	mov.w	r3, #0
 800156a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 800156e:	e05e      	b.n	800162e <main+0x23e>
		  }
	  }
	  else if(!ToggleSetpointInput){
 8001570:	4b1e      	ldr	r3, [pc, #120]	; (80015ec <main+0x1fc>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d15a      	bne.n	800162e <main+0x23e>
		  if(HAL_GetTick()-speedUpdateTime>=10000){
 8001578:	f000 fdba 	bl	80020f0 <HAL_GetTick>
 800157c:	4603      	mov	r3, r0
 800157e:	4a1e      	ldr	r2, [pc, #120]	; (80015f8 <main+0x208>)
 8001580:	6812      	ldr	r2, [r2, #0]
 8001582:	1a9b      	subs	r3, r3, r2
 8001584:	f242 720f 	movw	r2, #9999	; 0x270f
 8001588:	4293      	cmp	r3, r2
 800158a:	d950      	bls.n	800162e <main+0x23e>
	 		  if(PID.target==250) PID.target=600;
 800158c:	4b13      	ldr	r3, [pc, #76]	; (80015dc <main+0x1ec>)
 800158e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <main+0x200>)
 8001598:	f7ff fa9e 	bl	8000ad8 <__aeabi_dcmpeq>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d02e      	beq.n	8001600 <main+0x210>
 80015a2:	490e      	ldr	r1, [pc, #56]	; (80015dc <main+0x1ec>)
 80015a4:	f04f 0200 	mov.w	r2, #0
 80015a8:	4b14      	ldr	r3, [pc, #80]	; (80015fc <main+0x20c>)
 80015aa:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 80015ae:	e038      	b.n	8001622 <main+0x232>
 80015b0:	9999999a 	.word	0x9999999a
 80015b4:	3fb99999 	.word	0x3fb99999
 80015b8:	47ae147b 	.word	0x47ae147b
 80015bc:	3f847ae1 	.word	0x3f847ae1
 80015c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80015c4:	3f50624d 	.word	0x3f50624d
 80015c8:	200001f4 	.word	0x200001f4
 80015cc:	200002f4 	.word	0x200002f4
 80015d0:	200002ac 	.word	0x200002ac
 80015d4:	20000234 	.word	0x20000234
 80015d8:	20000238 	.word	0x20000238
 80015dc:	20000250 	.word	0x20000250
 80015e0:	40590000 	.word	0x40590000
 80015e4:	408f4000 	.word	0x408f4000
 80015e8:	40020800 	.word	0x40020800
 80015ec:	200002a8 	.word	0x200002a8
 80015f0:	406f4000 	.word	0x406f4000
 80015f4:	5d9f7391 	.word	0x5d9f7391
 80015f8:	200002a4 	.word	0x200002a4
 80015fc:	4082c000 	.word	0x4082c000
	 		  else if (PID.target==600) PID.target=250;
 8001600:	4b40      	ldr	r3, [pc, #256]	; (8001704 <main+0x314>)
 8001602:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001606:	f04f 0200 	mov.w	r2, #0
 800160a:	4b3f      	ldr	r3, [pc, #252]	; (8001708 <main+0x318>)
 800160c:	f7ff fa64 	bl	8000ad8 <__aeabi_dcmpeq>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d005      	beq.n	8001622 <main+0x232>
 8001616:	493b      	ldr	r1, [pc, #236]	; (8001704 <main+0x314>)
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	4b3b      	ldr	r3, [pc, #236]	; (800170c <main+0x31c>)
 800161e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	 		  speedUpdateTime=HAL_GetTick();
 8001622:	f000 fd65 	bl	80020f0 <HAL_GetTick>
 8001626:	4603      	mov	r3, r0
 8001628:	461a      	mov	r2, r3
 800162a:	4b39      	ldr	r3, [pc, #228]	; (8001710 <main+0x320>)
 800162c:	601a      	str	r2, [r3, #0]
		  }
	  }
	  GetEncoderValue(&TestEncoder);
 800162e:	4839      	ldr	r0, [pc, #228]	; (8001714 <main+0x324>)
 8001630:	f7ff fe62 	bl	80012f8 <GetEncoderValue>
	  //Calculate RPM
	  if (HAL_GetTick()-SystemTime>=1){
 8001634:	f000 fd5c 	bl	80020f0 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	4b37      	ldr	r3, [pc, #220]	; (8001718 <main+0x328>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	429a      	cmp	r2, r3
 8001640:	d019      	beq.n	8001676 <main+0x286>
		  TestEncoder.SpeedRPM=(TestEncoder.EncoderValue-TestEncoder.PreviousEncoderValue)*1000*60/1024/4;//1000 for 1ms to 1sec - 60 for 1sec to 1min - 1024 for pules/rev - 4 for gray code to pulse
 8001642:	4b34      	ldr	r3, [pc, #208]	; (8001714 <main+0x324>)
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	4b33      	ldr	r3, [pc, #204]	; (8001714 <main+0x324>)
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001650:	fb02 f303 	mul.w	r3, r2, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	da01      	bge.n	800165c <main+0x26c>
 8001658:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800165c:	131b      	asrs	r3, r3, #12
 800165e:	461a      	mov	r2, r3
 8001660:	4b2c      	ldr	r3, [pc, #176]	; (8001714 <main+0x324>)
 8001662:	611a      	str	r2, [r3, #16]
		  TestEncoder.PreviousEncoderValue=TestEncoder.EncoderValue;
 8001664:	4b2b      	ldr	r3, [pc, #172]	; (8001714 <main+0x324>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	4a2a      	ldr	r2, [pc, #168]	; (8001714 <main+0x324>)
 800166a:	60d3      	str	r3, [r2, #12]
		  SystemTime=HAL_GetTick();
 800166c:	f000 fd40 	bl	80020f0 <HAL_GetTick>
 8001670:	4603      	mov	r3, r0
 8001672:	4a29      	ldr	r2, [pc, #164]	; (8001718 <main+0x328>)
 8001674:	6013      	str	r3, [r2, #0]
	  }
	  if (HAL_GetTick()-messageUpdateTime>=10){
 8001676:	f000 fd3b 	bl	80020f0 <HAL_GetTick>
 800167a:	4603      	mov	r3, r0
 800167c:	4a27      	ldr	r2, [pc, #156]	; (800171c <main+0x32c>)
 800167e:	6812      	ldr	r2, [r2, #0]
 8001680:	1a9b      	subs	r3, r3, r2
 8001682:	2b09      	cmp	r3, #9
 8001684:	d925      	bls.n	80016d2 <main+0x2e2>
		  char message[100];
		  int messagaLen=0;
 8001686:	2300      	movs	r3, #0
 8001688:	667b      	str	r3, [r7, #100]	; 0x64
		  messagaLen=sprintf(&message,"G1=%ld, G2=%f, T1=%ld ,\n",TestEncoder.SpeedRPM,PID.target,messageUpdateTime);
 800168a:	4b22      	ldr	r3, [pc, #136]	; (8001714 <main+0x324>)
 800168c:	691c      	ldr	r4, [r3, #16]
 800168e:	4b1d      	ldr	r3, [pc, #116]	; (8001704 <main+0x314>)
 8001690:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001694:	4921      	ldr	r1, [pc, #132]	; (800171c <main+0x32c>)
 8001696:	6809      	ldr	r1, [r1, #0]
 8001698:	4638      	mov	r0, r7
 800169a:	9102      	str	r1, [sp, #8]
 800169c:	e9cd 2300 	strd	r2, r3, [sp]
 80016a0:	4622      	mov	r2, r4
 80016a2:	491f      	ldr	r1, [pc, #124]	; (8001720 <main+0x330>)
 80016a4:	f004 fdc8 	bl	8006238 <siprintf>
 80016a8:	6678      	str	r0, [r7, #100]	; 0x64
		  if (uart2Free==1){
 80016aa:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <main+0x334>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d109      	bne.n	80016c6 <main+0x2d6>
			  HAL_UART_Transmit_IT(&huart2, message, messagaLen);
 80016b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	463b      	mov	r3, r7
 80016b8:	4619      	mov	r1, r3
 80016ba:	481b      	ldr	r0, [pc, #108]	; (8001728 <main+0x338>)
 80016bc:	f002 ffa5 	bl	800460a <HAL_UART_Transmit_IT>
			  uart2Free=0;
 80016c0:	4b18      	ldr	r3, [pc, #96]	; (8001724 <main+0x334>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
		  }
		  messageUpdateTime=HAL_GetTick();
 80016c6:	f000 fd13 	bl	80020f0 <HAL_GetTick>
 80016ca:	4603      	mov	r3, r0
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b13      	ldr	r3, [pc, #76]	; (800171c <main+0x32c>)
 80016d0:	601a      	str	r2, [r3, #0]
	  }
	  updatePID(&PID, TestEncoder.SpeedRPM);
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <main+0x324>)
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe ff2c 	bl	8000534 <__aeabi_i2d>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	ec43 2b10 	vmov	d0, r2, r3
 80016e4:	4807      	ldr	r0, [pc, #28]	; (8001704 <main+0x314>)
 80016e6:	f7ff fc05 	bl	8000ef4 <updatePID>
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,PID.output);
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <main+0x314>)
 80016ec:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80016f0:	490e      	ldr	r1, [pc, #56]	; (800172c <main+0x33c>)
 80016f2:	680c      	ldr	r4, [r1, #0]
 80016f4:	4610      	mov	r0, r2
 80016f6:	4619      	mov	r1, r3
 80016f8:	f7ff fa5e 	bl	8000bb8 <__aeabi_d2uiz>
 80016fc:	4603      	mov	r3, r0
 80016fe:	6363      	str	r3, [r4, #52]	; 0x34
	  if (!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){
 8001700:	e6e1      	b.n	80014c6 <main+0xd6>
 8001702:	bf00      	nop
 8001704:	20000250 	.word	0x20000250
 8001708:	4082c000 	.word	0x4082c000
 800170c:	406f4000 	.word	0x406f4000
 8001710:	200002a4 	.word	0x200002a4
 8001714:	20000238 	.word	0x20000238
 8001718:	20000234 	.word	0x20000234
 800171c:	200002a0 	.word	0x200002a0
 8001720:	08008518 	.word	0x08008518
 8001724:	20000000 	.word	0x20000000
 8001728:	20000338 	.word	0x20000338
 800172c:	200002ac 	.word	0x200002ac

08001730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b094      	sub	sp, #80	; 0x50
 8001734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001736:	f107 0320 	add.w	r3, r7, #32
 800173a:	2230      	movs	r2, #48	; 0x30
 800173c:	2100      	movs	r1, #0
 800173e:	4618      	mov	r0, r3
 8001740:	f004 fddd 	bl	80062fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001744:	f107 030c 	add.w	r3, r7, #12
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001754:	2300      	movs	r3, #0
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <SystemClock_Config+0xc8>)
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	4a26      	ldr	r2, [pc, #152]	; (80017f8 <SystemClock_Config+0xc8>)
 800175e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001762:	6413      	str	r3, [r2, #64]	; 0x40
 8001764:	4b24      	ldr	r3, [pc, #144]	; (80017f8 <SystemClock_Config+0xc8>)
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001770:	2300      	movs	r3, #0
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	4b21      	ldr	r3, [pc, #132]	; (80017fc <SystemClock_Config+0xcc>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a20      	ldr	r2, [pc, #128]	; (80017fc <SystemClock_Config+0xcc>)
 800177a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800177e:	6013      	str	r3, [r2, #0]
 8001780:	4b1e      	ldr	r3, [pc, #120]	; (80017fc <SystemClock_Config+0xcc>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001788:	607b      	str	r3, [r7, #4]
 800178a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800178c:	2302      	movs	r3, #2
 800178e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001790:	2301      	movs	r3, #1
 8001792:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001794:	2310      	movs	r3, #16
 8001796:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001798:	2302      	movs	r3, #2
 800179a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800179c:	2300      	movs	r3, #0
 800179e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017a0:	2308      	movs	r3, #8
 80017a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80017a4:	2364      	movs	r3, #100	; 0x64
 80017a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017a8:	2302      	movs	r3, #2
 80017aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017ac:	2304      	movs	r3, #4
 80017ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017b0:	f107 0320 	add.w	r3, r7, #32
 80017b4:	4618      	mov	r0, r3
 80017b6:	f001 fb71 	bl	8002e9c <HAL_RCC_OscConfig>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017c0:	f000 f9ae 	bl	8001b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017c4:	230f      	movs	r3, #15
 80017c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017c8:	2302      	movs	r3, #2
 80017ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80017da:	f107 030c 	add.w	r3, r7, #12
 80017de:	2103      	movs	r1, #3
 80017e0:	4618      	mov	r0, r3
 80017e2:	f001 fdd3 	bl	800338c <HAL_RCC_ClockConfig>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80017ec:	f000 f998 	bl	8001b20 <Error_Handler>
  }
}
 80017f0:	bf00      	nop
 80017f2:	3750      	adds	r7, #80	; 0x50
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40007000 	.word	0x40007000

08001800 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b096      	sub	sp, #88	; 0x58
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001806:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001814:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800181e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]
 8001828:	609a      	str	r2, [r3, #8]
 800182a:	60da      	str	r2, [r3, #12]
 800182c:	611a      	str	r2, [r3, #16]
 800182e:	615a      	str	r2, [r3, #20]
 8001830:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	2220      	movs	r2, #32
 8001836:	2100      	movs	r1, #0
 8001838:	4618      	mov	r0, r3
 800183a:	f004 fd60 	bl	80062fe <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800183e:	4b3e      	ldr	r3, [pc, #248]	; (8001938 <MX_TIM1_Init+0x138>)
 8001840:	4a3e      	ldr	r2, [pc, #248]	; (800193c <MX_TIM1_Init+0x13c>)
 8001842:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 8001844:	4b3c      	ldr	r3, [pc, #240]	; (8001938 <MX_TIM1_Init+0x138>)
 8001846:	2203      	movs	r2, #3
 8001848:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184a:	4b3b      	ldr	r3, [pc, #236]	; (8001938 <MX_TIM1_Init+0x138>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001850:	4b39      	ldr	r3, [pc, #228]	; (8001938 <MX_TIM1_Init+0x138>)
 8001852:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001856:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001858:	4b37      	ldr	r3, [pc, #220]	; (8001938 <MX_TIM1_Init+0x138>)
 800185a:	2200      	movs	r2, #0
 800185c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800185e:	4b36      	ldr	r3, [pc, #216]	; (8001938 <MX_TIM1_Init+0x138>)
 8001860:	2200      	movs	r2, #0
 8001862:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001864:	4b34      	ldr	r3, [pc, #208]	; (8001938 <MX_TIM1_Init+0x138>)
 8001866:	2200      	movs	r2, #0
 8001868:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800186a:	4833      	ldr	r0, [pc, #204]	; (8001938 <MX_TIM1_Init+0x138>)
 800186c:	f001 ffae 	bl	80037cc <HAL_TIM_Base_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001876:	f000 f953 	bl	8001b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800187a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800187e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001880:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001884:	4619      	mov	r1, r3
 8001886:	482c      	ldr	r0, [pc, #176]	; (8001938 <MX_TIM1_Init+0x138>)
 8001888:	f002 fa1e 	bl	8003cc8 <HAL_TIM_ConfigClockSource>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001892:	f000 f945 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001896:	4828      	ldr	r0, [pc, #160]	; (8001938 <MX_TIM1_Init+0x138>)
 8001898:	f002 f84a 	bl	8003930 <HAL_TIM_PWM_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80018a2:	f000 f93d 	bl	8001b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a6:	2300      	movs	r3, #0
 80018a8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018b2:	4619      	mov	r1, r3
 80018b4:	4820      	ldr	r0, [pc, #128]	; (8001938 <MX_TIM1_Init+0x138>)
 80018b6:	f002 fd9b 	bl	80043f0 <HAL_TIMEx_MasterConfigSynchronization>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80018c0:	f000 f92e 	bl	8001b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018c4:	2360      	movs	r3, #96	; 0x60
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018cc:	2300      	movs	r3, #0
 80018ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018d0:	2300      	movs	r3, #0
 80018d2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80018d4:	2304      	movs	r3, #4
 80018d6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018d8:	2300      	movs	r3, #0
 80018da:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018dc:	2300      	movs	r3, #0
 80018de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e4:	2200      	movs	r2, #0
 80018e6:	4619      	mov	r1, r3
 80018e8:	4813      	ldr	r0, [pc, #76]	; (8001938 <MX_TIM1_Init+0x138>)
 80018ea:	f002 f92b 	bl	8003b44 <HAL_TIM_PWM_ConfigChannel>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80018f4:	f000 f914 	bl	8001b20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018f8:	2300      	movs	r3, #0
 80018fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001900:	2300      	movs	r3, #0
 8001902:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800190c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001910:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001912:	2300      	movs	r3, #0
 8001914:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	4619      	mov	r1, r3
 800191a:	4807      	ldr	r0, [pc, #28]	; (8001938 <MX_TIM1_Init+0x138>)
 800191c:	f002 fdd6 	bl	80044cc <HAL_TIMEx_ConfigBreakDeadTime>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001926:	f000 f8fb 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800192a:	4803      	ldr	r0, [pc, #12]	; (8001938 <MX_TIM1_Init+0x138>)
 800192c:	f000 f948 	bl	8001bc0 <HAL_TIM_MspPostInit>

}
 8001930:	bf00      	nop
 8001932:	3758      	adds	r7, #88	; 0x58
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	200002ac 	.word	0x200002ac
 800193c:	40010000 	.word	0x40010000

08001940 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001944:	4b11      	ldr	r3, [pc, #68]	; (800198c <MX_USART1_UART_Init+0x4c>)
 8001946:	4a12      	ldr	r2, [pc, #72]	; (8001990 <MX_USART1_UART_Init+0x50>)
 8001948:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 800194a:	4b10      	ldr	r3, [pc, #64]	; (800198c <MX_USART1_UART_Init+0x4c>)
 800194c:	4a11      	ldr	r2, [pc, #68]	; (8001994 <MX_USART1_UART_Init+0x54>)
 800194e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001950:	4b0e      	ldr	r3, [pc, #56]	; (800198c <MX_USART1_UART_Init+0x4c>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8001956:	4b0d      	ldr	r3, [pc, #52]	; (800198c <MX_USART1_UART_Init+0x4c>)
 8001958:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800195c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 800195e:	4b0b      	ldr	r3, [pc, #44]	; (800198c <MX_USART1_UART_Init+0x4c>)
 8001960:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001964:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <MX_USART1_UART_Init+0x4c>)
 8001968:	2204      	movs	r2, #4
 800196a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800196c:	4b07      	ldr	r3, [pc, #28]	; (800198c <MX_USART1_UART_Init+0x4c>)
 800196e:	2200      	movs	r2, #0
 8001970:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <MX_USART1_UART_Init+0x4c>)
 8001974:	2200      	movs	r2, #0
 8001976:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001978:	4804      	ldr	r0, [pc, #16]	; (800198c <MX_USART1_UART_Init+0x4c>)
 800197a:	f002 fdf9 	bl	8004570 <HAL_UART_Init>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8001984:	f000 f8cc 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}
 800198c:	200002f4 	.word	0x200002f4
 8001990:	40011000 	.word	0x40011000
 8001994:	000186a0 	.word	0x000186a0

08001998 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800199c:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <MX_USART2_UART_Init+0x4c>)
 800199e:	4a12      	ldr	r2, [pc, #72]	; (80019e8 <MX_USART2_UART_Init+0x50>)
 80019a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <MX_USART2_UART_Init+0x4c>)
 80019a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019aa:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <MX_USART2_UART_Init+0x4c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <MX_USART2_UART_Init+0x4c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019b6:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <MX_USART2_UART_Init+0x4c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019bc:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <MX_USART2_UART_Init+0x4c>)
 80019be:	220c      	movs	r2, #12
 80019c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019c2:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <MX_USART2_UART_Init+0x4c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <MX_USART2_UART_Init+0x4c>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019ce:	4805      	ldr	r0, [pc, #20]	; (80019e4 <MX_USART2_UART_Init+0x4c>)
 80019d0:	f002 fdce 	bl	8004570 <HAL_UART_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019da:	f000 f8a1 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000338 	.word	0x20000338
 80019e8:	40004400 	.word	0x40004400

080019ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	607b      	str	r3, [r7, #4]
 80019f6:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <MX_DMA_Init+0x3c>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a0b      	ldr	r2, [pc, #44]	; (8001a28 <MX_DMA_Init+0x3c>)
 80019fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <MX_DMA_Init+0x3c>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2100      	movs	r1, #0
 8001a12:	203a      	movs	r0, #58	; 0x3a
 8001a14:	f000 fc53 	bl	80022be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001a18:	203a      	movs	r0, #58	; 0x3a
 8001a1a:	f000 fc6c 	bl	80022f6 <HAL_NVIC_EnableIRQ>

}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800

08001a2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	60da      	str	r2, [r3, #12]
 8001a40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	4b33      	ldr	r3, [pc, #204]	; (8001b14 <MX_GPIO_Init+0xe8>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a32      	ldr	r2, [pc, #200]	; (8001b14 <MX_GPIO_Init+0xe8>)
 8001a4c:	f043 0304 	orr.w	r3, r3, #4
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b30      	ldr	r3, [pc, #192]	; (8001b14 <MX_GPIO_Init+0xe8>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0304 	and.w	r3, r3, #4
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	4b2c      	ldr	r3, [pc, #176]	; (8001b14 <MX_GPIO_Init+0xe8>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a2b      	ldr	r2, [pc, #172]	; (8001b14 <MX_GPIO_Init+0xe8>)
 8001a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b29      	ldr	r3, [pc, #164]	; (8001b14 <MX_GPIO_Init+0xe8>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	4b25      	ldr	r3, [pc, #148]	; (8001b14 <MX_GPIO_Init+0xe8>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a24      	ldr	r2, [pc, #144]	; (8001b14 <MX_GPIO_Init+0xe8>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b22      	ldr	r3, [pc, #136]	; (8001b14 <MX_GPIO_Init+0xe8>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	607b      	str	r3, [r7, #4]
 8001a9a:	4b1e      	ldr	r3, [pc, #120]	; (8001b14 <MX_GPIO_Init+0xe8>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a1d      	ldr	r2, [pc, #116]	; (8001b14 <MX_GPIO_Init+0xe8>)
 8001aa0:	f043 0302 	orr.w	r3, r3, #2
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <MX_GPIO_Init+0xe8>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	607b      	str	r3, [r7, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2120      	movs	r1, #32
 8001ab6:	4818      	ldr	r0, [pc, #96]	; (8001b18 <MX_GPIO_Init+0xec>)
 8001ab8:	f001 f9d6 	bl	8002e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001abc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001aca:	f107 0314 	add.w	r3, r7, #20
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4812      	ldr	r0, [pc, #72]	; (8001b1c <MX_GPIO_Init+0xf0>)
 8001ad2:	f001 f82d 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ad6:	2320      	movs	r3, #32
 8001ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ada:	2301      	movs	r3, #1
 8001adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001ae6:	f107 0314 	add.w	r3, r7, #20
 8001aea:	4619      	mov	r1, r3
 8001aec:	480a      	ldr	r0, [pc, #40]	; (8001b18 <MX_GPIO_Init+0xec>)
 8001aee:	f001 f81f 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : encoder_A_Pin encoder_B_Pin */
  GPIO_InitStruct.Pin = encoder_A_Pin|encoder_B_Pin;
 8001af2:	23c0      	movs	r3, #192	; 0xc0
 8001af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afe:	f107 0314 	add.w	r3, r7, #20
 8001b02:	4619      	mov	r1, r3
 8001b04:	4804      	ldr	r0, [pc, #16]	; (8001b18 <MX_GPIO_Init+0xec>)
 8001b06:	f001 f813 	bl	8002b30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b0a:	bf00      	nop
 8001b0c:	3728      	adds	r7, #40	; 0x28
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40020000 	.word	0x40020000
 8001b1c:	40020800 	.word	0x40020800

08001b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b24:	b672      	cpsid	i
}
 8001b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <Error_Handler+0x8>
	...

08001b2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	607b      	str	r3, [r7, #4]
 8001b36:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <HAL_MspInit+0x4c>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	4a0f      	ldr	r2, [pc, #60]	; (8001b78 <HAL_MspInit+0x4c>)
 8001b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b40:	6453      	str	r3, [r2, #68]	; 0x44
 8001b42:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <HAL_MspInit+0x4c>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b4a:	607b      	str	r3, [r7, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	603b      	str	r3, [r7, #0]
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <HAL_MspInit+0x4c>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	4a08      	ldr	r2, [pc, #32]	; (8001b78 <HAL_MspInit+0x4c>)
 8001b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_MspInit+0x4c>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b66:	603b      	str	r3, [r7, #0]
 8001b68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b6a:	2007      	movs	r0, #7
 8001b6c:	f000 fb9c 	bl	80022a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b70:	bf00      	nop
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40023800 	.word	0x40023800

08001b7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a0b      	ldr	r2, [pc, #44]	; (8001bb8 <HAL_TIM_Base_MspInit+0x3c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d10d      	bne.n	8001baa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <HAL_TIM_Base_MspInit+0x40>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	4a09      	ldr	r2, [pc, #36]	; (8001bbc <HAL_TIM_Base_MspInit+0x40>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b9e:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <HAL_TIM_Base_MspInit+0x40>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001baa:	bf00      	nop
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	40010000 	.word	0x40010000
 8001bbc:	40023800 	.word	0x40023800

08001bc0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b088      	sub	sp, #32
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 030c 	add.w	r3, r7, #12
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a12      	ldr	r2, [pc, #72]	; (8001c28 <HAL_TIM_MspPostInit+0x68>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d11e      	bne.n	8001c20 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <HAL_TIM_MspPostInit+0x6c>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a10      	ldr	r2, [pc, #64]	; (8001c2c <HAL_TIM_MspPostInit+0x6c>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <HAL_TIM_MspPostInit+0x6c>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c02:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c04:	2302      	movs	r3, #2
 8001c06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c10:	2301      	movs	r3, #1
 8001c12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c14:	f107 030c 	add.w	r3, r7, #12
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4805      	ldr	r0, [pc, #20]	; (8001c30 <HAL_TIM_MspPostInit+0x70>)
 8001c1c:	f000 ff88 	bl	8002b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001c20:	bf00      	nop
 8001c22:	3720      	adds	r7, #32
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40010000 	.word	0x40010000
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40020000 	.word	0x40020000

08001c34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08c      	sub	sp, #48	; 0x30
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 031c 	add.w	r3, r7, #28
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a4e      	ldr	r2, [pc, #312]	; (8001d8c <HAL_UART_MspInit+0x158>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d15c      	bne.n	8001d10 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	61bb      	str	r3, [r7, #24]
 8001c5a:	4b4d      	ldr	r3, [pc, #308]	; (8001d90 <HAL_UART_MspInit+0x15c>)
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5e:	4a4c      	ldr	r2, [pc, #304]	; (8001d90 <HAL_UART_MspInit+0x15c>)
 8001c60:	f043 0310 	orr.w	r3, r3, #16
 8001c64:	6453      	str	r3, [r2, #68]	; 0x44
 8001c66:	4b4a      	ldr	r3, [pc, #296]	; (8001d90 <HAL_UART_MspInit+0x15c>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6a:	f003 0310 	and.w	r3, r3, #16
 8001c6e:	61bb      	str	r3, [r7, #24]
 8001c70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	4b46      	ldr	r3, [pc, #280]	; (8001d90 <HAL_UART_MspInit+0x15c>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	4a45      	ldr	r2, [pc, #276]	; (8001d90 <HAL_UART_MspInit+0x15c>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6313      	str	r3, [r2, #48]	; 0x30
 8001c82:	4b43      	ldr	r3, [pc, #268]	; (8001d90 <HAL_UART_MspInit+0x15c>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c8e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c94:	2302      	movs	r3, #2
 8001c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ca0:	2307      	movs	r3, #7
 8001ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca4:	f107 031c 	add.w	r3, r7, #28
 8001ca8:	4619      	mov	r1, r3
 8001caa:	483a      	ldr	r0, [pc, #232]	; (8001d94 <HAL_UART_MspInit+0x160>)
 8001cac:	f000 ff40 	bl	8002b30 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001cb0:	4b39      	ldr	r3, [pc, #228]	; (8001d98 <HAL_UART_MspInit+0x164>)
 8001cb2:	4a3a      	ldr	r2, [pc, #232]	; (8001d9c <HAL_UART_MspInit+0x168>)
 8001cb4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001cb6:	4b38      	ldr	r3, [pc, #224]	; (8001d98 <HAL_UART_MspInit+0x164>)
 8001cb8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cbc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cbe:	4b36      	ldr	r3, [pc, #216]	; (8001d98 <HAL_UART_MspInit+0x164>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cc4:	4b34      	ldr	r3, [pc, #208]	; (8001d98 <HAL_UART_MspInit+0x164>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cca:	4b33      	ldr	r3, [pc, #204]	; (8001d98 <HAL_UART_MspInit+0x164>)
 8001ccc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cd0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cd2:	4b31      	ldr	r3, [pc, #196]	; (8001d98 <HAL_UART_MspInit+0x164>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cd8:	4b2f      	ldr	r3, [pc, #188]	; (8001d98 <HAL_UART_MspInit+0x164>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001cde:	4b2e      	ldr	r3, [pc, #184]	; (8001d98 <HAL_UART_MspInit+0x164>)
 8001ce0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ce4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ce6:	4b2c      	ldr	r3, [pc, #176]	; (8001d98 <HAL_UART_MspInit+0x164>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cec:	4b2a      	ldr	r3, [pc, #168]	; (8001d98 <HAL_UART_MspInit+0x164>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001cf2:	4829      	ldr	r0, [pc, #164]	; (8001d98 <HAL_UART_MspInit+0x164>)
 8001cf4:	f000 fb1a 	bl	800232c <HAL_DMA_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001cfe:	f7ff ff0f 	bl	8001b20 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a24      	ldr	r2, [pc, #144]	; (8001d98 <HAL_UART_MspInit+0x164>)
 8001d06:	639a      	str	r2, [r3, #56]	; 0x38
 8001d08:	4a23      	ldr	r2, [pc, #140]	; (8001d98 <HAL_UART_MspInit+0x164>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d0e:	e038      	b.n	8001d82 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a22      	ldr	r2, [pc, #136]	; (8001da0 <HAL_UART_MspInit+0x16c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d133      	bne.n	8001d82 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	4b1c      	ldr	r3, [pc, #112]	; (8001d90 <HAL_UART_MspInit+0x15c>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	4a1b      	ldr	r2, [pc, #108]	; (8001d90 <HAL_UART_MspInit+0x15c>)
 8001d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d28:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2a:	4b19      	ldr	r3, [pc, #100]	; (8001d90 <HAL_UART_MspInit+0x15c>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <HAL_UART_MspInit+0x15c>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a14      	ldr	r2, [pc, #80]	; (8001d90 <HAL_UART_MspInit+0x15c>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <HAL_UART_MspInit+0x15c>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d52:	230c      	movs	r3, #12
 8001d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d56:	2302      	movs	r3, #2
 8001d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d62:	2307      	movs	r3, #7
 8001d64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d66:	f107 031c 	add.w	r3, r7, #28
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4809      	ldr	r0, [pc, #36]	; (8001d94 <HAL_UART_MspInit+0x160>)
 8001d6e:	f000 fedf 	bl	8002b30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2100      	movs	r1, #0
 8001d76:	2026      	movs	r0, #38	; 0x26
 8001d78:	f000 faa1 	bl	80022be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d7c:	2026      	movs	r0, #38	; 0x26
 8001d7e:	f000 faba 	bl	80022f6 <HAL_NVIC_EnableIRQ>
}
 8001d82:	bf00      	nop
 8001d84:	3730      	adds	r7, #48	; 0x30
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40011000 	.word	0x40011000
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40020000 	.word	0x40020000
 8001d98:	2000037c 	.word	0x2000037c
 8001d9c:	40026440 	.word	0x40026440
 8001da0:	40004400 	.word	0x40004400

08001da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001da8:	e7fe      	b.n	8001da8 <NMI_Handler+0x4>

08001daa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dae:	e7fe      	b.n	8001dae <HardFault_Handler+0x4>

08001db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db4:	e7fe      	b.n	8001db4 <MemManage_Handler+0x4>

08001db6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dba:	e7fe      	b.n	8001dba <BusFault_Handler+0x4>

08001dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dc0:	e7fe      	b.n	8001dc0 <UsageFault_Handler+0x4>

08001dc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001df0:	f000 f96a 	bl	80020c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001dfc:	4802      	ldr	r0, [pc, #8]	; (8001e08 <USART2_IRQHandler+0x10>)
 8001dfe:	f002 fc79 	bl	80046f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000338 	.word	0x20000338

08001e0c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001e10:	4802      	ldr	r0, [pc, #8]	; (8001e1c <DMA2_Stream2_IRQHandler+0x10>)
 8001e12:	f000 fc23 	bl	800265c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	2000037c 	.word	0x2000037c

08001e20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return 1;
 8001e24:	2301      	movs	r3, #1
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <_kill>:

int _kill(int pid, int sig)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e3a:	f004 fab3 	bl	80063a4 <__errno>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2216      	movs	r2, #22
 8001e42:	601a      	str	r2, [r3, #0]
  return -1;
 8001e44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <_exit>:

void _exit (int status)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e58:	f04f 31ff 	mov.w	r1, #4294967295
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff ffe7 	bl	8001e30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e62:	e7fe      	b.n	8001e62 <_exit+0x12>

08001e64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]
 8001e74:	e00a      	b.n	8001e8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e76:	f3af 8000 	nop.w
 8001e7a:	4601      	mov	r1, r0
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	1c5a      	adds	r2, r3, #1
 8001e80:	60ba      	str	r2, [r7, #8]
 8001e82:	b2ca      	uxtb	r2, r1
 8001e84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	697a      	ldr	r2, [r7, #20]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	dbf0      	blt.n	8001e76 <_read+0x12>
  }

  return len;
 8001e94:	687b      	ldr	r3, [r7, #4]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b086      	sub	sp, #24
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	60f8      	str	r0, [r7, #12]
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	e009      	b.n	8001ec4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	1c5a      	adds	r2, r3, #1
 8001eb4:	60ba      	str	r2, [r7, #8]
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	dbf1      	blt.n	8001eb0 <_write+0x12>
  }
  return len;
 8001ecc:	687b      	ldr	r3, [r7, #4]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3718      	adds	r7, #24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <_close>:

int _close(int file)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ede:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001efe:	605a      	str	r2, [r3, #4]
  return 0;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <_isatty>:

int _isatty(int file)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f16:	2301      	movs	r3, #1
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
	...

08001f40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f48:	4a14      	ldr	r2, [pc, #80]	; (8001f9c <_sbrk+0x5c>)
 8001f4a:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <_sbrk+0x60>)
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f54:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <_sbrk+0x64>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d102      	bne.n	8001f62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f5c:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <_sbrk+0x64>)
 8001f5e:	4a12      	ldr	r2, [pc, #72]	; (8001fa8 <_sbrk+0x68>)
 8001f60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f62:	4b10      	ldr	r3, [pc, #64]	; (8001fa4 <_sbrk+0x64>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d207      	bcs.n	8001f80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f70:	f004 fa18 	bl	80063a4 <__errno>
 8001f74:	4603      	mov	r3, r0
 8001f76:	220c      	movs	r2, #12
 8001f78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7e:	e009      	b.n	8001f94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f80:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <_sbrk+0x64>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f86:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <_sbrk+0x64>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	4a05      	ldr	r2, [pc, #20]	; (8001fa4 <_sbrk+0x64>)
 8001f90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f92:	68fb      	ldr	r3, [r7, #12]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20020000 	.word	0x20020000
 8001fa0:	00000400 	.word	0x00000400
 8001fa4:	200003dc 	.word	0x200003dc
 8001fa8:	20000530 	.word	0x20000530

08001fac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fb0:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <SystemInit+0x20>)
 8001fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb6:	4a05      	ldr	r2, [pc, #20]	; (8001fcc <SystemInit+0x20>)
 8001fb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002008 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fd4:	480d      	ldr	r0, [pc, #52]	; (800200c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fd6:	490e      	ldr	r1, [pc, #56]	; (8002010 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fd8:	4a0e      	ldr	r2, [pc, #56]	; (8002014 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fdc:	e002      	b.n	8001fe4 <LoopCopyDataInit>

08001fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fe2:	3304      	adds	r3, #4

08001fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe8:	d3f9      	bcc.n	8001fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fea:	4a0b      	ldr	r2, [pc, #44]	; (8002018 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fec:	4c0b      	ldr	r4, [pc, #44]	; (800201c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ff0:	e001      	b.n	8001ff6 <LoopFillZerobss>

08001ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff4:	3204      	adds	r2, #4

08001ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff8:	d3fb      	bcc.n	8001ff2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ffa:	f7ff ffd7 	bl	8001fac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ffe:	f004 f9d7 	bl	80063b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002002:	f7ff f9f5 	bl	80013f0 <main>
  bx  lr    
 8002006:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002008:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800200c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002010:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002014:	080088d4 	.word	0x080088d4
  ldr r2, =_sbss
 8002018:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800201c:	20000530 	.word	0x20000530

08002020 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002020:	e7fe      	b.n	8002020 <ADC_IRQHandler>
	...

08002024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002028:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <HAL_Init+0x40>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a0d      	ldr	r2, [pc, #52]	; (8002064 <HAL_Init+0x40>)
 800202e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002032:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <HAL_Init+0x40>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <HAL_Init+0x40>)
 800203a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800203e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002040:	4b08      	ldr	r3, [pc, #32]	; (8002064 <HAL_Init+0x40>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a07      	ldr	r2, [pc, #28]	; (8002064 <HAL_Init+0x40>)
 8002046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800204a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800204c:	2003      	movs	r0, #3
 800204e:	f000 f92b 	bl	80022a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002052:	2000      	movs	r0, #0
 8002054:	f000 f808 	bl	8002068 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002058:	f7ff fd68 	bl	8001b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40023c00 	.word	0x40023c00

08002068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002070:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_InitTick+0x54>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <HAL_InitTick+0x58>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	4619      	mov	r1, r3
 800207a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800207e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002082:	fbb2 f3f3 	udiv	r3, r2, r3
 8002086:	4618      	mov	r0, r3
 8002088:	f000 f943 	bl	8002312 <HAL_SYSTICK_Config>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e00e      	b.n	80020b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b0f      	cmp	r3, #15
 800209a:	d80a      	bhi.n	80020b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800209c:	2200      	movs	r2, #0
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	f04f 30ff 	mov.w	r0, #4294967295
 80020a4:	f000 f90b 	bl	80022be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020a8:	4a06      	ldr	r2, [pc, #24]	; (80020c4 <HAL_InitTick+0x5c>)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
 80020b0:	e000      	b.n	80020b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000004 	.word	0x20000004
 80020c0:	2000000c 	.word	0x2000000c
 80020c4:	20000008 	.word	0x20000008

080020c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_IncTick+0x20>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	461a      	mov	r2, r3
 80020d2:	4b06      	ldr	r3, [pc, #24]	; (80020ec <HAL_IncTick+0x24>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4413      	add	r3, r2
 80020d8:	4a04      	ldr	r2, [pc, #16]	; (80020ec <HAL_IncTick+0x24>)
 80020da:	6013      	str	r3, [r2, #0]
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	2000000c 	.word	0x2000000c
 80020ec:	200003e0 	.word	0x200003e0

080020f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return uwTick;
 80020f4:	4b03      	ldr	r3, [pc, #12]	; (8002104 <HAL_GetTick+0x14>)
 80020f6:	681b      	ldr	r3, [r3, #0]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	200003e0 	.word	0x200003e0

08002108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002118:	4b0c      	ldr	r3, [pc, #48]	; (800214c <__NVIC_SetPriorityGrouping+0x44>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800211e:	68ba      	ldr	r2, [r7, #8]
 8002120:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002124:	4013      	ands	r3, r2
 8002126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002130:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800213a:	4a04      	ldr	r2, [pc, #16]	; (800214c <__NVIC_SetPriorityGrouping+0x44>)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	60d3      	str	r3, [r2, #12]
}
 8002140:	bf00      	nop
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002154:	4b04      	ldr	r3, [pc, #16]	; (8002168 <__NVIC_GetPriorityGrouping+0x18>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	0a1b      	lsrs	r3, r3, #8
 800215a:	f003 0307 	and.w	r3, r3, #7
}
 800215e:	4618      	mov	r0, r3
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	2b00      	cmp	r3, #0
 800217c:	db0b      	blt.n	8002196 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	f003 021f 	and.w	r2, r3, #31
 8002184:	4907      	ldr	r1, [pc, #28]	; (80021a4 <__NVIC_EnableIRQ+0x38>)
 8002186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218a:	095b      	lsrs	r3, r3, #5
 800218c:	2001      	movs	r0, #1
 800218e:	fa00 f202 	lsl.w	r2, r0, r2
 8002192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	e000e100 	.word	0xe000e100

080021a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	6039      	str	r1, [r7, #0]
 80021b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	db0a      	blt.n	80021d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	490c      	ldr	r1, [pc, #48]	; (80021f4 <__NVIC_SetPriority+0x4c>)
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	0112      	lsls	r2, r2, #4
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	440b      	add	r3, r1
 80021cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021d0:	e00a      	b.n	80021e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	4908      	ldr	r1, [pc, #32]	; (80021f8 <__NVIC_SetPriority+0x50>)
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	3b04      	subs	r3, #4
 80021e0:	0112      	lsls	r2, r2, #4
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	440b      	add	r3, r1
 80021e6:	761a      	strb	r2, [r3, #24]
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000e100 	.word	0xe000e100
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b089      	sub	sp, #36	; 0x24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f1c3 0307 	rsb	r3, r3, #7
 8002216:	2b04      	cmp	r3, #4
 8002218:	bf28      	it	cs
 800221a:	2304      	movcs	r3, #4
 800221c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3304      	adds	r3, #4
 8002222:	2b06      	cmp	r3, #6
 8002224:	d902      	bls.n	800222c <NVIC_EncodePriority+0x30>
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	3b03      	subs	r3, #3
 800222a:	e000      	b.n	800222e <NVIC_EncodePriority+0x32>
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002230:	f04f 32ff 	mov.w	r2, #4294967295
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43da      	mvns	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	401a      	ands	r2, r3
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002244:	f04f 31ff 	mov.w	r1, #4294967295
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	fa01 f303 	lsl.w	r3, r1, r3
 800224e:	43d9      	mvns	r1, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002254:	4313      	orrs	r3, r2
         );
}
 8002256:	4618      	mov	r0, r3
 8002258:	3724      	adds	r7, #36	; 0x24
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
	...

08002264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3b01      	subs	r3, #1
 8002270:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002274:	d301      	bcc.n	800227a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002276:	2301      	movs	r3, #1
 8002278:	e00f      	b.n	800229a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800227a:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <SysTick_Config+0x40>)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3b01      	subs	r3, #1
 8002280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002282:	210f      	movs	r1, #15
 8002284:	f04f 30ff 	mov.w	r0, #4294967295
 8002288:	f7ff ff8e 	bl	80021a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800228c:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <SysTick_Config+0x40>)
 800228e:	2200      	movs	r2, #0
 8002290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002292:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <SysTick_Config+0x40>)
 8002294:	2207      	movs	r2, #7
 8002296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	e000e010 	.word	0xe000e010

080022a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff ff29 	bl	8002108 <__NVIC_SetPriorityGrouping>
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022be:	b580      	push	{r7, lr}
 80022c0:	b086      	sub	sp, #24
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	4603      	mov	r3, r0
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	607a      	str	r2, [r7, #4]
 80022ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022d0:	f7ff ff3e 	bl	8002150 <__NVIC_GetPriorityGrouping>
 80022d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	68b9      	ldr	r1, [r7, #8]
 80022da:	6978      	ldr	r0, [r7, #20]
 80022dc:	f7ff ff8e 	bl	80021fc <NVIC_EncodePriority>
 80022e0:	4602      	mov	r2, r0
 80022e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff ff5d 	bl	80021a8 <__NVIC_SetPriority>
}
 80022ee:	bf00      	nop
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	4603      	mov	r3, r0
 80022fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ff31 	bl	800216c <__NVIC_EnableIRQ>
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7ff ffa2 	bl	8002264 <SysTick_Config>
 8002320:	4603      	mov	r3, r0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
	...

0800232c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002338:	f7ff feda 	bl	80020f0 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e099      	b.n	800247c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2202      	movs	r2, #2
 800234c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0201 	bic.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002368:	e00f      	b.n	800238a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800236a:	f7ff fec1 	bl	80020f0 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b05      	cmp	r3, #5
 8002376:	d908      	bls.n	800238a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2220      	movs	r2, #32
 800237c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2203      	movs	r2, #3
 8002382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e078      	b.n	800247c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1e8      	bne.n	800236a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	4b38      	ldr	r3, [pc, #224]	; (8002484 <HAL_DMA_Init+0x158>)
 80023a4:	4013      	ands	r3, r2
 80023a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	4313      	orrs	r3, r2
 80023da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d107      	bne.n	80023f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ec:	4313      	orrs	r3, r2
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	f023 0307 	bic.w	r3, r3, #7
 800240a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	4313      	orrs	r3, r2
 8002414:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241a:	2b04      	cmp	r3, #4
 800241c:	d117      	bne.n	800244e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	4313      	orrs	r3, r2
 8002426:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00e      	beq.n	800244e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 fb01 	bl	8002a38 <DMA_CheckFifoParam>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d008      	beq.n	800244e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2240      	movs	r2, #64	; 0x40
 8002440:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800244a:	2301      	movs	r3, #1
 800244c:	e016      	b.n	800247c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 fab8 	bl	80029cc <DMA_CalcBaseAndBitshift>
 800245c:	4603      	mov	r3, r0
 800245e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002464:	223f      	movs	r2, #63	; 0x3f
 8002466:	409a      	lsls	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	f010803f 	.word	0xf010803f

08002488 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
 8002494:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002496:	2300      	movs	r3, #0
 8002498:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d101      	bne.n	80024ae <HAL_DMA_Start_IT+0x26>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e040      	b.n	8002530 <HAL_DMA_Start_IT+0xa8>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d12f      	bne.n	8002522 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2202      	movs	r2, #2
 80024c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	68b9      	ldr	r1, [r7, #8]
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 fa4a 	bl	8002970 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e0:	223f      	movs	r2, #63	; 0x3f
 80024e2:	409a      	lsls	r2, r3
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0216 	orr.w	r2, r2, #22
 80024f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d007      	beq.n	8002510 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 0208 	orr.w	r2, r2, #8
 800250e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0201 	orr.w	r2, r2, #1
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	e005      	b.n	800252e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800252a:	2302      	movs	r3, #2
 800252c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800252e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002544:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002546:	f7ff fdd3 	bl	80020f0 <HAL_GetTick>
 800254a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d008      	beq.n	800256a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2280      	movs	r2, #128	; 0x80
 800255c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e052      	b.n	8002610 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0216 	bic.w	r2, r2, #22
 8002578:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	695a      	ldr	r2, [r3, #20]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002588:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	2b00      	cmp	r3, #0
 8002590:	d103      	bne.n	800259a <HAL_DMA_Abort+0x62>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002596:	2b00      	cmp	r3, #0
 8002598:	d007      	beq.n	80025aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 0208 	bic.w	r2, r2, #8
 80025a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 0201 	bic.w	r2, r2, #1
 80025b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ba:	e013      	b.n	80025e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025bc:	f7ff fd98 	bl	80020f0 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b05      	cmp	r3, #5
 80025c8:	d90c      	bls.n	80025e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2220      	movs	r2, #32
 80025ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2203      	movs	r2, #3
 80025d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e015      	b.n	8002610 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1e4      	bne.n	80025bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f6:	223f      	movs	r2, #63	; 0x3f
 80025f8:	409a      	lsls	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d004      	beq.n	8002636 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2280      	movs	r2, #128	; 0x80
 8002630:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e00c      	b.n	8002650 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2205      	movs	r2, #5
 800263a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0201 	bic.w	r2, r2, #1
 800264c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002664:	2300      	movs	r3, #0
 8002666:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002668:	4b8e      	ldr	r3, [pc, #568]	; (80028a4 <HAL_DMA_IRQHandler+0x248>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a8e      	ldr	r2, [pc, #568]	; (80028a8 <HAL_DMA_IRQHandler+0x24c>)
 800266e:	fba2 2303 	umull	r2, r3, r2, r3
 8002672:	0a9b      	lsrs	r3, r3, #10
 8002674:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002686:	2208      	movs	r2, #8
 8002688:	409a      	lsls	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	4013      	ands	r3, r2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d01a      	beq.n	80026c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	d013      	beq.n	80026c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 0204 	bic.w	r2, r2, #4
 80026ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b4:	2208      	movs	r2, #8
 80026b6:	409a      	lsls	r2, r3
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c0:	f043 0201 	orr.w	r2, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026cc:	2201      	movs	r2, #1
 80026ce:	409a      	lsls	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d012      	beq.n	80026fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00b      	beq.n	80026fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ea:	2201      	movs	r2, #1
 80026ec:	409a      	lsls	r2, r3
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f6:	f043 0202 	orr.w	r2, r3, #2
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002702:	2204      	movs	r2, #4
 8002704:	409a      	lsls	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	4013      	ands	r3, r2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d012      	beq.n	8002734 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00b      	beq.n	8002734 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002720:	2204      	movs	r2, #4
 8002722:	409a      	lsls	r2, r3
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272c:	f043 0204 	orr.w	r2, r3, #4
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002738:	2210      	movs	r2, #16
 800273a:	409a      	lsls	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4013      	ands	r3, r2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d043      	beq.n	80027cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b00      	cmp	r3, #0
 8002750:	d03c      	beq.n	80027cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002756:	2210      	movs	r2, #16
 8002758:	409a      	lsls	r2, r3
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d018      	beq.n	800279e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d108      	bne.n	800278c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	2b00      	cmp	r3, #0
 8002780:	d024      	beq.n	80027cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	4798      	blx	r3
 800278a:	e01f      	b.n	80027cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002790:	2b00      	cmp	r3, #0
 8002792:	d01b      	beq.n	80027cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	4798      	blx	r3
 800279c:	e016      	b.n	80027cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d107      	bne.n	80027bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0208 	bic.w	r2, r2, #8
 80027ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d0:	2220      	movs	r2, #32
 80027d2:	409a      	lsls	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4013      	ands	r3, r2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 808f 	beq.w	80028fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0310 	and.w	r3, r3, #16
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 8087 	beq.w	80028fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f2:	2220      	movs	r2, #32
 80027f4:	409a      	lsls	r2, r3
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b05      	cmp	r3, #5
 8002804:	d136      	bne.n	8002874 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0216 	bic.w	r2, r2, #22
 8002814:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	695a      	ldr	r2, [r3, #20]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002824:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	2b00      	cmp	r3, #0
 800282c:	d103      	bne.n	8002836 <HAL_DMA_IRQHandler+0x1da>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002832:	2b00      	cmp	r3, #0
 8002834:	d007      	beq.n	8002846 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0208 	bic.w	r2, r2, #8
 8002844:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284a:	223f      	movs	r2, #63	; 0x3f
 800284c:	409a      	lsls	r2, r3
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002866:	2b00      	cmp	r3, #0
 8002868:	d07e      	beq.n	8002968 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	4798      	blx	r3
        }
        return;
 8002872:	e079      	b.n	8002968 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d01d      	beq.n	80028be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10d      	bne.n	80028ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002894:	2b00      	cmp	r3, #0
 8002896:	d031      	beq.n	80028fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	4798      	blx	r3
 80028a0:	e02c      	b.n	80028fc <HAL_DMA_IRQHandler+0x2a0>
 80028a2:	bf00      	nop
 80028a4:	20000004 	.word	0x20000004
 80028a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d023      	beq.n	80028fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	4798      	blx	r3
 80028bc:	e01e      	b.n	80028fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10f      	bne.n	80028ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0210 	bic.w	r2, r2, #16
 80028da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002900:	2b00      	cmp	r3, #0
 8002902:	d032      	beq.n	800296a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	d022      	beq.n	8002956 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2205      	movs	r2, #5
 8002914:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0201 	bic.w	r2, r2, #1
 8002926:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	3301      	adds	r3, #1
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	429a      	cmp	r2, r3
 8002932:	d307      	bcc.n	8002944 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f2      	bne.n	8002928 <HAL_DMA_IRQHandler+0x2cc>
 8002942:	e000      	b.n	8002946 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002944:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800295a:	2b00      	cmp	r3, #0
 800295c:	d005      	beq.n	800296a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	4798      	blx	r3
 8002966:	e000      	b.n	800296a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002968:	bf00      	nop
    }
  }
}
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
 800297c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800298c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2b40      	cmp	r3, #64	; 0x40
 800299c:	d108      	bne.n	80029b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029ae:	e007      	b.n	80029c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	60da      	str	r2, [r3, #12]
}
 80029c0:	bf00      	nop
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	3b10      	subs	r3, #16
 80029dc:	4a14      	ldr	r2, [pc, #80]	; (8002a30 <DMA_CalcBaseAndBitshift+0x64>)
 80029de:	fba2 2303 	umull	r2, r3, r2, r3
 80029e2:	091b      	lsrs	r3, r3, #4
 80029e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029e6:	4a13      	ldr	r2, [pc, #76]	; (8002a34 <DMA_CalcBaseAndBitshift+0x68>)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4413      	add	r3, r2
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	461a      	mov	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2b03      	cmp	r3, #3
 80029f8:	d909      	bls.n	8002a0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a02:	f023 0303 	bic.w	r3, r3, #3
 8002a06:	1d1a      	adds	r2, r3, #4
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	659a      	str	r2, [r3, #88]	; 0x58
 8002a0c:	e007      	b.n	8002a1e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a16:	f023 0303 	bic.w	r3, r3, #3
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	aaaaaaab 	.word	0xaaaaaaab
 8002a34:	0800854c 	.word	0x0800854c

08002a38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a40:	2300      	movs	r3, #0
 8002a42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d11f      	bne.n	8002a92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d856      	bhi.n	8002b06 <DMA_CheckFifoParam+0xce>
 8002a58:	a201      	add	r2, pc, #4	; (adr r2, 8002a60 <DMA_CheckFifoParam+0x28>)
 8002a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a5e:	bf00      	nop
 8002a60:	08002a71 	.word	0x08002a71
 8002a64:	08002a83 	.word	0x08002a83
 8002a68:	08002a71 	.word	0x08002a71
 8002a6c:	08002b07 	.word	0x08002b07
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d046      	beq.n	8002b0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a80:	e043      	b.n	8002b0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a8a:	d140      	bne.n	8002b0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a90:	e03d      	b.n	8002b0e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a9a:	d121      	bne.n	8002ae0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2b03      	cmp	r3, #3
 8002aa0:	d837      	bhi.n	8002b12 <DMA_CheckFifoParam+0xda>
 8002aa2:	a201      	add	r2, pc, #4	; (adr r2, 8002aa8 <DMA_CheckFifoParam+0x70>)
 8002aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa8:	08002ab9 	.word	0x08002ab9
 8002aac:	08002abf 	.word	0x08002abf
 8002ab0:	08002ab9 	.word	0x08002ab9
 8002ab4:	08002ad1 	.word	0x08002ad1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
      break;
 8002abc:	e030      	b.n	8002b20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d025      	beq.n	8002b16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ace:	e022      	b.n	8002b16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ad8:	d11f      	bne.n	8002b1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ade:	e01c      	b.n	8002b1a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d903      	bls.n	8002aee <DMA_CheckFifoParam+0xb6>
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2b03      	cmp	r3, #3
 8002aea:	d003      	beq.n	8002af4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002aec:	e018      	b.n	8002b20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	73fb      	strb	r3, [r7, #15]
      break;
 8002af2:	e015      	b.n	8002b20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00e      	beq.n	8002b1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]
      break;
 8002b04:	e00b      	b.n	8002b1e <DMA_CheckFifoParam+0xe6>
      break;
 8002b06:	bf00      	nop
 8002b08:	e00a      	b.n	8002b20 <DMA_CheckFifoParam+0xe8>
      break;
 8002b0a:	bf00      	nop
 8002b0c:	e008      	b.n	8002b20 <DMA_CheckFifoParam+0xe8>
      break;
 8002b0e:	bf00      	nop
 8002b10:	e006      	b.n	8002b20 <DMA_CheckFifoParam+0xe8>
      break;
 8002b12:	bf00      	nop
 8002b14:	e004      	b.n	8002b20 <DMA_CheckFifoParam+0xe8>
      break;
 8002b16:	bf00      	nop
 8002b18:	e002      	b.n	8002b20 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b1a:	bf00      	nop
 8002b1c:	e000      	b.n	8002b20 <DMA_CheckFifoParam+0xe8>
      break;
 8002b1e:	bf00      	nop
    }
  } 
  
  return status; 
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop

08002b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b089      	sub	sp, #36	; 0x24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b46:	2300      	movs	r3, #0
 8002b48:	61fb      	str	r3, [r7, #28]
 8002b4a:	e159      	b.n	8002e00 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	f040 8148 	bne.w	8002dfa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d005      	beq.n	8002b82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d130      	bne.n	8002be4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	2203      	movs	r2, #3
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	43db      	mvns	r3, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4013      	ands	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bb8:	2201      	movs	r2, #1
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	091b      	lsrs	r3, r3, #4
 8002bce:	f003 0201 	and.w	r2, r3, #1
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 0303 	and.w	r3, r3, #3
 8002bec:	2b03      	cmp	r3, #3
 8002bee:	d017      	beq.n	8002c20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	2203      	movs	r2, #3
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f003 0303 	and.w	r3, r3, #3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d123      	bne.n	8002c74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	08da      	lsrs	r2, r3, #3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3208      	adds	r2, #8
 8002c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	220f      	movs	r2, #15
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	691a      	ldr	r2, [r3, #16]
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	08da      	lsrs	r2, r3, #3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3208      	adds	r2, #8
 8002c6e:	69b9      	ldr	r1, [r7, #24]
 8002c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	2203      	movs	r2, #3
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f003 0203 	and.w	r2, r3, #3
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 80a2 	beq.w	8002dfa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	4b57      	ldr	r3, [pc, #348]	; (8002e18 <HAL_GPIO_Init+0x2e8>)
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbe:	4a56      	ldr	r2, [pc, #344]	; (8002e18 <HAL_GPIO_Init+0x2e8>)
 8002cc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cc6:	4b54      	ldr	r3, [pc, #336]	; (8002e18 <HAL_GPIO_Init+0x2e8>)
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cd2:	4a52      	ldr	r2, [pc, #328]	; (8002e1c <HAL_GPIO_Init+0x2ec>)
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	089b      	lsrs	r3, r3, #2
 8002cd8:	3302      	adds	r3, #2
 8002cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	220f      	movs	r2, #15
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a49      	ldr	r2, [pc, #292]	; (8002e20 <HAL_GPIO_Init+0x2f0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d019      	beq.n	8002d32 <HAL_GPIO_Init+0x202>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a48      	ldr	r2, [pc, #288]	; (8002e24 <HAL_GPIO_Init+0x2f4>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d013      	beq.n	8002d2e <HAL_GPIO_Init+0x1fe>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a47      	ldr	r2, [pc, #284]	; (8002e28 <HAL_GPIO_Init+0x2f8>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d00d      	beq.n	8002d2a <HAL_GPIO_Init+0x1fa>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a46      	ldr	r2, [pc, #280]	; (8002e2c <HAL_GPIO_Init+0x2fc>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d007      	beq.n	8002d26 <HAL_GPIO_Init+0x1f6>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a45      	ldr	r2, [pc, #276]	; (8002e30 <HAL_GPIO_Init+0x300>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d101      	bne.n	8002d22 <HAL_GPIO_Init+0x1f2>
 8002d1e:	2304      	movs	r3, #4
 8002d20:	e008      	b.n	8002d34 <HAL_GPIO_Init+0x204>
 8002d22:	2307      	movs	r3, #7
 8002d24:	e006      	b.n	8002d34 <HAL_GPIO_Init+0x204>
 8002d26:	2303      	movs	r3, #3
 8002d28:	e004      	b.n	8002d34 <HAL_GPIO_Init+0x204>
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	e002      	b.n	8002d34 <HAL_GPIO_Init+0x204>
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e000      	b.n	8002d34 <HAL_GPIO_Init+0x204>
 8002d32:	2300      	movs	r3, #0
 8002d34:	69fa      	ldr	r2, [r7, #28]
 8002d36:	f002 0203 	and.w	r2, r2, #3
 8002d3a:	0092      	lsls	r2, r2, #2
 8002d3c:	4093      	lsls	r3, r2
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d44:	4935      	ldr	r1, [pc, #212]	; (8002e1c <HAL_GPIO_Init+0x2ec>)
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	089b      	lsrs	r3, r3, #2
 8002d4a:	3302      	adds	r3, #2
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d52:	4b38      	ldr	r3, [pc, #224]	; (8002e34 <HAL_GPIO_Init+0x304>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d76:	4a2f      	ldr	r2, [pc, #188]	; (8002e34 <HAL_GPIO_Init+0x304>)
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d7c:	4b2d      	ldr	r3, [pc, #180]	; (8002e34 <HAL_GPIO_Init+0x304>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	43db      	mvns	r3, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002da0:	4a24      	ldr	r2, [pc, #144]	; (8002e34 <HAL_GPIO_Init+0x304>)
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002da6:	4b23      	ldr	r3, [pc, #140]	; (8002e34 <HAL_GPIO_Init+0x304>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	43db      	mvns	r3, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4013      	ands	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dca:	4a1a      	ldr	r2, [pc, #104]	; (8002e34 <HAL_GPIO_Init+0x304>)
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dd0:	4b18      	ldr	r3, [pc, #96]	; (8002e34 <HAL_GPIO_Init+0x304>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002df4:	4a0f      	ldr	r2, [pc, #60]	; (8002e34 <HAL_GPIO_Init+0x304>)
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	61fb      	str	r3, [r7, #28]
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	2b0f      	cmp	r3, #15
 8002e04:	f67f aea2 	bls.w	8002b4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e08:	bf00      	nop
 8002e0a:	bf00      	nop
 8002e0c:	3724      	adds	r7, #36	; 0x24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	40013800 	.word	0x40013800
 8002e20:	40020000 	.word	0x40020000
 8002e24:	40020400 	.word	0x40020400
 8002e28:	40020800 	.word	0x40020800
 8002e2c:	40020c00 	.word	0x40020c00
 8002e30:	40021000 	.word	0x40021000
 8002e34:	40013c00 	.word	0x40013c00

08002e38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	460b      	mov	r3, r1
 8002e42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691a      	ldr	r2, [r3, #16]
 8002e48:	887b      	ldrh	r3, [r7, #2]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d002      	beq.n	8002e56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e50:	2301      	movs	r3, #1
 8002e52:	73fb      	strb	r3, [r7, #15]
 8002e54:	e001      	b.n	8002e5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e56:	2300      	movs	r3, #0
 8002e58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	460b      	mov	r3, r1
 8002e72:	807b      	strh	r3, [r7, #2]
 8002e74:	4613      	mov	r3, r2
 8002e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e78:	787b      	ldrb	r3, [r7, #1]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d003      	beq.n	8002e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e7e:	887a      	ldrh	r2, [r7, #2]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e84:	e003      	b.n	8002e8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e86:	887b      	ldrh	r3, [r7, #2]
 8002e88:	041a      	lsls	r2, r3, #16
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	619a      	str	r2, [r3, #24]
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
	...

08002e9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e267      	b.n	800337e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d075      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eba:	4b88      	ldr	r3, [pc, #544]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 030c 	and.w	r3, r3, #12
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d00c      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ec6:	4b85      	ldr	r3, [pc, #532]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d112      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ed2:	4b82      	ldr	r3, [pc, #520]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ede:	d10b      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee0:	4b7e      	ldr	r3, [pc, #504]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d05b      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x108>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d157      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e242      	b.n	800337e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f00:	d106      	bne.n	8002f10 <HAL_RCC_OscConfig+0x74>
 8002f02:	4b76      	ldr	r3, [pc, #472]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a75      	ldr	r2, [pc, #468]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f0c:	6013      	str	r3, [r2, #0]
 8002f0e:	e01d      	b.n	8002f4c <HAL_RCC_OscConfig+0xb0>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f18:	d10c      	bne.n	8002f34 <HAL_RCC_OscConfig+0x98>
 8002f1a:	4b70      	ldr	r3, [pc, #448]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a6f      	ldr	r2, [pc, #444]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f24:	6013      	str	r3, [r2, #0]
 8002f26:	4b6d      	ldr	r3, [pc, #436]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a6c      	ldr	r2, [pc, #432]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	e00b      	b.n	8002f4c <HAL_RCC_OscConfig+0xb0>
 8002f34:	4b69      	ldr	r3, [pc, #420]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a68      	ldr	r2, [pc, #416]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f3e:	6013      	str	r3, [r2, #0]
 8002f40:	4b66      	ldr	r3, [pc, #408]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a65      	ldr	r2, [pc, #404]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d013      	beq.n	8002f7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f54:	f7ff f8cc 	bl	80020f0 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f5c:	f7ff f8c8 	bl	80020f0 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b64      	cmp	r3, #100	; 0x64
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e207      	b.n	800337e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6e:	4b5b      	ldr	r3, [pc, #364]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0f0      	beq.n	8002f5c <HAL_RCC_OscConfig+0xc0>
 8002f7a:	e014      	b.n	8002fa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7c:	f7ff f8b8 	bl	80020f0 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f84:	f7ff f8b4 	bl	80020f0 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b64      	cmp	r3, #100	; 0x64
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e1f3      	b.n	800337e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f96:	4b51      	ldr	r3, [pc, #324]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f0      	bne.n	8002f84 <HAL_RCC_OscConfig+0xe8>
 8002fa2:	e000      	b.n	8002fa6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d063      	beq.n	800307a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fb2:	4b4a      	ldr	r3, [pc, #296]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 030c 	and.w	r3, r3, #12
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00b      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fbe:	4b47      	ldr	r3, [pc, #284]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fc6:	2b08      	cmp	r3, #8
 8002fc8:	d11c      	bne.n	8003004 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fca:	4b44      	ldr	r3, [pc, #272]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d116      	bne.n	8003004 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fd6:	4b41      	ldr	r3, [pc, #260]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d005      	beq.n	8002fee <HAL_RCC_OscConfig+0x152>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d001      	beq.n	8002fee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e1c7      	b.n	800337e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fee:	4b3b      	ldr	r3, [pc, #236]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	4937      	ldr	r1, [pc, #220]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003002:	e03a      	b.n	800307a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d020      	beq.n	800304e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800300c:	4b34      	ldr	r3, [pc, #208]	; (80030e0 <HAL_RCC_OscConfig+0x244>)
 800300e:	2201      	movs	r2, #1
 8003010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003012:	f7ff f86d 	bl	80020f0 <HAL_GetTick>
 8003016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003018:	e008      	b.n	800302c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800301a:	f7ff f869 	bl	80020f0 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e1a8      	b.n	800337e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800302c:	4b2b      	ldr	r3, [pc, #172]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0f0      	beq.n	800301a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003038:	4b28      	ldr	r3, [pc, #160]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	4925      	ldr	r1, [pc, #148]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8003048:	4313      	orrs	r3, r2
 800304a:	600b      	str	r3, [r1, #0]
 800304c:	e015      	b.n	800307a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800304e:	4b24      	ldr	r3, [pc, #144]	; (80030e0 <HAL_RCC_OscConfig+0x244>)
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003054:	f7ff f84c 	bl	80020f0 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800305c:	f7ff f848 	bl	80020f0 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e187      	b.n	800337e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800306e:	4b1b      	ldr	r3, [pc, #108]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b00      	cmp	r3, #0
 8003084:	d036      	beq.n	80030f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d016      	beq.n	80030bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800308e:	4b15      	ldr	r3, [pc, #84]	; (80030e4 <HAL_RCC_OscConfig+0x248>)
 8003090:	2201      	movs	r2, #1
 8003092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003094:	f7ff f82c 	bl	80020f0 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800309c:	f7ff f828 	bl	80020f0 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e167      	b.n	800337e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ae:	4b0b      	ldr	r3, [pc, #44]	; (80030dc <HAL_RCC_OscConfig+0x240>)
 80030b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0f0      	beq.n	800309c <HAL_RCC_OscConfig+0x200>
 80030ba:	e01b      	b.n	80030f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030bc:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <HAL_RCC_OscConfig+0x248>)
 80030be:	2200      	movs	r2, #0
 80030c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c2:	f7ff f815 	bl	80020f0 <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c8:	e00e      	b.n	80030e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ca:	f7ff f811 	bl	80020f0 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d907      	bls.n	80030e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e150      	b.n	800337e <HAL_RCC_OscConfig+0x4e2>
 80030dc:	40023800 	.word	0x40023800
 80030e0:	42470000 	.word	0x42470000
 80030e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e8:	4b88      	ldr	r3, [pc, #544]	; (800330c <HAL_RCC_OscConfig+0x470>)
 80030ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1ea      	bne.n	80030ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 8097 	beq.w	8003230 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003102:	2300      	movs	r3, #0
 8003104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003106:	4b81      	ldr	r3, [pc, #516]	; (800330c <HAL_RCC_OscConfig+0x470>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10f      	bne.n	8003132 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003112:	2300      	movs	r3, #0
 8003114:	60bb      	str	r3, [r7, #8]
 8003116:	4b7d      	ldr	r3, [pc, #500]	; (800330c <HAL_RCC_OscConfig+0x470>)
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	4a7c      	ldr	r2, [pc, #496]	; (800330c <HAL_RCC_OscConfig+0x470>)
 800311c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003120:	6413      	str	r3, [r2, #64]	; 0x40
 8003122:	4b7a      	ldr	r3, [pc, #488]	; (800330c <HAL_RCC_OscConfig+0x470>)
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312a:	60bb      	str	r3, [r7, #8]
 800312c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800312e:	2301      	movs	r3, #1
 8003130:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003132:	4b77      	ldr	r3, [pc, #476]	; (8003310 <HAL_RCC_OscConfig+0x474>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313a:	2b00      	cmp	r3, #0
 800313c:	d118      	bne.n	8003170 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800313e:	4b74      	ldr	r3, [pc, #464]	; (8003310 <HAL_RCC_OscConfig+0x474>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a73      	ldr	r2, [pc, #460]	; (8003310 <HAL_RCC_OscConfig+0x474>)
 8003144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800314a:	f7fe ffd1 	bl	80020f0 <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003150:	e008      	b.n	8003164 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003152:	f7fe ffcd 	bl	80020f0 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e10c      	b.n	800337e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003164:	4b6a      	ldr	r3, [pc, #424]	; (8003310 <HAL_RCC_OscConfig+0x474>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0f0      	beq.n	8003152 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d106      	bne.n	8003186 <HAL_RCC_OscConfig+0x2ea>
 8003178:	4b64      	ldr	r3, [pc, #400]	; (800330c <HAL_RCC_OscConfig+0x470>)
 800317a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317c:	4a63      	ldr	r2, [pc, #396]	; (800330c <HAL_RCC_OscConfig+0x470>)
 800317e:	f043 0301 	orr.w	r3, r3, #1
 8003182:	6713      	str	r3, [r2, #112]	; 0x70
 8003184:	e01c      	b.n	80031c0 <HAL_RCC_OscConfig+0x324>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	2b05      	cmp	r3, #5
 800318c:	d10c      	bne.n	80031a8 <HAL_RCC_OscConfig+0x30c>
 800318e:	4b5f      	ldr	r3, [pc, #380]	; (800330c <HAL_RCC_OscConfig+0x470>)
 8003190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003192:	4a5e      	ldr	r2, [pc, #376]	; (800330c <HAL_RCC_OscConfig+0x470>)
 8003194:	f043 0304 	orr.w	r3, r3, #4
 8003198:	6713      	str	r3, [r2, #112]	; 0x70
 800319a:	4b5c      	ldr	r3, [pc, #368]	; (800330c <HAL_RCC_OscConfig+0x470>)
 800319c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319e:	4a5b      	ldr	r2, [pc, #364]	; (800330c <HAL_RCC_OscConfig+0x470>)
 80031a0:	f043 0301 	orr.w	r3, r3, #1
 80031a4:	6713      	str	r3, [r2, #112]	; 0x70
 80031a6:	e00b      	b.n	80031c0 <HAL_RCC_OscConfig+0x324>
 80031a8:	4b58      	ldr	r3, [pc, #352]	; (800330c <HAL_RCC_OscConfig+0x470>)
 80031aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ac:	4a57      	ldr	r2, [pc, #348]	; (800330c <HAL_RCC_OscConfig+0x470>)
 80031ae:	f023 0301 	bic.w	r3, r3, #1
 80031b2:	6713      	str	r3, [r2, #112]	; 0x70
 80031b4:	4b55      	ldr	r3, [pc, #340]	; (800330c <HAL_RCC_OscConfig+0x470>)
 80031b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b8:	4a54      	ldr	r2, [pc, #336]	; (800330c <HAL_RCC_OscConfig+0x470>)
 80031ba:	f023 0304 	bic.w	r3, r3, #4
 80031be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d015      	beq.n	80031f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c8:	f7fe ff92 	bl	80020f0 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ce:	e00a      	b.n	80031e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031d0:	f7fe ff8e 	bl	80020f0 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	f241 3288 	movw	r2, #5000	; 0x1388
 80031de:	4293      	cmp	r3, r2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e0cb      	b.n	800337e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e6:	4b49      	ldr	r3, [pc, #292]	; (800330c <HAL_RCC_OscConfig+0x470>)
 80031e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0ee      	beq.n	80031d0 <HAL_RCC_OscConfig+0x334>
 80031f2:	e014      	b.n	800321e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f4:	f7fe ff7c 	bl	80020f0 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031fa:	e00a      	b.n	8003212 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031fc:	f7fe ff78 	bl	80020f0 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	f241 3288 	movw	r2, #5000	; 0x1388
 800320a:	4293      	cmp	r3, r2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e0b5      	b.n	800337e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003212:	4b3e      	ldr	r3, [pc, #248]	; (800330c <HAL_RCC_OscConfig+0x470>)
 8003214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1ee      	bne.n	80031fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800321e:	7dfb      	ldrb	r3, [r7, #23]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d105      	bne.n	8003230 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003224:	4b39      	ldr	r3, [pc, #228]	; (800330c <HAL_RCC_OscConfig+0x470>)
 8003226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003228:	4a38      	ldr	r2, [pc, #224]	; (800330c <HAL_RCC_OscConfig+0x470>)
 800322a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800322e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 80a1 	beq.w	800337c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800323a:	4b34      	ldr	r3, [pc, #208]	; (800330c <HAL_RCC_OscConfig+0x470>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 030c 	and.w	r3, r3, #12
 8003242:	2b08      	cmp	r3, #8
 8003244:	d05c      	beq.n	8003300 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	2b02      	cmp	r3, #2
 800324c:	d141      	bne.n	80032d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800324e:	4b31      	ldr	r3, [pc, #196]	; (8003314 <HAL_RCC_OscConfig+0x478>)
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003254:	f7fe ff4c 	bl	80020f0 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800325c:	f7fe ff48 	bl	80020f0 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e087      	b.n	800337e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800326e:	4b27      	ldr	r3, [pc, #156]	; (800330c <HAL_RCC_OscConfig+0x470>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f0      	bne.n	800325c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69da      	ldr	r2, [r3, #28]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	019b      	lsls	r3, r3, #6
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003290:	085b      	lsrs	r3, r3, #1
 8003292:	3b01      	subs	r3, #1
 8003294:	041b      	lsls	r3, r3, #16
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329c:	061b      	lsls	r3, r3, #24
 800329e:	491b      	ldr	r1, [pc, #108]	; (800330c <HAL_RCC_OscConfig+0x470>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032a4:	4b1b      	ldr	r3, [pc, #108]	; (8003314 <HAL_RCC_OscConfig+0x478>)
 80032a6:	2201      	movs	r2, #1
 80032a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032aa:	f7fe ff21 	bl	80020f0 <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032b2:	f7fe ff1d 	bl	80020f0 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e05c      	b.n	800337e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032c4:	4b11      	ldr	r3, [pc, #68]	; (800330c <HAL_RCC_OscConfig+0x470>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0f0      	beq.n	80032b2 <HAL_RCC_OscConfig+0x416>
 80032d0:	e054      	b.n	800337c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032d2:	4b10      	ldr	r3, [pc, #64]	; (8003314 <HAL_RCC_OscConfig+0x478>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d8:	f7fe ff0a 	bl	80020f0 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032e0:	f7fe ff06 	bl	80020f0 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e045      	b.n	800337e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f2:	4b06      	ldr	r3, [pc, #24]	; (800330c <HAL_RCC_OscConfig+0x470>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1f0      	bne.n	80032e0 <HAL_RCC_OscConfig+0x444>
 80032fe:	e03d      	b.n	800337c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d107      	bne.n	8003318 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e038      	b.n	800337e <HAL_RCC_OscConfig+0x4e2>
 800330c:	40023800 	.word	0x40023800
 8003310:	40007000 	.word	0x40007000
 8003314:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003318:	4b1b      	ldr	r3, [pc, #108]	; (8003388 <HAL_RCC_OscConfig+0x4ec>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d028      	beq.n	8003378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003330:	429a      	cmp	r2, r3
 8003332:	d121      	bne.n	8003378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800333e:	429a      	cmp	r2, r3
 8003340:	d11a      	bne.n	8003378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003348:	4013      	ands	r3, r2
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800334e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003350:	4293      	cmp	r3, r2
 8003352:	d111      	bne.n	8003378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335e:	085b      	lsrs	r3, r3, #1
 8003360:	3b01      	subs	r3, #1
 8003362:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003364:	429a      	cmp	r2, r3
 8003366:	d107      	bne.n	8003378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003372:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003374:	429a      	cmp	r2, r3
 8003376:	d001      	beq.n	800337c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e000      	b.n	800337e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40023800 	.word	0x40023800

0800338c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e0cc      	b.n	800353a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033a0:	4b68      	ldr	r3, [pc, #416]	; (8003544 <HAL_RCC_ClockConfig+0x1b8>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d90c      	bls.n	80033c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ae:	4b65      	ldr	r3, [pc, #404]	; (8003544 <HAL_RCC_ClockConfig+0x1b8>)
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b6:	4b63      	ldr	r3, [pc, #396]	; (8003544 <HAL_RCC_ClockConfig+0x1b8>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d001      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e0b8      	b.n	800353a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d020      	beq.n	8003416 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d005      	beq.n	80033ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033e0:	4b59      	ldr	r3, [pc, #356]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	4a58      	ldr	r2, [pc, #352]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0308 	and.w	r3, r3, #8
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d005      	beq.n	8003404 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033f8:	4b53      	ldr	r3, [pc, #332]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	4a52      	ldr	r2, [pc, #328]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 80033fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003402:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003404:	4b50      	ldr	r3, [pc, #320]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	494d      	ldr	r1, [pc, #308]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 8003412:	4313      	orrs	r3, r2
 8003414:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d044      	beq.n	80034ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d107      	bne.n	800343a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800342a:	4b47      	ldr	r3, [pc, #284]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d119      	bne.n	800346a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e07f      	b.n	800353a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b02      	cmp	r3, #2
 8003440:	d003      	beq.n	800344a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003446:	2b03      	cmp	r3, #3
 8003448:	d107      	bne.n	800345a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800344a:	4b3f      	ldr	r3, [pc, #252]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d109      	bne.n	800346a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e06f      	b.n	800353a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800345a:	4b3b      	ldr	r3, [pc, #236]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e067      	b.n	800353a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800346a:	4b37      	ldr	r3, [pc, #220]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f023 0203 	bic.w	r2, r3, #3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	4934      	ldr	r1, [pc, #208]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 8003478:	4313      	orrs	r3, r2
 800347a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800347c:	f7fe fe38 	bl	80020f0 <HAL_GetTick>
 8003480:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003482:	e00a      	b.n	800349a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003484:	f7fe fe34 	bl	80020f0 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003492:	4293      	cmp	r3, r2
 8003494:	d901      	bls.n	800349a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e04f      	b.n	800353a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800349a:	4b2b      	ldr	r3, [pc, #172]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 020c 	and.w	r2, r3, #12
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d1eb      	bne.n	8003484 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034ac:	4b25      	ldr	r3, [pc, #148]	; (8003544 <HAL_RCC_ClockConfig+0x1b8>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d20c      	bcs.n	80034d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ba:	4b22      	ldr	r3, [pc, #136]	; (8003544 <HAL_RCC_ClockConfig+0x1b8>)
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	b2d2      	uxtb	r2, r2
 80034c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c2:	4b20      	ldr	r3, [pc, #128]	; (8003544 <HAL_RCC_ClockConfig+0x1b8>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d001      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e032      	b.n	800353a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d008      	beq.n	80034f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034e0:	4b19      	ldr	r3, [pc, #100]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	4916      	ldr	r1, [pc, #88]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0308 	and.w	r3, r3, #8
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d009      	beq.n	8003512 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034fe:	4b12      	ldr	r3, [pc, #72]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	490e      	ldr	r1, [pc, #56]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 800350e:	4313      	orrs	r3, r2
 8003510:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003512:	f000 f821 	bl	8003558 <HAL_RCC_GetSysClockFreq>
 8003516:	4602      	mov	r2, r0
 8003518:	4b0b      	ldr	r3, [pc, #44]	; (8003548 <HAL_RCC_ClockConfig+0x1bc>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	091b      	lsrs	r3, r3, #4
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	490a      	ldr	r1, [pc, #40]	; (800354c <HAL_RCC_ClockConfig+0x1c0>)
 8003524:	5ccb      	ldrb	r3, [r1, r3]
 8003526:	fa22 f303 	lsr.w	r3, r2, r3
 800352a:	4a09      	ldr	r2, [pc, #36]	; (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 800352c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800352e:	4b09      	ldr	r3, [pc, #36]	; (8003554 <HAL_RCC_ClockConfig+0x1c8>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f7fe fd98 	bl	8002068 <HAL_InitTick>

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40023c00 	.word	0x40023c00
 8003548:	40023800 	.word	0x40023800
 800354c:	08008534 	.word	0x08008534
 8003550:	20000004 	.word	0x20000004
 8003554:	20000008 	.word	0x20000008

08003558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800355c:	b094      	sub	sp, #80	; 0x50
 800355e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	647b      	str	r3, [r7, #68]	; 0x44
 8003564:	2300      	movs	r3, #0
 8003566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003568:	2300      	movs	r3, #0
 800356a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800356c:	2300      	movs	r3, #0
 800356e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003570:	4b79      	ldr	r3, [pc, #484]	; (8003758 <HAL_RCC_GetSysClockFreq+0x200>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f003 030c 	and.w	r3, r3, #12
 8003578:	2b08      	cmp	r3, #8
 800357a:	d00d      	beq.n	8003598 <HAL_RCC_GetSysClockFreq+0x40>
 800357c:	2b08      	cmp	r3, #8
 800357e:	f200 80e1 	bhi.w	8003744 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003582:	2b00      	cmp	r3, #0
 8003584:	d002      	beq.n	800358c <HAL_RCC_GetSysClockFreq+0x34>
 8003586:	2b04      	cmp	r3, #4
 8003588:	d003      	beq.n	8003592 <HAL_RCC_GetSysClockFreq+0x3a>
 800358a:	e0db      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800358c:	4b73      	ldr	r3, [pc, #460]	; (800375c <HAL_RCC_GetSysClockFreq+0x204>)
 800358e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003590:	e0db      	b.n	800374a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003592:	4b73      	ldr	r3, [pc, #460]	; (8003760 <HAL_RCC_GetSysClockFreq+0x208>)
 8003594:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003596:	e0d8      	b.n	800374a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003598:	4b6f      	ldr	r3, [pc, #444]	; (8003758 <HAL_RCC_GetSysClockFreq+0x200>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035a2:	4b6d      	ldr	r3, [pc, #436]	; (8003758 <HAL_RCC_GetSysClockFreq+0x200>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d063      	beq.n	8003676 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ae:	4b6a      	ldr	r3, [pc, #424]	; (8003758 <HAL_RCC_GetSysClockFreq+0x200>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	099b      	lsrs	r3, r3, #6
 80035b4:	2200      	movs	r2, #0
 80035b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80035b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035c0:	633b      	str	r3, [r7, #48]	; 0x30
 80035c2:	2300      	movs	r3, #0
 80035c4:	637b      	str	r3, [r7, #52]	; 0x34
 80035c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80035ca:	4622      	mov	r2, r4
 80035cc:	462b      	mov	r3, r5
 80035ce:	f04f 0000 	mov.w	r0, #0
 80035d2:	f04f 0100 	mov.w	r1, #0
 80035d6:	0159      	lsls	r1, r3, #5
 80035d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035dc:	0150      	lsls	r0, r2, #5
 80035de:	4602      	mov	r2, r0
 80035e0:	460b      	mov	r3, r1
 80035e2:	4621      	mov	r1, r4
 80035e4:	1a51      	subs	r1, r2, r1
 80035e6:	6139      	str	r1, [r7, #16]
 80035e8:	4629      	mov	r1, r5
 80035ea:	eb63 0301 	sbc.w	r3, r3, r1
 80035ee:	617b      	str	r3, [r7, #20]
 80035f0:	f04f 0200 	mov.w	r2, #0
 80035f4:	f04f 0300 	mov.w	r3, #0
 80035f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035fc:	4659      	mov	r1, fp
 80035fe:	018b      	lsls	r3, r1, #6
 8003600:	4651      	mov	r1, sl
 8003602:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003606:	4651      	mov	r1, sl
 8003608:	018a      	lsls	r2, r1, #6
 800360a:	4651      	mov	r1, sl
 800360c:	ebb2 0801 	subs.w	r8, r2, r1
 8003610:	4659      	mov	r1, fp
 8003612:	eb63 0901 	sbc.w	r9, r3, r1
 8003616:	f04f 0200 	mov.w	r2, #0
 800361a:	f04f 0300 	mov.w	r3, #0
 800361e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003622:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003626:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800362a:	4690      	mov	r8, r2
 800362c:	4699      	mov	r9, r3
 800362e:	4623      	mov	r3, r4
 8003630:	eb18 0303 	adds.w	r3, r8, r3
 8003634:	60bb      	str	r3, [r7, #8]
 8003636:	462b      	mov	r3, r5
 8003638:	eb49 0303 	adc.w	r3, r9, r3
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	f04f 0200 	mov.w	r2, #0
 8003642:	f04f 0300 	mov.w	r3, #0
 8003646:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800364a:	4629      	mov	r1, r5
 800364c:	024b      	lsls	r3, r1, #9
 800364e:	4621      	mov	r1, r4
 8003650:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003654:	4621      	mov	r1, r4
 8003656:	024a      	lsls	r2, r1, #9
 8003658:	4610      	mov	r0, r2
 800365a:	4619      	mov	r1, r3
 800365c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800365e:	2200      	movs	r2, #0
 8003660:	62bb      	str	r3, [r7, #40]	; 0x28
 8003662:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003664:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003668:	f7fd fac6 	bl	8000bf8 <__aeabi_uldivmod>
 800366c:	4602      	mov	r2, r0
 800366e:	460b      	mov	r3, r1
 8003670:	4613      	mov	r3, r2
 8003672:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003674:	e058      	b.n	8003728 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003676:	4b38      	ldr	r3, [pc, #224]	; (8003758 <HAL_RCC_GetSysClockFreq+0x200>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	099b      	lsrs	r3, r3, #6
 800367c:	2200      	movs	r2, #0
 800367e:	4618      	mov	r0, r3
 8003680:	4611      	mov	r1, r2
 8003682:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003686:	623b      	str	r3, [r7, #32]
 8003688:	2300      	movs	r3, #0
 800368a:	627b      	str	r3, [r7, #36]	; 0x24
 800368c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003690:	4642      	mov	r2, r8
 8003692:	464b      	mov	r3, r9
 8003694:	f04f 0000 	mov.w	r0, #0
 8003698:	f04f 0100 	mov.w	r1, #0
 800369c:	0159      	lsls	r1, r3, #5
 800369e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036a2:	0150      	lsls	r0, r2, #5
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	4641      	mov	r1, r8
 80036aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80036ae:	4649      	mov	r1, r9
 80036b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	f04f 0300 	mov.w	r3, #0
 80036bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036c8:	ebb2 040a 	subs.w	r4, r2, sl
 80036cc:	eb63 050b 	sbc.w	r5, r3, fp
 80036d0:	f04f 0200 	mov.w	r2, #0
 80036d4:	f04f 0300 	mov.w	r3, #0
 80036d8:	00eb      	lsls	r3, r5, #3
 80036da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036de:	00e2      	lsls	r2, r4, #3
 80036e0:	4614      	mov	r4, r2
 80036e2:	461d      	mov	r5, r3
 80036e4:	4643      	mov	r3, r8
 80036e6:	18e3      	adds	r3, r4, r3
 80036e8:	603b      	str	r3, [r7, #0]
 80036ea:	464b      	mov	r3, r9
 80036ec:	eb45 0303 	adc.w	r3, r5, r3
 80036f0:	607b      	str	r3, [r7, #4]
 80036f2:	f04f 0200 	mov.w	r2, #0
 80036f6:	f04f 0300 	mov.w	r3, #0
 80036fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036fe:	4629      	mov	r1, r5
 8003700:	028b      	lsls	r3, r1, #10
 8003702:	4621      	mov	r1, r4
 8003704:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003708:	4621      	mov	r1, r4
 800370a:	028a      	lsls	r2, r1, #10
 800370c:	4610      	mov	r0, r2
 800370e:	4619      	mov	r1, r3
 8003710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003712:	2200      	movs	r2, #0
 8003714:	61bb      	str	r3, [r7, #24]
 8003716:	61fa      	str	r2, [r7, #28]
 8003718:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800371c:	f7fd fa6c 	bl	8000bf8 <__aeabi_uldivmod>
 8003720:	4602      	mov	r2, r0
 8003722:	460b      	mov	r3, r1
 8003724:	4613      	mov	r3, r2
 8003726:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003728:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <HAL_RCC_GetSysClockFreq+0x200>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	0c1b      	lsrs	r3, r3, #16
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	3301      	adds	r3, #1
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003738:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800373a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800373c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003740:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003742:	e002      	b.n	800374a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003744:	4b05      	ldr	r3, [pc, #20]	; (800375c <HAL_RCC_GetSysClockFreq+0x204>)
 8003746:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003748:	bf00      	nop
    }
  }
  return sysclockfreq;
 800374a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800374c:	4618      	mov	r0, r3
 800374e:	3750      	adds	r7, #80	; 0x50
 8003750:	46bd      	mov	sp, r7
 8003752:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003756:	bf00      	nop
 8003758:	40023800 	.word	0x40023800
 800375c:	00f42400 	.word	0x00f42400
 8003760:	007a1200 	.word	0x007a1200

08003764 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003768:	4b03      	ldr	r3, [pc, #12]	; (8003778 <HAL_RCC_GetHCLKFreq+0x14>)
 800376a:	681b      	ldr	r3, [r3, #0]
}
 800376c:	4618      	mov	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	20000004 	.word	0x20000004

0800377c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003780:	f7ff fff0 	bl	8003764 <HAL_RCC_GetHCLKFreq>
 8003784:	4602      	mov	r2, r0
 8003786:	4b05      	ldr	r3, [pc, #20]	; (800379c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	0a9b      	lsrs	r3, r3, #10
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	4903      	ldr	r1, [pc, #12]	; (80037a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003792:	5ccb      	ldrb	r3, [r1, r3]
 8003794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003798:	4618      	mov	r0, r3
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40023800 	.word	0x40023800
 80037a0:	08008544 	.word	0x08008544

080037a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037a8:	f7ff ffdc 	bl	8003764 <HAL_RCC_GetHCLKFreq>
 80037ac:	4602      	mov	r2, r0
 80037ae:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	0b5b      	lsrs	r3, r3, #13
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	4903      	ldr	r1, [pc, #12]	; (80037c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037ba:	5ccb      	ldrb	r3, [r1, r3]
 80037bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40023800 	.word	0x40023800
 80037c8:	08008544 	.word	0x08008544

080037cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e041      	b.n	8003862 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d106      	bne.n	80037f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7fe f9c2 	bl	8001b7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3304      	adds	r3, #4
 8003808:	4619      	mov	r1, r3
 800380a:	4610      	mov	r0, r2
 800380c:	f000 fb24 	bl	8003e58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
	...

0800386c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b01      	cmp	r3, #1
 800387e:	d001      	beq.n	8003884 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e044      	b.n	800390e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68da      	ldr	r2, [r3, #12]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0201 	orr.w	r2, r2, #1
 800389a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a1e      	ldr	r2, [pc, #120]	; (800391c <HAL_TIM_Base_Start_IT+0xb0>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d018      	beq.n	80038d8 <HAL_TIM_Base_Start_IT+0x6c>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ae:	d013      	beq.n	80038d8 <HAL_TIM_Base_Start_IT+0x6c>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a1a      	ldr	r2, [pc, #104]	; (8003920 <HAL_TIM_Base_Start_IT+0xb4>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d00e      	beq.n	80038d8 <HAL_TIM_Base_Start_IT+0x6c>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a19      	ldr	r2, [pc, #100]	; (8003924 <HAL_TIM_Base_Start_IT+0xb8>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d009      	beq.n	80038d8 <HAL_TIM_Base_Start_IT+0x6c>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a17      	ldr	r2, [pc, #92]	; (8003928 <HAL_TIM_Base_Start_IT+0xbc>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d004      	beq.n	80038d8 <HAL_TIM_Base_Start_IT+0x6c>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a16      	ldr	r2, [pc, #88]	; (800392c <HAL_TIM_Base_Start_IT+0xc0>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d111      	bne.n	80038fc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 0307 	and.w	r3, r3, #7
 80038e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2b06      	cmp	r3, #6
 80038e8:	d010      	beq.n	800390c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f042 0201 	orr.w	r2, r2, #1
 80038f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038fa:	e007      	b.n	800390c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0201 	orr.w	r2, r2, #1
 800390a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3714      	adds	r7, #20
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	40010000 	.word	0x40010000
 8003920:	40000400 	.word	0x40000400
 8003924:	40000800 	.word	0x40000800
 8003928:	40000c00 	.word	0x40000c00
 800392c:	40014000 	.word	0x40014000

08003930 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e041      	b.n	80039c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d106      	bne.n	800395c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f839 	bl	80039ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3304      	adds	r3, #4
 800396c:	4619      	mov	r1, r3
 800396e:	4610      	mov	r0, r2
 8003970:	f000 fa72 	bl	8003e58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
	...

080039e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d109      	bne.n	8003a08 <HAL_TIM_PWM_Start+0x24>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	bf14      	ite	ne
 8003a00:	2301      	movne	r3, #1
 8003a02:	2300      	moveq	r3, #0
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	e022      	b.n	8003a4e <HAL_TIM_PWM_Start+0x6a>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d109      	bne.n	8003a22 <HAL_TIM_PWM_Start+0x3e>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	bf14      	ite	ne
 8003a1a:	2301      	movne	r3, #1
 8003a1c:	2300      	moveq	r3, #0
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	e015      	b.n	8003a4e <HAL_TIM_PWM_Start+0x6a>
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d109      	bne.n	8003a3c <HAL_TIM_PWM_Start+0x58>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	bf14      	ite	ne
 8003a34:	2301      	movne	r3, #1
 8003a36:	2300      	moveq	r3, #0
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	e008      	b.n	8003a4e <HAL_TIM_PWM_Start+0x6a>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	bf14      	ite	ne
 8003a48:	2301      	movne	r3, #1
 8003a4a:	2300      	moveq	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e068      	b.n	8003b28 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d104      	bne.n	8003a66 <HAL_TIM_PWM_Start+0x82>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a64:	e013      	b.n	8003a8e <HAL_TIM_PWM_Start+0xaa>
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	d104      	bne.n	8003a76 <HAL_TIM_PWM_Start+0x92>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a74:	e00b      	b.n	8003a8e <HAL_TIM_PWM_Start+0xaa>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d104      	bne.n	8003a86 <HAL_TIM_PWM_Start+0xa2>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a84:	e003      	b.n	8003a8e <HAL_TIM_PWM_Start+0xaa>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2202      	movs	r2, #2
 8003a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2201      	movs	r2, #1
 8003a94:	6839      	ldr	r1, [r7, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 fc84 	bl	80043a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a23      	ldr	r2, [pc, #140]	; (8003b30 <HAL_TIM_PWM_Start+0x14c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d107      	bne.n	8003ab6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ab4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a1d      	ldr	r2, [pc, #116]	; (8003b30 <HAL_TIM_PWM_Start+0x14c>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d018      	beq.n	8003af2 <HAL_TIM_PWM_Start+0x10e>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac8:	d013      	beq.n	8003af2 <HAL_TIM_PWM_Start+0x10e>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a19      	ldr	r2, [pc, #100]	; (8003b34 <HAL_TIM_PWM_Start+0x150>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d00e      	beq.n	8003af2 <HAL_TIM_PWM_Start+0x10e>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a17      	ldr	r2, [pc, #92]	; (8003b38 <HAL_TIM_PWM_Start+0x154>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d009      	beq.n	8003af2 <HAL_TIM_PWM_Start+0x10e>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a16      	ldr	r2, [pc, #88]	; (8003b3c <HAL_TIM_PWM_Start+0x158>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d004      	beq.n	8003af2 <HAL_TIM_PWM_Start+0x10e>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a14      	ldr	r2, [pc, #80]	; (8003b40 <HAL_TIM_PWM_Start+0x15c>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d111      	bne.n	8003b16 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2b06      	cmp	r3, #6
 8003b02:	d010      	beq.n	8003b26 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0201 	orr.w	r2, r2, #1
 8003b12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b14:	e007      	b.n	8003b26 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f042 0201 	orr.w	r2, r2, #1
 8003b24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40010000 	.word	0x40010000
 8003b34:	40000400 	.word	0x40000400
 8003b38:	40000800 	.word	0x40000800
 8003b3c:	40000c00 	.word	0x40000c00
 8003b40:	40014000 	.word	0x40014000

08003b44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b50:	2300      	movs	r3, #0
 8003b52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d101      	bne.n	8003b62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	e0ae      	b.n	8003cc0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b0c      	cmp	r3, #12
 8003b6e:	f200 809f 	bhi.w	8003cb0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003b72:	a201      	add	r2, pc, #4	; (adr r2, 8003b78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b78:	08003bad 	.word	0x08003bad
 8003b7c:	08003cb1 	.word	0x08003cb1
 8003b80:	08003cb1 	.word	0x08003cb1
 8003b84:	08003cb1 	.word	0x08003cb1
 8003b88:	08003bed 	.word	0x08003bed
 8003b8c:	08003cb1 	.word	0x08003cb1
 8003b90:	08003cb1 	.word	0x08003cb1
 8003b94:	08003cb1 	.word	0x08003cb1
 8003b98:	08003c2f 	.word	0x08003c2f
 8003b9c:	08003cb1 	.word	0x08003cb1
 8003ba0:	08003cb1 	.word	0x08003cb1
 8003ba4:	08003cb1 	.word	0x08003cb1
 8003ba8:	08003c6f 	.word	0x08003c6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68b9      	ldr	r1, [r7, #8]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 f9d0 	bl	8003f58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	699a      	ldr	r2, [r3, #24]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f042 0208 	orr.w	r2, r2, #8
 8003bc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	699a      	ldr	r2, [r3, #24]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0204 	bic.w	r2, r2, #4
 8003bd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6999      	ldr	r1, [r3, #24]
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	691a      	ldr	r2, [r3, #16]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	619a      	str	r2, [r3, #24]
      break;
 8003bea:	e064      	b.n	8003cb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68b9      	ldr	r1, [r7, #8]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 fa16 	bl	8004024 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	699a      	ldr	r2, [r3, #24]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	699a      	ldr	r2, [r3, #24]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6999      	ldr	r1, [r3, #24]
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	021a      	lsls	r2, r3, #8
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	619a      	str	r2, [r3, #24]
      break;
 8003c2c:	e043      	b.n	8003cb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68b9      	ldr	r1, [r7, #8]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 fa61 	bl	80040fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	69da      	ldr	r2, [r3, #28]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f042 0208 	orr.w	r2, r2, #8
 8003c48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	69da      	ldr	r2, [r3, #28]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 0204 	bic.w	r2, r2, #4
 8003c58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	69d9      	ldr	r1, [r3, #28]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	691a      	ldr	r2, [r3, #16]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	61da      	str	r2, [r3, #28]
      break;
 8003c6c:	e023      	b.n	8003cb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68b9      	ldr	r1, [r7, #8]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f000 faab 	bl	80041d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	69da      	ldr	r2, [r3, #28]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	69da      	ldr	r2, [r3, #28]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	69d9      	ldr	r1, [r3, #28]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	021a      	lsls	r2, r3, #8
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	61da      	str	r2, [r3, #28]
      break;
 8003cae:	e002      	b.n	8003cb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	75fb      	strb	r3, [r7, #23]
      break;
 8003cb4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3718      	adds	r7, #24
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d101      	bne.n	8003ce4 <HAL_TIM_ConfigClockSource+0x1c>
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	e0b4      	b.n	8003e4e <HAL_TIM_ConfigClockSource+0x186>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d1c:	d03e      	beq.n	8003d9c <HAL_TIM_ConfigClockSource+0xd4>
 8003d1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d22:	f200 8087 	bhi.w	8003e34 <HAL_TIM_ConfigClockSource+0x16c>
 8003d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d2a:	f000 8086 	beq.w	8003e3a <HAL_TIM_ConfigClockSource+0x172>
 8003d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d32:	d87f      	bhi.n	8003e34 <HAL_TIM_ConfigClockSource+0x16c>
 8003d34:	2b70      	cmp	r3, #112	; 0x70
 8003d36:	d01a      	beq.n	8003d6e <HAL_TIM_ConfigClockSource+0xa6>
 8003d38:	2b70      	cmp	r3, #112	; 0x70
 8003d3a:	d87b      	bhi.n	8003e34 <HAL_TIM_ConfigClockSource+0x16c>
 8003d3c:	2b60      	cmp	r3, #96	; 0x60
 8003d3e:	d050      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0x11a>
 8003d40:	2b60      	cmp	r3, #96	; 0x60
 8003d42:	d877      	bhi.n	8003e34 <HAL_TIM_ConfigClockSource+0x16c>
 8003d44:	2b50      	cmp	r3, #80	; 0x50
 8003d46:	d03c      	beq.n	8003dc2 <HAL_TIM_ConfigClockSource+0xfa>
 8003d48:	2b50      	cmp	r3, #80	; 0x50
 8003d4a:	d873      	bhi.n	8003e34 <HAL_TIM_ConfigClockSource+0x16c>
 8003d4c:	2b40      	cmp	r3, #64	; 0x40
 8003d4e:	d058      	beq.n	8003e02 <HAL_TIM_ConfigClockSource+0x13a>
 8003d50:	2b40      	cmp	r3, #64	; 0x40
 8003d52:	d86f      	bhi.n	8003e34 <HAL_TIM_ConfigClockSource+0x16c>
 8003d54:	2b30      	cmp	r3, #48	; 0x30
 8003d56:	d064      	beq.n	8003e22 <HAL_TIM_ConfigClockSource+0x15a>
 8003d58:	2b30      	cmp	r3, #48	; 0x30
 8003d5a:	d86b      	bhi.n	8003e34 <HAL_TIM_ConfigClockSource+0x16c>
 8003d5c:	2b20      	cmp	r3, #32
 8003d5e:	d060      	beq.n	8003e22 <HAL_TIM_ConfigClockSource+0x15a>
 8003d60:	2b20      	cmp	r3, #32
 8003d62:	d867      	bhi.n	8003e34 <HAL_TIM_ConfigClockSource+0x16c>
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d05c      	beq.n	8003e22 <HAL_TIM_ConfigClockSource+0x15a>
 8003d68:	2b10      	cmp	r3, #16
 8003d6a:	d05a      	beq.n	8003e22 <HAL_TIM_ConfigClockSource+0x15a>
 8003d6c:	e062      	b.n	8003e34 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6818      	ldr	r0, [r3, #0]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	6899      	ldr	r1, [r3, #8]
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	f000 faf1 	bl	8004364 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	609a      	str	r2, [r3, #8]
      break;
 8003d9a:	e04f      	b.n	8003e3c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6818      	ldr	r0, [r3, #0]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	6899      	ldr	r1, [r3, #8]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f000 fada 	bl	8004364 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689a      	ldr	r2, [r3, #8]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dbe:	609a      	str	r2, [r3, #8]
      break;
 8003dc0:	e03c      	b.n	8003e3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6818      	ldr	r0, [r3, #0]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	6859      	ldr	r1, [r3, #4]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	f000 fa4e 	bl	8004270 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2150      	movs	r1, #80	; 0x50
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 faa7 	bl	800432e <TIM_ITRx_SetConfig>
      break;
 8003de0:	e02c      	b.n	8003e3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6818      	ldr	r0, [r3, #0]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	6859      	ldr	r1, [r3, #4]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	461a      	mov	r2, r3
 8003df0:	f000 fa6d 	bl	80042ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2160      	movs	r1, #96	; 0x60
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 fa97 	bl	800432e <TIM_ITRx_SetConfig>
      break;
 8003e00:	e01c      	b.n	8003e3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6818      	ldr	r0, [r3, #0]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	6859      	ldr	r1, [r3, #4]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	f000 fa2e 	bl	8004270 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2140      	movs	r1, #64	; 0x40
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 fa87 	bl	800432e <TIM_ITRx_SetConfig>
      break;
 8003e20:	e00c      	b.n	8003e3c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	f000 fa7e 	bl	800432e <TIM_ITRx_SetConfig>
      break;
 8003e32:	e003      	b.n	8003e3c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	73fb      	strb	r3, [r7, #15]
      break;
 8003e38:	e000      	b.n	8003e3c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
	...

08003e58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a34      	ldr	r2, [pc, #208]	; (8003f3c <TIM_Base_SetConfig+0xe4>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d00f      	beq.n	8003e90 <TIM_Base_SetConfig+0x38>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e76:	d00b      	beq.n	8003e90 <TIM_Base_SetConfig+0x38>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a31      	ldr	r2, [pc, #196]	; (8003f40 <TIM_Base_SetConfig+0xe8>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d007      	beq.n	8003e90 <TIM_Base_SetConfig+0x38>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a30      	ldr	r2, [pc, #192]	; (8003f44 <TIM_Base_SetConfig+0xec>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d003      	beq.n	8003e90 <TIM_Base_SetConfig+0x38>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a2f      	ldr	r2, [pc, #188]	; (8003f48 <TIM_Base_SetConfig+0xf0>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d108      	bne.n	8003ea2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a25      	ldr	r2, [pc, #148]	; (8003f3c <TIM_Base_SetConfig+0xe4>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d01b      	beq.n	8003ee2 <TIM_Base_SetConfig+0x8a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb0:	d017      	beq.n	8003ee2 <TIM_Base_SetConfig+0x8a>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a22      	ldr	r2, [pc, #136]	; (8003f40 <TIM_Base_SetConfig+0xe8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d013      	beq.n	8003ee2 <TIM_Base_SetConfig+0x8a>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a21      	ldr	r2, [pc, #132]	; (8003f44 <TIM_Base_SetConfig+0xec>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d00f      	beq.n	8003ee2 <TIM_Base_SetConfig+0x8a>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a20      	ldr	r2, [pc, #128]	; (8003f48 <TIM_Base_SetConfig+0xf0>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d00b      	beq.n	8003ee2 <TIM_Base_SetConfig+0x8a>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a1f      	ldr	r2, [pc, #124]	; (8003f4c <TIM_Base_SetConfig+0xf4>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d007      	beq.n	8003ee2 <TIM_Base_SetConfig+0x8a>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a1e      	ldr	r2, [pc, #120]	; (8003f50 <TIM_Base_SetConfig+0xf8>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d003      	beq.n	8003ee2 <TIM_Base_SetConfig+0x8a>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a1d      	ldr	r2, [pc, #116]	; (8003f54 <TIM_Base_SetConfig+0xfc>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d108      	bne.n	8003ef4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ee8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a08      	ldr	r2, [pc, #32]	; (8003f3c <TIM_Base_SetConfig+0xe4>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d103      	bne.n	8003f28 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	615a      	str	r2, [r3, #20]
}
 8003f2e:	bf00      	nop
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40010000 	.word	0x40010000
 8003f40:	40000400 	.word	0x40000400
 8003f44:	40000800 	.word	0x40000800
 8003f48:	40000c00 	.word	0x40000c00
 8003f4c:	40014000 	.word	0x40014000
 8003f50:	40014400 	.word	0x40014400
 8003f54:	40014800 	.word	0x40014800

08003f58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	f023 0201 	bic.w	r2, r3, #1
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f023 0303 	bic.w	r3, r3, #3
 8003f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f023 0302 	bic.w	r3, r3, #2
 8003fa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a1c      	ldr	r2, [pc, #112]	; (8004020 <TIM_OC1_SetConfig+0xc8>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d10c      	bne.n	8003fce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	f023 0308 	bic.w	r3, r3, #8
 8003fba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f023 0304 	bic.w	r3, r3, #4
 8003fcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a13      	ldr	r2, [pc, #76]	; (8004020 <TIM_OC1_SetConfig+0xc8>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d111      	bne.n	8003ffa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	621a      	str	r2, [r3, #32]
}
 8004014:	bf00      	nop
 8004016:	371c      	adds	r7, #28
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	40010000 	.word	0x40010000

08004024 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004024:	b480      	push	{r7}
 8004026:	b087      	sub	sp, #28
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	f023 0210 	bic.w	r2, r3, #16
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800405a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	021b      	lsls	r3, r3, #8
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	4313      	orrs	r3, r2
 8004066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f023 0320 	bic.w	r3, r3, #32
 800406e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	011b      	lsls	r3, r3, #4
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	4313      	orrs	r3, r2
 800407a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a1e      	ldr	r2, [pc, #120]	; (80040f8 <TIM_OC2_SetConfig+0xd4>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d10d      	bne.n	80040a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800408a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	011b      	lsls	r3, r3, #4
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	4313      	orrs	r3, r2
 8004096:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800409e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a15      	ldr	r2, [pc, #84]	; (80040f8 <TIM_OC2_SetConfig+0xd4>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d113      	bne.n	80040d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	621a      	str	r2, [r3, #32]
}
 80040ea:	bf00      	nop
 80040ec:	371c      	adds	r7, #28
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	40010000 	.word	0x40010000

080040fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b087      	sub	sp, #28
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800412a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 0303 	bic.w	r3, r3, #3
 8004132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	4313      	orrs	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004144:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	021b      	lsls	r3, r3, #8
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	4313      	orrs	r3, r2
 8004150:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a1d      	ldr	r2, [pc, #116]	; (80041cc <TIM_OC3_SetConfig+0xd0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d10d      	bne.n	8004176 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004160:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	021b      	lsls	r3, r3, #8
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	4313      	orrs	r3, r2
 800416c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004174:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a14      	ldr	r2, [pc, #80]	; (80041cc <TIM_OC3_SetConfig+0xd0>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d113      	bne.n	80041a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004184:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800418c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	011b      	lsls	r3, r3, #4
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	621a      	str	r2, [r3, #32]
}
 80041c0:	bf00      	nop
 80041c2:	371c      	adds	r7, #28
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	40010000 	.word	0x40010000

080041d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004206:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	021b      	lsls	r3, r3, #8
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	4313      	orrs	r3, r2
 8004212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800421a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	031b      	lsls	r3, r3, #12
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	4313      	orrs	r3, r2
 8004226:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a10      	ldr	r2, [pc, #64]	; (800426c <TIM_OC4_SetConfig+0x9c>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d109      	bne.n	8004244 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004236:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	019b      	lsls	r3, r3, #6
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	4313      	orrs	r3, r2
 8004242:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	621a      	str	r2, [r3, #32]
}
 800425e:	bf00      	nop
 8004260:	371c      	adds	r7, #28
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	40010000 	.word	0x40010000

08004270 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004270:	b480      	push	{r7}
 8004272:	b087      	sub	sp, #28
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	f023 0201 	bic.w	r2, r3, #1
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800429a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	011b      	lsls	r3, r3, #4
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f023 030a 	bic.w	r3, r3, #10
 80042ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	621a      	str	r2, [r3, #32]
}
 80042c2:	bf00      	nop
 80042c4:	371c      	adds	r7, #28
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b087      	sub	sp, #28
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	60f8      	str	r0, [r7, #12]
 80042d6:	60b9      	str	r1, [r7, #8]
 80042d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	f023 0210 	bic.w	r2, r3, #16
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	031b      	lsls	r3, r3, #12
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	4313      	orrs	r3, r2
 8004302:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800430a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	011b      	lsls	r3, r3, #4
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	4313      	orrs	r3, r2
 8004314:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	621a      	str	r2, [r3, #32]
}
 8004322:	bf00      	nop
 8004324:	371c      	adds	r7, #28
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800432e:	b480      	push	{r7}
 8004330:	b085      	sub	sp, #20
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
 8004336:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004344:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4313      	orrs	r3, r2
 800434c:	f043 0307 	orr.w	r3, r3, #7
 8004350:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	609a      	str	r2, [r3, #8]
}
 8004358:	bf00      	nop
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004364:	b480      	push	{r7}
 8004366:	b087      	sub	sp, #28
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
 8004370:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800437e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	021a      	lsls	r2, r3, #8
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	431a      	orrs	r2, r3
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	4313      	orrs	r3, r2
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	4313      	orrs	r3, r2
 8004390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	609a      	str	r2, [r3, #8]
}
 8004398:	bf00      	nop
 800439a:	371c      	adds	r7, #28
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f003 031f 	and.w	r3, r3, #31
 80043b6:	2201      	movs	r2, #1
 80043b8:	fa02 f303 	lsl.w	r3, r2, r3
 80043bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6a1a      	ldr	r2, [r3, #32]
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	43db      	mvns	r3, r3
 80043c6:	401a      	ands	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6a1a      	ldr	r2, [r3, #32]
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	f003 031f 	and.w	r3, r3, #31
 80043d6:	6879      	ldr	r1, [r7, #4]
 80043d8:	fa01 f303 	lsl.w	r3, r1, r3
 80043dc:	431a      	orrs	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	621a      	str	r2, [r3, #32]
}
 80043e2:	bf00      	nop
 80043e4:	371c      	adds	r7, #28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
	...

080043f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004400:	2b01      	cmp	r3, #1
 8004402:	d101      	bne.n	8004408 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004404:	2302      	movs	r3, #2
 8004406:	e050      	b.n	80044aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800442e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	4313      	orrs	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a1c      	ldr	r2, [pc, #112]	; (80044b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d018      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004454:	d013      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a18      	ldr	r2, [pc, #96]	; (80044bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d00e      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a16      	ldr	r2, [pc, #88]	; (80044c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d009      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a15      	ldr	r2, [pc, #84]	; (80044c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d004      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a13      	ldr	r2, [pc, #76]	; (80044c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d10c      	bne.n	8004498 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004484:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	4313      	orrs	r3, r2
 800448e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	40010000 	.word	0x40010000
 80044bc:	40000400 	.word	0x40000400
 80044c0:	40000800 	.word	0x40000800
 80044c4:	40000c00 	.word	0x40000c00
 80044c8:	40014000 	.word	0x40014000

080044cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d101      	bne.n	80044e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80044e4:	2302      	movs	r3, #2
 80044e6:	e03d      	b.n	8004564 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	4313      	orrs	r3, r2
 800450a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	4313      	orrs	r3, r2
 8004518:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4313      	orrs	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	4313      	orrs	r3, r2
 8004534:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	4313      	orrs	r3, r2
 8004542:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	4313      	orrs	r3, r2
 8004550:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3714      	adds	r7, #20
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e03f      	b.n	8004602 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d106      	bne.n	800459c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7fd fb4c 	bl	8001c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2224      	movs	r2, #36	; 0x24
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68da      	ldr	r2, [r3, #12]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 fea3 	bl	8005300 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	691a      	ldr	r2, [r3, #16]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695a      	ldr	r2, [r3, #20]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68da      	ldr	r2, [r3, #12]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2220      	movs	r2, #32
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2220      	movs	r2, #32
 80045fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800460a:	b480      	push	{r7}
 800460c:	b085      	sub	sp, #20
 800460e:	af00      	add	r7, sp, #0
 8004610:	60f8      	str	r0, [r7, #12]
 8004612:	60b9      	str	r1, [r7, #8]
 8004614:	4613      	mov	r3, r2
 8004616:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b20      	cmp	r3, #32
 8004622:	d130      	bne.n	8004686 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d002      	beq.n	8004630 <HAL_UART_Transmit_IT+0x26>
 800462a:	88fb      	ldrh	r3, [r7, #6]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e029      	b.n	8004688 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800463a:	2b01      	cmp	r3, #1
 800463c:	d101      	bne.n	8004642 <HAL_UART_Transmit_IT+0x38>
 800463e:	2302      	movs	r3, #2
 8004640:	e022      	b.n	8004688 <HAL_UART_Transmit_IT+0x7e>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	88fa      	ldrh	r2, [r7, #6]
 8004654:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	88fa      	ldrh	r2, [r7, #6]
 800465a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2221      	movs	r2, #33	; 0x21
 8004666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004680:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004682:	2300      	movs	r3, #0
 8004684:	e000      	b.n	8004688 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004686:	2302      	movs	r3, #2
  }
}
 8004688:	4618      	mov	r0, r3
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	4613      	mov	r3, r2
 80046a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b20      	cmp	r3, #32
 80046ac:	d11d      	bne.n	80046ea <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d002      	beq.n	80046ba <HAL_UART_Receive_DMA+0x26>
 80046b4:	88fb      	ldrh	r3, [r7, #6]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e016      	b.n	80046ec <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d101      	bne.n	80046cc <HAL_UART_Receive_DMA+0x38>
 80046c8:	2302      	movs	r3, #2
 80046ca:	e00f      	b.n	80046ec <HAL_UART_Receive_DMA+0x58>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80046da:	88fb      	ldrh	r3, [r7, #6]
 80046dc:	461a      	mov	r2, r3
 80046de:	68b9      	ldr	r1, [r7, #8]
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 fbad 	bl	8004e40 <UART_Start_Receive_DMA>
 80046e6:	4603      	mov	r3, r0
 80046e8:	e000      	b.n	80046ec <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80046ea:	2302      	movs	r3, #2
  }
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b0ba      	sub	sp, #232	; 0xe8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800471a:	2300      	movs	r3, #0
 800471c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004720:	2300      	movs	r3, #0
 8004722:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800472a:	f003 030f 	and.w	r3, r3, #15
 800472e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004732:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10f      	bne.n	800475a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800473a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800473e:	f003 0320 	and.w	r3, r3, #32
 8004742:	2b00      	cmp	r3, #0
 8004744:	d009      	beq.n	800475a <HAL_UART_IRQHandler+0x66>
 8004746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800474a:	f003 0320 	and.w	r3, r3, #32
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 fd19 	bl	800518a <UART_Receive_IT>
      return;
 8004758:	e256      	b.n	8004c08 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800475a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 80de 	beq.w	8004920 <HAL_UART_IRQHandler+0x22c>
 8004764:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b00      	cmp	r3, #0
 800476e:	d106      	bne.n	800477e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004774:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 80d1 	beq.w	8004920 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800477e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00b      	beq.n	80047a2 <HAL_UART_IRQHandler+0xae>
 800478a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800478e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004792:	2b00      	cmp	r3, #0
 8004794:	d005      	beq.n	80047a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479a:	f043 0201 	orr.w	r2, r3, #1
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047a6:	f003 0304 	and.w	r3, r3, #4
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00b      	beq.n	80047c6 <HAL_UART_IRQHandler+0xd2>
 80047ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d005      	beq.n	80047c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047be:	f043 0202 	orr.w	r2, r3, #2
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00b      	beq.n	80047ea <HAL_UART_IRQHandler+0xf6>
 80047d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d005      	beq.n	80047ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	f043 0204 	orr.w	r2, r3, #4
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80047ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ee:	f003 0308 	and.w	r3, r3, #8
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d011      	beq.n	800481a <HAL_UART_IRQHandler+0x126>
 80047f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d105      	bne.n	800480e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004802:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d005      	beq.n	800481a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	f043 0208 	orr.w	r2, r3, #8
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481e:	2b00      	cmp	r3, #0
 8004820:	f000 81ed 	beq.w	8004bfe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004828:	f003 0320 	and.w	r3, r3, #32
 800482c:	2b00      	cmp	r3, #0
 800482e:	d008      	beq.n	8004842 <HAL_UART_IRQHandler+0x14e>
 8004830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004834:	f003 0320 	and.w	r3, r3, #32
 8004838:	2b00      	cmp	r3, #0
 800483a:	d002      	beq.n	8004842 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 fca4 	bl	800518a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484c:	2b40      	cmp	r3, #64	; 0x40
 800484e:	bf0c      	ite	eq
 8004850:	2301      	moveq	r3, #1
 8004852:	2300      	movne	r3, #0
 8004854:	b2db      	uxtb	r3, r3
 8004856:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	f003 0308 	and.w	r3, r3, #8
 8004862:	2b00      	cmp	r3, #0
 8004864:	d103      	bne.n	800486e <HAL_UART_IRQHandler+0x17a>
 8004866:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800486a:	2b00      	cmp	r3, #0
 800486c:	d04f      	beq.n	800490e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 fbac 	bl	8004fcc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487e:	2b40      	cmp	r3, #64	; 0x40
 8004880:	d141      	bne.n	8004906 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	3314      	adds	r3, #20
 8004888:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004890:	e853 3f00 	ldrex	r3, [r3]
 8004894:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004898:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800489c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	3314      	adds	r3, #20
 80048aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80048ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80048b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80048ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80048be:	e841 2300 	strex	r3, r2, [r1]
 80048c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80048c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1d9      	bne.n	8004882 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d013      	beq.n	80048fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048da:	4a7d      	ldr	r2, [pc, #500]	; (8004ad0 <HAL_UART_IRQHandler+0x3dc>)
 80048dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7fd fe98 	bl	8002618 <HAL_DMA_Abort_IT>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d016      	beq.n	800491c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048f8:	4610      	mov	r0, r2
 80048fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048fc:	e00e      	b.n	800491c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f990 	bl	8004c24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004904:	e00a      	b.n	800491c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f98c 	bl	8004c24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800490c:	e006      	b.n	800491c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f988 	bl	8004c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800491a:	e170      	b.n	8004bfe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800491c:	bf00      	nop
    return;
 800491e:	e16e      	b.n	8004bfe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004924:	2b01      	cmp	r3, #1
 8004926:	f040 814a 	bne.w	8004bbe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800492a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800492e:	f003 0310 	and.w	r3, r3, #16
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 8143 	beq.w	8004bbe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800493c:	f003 0310 	and.w	r3, r3, #16
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 813c 	beq.w	8004bbe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004946:	2300      	movs	r3, #0
 8004948:	60bb      	str	r3, [r7, #8]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	60bb      	str	r3, [r7, #8]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	60bb      	str	r3, [r7, #8]
 800495a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004966:	2b40      	cmp	r3, #64	; 0x40
 8004968:	f040 80b4 	bne.w	8004ad4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004978:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 8140 	beq.w	8004c02 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004986:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800498a:	429a      	cmp	r2, r3
 800498c:	f080 8139 	bcs.w	8004c02 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004996:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049a2:	f000 8088 	beq.w	8004ab6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	330c      	adds	r3, #12
 80049ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049b4:	e853 3f00 	ldrex	r3, [r3]
 80049b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80049bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	330c      	adds	r3, #12
 80049ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80049d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80049de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80049e2:	e841 2300 	strex	r3, r2, [r1]
 80049e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80049ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1d9      	bne.n	80049a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	3314      	adds	r3, #20
 80049f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049fc:	e853 3f00 	ldrex	r3, [r3]
 8004a00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a04:	f023 0301 	bic.w	r3, r3, #1
 8004a08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	3314      	adds	r3, #20
 8004a12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a22:	e841 2300 	strex	r3, r2, [r1]
 8004a26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1e1      	bne.n	80049f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	3314      	adds	r3, #20
 8004a34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a38:	e853 3f00 	ldrex	r3, [r3]
 8004a3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	3314      	adds	r3, #20
 8004a4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a5a:	e841 2300 	strex	r3, r2, [r1]
 8004a5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1e3      	bne.n	8004a2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	330c      	adds	r3, #12
 8004a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a7e:	e853 3f00 	ldrex	r3, [r3]
 8004a82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a86:	f023 0310 	bic.w	r3, r3, #16
 8004a8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	330c      	adds	r3, #12
 8004a94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004a98:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004aa0:	e841 2300 	strex	r3, r2, [r1]
 8004aa4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1e3      	bne.n	8004a74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7fd fd41 	bl	8002538 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f8b6 	bl	8004c38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004acc:	e099      	b.n	8004c02 <HAL_UART_IRQHandler+0x50e>
 8004ace:	bf00      	nop
 8004ad0:	08005093 	.word	0x08005093
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f000 808b 	beq.w	8004c06 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004af0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 8086 	beq.w	8004c06 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	330c      	adds	r3, #12
 8004b00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b04:	e853 3f00 	ldrex	r3, [r3]
 8004b08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	330c      	adds	r3, #12
 8004b1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004b1e:	647a      	str	r2, [r7, #68]	; 0x44
 8004b20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b26:	e841 2300 	strex	r3, r2, [r1]
 8004b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1e3      	bne.n	8004afa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	3314      	adds	r3, #20
 8004b38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	e853 3f00 	ldrex	r3, [r3]
 8004b40:	623b      	str	r3, [r7, #32]
   return(result);
 8004b42:	6a3b      	ldr	r3, [r7, #32]
 8004b44:	f023 0301 	bic.w	r3, r3, #1
 8004b48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	3314      	adds	r3, #20
 8004b52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b56:	633a      	str	r2, [r7, #48]	; 0x30
 8004b58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b5e:	e841 2300 	strex	r3, r2, [r1]
 8004b62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1e3      	bne.n	8004b32 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	330c      	adds	r3, #12
 8004b7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	e853 3f00 	ldrex	r3, [r3]
 8004b86:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f023 0310 	bic.w	r3, r3, #16
 8004b8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	330c      	adds	r3, #12
 8004b98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004b9c:	61fa      	str	r2, [r7, #28]
 8004b9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba0:	69b9      	ldr	r1, [r7, #24]
 8004ba2:	69fa      	ldr	r2, [r7, #28]
 8004ba4:	e841 2300 	strex	r3, r2, [r1]
 8004ba8:	617b      	str	r3, [r7, #20]
   return(result);
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1e3      	bne.n	8004b78 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f83e 	bl	8004c38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004bbc:	e023      	b.n	8004c06 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d009      	beq.n	8004bde <HAL_UART_IRQHandler+0x4ea>
 8004bca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 fa6f 	bl	80050ba <UART_Transmit_IT>
    return;
 8004bdc:	e014      	b.n	8004c08 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00e      	beq.n	8004c08 <HAL_UART_IRQHandler+0x514>
 8004bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d008      	beq.n	8004c08 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 faaf 	bl	800515a <UART_EndTransmit_IT>
    return;
 8004bfc:	e004      	b.n	8004c08 <HAL_UART_IRQHandler+0x514>
    return;
 8004bfe:	bf00      	nop
 8004c00:	e002      	b.n	8004c08 <HAL_UART_IRQHandler+0x514>
      return;
 8004c02:	bf00      	nop
 8004c04:	e000      	b.n	8004c08 <HAL_UART_IRQHandler+0x514>
      return;
 8004c06:	bf00      	nop
  }
}
 8004c08:	37e8      	adds	r7, #232	; 0xe8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop

08004c10 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	460b      	mov	r3, r1
 8004c42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b09c      	sub	sp, #112	; 0x70
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d172      	bne.n	8004d52 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c6e:	2200      	movs	r2, #0
 8004c70:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	330c      	adds	r3, #12
 8004c78:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c7c:	e853 3f00 	ldrex	r3, [r3]
 8004c80:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c88:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	330c      	adds	r3, #12
 8004c90:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004c92:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c94:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c9a:	e841 2300 	strex	r3, r2, [r1]
 8004c9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1e5      	bne.n	8004c72 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	3314      	adds	r3, #20
 8004cac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb0:	e853 3f00 	ldrex	r3, [r3]
 8004cb4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cb8:	f023 0301 	bic.w	r3, r3, #1
 8004cbc:	667b      	str	r3, [r7, #100]	; 0x64
 8004cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	3314      	adds	r3, #20
 8004cc4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004cc6:	647a      	str	r2, [r7, #68]	; 0x44
 8004cc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ccc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cce:	e841 2300 	strex	r3, r2, [r1]
 8004cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1e5      	bne.n	8004ca6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	3314      	adds	r3, #20
 8004ce0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	e853 3f00 	ldrex	r3, [r3]
 8004ce8:	623b      	str	r3, [r7, #32]
   return(result);
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cf0:	663b      	str	r3, [r7, #96]	; 0x60
 8004cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	3314      	adds	r3, #20
 8004cf8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004cfa:	633a      	str	r2, [r7, #48]	; 0x30
 8004cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d02:	e841 2300 	strex	r3, r2, [r1]
 8004d06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1e5      	bne.n	8004cda <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d10:	2220      	movs	r2, #32
 8004d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d119      	bne.n	8004d52 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	330c      	adds	r3, #12
 8004d24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	e853 3f00 	ldrex	r3, [r3]
 8004d2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f023 0310 	bic.w	r3, r3, #16
 8004d34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	330c      	adds	r3, #12
 8004d3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d3e:	61fa      	str	r2, [r7, #28]
 8004d40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d42:	69b9      	ldr	r1, [r7, #24]
 8004d44:	69fa      	ldr	r2, [r7, #28]
 8004d46:	e841 2300 	strex	r3, r2, [r1]
 8004d4a:	617b      	str	r3, [r7, #20]
   return(result);
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1e5      	bne.n	8004d1e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d106      	bne.n	8004d68 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d5e:	4619      	mov	r1, r3
 8004d60:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004d62:	f7ff ff69 	bl	8004c38 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d66:	e002      	b.n	8004d6e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004d68:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004d6a:	f7fc fb17 	bl	800139c <HAL_UART_RxCpltCallback>
}
 8004d6e:	bf00      	nop
 8004d70:	3770      	adds	r7, #112	; 0x70
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b084      	sub	sp, #16
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d108      	bne.n	8004d9e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d90:	085b      	lsrs	r3, r3, #1
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	4619      	mov	r1, r3
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f7ff ff4e 	bl	8004c38 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d9c:	e002      	b.n	8004da4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f7ff ff36 	bl	8004c10 <HAL_UART_RxHalfCpltCallback>
}
 8004da4:	bf00      	nop
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004db4:	2300      	movs	r3, #0
 8004db6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc8:	2b80      	cmp	r3, #128	; 0x80
 8004dca:	bf0c      	ite	eq
 8004dcc:	2301      	moveq	r3, #1
 8004dce:	2300      	movne	r3, #0
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2b21      	cmp	r3, #33	; 0x21
 8004dde:	d108      	bne.n	8004df2 <UART_DMAError+0x46>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d005      	beq.n	8004df2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	2200      	movs	r2, #0
 8004dea:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004dec:	68b8      	ldr	r0, [r7, #8]
 8004dee:	f000 f8c5 	bl	8004f7c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfc:	2b40      	cmp	r3, #64	; 0x40
 8004dfe:	bf0c      	ite	eq
 8004e00:	2301      	moveq	r3, #1
 8004e02:	2300      	movne	r3, #0
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	2b22      	cmp	r3, #34	; 0x22
 8004e12:	d108      	bne.n	8004e26 <UART_DMAError+0x7a>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d005      	beq.n	8004e26 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004e20:	68b8      	ldr	r0, [r7, #8]
 8004e22:	f000 f8d3 	bl	8004fcc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	f043 0210 	orr.w	r2, r3, #16
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e32:	68b8      	ldr	r0, [r7, #8]
 8004e34:	f7ff fef6 	bl	8004c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e38:	bf00      	nop
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b098      	sub	sp, #96	; 0x60
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	88fa      	ldrh	r2, [r7, #6]
 8004e58:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2222      	movs	r2, #34	; 0x22
 8004e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6c:	4a40      	ldr	r2, [pc, #256]	; (8004f70 <UART_Start_Receive_DMA+0x130>)
 8004e6e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e74:	4a3f      	ldr	r2, [pc, #252]	; (8004f74 <UART_Start_Receive_DMA+0x134>)
 8004e76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7c:	4a3e      	ldr	r2, [pc, #248]	; (8004f78 <UART_Start_Receive_DMA+0x138>)
 8004e7e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e84:	2200      	movs	r2, #0
 8004e86:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004e88:	f107 0308 	add.w	r3, r7, #8
 8004e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	3304      	adds	r3, #4
 8004e98:	4619      	mov	r1, r3
 8004e9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	88fb      	ldrh	r3, [r7, #6]
 8004ea0:	f7fd faf2 	bl	8002488 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	613b      	str	r3, [r7, #16]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	613b      	str	r3, [r7, #16]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	613b      	str	r3, [r7, #16]
 8004eb8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d019      	beq.n	8004efe <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	330c      	adds	r3, #12
 8004ed0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ed4:	e853 3f00 	ldrex	r3, [r3]
 8004ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ee0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	330c      	adds	r3, #12
 8004ee8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004eea:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004eec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eee:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004ef0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ef2:	e841 2300 	strex	r3, r2, [r1]
 8004ef6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004ef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1e5      	bne.n	8004eca <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	3314      	adds	r3, #20
 8004f04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f08:	e853 3f00 	ldrex	r3, [r3]
 8004f0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f10:	f043 0301 	orr.w	r3, r3, #1
 8004f14:	657b      	str	r3, [r7, #84]	; 0x54
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	3314      	adds	r3, #20
 8004f1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004f1e:	63ba      	str	r2, [r7, #56]	; 0x38
 8004f20:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f22:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f26:	e841 2300 	strex	r3, r2, [r1]
 8004f2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1e5      	bne.n	8004efe <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	3314      	adds	r3, #20
 8004f38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	e853 3f00 	ldrex	r3, [r3]
 8004f40:	617b      	str	r3, [r7, #20]
   return(result);
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f48:	653b      	str	r3, [r7, #80]	; 0x50
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	3314      	adds	r3, #20
 8004f50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004f52:	627a      	str	r2, [r7, #36]	; 0x24
 8004f54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f56:	6a39      	ldr	r1, [r7, #32]
 8004f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f5a:	e841 2300 	strex	r3, r2, [r1]
 8004f5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1e5      	bne.n	8004f32 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3760      	adds	r7, #96	; 0x60
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	08004c51 	.word	0x08004c51
 8004f74:	08004d77 	.word	0x08004d77
 8004f78:	08004dad 	.word	0x08004dad

08004f7c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b089      	sub	sp, #36	; 0x24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	330c      	adds	r3, #12
 8004f8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	e853 3f00 	ldrex	r3, [r3]
 8004f92:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004f9a:	61fb      	str	r3, [r7, #28]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	330c      	adds	r3, #12
 8004fa2:	69fa      	ldr	r2, [r7, #28]
 8004fa4:	61ba      	str	r2, [r7, #24]
 8004fa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa8:	6979      	ldr	r1, [r7, #20]
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	e841 2300 	strex	r3, r2, [r1]
 8004fb0:	613b      	str	r3, [r7, #16]
   return(result);
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1e5      	bne.n	8004f84 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004fc0:	bf00      	nop
 8004fc2:	3724      	adds	r7, #36	; 0x24
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b095      	sub	sp, #84	; 0x54
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	330c      	adds	r3, #12
 8004fda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fde:	e853 3f00 	ldrex	r3, [r3]
 8004fe2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	330c      	adds	r3, #12
 8004ff2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ff4:	643a      	str	r2, [r7, #64]	; 0x40
 8004ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ffa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ffc:	e841 2300 	strex	r3, r2, [r1]
 8005000:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1e5      	bne.n	8004fd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	3314      	adds	r3, #20
 800500e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005010:	6a3b      	ldr	r3, [r7, #32]
 8005012:	e853 3f00 	ldrex	r3, [r3]
 8005016:	61fb      	str	r3, [r7, #28]
   return(result);
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	f023 0301 	bic.w	r3, r3, #1
 800501e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	3314      	adds	r3, #20
 8005026:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005028:	62fa      	str	r2, [r7, #44]	; 0x2c
 800502a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800502e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005030:	e841 2300 	strex	r3, r2, [r1]
 8005034:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1e5      	bne.n	8005008 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005040:	2b01      	cmp	r3, #1
 8005042:	d119      	bne.n	8005078 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	330c      	adds	r3, #12
 800504a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	e853 3f00 	ldrex	r3, [r3]
 8005052:	60bb      	str	r3, [r7, #8]
   return(result);
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	f023 0310 	bic.w	r3, r3, #16
 800505a:	647b      	str	r3, [r7, #68]	; 0x44
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	330c      	adds	r3, #12
 8005062:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005064:	61ba      	str	r2, [r7, #24]
 8005066:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005068:	6979      	ldr	r1, [r7, #20]
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	e841 2300 	strex	r3, r2, [r1]
 8005070:	613b      	str	r3, [r7, #16]
   return(result);
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1e5      	bne.n	8005044 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2220      	movs	r2, #32
 800507c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005086:	bf00      	nop
 8005088:	3754      	adds	r7, #84	; 0x54
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b084      	sub	sp, #16
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f7ff fdb9 	bl	8004c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050b2:	bf00      	nop
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b085      	sub	sp, #20
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	2b21      	cmp	r3, #33	; 0x21
 80050cc:	d13e      	bne.n	800514c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050d6:	d114      	bne.n	8005102 <UART_Transmit_IT+0x48>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d110      	bne.n	8005102 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	881b      	ldrh	r3, [r3, #0]
 80050ea:	461a      	mov	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	1c9a      	adds	r2, r3, #2
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	621a      	str	r2, [r3, #32]
 8005100:	e008      	b.n	8005114 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	1c59      	adds	r1, r3, #1
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	6211      	str	r1, [r2, #32]
 800510c:	781a      	ldrb	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005118:	b29b      	uxth	r3, r3
 800511a:	3b01      	subs	r3, #1
 800511c:	b29b      	uxth	r3, r3
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	4619      	mov	r1, r3
 8005122:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10f      	bne.n	8005148 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68da      	ldr	r2, [r3, #12]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005136:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68da      	ldr	r2, [r3, #12]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005146:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005148:	2300      	movs	r3, #0
 800514a:	e000      	b.n	800514e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800514c:	2302      	movs	r3, #2
  }
}
 800514e:	4618      	mov	r0, r3
 8005150:	3714      	adds	r7, #20
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b082      	sub	sp, #8
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68da      	ldr	r2, [r3, #12]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005170:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2220      	movs	r2, #32
 8005176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7fc f922 	bl	80013c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b08c      	sub	sp, #48	; 0x30
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b22      	cmp	r3, #34	; 0x22
 800519c:	f040 80ab 	bne.w	80052f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051a8:	d117      	bne.n	80051da <UART_Receive_IT+0x50>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d113      	bne.n	80051da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80051b2:	2300      	movs	r3, #0
 80051b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d2:	1c9a      	adds	r2, r3, #2
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	629a      	str	r2, [r3, #40]	; 0x28
 80051d8:	e026      	b.n	8005228 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80051e0:	2300      	movs	r3, #0
 80051e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ec:	d007      	beq.n	80051fe <UART_Receive_IT+0x74>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10a      	bne.n	800520c <UART_Receive_IT+0x82>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d106      	bne.n	800520c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	b2da      	uxtb	r2, r3
 8005206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005208:	701a      	strb	r2, [r3, #0]
 800520a:	e008      	b.n	800521e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	b2db      	uxtb	r3, r3
 8005214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005218:	b2da      	uxtb	r2, r3
 800521a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005222:	1c5a      	adds	r2, r3, #1
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800522c:	b29b      	uxth	r3, r3
 800522e:	3b01      	subs	r3, #1
 8005230:	b29b      	uxth	r3, r3
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	4619      	mov	r1, r3
 8005236:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005238:	2b00      	cmp	r3, #0
 800523a:	d15a      	bne.n	80052f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68da      	ldr	r2, [r3, #12]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0220 	bic.w	r2, r2, #32
 800524a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68da      	ldr	r2, [r3, #12]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800525a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	695a      	ldr	r2, [r3, #20]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f022 0201 	bic.w	r2, r2, #1
 800526a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2220      	movs	r2, #32
 8005270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005278:	2b01      	cmp	r3, #1
 800527a:	d135      	bne.n	80052e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	330c      	adds	r3, #12
 8005288:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	e853 3f00 	ldrex	r3, [r3]
 8005290:	613b      	str	r3, [r7, #16]
   return(result);
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	f023 0310 	bic.w	r3, r3, #16
 8005298:	627b      	str	r3, [r7, #36]	; 0x24
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	330c      	adds	r3, #12
 80052a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052a2:	623a      	str	r2, [r7, #32]
 80052a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a6:	69f9      	ldr	r1, [r7, #28]
 80052a8:	6a3a      	ldr	r2, [r7, #32]
 80052aa:	e841 2300 	strex	r3, r2, [r1]
 80052ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1e5      	bne.n	8005282 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0310 	and.w	r3, r3, #16
 80052c0:	2b10      	cmp	r3, #16
 80052c2:	d10a      	bne.n	80052da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052c4:	2300      	movs	r3, #0
 80052c6:	60fb      	str	r3, [r7, #12]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	60fb      	str	r3, [r7, #12]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	60fb      	str	r3, [r7, #12]
 80052d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052de:	4619      	mov	r1, r3
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f7ff fca9 	bl	8004c38 <HAL_UARTEx_RxEventCallback>
 80052e6:	e002      	b.n	80052ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f7fc f857 	bl	800139c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80052ee:	2300      	movs	r3, #0
 80052f0:	e002      	b.n	80052f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80052f2:	2300      	movs	r3, #0
 80052f4:	e000      	b.n	80052f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80052f6:	2302      	movs	r3, #2
  }
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3730      	adds	r7, #48	; 0x30
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005304:	b0c0      	sub	sp, #256	; 0x100
 8005306:	af00      	add	r7, sp, #0
 8005308:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800530c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800531c:	68d9      	ldr	r1, [r3, #12]
 800531e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	ea40 0301 	orr.w	r3, r0, r1
 8005328:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800532a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800532e:	689a      	ldr	r2, [r3, #8]
 8005330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	431a      	orrs	r2, r3
 8005338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	431a      	orrs	r2, r3
 8005340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	4313      	orrs	r3, r2
 8005348:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800534c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005358:	f021 010c 	bic.w	r1, r1, #12
 800535c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005366:	430b      	orrs	r3, r1
 8005368:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800536a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800537a:	6999      	ldr	r1, [r3, #24]
 800537c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	ea40 0301 	orr.w	r3, r0, r1
 8005386:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	4b8f      	ldr	r3, [pc, #572]	; (80055cc <UART_SetConfig+0x2cc>)
 8005390:	429a      	cmp	r2, r3
 8005392:	d005      	beq.n	80053a0 <UART_SetConfig+0xa0>
 8005394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	4b8d      	ldr	r3, [pc, #564]	; (80055d0 <UART_SetConfig+0x2d0>)
 800539c:	429a      	cmp	r2, r3
 800539e:	d104      	bne.n	80053aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053a0:	f7fe fa00 	bl	80037a4 <HAL_RCC_GetPCLK2Freq>
 80053a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80053a8:	e003      	b.n	80053b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053aa:	f7fe f9e7 	bl	800377c <HAL_RCC_GetPCLK1Freq>
 80053ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b6:	69db      	ldr	r3, [r3, #28]
 80053b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053bc:	f040 810c 	bne.w	80055d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053c4:	2200      	movs	r2, #0
 80053c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80053ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80053ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80053d2:	4622      	mov	r2, r4
 80053d4:	462b      	mov	r3, r5
 80053d6:	1891      	adds	r1, r2, r2
 80053d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80053da:	415b      	adcs	r3, r3
 80053dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80053e2:	4621      	mov	r1, r4
 80053e4:	eb12 0801 	adds.w	r8, r2, r1
 80053e8:	4629      	mov	r1, r5
 80053ea:	eb43 0901 	adc.w	r9, r3, r1
 80053ee:	f04f 0200 	mov.w	r2, #0
 80053f2:	f04f 0300 	mov.w	r3, #0
 80053f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005402:	4690      	mov	r8, r2
 8005404:	4699      	mov	r9, r3
 8005406:	4623      	mov	r3, r4
 8005408:	eb18 0303 	adds.w	r3, r8, r3
 800540c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005410:	462b      	mov	r3, r5
 8005412:	eb49 0303 	adc.w	r3, r9, r3
 8005416:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800541a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005426:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800542a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800542e:	460b      	mov	r3, r1
 8005430:	18db      	adds	r3, r3, r3
 8005432:	653b      	str	r3, [r7, #80]	; 0x50
 8005434:	4613      	mov	r3, r2
 8005436:	eb42 0303 	adc.w	r3, r2, r3
 800543a:	657b      	str	r3, [r7, #84]	; 0x54
 800543c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005440:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005444:	f7fb fbd8 	bl	8000bf8 <__aeabi_uldivmod>
 8005448:	4602      	mov	r2, r0
 800544a:	460b      	mov	r3, r1
 800544c:	4b61      	ldr	r3, [pc, #388]	; (80055d4 <UART_SetConfig+0x2d4>)
 800544e:	fba3 2302 	umull	r2, r3, r3, r2
 8005452:	095b      	lsrs	r3, r3, #5
 8005454:	011c      	lsls	r4, r3, #4
 8005456:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800545a:	2200      	movs	r2, #0
 800545c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005460:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005464:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005468:	4642      	mov	r2, r8
 800546a:	464b      	mov	r3, r9
 800546c:	1891      	adds	r1, r2, r2
 800546e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005470:	415b      	adcs	r3, r3
 8005472:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005474:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005478:	4641      	mov	r1, r8
 800547a:	eb12 0a01 	adds.w	sl, r2, r1
 800547e:	4649      	mov	r1, r9
 8005480:	eb43 0b01 	adc.w	fp, r3, r1
 8005484:	f04f 0200 	mov.w	r2, #0
 8005488:	f04f 0300 	mov.w	r3, #0
 800548c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005490:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005494:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005498:	4692      	mov	sl, r2
 800549a:	469b      	mov	fp, r3
 800549c:	4643      	mov	r3, r8
 800549e:	eb1a 0303 	adds.w	r3, sl, r3
 80054a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054a6:	464b      	mov	r3, r9
 80054a8:	eb4b 0303 	adc.w	r3, fp, r3
 80054ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80054b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80054c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80054c4:	460b      	mov	r3, r1
 80054c6:	18db      	adds	r3, r3, r3
 80054c8:	643b      	str	r3, [r7, #64]	; 0x40
 80054ca:	4613      	mov	r3, r2
 80054cc:	eb42 0303 	adc.w	r3, r2, r3
 80054d0:	647b      	str	r3, [r7, #68]	; 0x44
 80054d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80054da:	f7fb fb8d 	bl	8000bf8 <__aeabi_uldivmod>
 80054de:	4602      	mov	r2, r0
 80054e0:	460b      	mov	r3, r1
 80054e2:	4611      	mov	r1, r2
 80054e4:	4b3b      	ldr	r3, [pc, #236]	; (80055d4 <UART_SetConfig+0x2d4>)
 80054e6:	fba3 2301 	umull	r2, r3, r3, r1
 80054ea:	095b      	lsrs	r3, r3, #5
 80054ec:	2264      	movs	r2, #100	; 0x64
 80054ee:	fb02 f303 	mul.w	r3, r2, r3
 80054f2:	1acb      	subs	r3, r1, r3
 80054f4:	00db      	lsls	r3, r3, #3
 80054f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80054fa:	4b36      	ldr	r3, [pc, #216]	; (80055d4 <UART_SetConfig+0x2d4>)
 80054fc:	fba3 2302 	umull	r2, r3, r3, r2
 8005500:	095b      	lsrs	r3, r3, #5
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005508:	441c      	add	r4, r3
 800550a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800550e:	2200      	movs	r2, #0
 8005510:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005514:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005518:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800551c:	4642      	mov	r2, r8
 800551e:	464b      	mov	r3, r9
 8005520:	1891      	adds	r1, r2, r2
 8005522:	63b9      	str	r1, [r7, #56]	; 0x38
 8005524:	415b      	adcs	r3, r3
 8005526:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005528:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800552c:	4641      	mov	r1, r8
 800552e:	1851      	adds	r1, r2, r1
 8005530:	6339      	str	r1, [r7, #48]	; 0x30
 8005532:	4649      	mov	r1, r9
 8005534:	414b      	adcs	r3, r1
 8005536:	637b      	str	r3, [r7, #52]	; 0x34
 8005538:	f04f 0200 	mov.w	r2, #0
 800553c:	f04f 0300 	mov.w	r3, #0
 8005540:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005544:	4659      	mov	r1, fp
 8005546:	00cb      	lsls	r3, r1, #3
 8005548:	4651      	mov	r1, sl
 800554a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800554e:	4651      	mov	r1, sl
 8005550:	00ca      	lsls	r2, r1, #3
 8005552:	4610      	mov	r0, r2
 8005554:	4619      	mov	r1, r3
 8005556:	4603      	mov	r3, r0
 8005558:	4642      	mov	r2, r8
 800555a:	189b      	adds	r3, r3, r2
 800555c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005560:	464b      	mov	r3, r9
 8005562:	460a      	mov	r2, r1
 8005564:	eb42 0303 	adc.w	r3, r2, r3
 8005568:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800556c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005578:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800557c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005580:	460b      	mov	r3, r1
 8005582:	18db      	adds	r3, r3, r3
 8005584:	62bb      	str	r3, [r7, #40]	; 0x28
 8005586:	4613      	mov	r3, r2
 8005588:	eb42 0303 	adc.w	r3, r2, r3
 800558c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800558e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005592:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005596:	f7fb fb2f 	bl	8000bf8 <__aeabi_uldivmod>
 800559a:	4602      	mov	r2, r0
 800559c:	460b      	mov	r3, r1
 800559e:	4b0d      	ldr	r3, [pc, #52]	; (80055d4 <UART_SetConfig+0x2d4>)
 80055a0:	fba3 1302 	umull	r1, r3, r3, r2
 80055a4:	095b      	lsrs	r3, r3, #5
 80055a6:	2164      	movs	r1, #100	; 0x64
 80055a8:	fb01 f303 	mul.w	r3, r1, r3
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	3332      	adds	r3, #50	; 0x32
 80055b2:	4a08      	ldr	r2, [pc, #32]	; (80055d4 <UART_SetConfig+0x2d4>)
 80055b4:	fba2 2303 	umull	r2, r3, r2, r3
 80055b8:	095b      	lsrs	r3, r3, #5
 80055ba:	f003 0207 	and.w	r2, r3, #7
 80055be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4422      	add	r2, r4
 80055c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055c8:	e106      	b.n	80057d8 <UART_SetConfig+0x4d8>
 80055ca:	bf00      	nop
 80055cc:	40011000 	.word	0x40011000
 80055d0:	40011400 	.word	0x40011400
 80055d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055dc:	2200      	movs	r2, #0
 80055de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80055e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80055e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80055ea:	4642      	mov	r2, r8
 80055ec:	464b      	mov	r3, r9
 80055ee:	1891      	adds	r1, r2, r2
 80055f0:	6239      	str	r1, [r7, #32]
 80055f2:	415b      	adcs	r3, r3
 80055f4:	627b      	str	r3, [r7, #36]	; 0x24
 80055f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055fa:	4641      	mov	r1, r8
 80055fc:	1854      	adds	r4, r2, r1
 80055fe:	4649      	mov	r1, r9
 8005600:	eb43 0501 	adc.w	r5, r3, r1
 8005604:	f04f 0200 	mov.w	r2, #0
 8005608:	f04f 0300 	mov.w	r3, #0
 800560c:	00eb      	lsls	r3, r5, #3
 800560e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005612:	00e2      	lsls	r2, r4, #3
 8005614:	4614      	mov	r4, r2
 8005616:	461d      	mov	r5, r3
 8005618:	4643      	mov	r3, r8
 800561a:	18e3      	adds	r3, r4, r3
 800561c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005620:	464b      	mov	r3, r9
 8005622:	eb45 0303 	adc.w	r3, r5, r3
 8005626:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800562a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005636:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800563a:	f04f 0200 	mov.w	r2, #0
 800563e:	f04f 0300 	mov.w	r3, #0
 8005642:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005646:	4629      	mov	r1, r5
 8005648:	008b      	lsls	r3, r1, #2
 800564a:	4621      	mov	r1, r4
 800564c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005650:	4621      	mov	r1, r4
 8005652:	008a      	lsls	r2, r1, #2
 8005654:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005658:	f7fb face 	bl	8000bf8 <__aeabi_uldivmod>
 800565c:	4602      	mov	r2, r0
 800565e:	460b      	mov	r3, r1
 8005660:	4b60      	ldr	r3, [pc, #384]	; (80057e4 <UART_SetConfig+0x4e4>)
 8005662:	fba3 2302 	umull	r2, r3, r3, r2
 8005666:	095b      	lsrs	r3, r3, #5
 8005668:	011c      	lsls	r4, r3, #4
 800566a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800566e:	2200      	movs	r2, #0
 8005670:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005674:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005678:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800567c:	4642      	mov	r2, r8
 800567e:	464b      	mov	r3, r9
 8005680:	1891      	adds	r1, r2, r2
 8005682:	61b9      	str	r1, [r7, #24]
 8005684:	415b      	adcs	r3, r3
 8005686:	61fb      	str	r3, [r7, #28]
 8005688:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800568c:	4641      	mov	r1, r8
 800568e:	1851      	adds	r1, r2, r1
 8005690:	6139      	str	r1, [r7, #16]
 8005692:	4649      	mov	r1, r9
 8005694:	414b      	adcs	r3, r1
 8005696:	617b      	str	r3, [r7, #20]
 8005698:	f04f 0200 	mov.w	r2, #0
 800569c:	f04f 0300 	mov.w	r3, #0
 80056a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056a4:	4659      	mov	r1, fp
 80056a6:	00cb      	lsls	r3, r1, #3
 80056a8:	4651      	mov	r1, sl
 80056aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056ae:	4651      	mov	r1, sl
 80056b0:	00ca      	lsls	r2, r1, #3
 80056b2:	4610      	mov	r0, r2
 80056b4:	4619      	mov	r1, r3
 80056b6:	4603      	mov	r3, r0
 80056b8:	4642      	mov	r2, r8
 80056ba:	189b      	adds	r3, r3, r2
 80056bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056c0:	464b      	mov	r3, r9
 80056c2:	460a      	mov	r2, r1
 80056c4:	eb42 0303 	adc.w	r3, r2, r3
 80056c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80056d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80056d8:	f04f 0200 	mov.w	r2, #0
 80056dc:	f04f 0300 	mov.w	r3, #0
 80056e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80056e4:	4649      	mov	r1, r9
 80056e6:	008b      	lsls	r3, r1, #2
 80056e8:	4641      	mov	r1, r8
 80056ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056ee:	4641      	mov	r1, r8
 80056f0:	008a      	lsls	r2, r1, #2
 80056f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80056f6:	f7fb fa7f 	bl	8000bf8 <__aeabi_uldivmod>
 80056fa:	4602      	mov	r2, r0
 80056fc:	460b      	mov	r3, r1
 80056fe:	4611      	mov	r1, r2
 8005700:	4b38      	ldr	r3, [pc, #224]	; (80057e4 <UART_SetConfig+0x4e4>)
 8005702:	fba3 2301 	umull	r2, r3, r3, r1
 8005706:	095b      	lsrs	r3, r3, #5
 8005708:	2264      	movs	r2, #100	; 0x64
 800570a:	fb02 f303 	mul.w	r3, r2, r3
 800570e:	1acb      	subs	r3, r1, r3
 8005710:	011b      	lsls	r3, r3, #4
 8005712:	3332      	adds	r3, #50	; 0x32
 8005714:	4a33      	ldr	r2, [pc, #204]	; (80057e4 <UART_SetConfig+0x4e4>)
 8005716:	fba2 2303 	umull	r2, r3, r2, r3
 800571a:	095b      	lsrs	r3, r3, #5
 800571c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005720:	441c      	add	r4, r3
 8005722:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005726:	2200      	movs	r2, #0
 8005728:	673b      	str	r3, [r7, #112]	; 0x70
 800572a:	677a      	str	r2, [r7, #116]	; 0x74
 800572c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005730:	4642      	mov	r2, r8
 8005732:	464b      	mov	r3, r9
 8005734:	1891      	adds	r1, r2, r2
 8005736:	60b9      	str	r1, [r7, #8]
 8005738:	415b      	adcs	r3, r3
 800573a:	60fb      	str	r3, [r7, #12]
 800573c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005740:	4641      	mov	r1, r8
 8005742:	1851      	adds	r1, r2, r1
 8005744:	6039      	str	r1, [r7, #0]
 8005746:	4649      	mov	r1, r9
 8005748:	414b      	adcs	r3, r1
 800574a:	607b      	str	r3, [r7, #4]
 800574c:	f04f 0200 	mov.w	r2, #0
 8005750:	f04f 0300 	mov.w	r3, #0
 8005754:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005758:	4659      	mov	r1, fp
 800575a:	00cb      	lsls	r3, r1, #3
 800575c:	4651      	mov	r1, sl
 800575e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005762:	4651      	mov	r1, sl
 8005764:	00ca      	lsls	r2, r1, #3
 8005766:	4610      	mov	r0, r2
 8005768:	4619      	mov	r1, r3
 800576a:	4603      	mov	r3, r0
 800576c:	4642      	mov	r2, r8
 800576e:	189b      	adds	r3, r3, r2
 8005770:	66bb      	str	r3, [r7, #104]	; 0x68
 8005772:	464b      	mov	r3, r9
 8005774:	460a      	mov	r2, r1
 8005776:	eb42 0303 	adc.w	r3, r2, r3
 800577a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800577c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	663b      	str	r3, [r7, #96]	; 0x60
 8005786:	667a      	str	r2, [r7, #100]	; 0x64
 8005788:	f04f 0200 	mov.w	r2, #0
 800578c:	f04f 0300 	mov.w	r3, #0
 8005790:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005794:	4649      	mov	r1, r9
 8005796:	008b      	lsls	r3, r1, #2
 8005798:	4641      	mov	r1, r8
 800579a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800579e:	4641      	mov	r1, r8
 80057a0:	008a      	lsls	r2, r1, #2
 80057a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80057a6:	f7fb fa27 	bl	8000bf8 <__aeabi_uldivmod>
 80057aa:	4602      	mov	r2, r0
 80057ac:	460b      	mov	r3, r1
 80057ae:	4b0d      	ldr	r3, [pc, #52]	; (80057e4 <UART_SetConfig+0x4e4>)
 80057b0:	fba3 1302 	umull	r1, r3, r3, r2
 80057b4:	095b      	lsrs	r3, r3, #5
 80057b6:	2164      	movs	r1, #100	; 0x64
 80057b8:	fb01 f303 	mul.w	r3, r1, r3
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	011b      	lsls	r3, r3, #4
 80057c0:	3332      	adds	r3, #50	; 0x32
 80057c2:	4a08      	ldr	r2, [pc, #32]	; (80057e4 <UART_SetConfig+0x4e4>)
 80057c4:	fba2 2303 	umull	r2, r3, r2, r3
 80057c8:	095b      	lsrs	r3, r3, #5
 80057ca:	f003 020f 	and.w	r2, r3, #15
 80057ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4422      	add	r2, r4
 80057d6:	609a      	str	r2, [r3, #8]
}
 80057d8:	bf00      	nop
 80057da:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80057de:	46bd      	mov	sp, r7
 80057e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057e4:	51eb851f 	.word	0x51eb851f

080057e8 <__cvt>:
 80057e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057ec:	ec55 4b10 	vmov	r4, r5, d0
 80057f0:	2d00      	cmp	r5, #0
 80057f2:	460e      	mov	r6, r1
 80057f4:	4619      	mov	r1, r3
 80057f6:	462b      	mov	r3, r5
 80057f8:	bfbb      	ittet	lt
 80057fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80057fe:	461d      	movlt	r5, r3
 8005800:	2300      	movge	r3, #0
 8005802:	232d      	movlt	r3, #45	; 0x2d
 8005804:	700b      	strb	r3, [r1, #0]
 8005806:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005808:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800580c:	4691      	mov	r9, r2
 800580e:	f023 0820 	bic.w	r8, r3, #32
 8005812:	bfbc      	itt	lt
 8005814:	4622      	movlt	r2, r4
 8005816:	4614      	movlt	r4, r2
 8005818:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800581c:	d005      	beq.n	800582a <__cvt+0x42>
 800581e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005822:	d100      	bne.n	8005826 <__cvt+0x3e>
 8005824:	3601      	adds	r6, #1
 8005826:	2102      	movs	r1, #2
 8005828:	e000      	b.n	800582c <__cvt+0x44>
 800582a:	2103      	movs	r1, #3
 800582c:	ab03      	add	r3, sp, #12
 800582e:	9301      	str	r3, [sp, #4]
 8005830:	ab02      	add	r3, sp, #8
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	ec45 4b10 	vmov	d0, r4, r5
 8005838:	4653      	mov	r3, sl
 800583a:	4632      	mov	r2, r6
 800583c:	f000 fe68 	bl	8006510 <_dtoa_r>
 8005840:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005844:	4607      	mov	r7, r0
 8005846:	d102      	bne.n	800584e <__cvt+0x66>
 8005848:	f019 0f01 	tst.w	r9, #1
 800584c:	d022      	beq.n	8005894 <__cvt+0xac>
 800584e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005852:	eb07 0906 	add.w	r9, r7, r6
 8005856:	d110      	bne.n	800587a <__cvt+0x92>
 8005858:	783b      	ldrb	r3, [r7, #0]
 800585a:	2b30      	cmp	r3, #48	; 0x30
 800585c:	d10a      	bne.n	8005874 <__cvt+0x8c>
 800585e:	2200      	movs	r2, #0
 8005860:	2300      	movs	r3, #0
 8005862:	4620      	mov	r0, r4
 8005864:	4629      	mov	r1, r5
 8005866:	f7fb f937 	bl	8000ad8 <__aeabi_dcmpeq>
 800586a:	b918      	cbnz	r0, 8005874 <__cvt+0x8c>
 800586c:	f1c6 0601 	rsb	r6, r6, #1
 8005870:	f8ca 6000 	str.w	r6, [sl]
 8005874:	f8da 3000 	ldr.w	r3, [sl]
 8005878:	4499      	add	r9, r3
 800587a:	2200      	movs	r2, #0
 800587c:	2300      	movs	r3, #0
 800587e:	4620      	mov	r0, r4
 8005880:	4629      	mov	r1, r5
 8005882:	f7fb f929 	bl	8000ad8 <__aeabi_dcmpeq>
 8005886:	b108      	cbz	r0, 800588c <__cvt+0xa4>
 8005888:	f8cd 900c 	str.w	r9, [sp, #12]
 800588c:	2230      	movs	r2, #48	; 0x30
 800588e:	9b03      	ldr	r3, [sp, #12]
 8005890:	454b      	cmp	r3, r9
 8005892:	d307      	bcc.n	80058a4 <__cvt+0xbc>
 8005894:	9b03      	ldr	r3, [sp, #12]
 8005896:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005898:	1bdb      	subs	r3, r3, r7
 800589a:	4638      	mov	r0, r7
 800589c:	6013      	str	r3, [r2, #0]
 800589e:	b004      	add	sp, #16
 80058a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058a4:	1c59      	adds	r1, r3, #1
 80058a6:	9103      	str	r1, [sp, #12]
 80058a8:	701a      	strb	r2, [r3, #0]
 80058aa:	e7f0      	b.n	800588e <__cvt+0xa6>

080058ac <__exponent>:
 80058ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058ae:	4603      	mov	r3, r0
 80058b0:	2900      	cmp	r1, #0
 80058b2:	bfb8      	it	lt
 80058b4:	4249      	neglt	r1, r1
 80058b6:	f803 2b02 	strb.w	r2, [r3], #2
 80058ba:	bfb4      	ite	lt
 80058bc:	222d      	movlt	r2, #45	; 0x2d
 80058be:	222b      	movge	r2, #43	; 0x2b
 80058c0:	2909      	cmp	r1, #9
 80058c2:	7042      	strb	r2, [r0, #1]
 80058c4:	dd2a      	ble.n	800591c <__exponent+0x70>
 80058c6:	f10d 0207 	add.w	r2, sp, #7
 80058ca:	4617      	mov	r7, r2
 80058cc:	260a      	movs	r6, #10
 80058ce:	4694      	mov	ip, r2
 80058d0:	fb91 f5f6 	sdiv	r5, r1, r6
 80058d4:	fb06 1415 	mls	r4, r6, r5, r1
 80058d8:	3430      	adds	r4, #48	; 0x30
 80058da:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80058de:	460c      	mov	r4, r1
 80058e0:	2c63      	cmp	r4, #99	; 0x63
 80058e2:	f102 32ff 	add.w	r2, r2, #4294967295
 80058e6:	4629      	mov	r1, r5
 80058e8:	dcf1      	bgt.n	80058ce <__exponent+0x22>
 80058ea:	3130      	adds	r1, #48	; 0x30
 80058ec:	f1ac 0402 	sub.w	r4, ip, #2
 80058f0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80058f4:	1c41      	adds	r1, r0, #1
 80058f6:	4622      	mov	r2, r4
 80058f8:	42ba      	cmp	r2, r7
 80058fa:	d30a      	bcc.n	8005912 <__exponent+0x66>
 80058fc:	f10d 0209 	add.w	r2, sp, #9
 8005900:	eba2 020c 	sub.w	r2, r2, ip
 8005904:	42bc      	cmp	r4, r7
 8005906:	bf88      	it	hi
 8005908:	2200      	movhi	r2, #0
 800590a:	4413      	add	r3, r2
 800590c:	1a18      	subs	r0, r3, r0
 800590e:	b003      	add	sp, #12
 8005910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005912:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005916:	f801 5f01 	strb.w	r5, [r1, #1]!
 800591a:	e7ed      	b.n	80058f8 <__exponent+0x4c>
 800591c:	2330      	movs	r3, #48	; 0x30
 800591e:	3130      	adds	r1, #48	; 0x30
 8005920:	7083      	strb	r3, [r0, #2]
 8005922:	70c1      	strb	r1, [r0, #3]
 8005924:	1d03      	adds	r3, r0, #4
 8005926:	e7f1      	b.n	800590c <__exponent+0x60>

08005928 <_printf_float>:
 8005928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800592c:	ed2d 8b02 	vpush	{d8}
 8005930:	b08d      	sub	sp, #52	; 0x34
 8005932:	460c      	mov	r4, r1
 8005934:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005938:	4616      	mov	r6, r2
 800593a:	461f      	mov	r7, r3
 800593c:	4605      	mov	r5, r0
 800593e:	f000 fce7 	bl	8006310 <_localeconv_r>
 8005942:	f8d0 a000 	ldr.w	sl, [r0]
 8005946:	4650      	mov	r0, sl
 8005948:	f7fa fc9a 	bl	8000280 <strlen>
 800594c:	2300      	movs	r3, #0
 800594e:	930a      	str	r3, [sp, #40]	; 0x28
 8005950:	6823      	ldr	r3, [r4, #0]
 8005952:	9305      	str	r3, [sp, #20]
 8005954:	f8d8 3000 	ldr.w	r3, [r8]
 8005958:	f894 b018 	ldrb.w	fp, [r4, #24]
 800595c:	3307      	adds	r3, #7
 800595e:	f023 0307 	bic.w	r3, r3, #7
 8005962:	f103 0208 	add.w	r2, r3, #8
 8005966:	f8c8 2000 	str.w	r2, [r8]
 800596a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800596e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005972:	9307      	str	r3, [sp, #28]
 8005974:	f8cd 8018 	str.w	r8, [sp, #24]
 8005978:	ee08 0a10 	vmov	s16, r0
 800597c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005980:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005984:	4b9e      	ldr	r3, [pc, #632]	; (8005c00 <_printf_float+0x2d8>)
 8005986:	f04f 32ff 	mov.w	r2, #4294967295
 800598a:	f7fb f8d7 	bl	8000b3c <__aeabi_dcmpun>
 800598e:	bb88      	cbnz	r0, 80059f4 <_printf_float+0xcc>
 8005990:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005994:	4b9a      	ldr	r3, [pc, #616]	; (8005c00 <_printf_float+0x2d8>)
 8005996:	f04f 32ff 	mov.w	r2, #4294967295
 800599a:	f7fb f8b1 	bl	8000b00 <__aeabi_dcmple>
 800599e:	bb48      	cbnz	r0, 80059f4 <_printf_float+0xcc>
 80059a0:	2200      	movs	r2, #0
 80059a2:	2300      	movs	r3, #0
 80059a4:	4640      	mov	r0, r8
 80059a6:	4649      	mov	r1, r9
 80059a8:	f7fb f8a0 	bl	8000aec <__aeabi_dcmplt>
 80059ac:	b110      	cbz	r0, 80059b4 <_printf_float+0x8c>
 80059ae:	232d      	movs	r3, #45	; 0x2d
 80059b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059b4:	4a93      	ldr	r2, [pc, #588]	; (8005c04 <_printf_float+0x2dc>)
 80059b6:	4b94      	ldr	r3, [pc, #592]	; (8005c08 <_printf_float+0x2e0>)
 80059b8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80059bc:	bf94      	ite	ls
 80059be:	4690      	movls	r8, r2
 80059c0:	4698      	movhi	r8, r3
 80059c2:	2303      	movs	r3, #3
 80059c4:	6123      	str	r3, [r4, #16]
 80059c6:	9b05      	ldr	r3, [sp, #20]
 80059c8:	f023 0304 	bic.w	r3, r3, #4
 80059cc:	6023      	str	r3, [r4, #0]
 80059ce:	f04f 0900 	mov.w	r9, #0
 80059d2:	9700      	str	r7, [sp, #0]
 80059d4:	4633      	mov	r3, r6
 80059d6:	aa0b      	add	r2, sp, #44	; 0x2c
 80059d8:	4621      	mov	r1, r4
 80059da:	4628      	mov	r0, r5
 80059dc:	f000 f9da 	bl	8005d94 <_printf_common>
 80059e0:	3001      	adds	r0, #1
 80059e2:	f040 8090 	bne.w	8005b06 <_printf_float+0x1de>
 80059e6:	f04f 30ff 	mov.w	r0, #4294967295
 80059ea:	b00d      	add	sp, #52	; 0x34
 80059ec:	ecbd 8b02 	vpop	{d8}
 80059f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059f4:	4642      	mov	r2, r8
 80059f6:	464b      	mov	r3, r9
 80059f8:	4640      	mov	r0, r8
 80059fa:	4649      	mov	r1, r9
 80059fc:	f7fb f89e 	bl	8000b3c <__aeabi_dcmpun>
 8005a00:	b140      	cbz	r0, 8005a14 <_printf_float+0xec>
 8005a02:	464b      	mov	r3, r9
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	bfbc      	itt	lt
 8005a08:	232d      	movlt	r3, #45	; 0x2d
 8005a0a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a0e:	4a7f      	ldr	r2, [pc, #508]	; (8005c0c <_printf_float+0x2e4>)
 8005a10:	4b7f      	ldr	r3, [pc, #508]	; (8005c10 <_printf_float+0x2e8>)
 8005a12:	e7d1      	b.n	80059b8 <_printf_float+0x90>
 8005a14:	6863      	ldr	r3, [r4, #4]
 8005a16:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005a1a:	9206      	str	r2, [sp, #24]
 8005a1c:	1c5a      	adds	r2, r3, #1
 8005a1e:	d13f      	bne.n	8005aa0 <_printf_float+0x178>
 8005a20:	2306      	movs	r3, #6
 8005a22:	6063      	str	r3, [r4, #4]
 8005a24:	9b05      	ldr	r3, [sp, #20]
 8005a26:	6861      	ldr	r1, [r4, #4]
 8005a28:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	9303      	str	r3, [sp, #12]
 8005a30:	ab0a      	add	r3, sp, #40	; 0x28
 8005a32:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005a36:	ab09      	add	r3, sp, #36	; 0x24
 8005a38:	ec49 8b10 	vmov	d0, r8, r9
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	6022      	str	r2, [r4, #0]
 8005a40:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005a44:	4628      	mov	r0, r5
 8005a46:	f7ff fecf 	bl	80057e8 <__cvt>
 8005a4a:	9b06      	ldr	r3, [sp, #24]
 8005a4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a4e:	2b47      	cmp	r3, #71	; 0x47
 8005a50:	4680      	mov	r8, r0
 8005a52:	d108      	bne.n	8005a66 <_printf_float+0x13e>
 8005a54:	1cc8      	adds	r0, r1, #3
 8005a56:	db02      	blt.n	8005a5e <_printf_float+0x136>
 8005a58:	6863      	ldr	r3, [r4, #4]
 8005a5a:	4299      	cmp	r1, r3
 8005a5c:	dd41      	ble.n	8005ae2 <_printf_float+0x1ba>
 8005a5e:	f1ab 0302 	sub.w	r3, fp, #2
 8005a62:	fa5f fb83 	uxtb.w	fp, r3
 8005a66:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a6a:	d820      	bhi.n	8005aae <_printf_float+0x186>
 8005a6c:	3901      	subs	r1, #1
 8005a6e:	465a      	mov	r2, fp
 8005a70:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005a74:	9109      	str	r1, [sp, #36]	; 0x24
 8005a76:	f7ff ff19 	bl	80058ac <__exponent>
 8005a7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a7c:	1813      	adds	r3, r2, r0
 8005a7e:	2a01      	cmp	r2, #1
 8005a80:	4681      	mov	r9, r0
 8005a82:	6123      	str	r3, [r4, #16]
 8005a84:	dc02      	bgt.n	8005a8c <_printf_float+0x164>
 8005a86:	6822      	ldr	r2, [r4, #0]
 8005a88:	07d2      	lsls	r2, r2, #31
 8005a8a:	d501      	bpl.n	8005a90 <_printf_float+0x168>
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	6123      	str	r3, [r4, #16]
 8005a90:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d09c      	beq.n	80059d2 <_printf_float+0xaa>
 8005a98:	232d      	movs	r3, #45	; 0x2d
 8005a9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a9e:	e798      	b.n	80059d2 <_printf_float+0xaa>
 8005aa0:	9a06      	ldr	r2, [sp, #24]
 8005aa2:	2a47      	cmp	r2, #71	; 0x47
 8005aa4:	d1be      	bne.n	8005a24 <_printf_float+0xfc>
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1bc      	bne.n	8005a24 <_printf_float+0xfc>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e7b9      	b.n	8005a22 <_printf_float+0xfa>
 8005aae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005ab2:	d118      	bne.n	8005ae6 <_printf_float+0x1be>
 8005ab4:	2900      	cmp	r1, #0
 8005ab6:	6863      	ldr	r3, [r4, #4]
 8005ab8:	dd0b      	ble.n	8005ad2 <_printf_float+0x1aa>
 8005aba:	6121      	str	r1, [r4, #16]
 8005abc:	b913      	cbnz	r3, 8005ac4 <_printf_float+0x19c>
 8005abe:	6822      	ldr	r2, [r4, #0]
 8005ac0:	07d0      	lsls	r0, r2, #31
 8005ac2:	d502      	bpl.n	8005aca <_printf_float+0x1a2>
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	440b      	add	r3, r1
 8005ac8:	6123      	str	r3, [r4, #16]
 8005aca:	65a1      	str	r1, [r4, #88]	; 0x58
 8005acc:	f04f 0900 	mov.w	r9, #0
 8005ad0:	e7de      	b.n	8005a90 <_printf_float+0x168>
 8005ad2:	b913      	cbnz	r3, 8005ada <_printf_float+0x1b2>
 8005ad4:	6822      	ldr	r2, [r4, #0]
 8005ad6:	07d2      	lsls	r2, r2, #31
 8005ad8:	d501      	bpl.n	8005ade <_printf_float+0x1b6>
 8005ada:	3302      	adds	r3, #2
 8005adc:	e7f4      	b.n	8005ac8 <_printf_float+0x1a0>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e7f2      	b.n	8005ac8 <_printf_float+0x1a0>
 8005ae2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005ae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ae8:	4299      	cmp	r1, r3
 8005aea:	db05      	blt.n	8005af8 <_printf_float+0x1d0>
 8005aec:	6823      	ldr	r3, [r4, #0]
 8005aee:	6121      	str	r1, [r4, #16]
 8005af0:	07d8      	lsls	r0, r3, #31
 8005af2:	d5ea      	bpl.n	8005aca <_printf_float+0x1a2>
 8005af4:	1c4b      	adds	r3, r1, #1
 8005af6:	e7e7      	b.n	8005ac8 <_printf_float+0x1a0>
 8005af8:	2900      	cmp	r1, #0
 8005afa:	bfd4      	ite	le
 8005afc:	f1c1 0202 	rsble	r2, r1, #2
 8005b00:	2201      	movgt	r2, #1
 8005b02:	4413      	add	r3, r2
 8005b04:	e7e0      	b.n	8005ac8 <_printf_float+0x1a0>
 8005b06:	6823      	ldr	r3, [r4, #0]
 8005b08:	055a      	lsls	r2, r3, #21
 8005b0a:	d407      	bmi.n	8005b1c <_printf_float+0x1f4>
 8005b0c:	6923      	ldr	r3, [r4, #16]
 8005b0e:	4642      	mov	r2, r8
 8005b10:	4631      	mov	r1, r6
 8005b12:	4628      	mov	r0, r5
 8005b14:	47b8      	blx	r7
 8005b16:	3001      	adds	r0, #1
 8005b18:	d12c      	bne.n	8005b74 <_printf_float+0x24c>
 8005b1a:	e764      	b.n	80059e6 <_printf_float+0xbe>
 8005b1c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b20:	f240 80e0 	bls.w	8005ce4 <_printf_float+0x3bc>
 8005b24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b28:	2200      	movs	r2, #0
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	f7fa ffd4 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b30:	2800      	cmp	r0, #0
 8005b32:	d034      	beq.n	8005b9e <_printf_float+0x276>
 8005b34:	4a37      	ldr	r2, [pc, #220]	; (8005c14 <_printf_float+0x2ec>)
 8005b36:	2301      	movs	r3, #1
 8005b38:	4631      	mov	r1, r6
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	47b8      	blx	r7
 8005b3e:	3001      	adds	r0, #1
 8005b40:	f43f af51 	beq.w	80059e6 <_printf_float+0xbe>
 8005b44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	db02      	blt.n	8005b52 <_printf_float+0x22a>
 8005b4c:	6823      	ldr	r3, [r4, #0]
 8005b4e:	07d8      	lsls	r0, r3, #31
 8005b50:	d510      	bpl.n	8005b74 <_printf_float+0x24c>
 8005b52:	ee18 3a10 	vmov	r3, s16
 8005b56:	4652      	mov	r2, sl
 8005b58:	4631      	mov	r1, r6
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	47b8      	blx	r7
 8005b5e:	3001      	adds	r0, #1
 8005b60:	f43f af41 	beq.w	80059e6 <_printf_float+0xbe>
 8005b64:	f04f 0800 	mov.w	r8, #0
 8005b68:	f104 091a 	add.w	r9, r4, #26
 8005b6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	4543      	cmp	r3, r8
 8005b72:	dc09      	bgt.n	8005b88 <_printf_float+0x260>
 8005b74:	6823      	ldr	r3, [r4, #0]
 8005b76:	079b      	lsls	r3, r3, #30
 8005b78:	f100 8107 	bmi.w	8005d8a <_printf_float+0x462>
 8005b7c:	68e0      	ldr	r0, [r4, #12]
 8005b7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b80:	4298      	cmp	r0, r3
 8005b82:	bfb8      	it	lt
 8005b84:	4618      	movlt	r0, r3
 8005b86:	e730      	b.n	80059ea <_printf_float+0xc2>
 8005b88:	2301      	movs	r3, #1
 8005b8a:	464a      	mov	r2, r9
 8005b8c:	4631      	mov	r1, r6
 8005b8e:	4628      	mov	r0, r5
 8005b90:	47b8      	blx	r7
 8005b92:	3001      	adds	r0, #1
 8005b94:	f43f af27 	beq.w	80059e6 <_printf_float+0xbe>
 8005b98:	f108 0801 	add.w	r8, r8, #1
 8005b9c:	e7e6      	b.n	8005b6c <_printf_float+0x244>
 8005b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	dc39      	bgt.n	8005c18 <_printf_float+0x2f0>
 8005ba4:	4a1b      	ldr	r2, [pc, #108]	; (8005c14 <_printf_float+0x2ec>)
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	4631      	mov	r1, r6
 8005baa:	4628      	mov	r0, r5
 8005bac:	47b8      	blx	r7
 8005bae:	3001      	adds	r0, #1
 8005bb0:	f43f af19 	beq.w	80059e6 <_printf_float+0xbe>
 8005bb4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	d102      	bne.n	8005bc2 <_printf_float+0x29a>
 8005bbc:	6823      	ldr	r3, [r4, #0]
 8005bbe:	07d9      	lsls	r1, r3, #31
 8005bc0:	d5d8      	bpl.n	8005b74 <_printf_float+0x24c>
 8005bc2:	ee18 3a10 	vmov	r3, s16
 8005bc6:	4652      	mov	r2, sl
 8005bc8:	4631      	mov	r1, r6
 8005bca:	4628      	mov	r0, r5
 8005bcc:	47b8      	blx	r7
 8005bce:	3001      	adds	r0, #1
 8005bd0:	f43f af09 	beq.w	80059e6 <_printf_float+0xbe>
 8005bd4:	f04f 0900 	mov.w	r9, #0
 8005bd8:	f104 0a1a 	add.w	sl, r4, #26
 8005bdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bde:	425b      	negs	r3, r3
 8005be0:	454b      	cmp	r3, r9
 8005be2:	dc01      	bgt.n	8005be8 <_printf_float+0x2c0>
 8005be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005be6:	e792      	b.n	8005b0e <_printf_float+0x1e6>
 8005be8:	2301      	movs	r3, #1
 8005bea:	4652      	mov	r2, sl
 8005bec:	4631      	mov	r1, r6
 8005bee:	4628      	mov	r0, r5
 8005bf0:	47b8      	blx	r7
 8005bf2:	3001      	adds	r0, #1
 8005bf4:	f43f aef7 	beq.w	80059e6 <_printf_float+0xbe>
 8005bf8:	f109 0901 	add.w	r9, r9, #1
 8005bfc:	e7ee      	b.n	8005bdc <_printf_float+0x2b4>
 8005bfe:	bf00      	nop
 8005c00:	7fefffff 	.word	0x7fefffff
 8005c04:	08008554 	.word	0x08008554
 8005c08:	08008558 	.word	0x08008558
 8005c0c:	0800855c 	.word	0x0800855c
 8005c10:	08008560 	.word	0x08008560
 8005c14:	08008564 	.word	0x08008564
 8005c18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	bfa8      	it	ge
 8005c20:	461a      	movge	r2, r3
 8005c22:	2a00      	cmp	r2, #0
 8005c24:	4691      	mov	r9, r2
 8005c26:	dc37      	bgt.n	8005c98 <_printf_float+0x370>
 8005c28:	f04f 0b00 	mov.w	fp, #0
 8005c2c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c30:	f104 021a 	add.w	r2, r4, #26
 8005c34:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c36:	9305      	str	r3, [sp, #20]
 8005c38:	eba3 0309 	sub.w	r3, r3, r9
 8005c3c:	455b      	cmp	r3, fp
 8005c3e:	dc33      	bgt.n	8005ca8 <_printf_float+0x380>
 8005c40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c44:	429a      	cmp	r2, r3
 8005c46:	db3b      	blt.n	8005cc0 <_printf_float+0x398>
 8005c48:	6823      	ldr	r3, [r4, #0]
 8005c4a:	07da      	lsls	r2, r3, #31
 8005c4c:	d438      	bmi.n	8005cc0 <_printf_float+0x398>
 8005c4e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005c52:	eba2 0903 	sub.w	r9, r2, r3
 8005c56:	9b05      	ldr	r3, [sp, #20]
 8005c58:	1ad2      	subs	r2, r2, r3
 8005c5a:	4591      	cmp	r9, r2
 8005c5c:	bfa8      	it	ge
 8005c5e:	4691      	movge	r9, r2
 8005c60:	f1b9 0f00 	cmp.w	r9, #0
 8005c64:	dc35      	bgt.n	8005cd2 <_printf_float+0x3aa>
 8005c66:	f04f 0800 	mov.w	r8, #0
 8005c6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c6e:	f104 0a1a 	add.w	sl, r4, #26
 8005c72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c76:	1a9b      	subs	r3, r3, r2
 8005c78:	eba3 0309 	sub.w	r3, r3, r9
 8005c7c:	4543      	cmp	r3, r8
 8005c7e:	f77f af79 	ble.w	8005b74 <_printf_float+0x24c>
 8005c82:	2301      	movs	r3, #1
 8005c84:	4652      	mov	r2, sl
 8005c86:	4631      	mov	r1, r6
 8005c88:	4628      	mov	r0, r5
 8005c8a:	47b8      	blx	r7
 8005c8c:	3001      	adds	r0, #1
 8005c8e:	f43f aeaa 	beq.w	80059e6 <_printf_float+0xbe>
 8005c92:	f108 0801 	add.w	r8, r8, #1
 8005c96:	e7ec      	b.n	8005c72 <_printf_float+0x34a>
 8005c98:	4613      	mov	r3, r2
 8005c9a:	4631      	mov	r1, r6
 8005c9c:	4642      	mov	r2, r8
 8005c9e:	4628      	mov	r0, r5
 8005ca0:	47b8      	blx	r7
 8005ca2:	3001      	adds	r0, #1
 8005ca4:	d1c0      	bne.n	8005c28 <_printf_float+0x300>
 8005ca6:	e69e      	b.n	80059e6 <_printf_float+0xbe>
 8005ca8:	2301      	movs	r3, #1
 8005caa:	4631      	mov	r1, r6
 8005cac:	4628      	mov	r0, r5
 8005cae:	9205      	str	r2, [sp, #20]
 8005cb0:	47b8      	blx	r7
 8005cb2:	3001      	adds	r0, #1
 8005cb4:	f43f ae97 	beq.w	80059e6 <_printf_float+0xbe>
 8005cb8:	9a05      	ldr	r2, [sp, #20]
 8005cba:	f10b 0b01 	add.w	fp, fp, #1
 8005cbe:	e7b9      	b.n	8005c34 <_printf_float+0x30c>
 8005cc0:	ee18 3a10 	vmov	r3, s16
 8005cc4:	4652      	mov	r2, sl
 8005cc6:	4631      	mov	r1, r6
 8005cc8:	4628      	mov	r0, r5
 8005cca:	47b8      	blx	r7
 8005ccc:	3001      	adds	r0, #1
 8005cce:	d1be      	bne.n	8005c4e <_printf_float+0x326>
 8005cd0:	e689      	b.n	80059e6 <_printf_float+0xbe>
 8005cd2:	9a05      	ldr	r2, [sp, #20]
 8005cd4:	464b      	mov	r3, r9
 8005cd6:	4442      	add	r2, r8
 8005cd8:	4631      	mov	r1, r6
 8005cda:	4628      	mov	r0, r5
 8005cdc:	47b8      	blx	r7
 8005cde:	3001      	adds	r0, #1
 8005ce0:	d1c1      	bne.n	8005c66 <_printf_float+0x33e>
 8005ce2:	e680      	b.n	80059e6 <_printf_float+0xbe>
 8005ce4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ce6:	2a01      	cmp	r2, #1
 8005ce8:	dc01      	bgt.n	8005cee <_printf_float+0x3c6>
 8005cea:	07db      	lsls	r3, r3, #31
 8005cec:	d53a      	bpl.n	8005d64 <_printf_float+0x43c>
 8005cee:	2301      	movs	r3, #1
 8005cf0:	4642      	mov	r2, r8
 8005cf2:	4631      	mov	r1, r6
 8005cf4:	4628      	mov	r0, r5
 8005cf6:	47b8      	blx	r7
 8005cf8:	3001      	adds	r0, #1
 8005cfa:	f43f ae74 	beq.w	80059e6 <_printf_float+0xbe>
 8005cfe:	ee18 3a10 	vmov	r3, s16
 8005d02:	4652      	mov	r2, sl
 8005d04:	4631      	mov	r1, r6
 8005d06:	4628      	mov	r0, r5
 8005d08:	47b8      	blx	r7
 8005d0a:	3001      	adds	r0, #1
 8005d0c:	f43f ae6b 	beq.w	80059e6 <_printf_float+0xbe>
 8005d10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d14:	2200      	movs	r2, #0
 8005d16:	2300      	movs	r3, #0
 8005d18:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005d1c:	f7fa fedc 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d20:	b9d8      	cbnz	r0, 8005d5a <_printf_float+0x432>
 8005d22:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005d26:	f108 0201 	add.w	r2, r8, #1
 8005d2a:	4631      	mov	r1, r6
 8005d2c:	4628      	mov	r0, r5
 8005d2e:	47b8      	blx	r7
 8005d30:	3001      	adds	r0, #1
 8005d32:	d10e      	bne.n	8005d52 <_printf_float+0x42a>
 8005d34:	e657      	b.n	80059e6 <_printf_float+0xbe>
 8005d36:	2301      	movs	r3, #1
 8005d38:	4652      	mov	r2, sl
 8005d3a:	4631      	mov	r1, r6
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	47b8      	blx	r7
 8005d40:	3001      	adds	r0, #1
 8005d42:	f43f ae50 	beq.w	80059e6 <_printf_float+0xbe>
 8005d46:	f108 0801 	add.w	r8, r8, #1
 8005d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	4543      	cmp	r3, r8
 8005d50:	dcf1      	bgt.n	8005d36 <_printf_float+0x40e>
 8005d52:	464b      	mov	r3, r9
 8005d54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005d58:	e6da      	b.n	8005b10 <_printf_float+0x1e8>
 8005d5a:	f04f 0800 	mov.w	r8, #0
 8005d5e:	f104 0a1a 	add.w	sl, r4, #26
 8005d62:	e7f2      	b.n	8005d4a <_printf_float+0x422>
 8005d64:	2301      	movs	r3, #1
 8005d66:	4642      	mov	r2, r8
 8005d68:	e7df      	b.n	8005d2a <_printf_float+0x402>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	464a      	mov	r2, r9
 8005d6e:	4631      	mov	r1, r6
 8005d70:	4628      	mov	r0, r5
 8005d72:	47b8      	blx	r7
 8005d74:	3001      	adds	r0, #1
 8005d76:	f43f ae36 	beq.w	80059e6 <_printf_float+0xbe>
 8005d7a:	f108 0801 	add.w	r8, r8, #1
 8005d7e:	68e3      	ldr	r3, [r4, #12]
 8005d80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d82:	1a5b      	subs	r3, r3, r1
 8005d84:	4543      	cmp	r3, r8
 8005d86:	dcf0      	bgt.n	8005d6a <_printf_float+0x442>
 8005d88:	e6f8      	b.n	8005b7c <_printf_float+0x254>
 8005d8a:	f04f 0800 	mov.w	r8, #0
 8005d8e:	f104 0919 	add.w	r9, r4, #25
 8005d92:	e7f4      	b.n	8005d7e <_printf_float+0x456>

08005d94 <_printf_common>:
 8005d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d98:	4616      	mov	r6, r2
 8005d9a:	4699      	mov	r9, r3
 8005d9c:	688a      	ldr	r2, [r1, #8]
 8005d9e:	690b      	ldr	r3, [r1, #16]
 8005da0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005da4:	4293      	cmp	r3, r2
 8005da6:	bfb8      	it	lt
 8005da8:	4613      	movlt	r3, r2
 8005daa:	6033      	str	r3, [r6, #0]
 8005dac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005db0:	4607      	mov	r7, r0
 8005db2:	460c      	mov	r4, r1
 8005db4:	b10a      	cbz	r2, 8005dba <_printf_common+0x26>
 8005db6:	3301      	adds	r3, #1
 8005db8:	6033      	str	r3, [r6, #0]
 8005dba:	6823      	ldr	r3, [r4, #0]
 8005dbc:	0699      	lsls	r1, r3, #26
 8005dbe:	bf42      	ittt	mi
 8005dc0:	6833      	ldrmi	r3, [r6, #0]
 8005dc2:	3302      	addmi	r3, #2
 8005dc4:	6033      	strmi	r3, [r6, #0]
 8005dc6:	6825      	ldr	r5, [r4, #0]
 8005dc8:	f015 0506 	ands.w	r5, r5, #6
 8005dcc:	d106      	bne.n	8005ddc <_printf_common+0x48>
 8005dce:	f104 0a19 	add.w	sl, r4, #25
 8005dd2:	68e3      	ldr	r3, [r4, #12]
 8005dd4:	6832      	ldr	r2, [r6, #0]
 8005dd6:	1a9b      	subs	r3, r3, r2
 8005dd8:	42ab      	cmp	r3, r5
 8005dda:	dc26      	bgt.n	8005e2a <_printf_common+0x96>
 8005ddc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005de0:	1e13      	subs	r3, r2, #0
 8005de2:	6822      	ldr	r2, [r4, #0]
 8005de4:	bf18      	it	ne
 8005de6:	2301      	movne	r3, #1
 8005de8:	0692      	lsls	r2, r2, #26
 8005dea:	d42b      	bmi.n	8005e44 <_printf_common+0xb0>
 8005dec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005df0:	4649      	mov	r1, r9
 8005df2:	4638      	mov	r0, r7
 8005df4:	47c0      	blx	r8
 8005df6:	3001      	adds	r0, #1
 8005df8:	d01e      	beq.n	8005e38 <_printf_common+0xa4>
 8005dfa:	6823      	ldr	r3, [r4, #0]
 8005dfc:	6922      	ldr	r2, [r4, #16]
 8005dfe:	f003 0306 	and.w	r3, r3, #6
 8005e02:	2b04      	cmp	r3, #4
 8005e04:	bf02      	ittt	eq
 8005e06:	68e5      	ldreq	r5, [r4, #12]
 8005e08:	6833      	ldreq	r3, [r6, #0]
 8005e0a:	1aed      	subeq	r5, r5, r3
 8005e0c:	68a3      	ldr	r3, [r4, #8]
 8005e0e:	bf0c      	ite	eq
 8005e10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e14:	2500      	movne	r5, #0
 8005e16:	4293      	cmp	r3, r2
 8005e18:	bfc4      	itt	gt
 8005e1a:	1a9b      	subgt	r3, r3, r2
 8005e1c:	18ed      	addgt	r5, r5, r3
 8005e1e:	2600      	movs	r6, #0
 8005e20:	341a      	adds	r4, #26
 8005e22:	42b5      	cmp	r5, r6
 8005e24:	d11a      	bne.n	8005e5c <_printf_common+0xc8>
 8005e26:	2000      	movs	r0, #0
 8005e28:	e008      	b.n	8005e3c <_printf_common+0xa8>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	4652      	mov	r2, sl
 8005e2e:	4649      	mov	r1, r9
 8005e30:	4638      	mov	r0, r7
 8005e32:	47c0      	blx	r8
 8005e34:	3001      	adds	r0, #1
 8005e36:	d103      	bne.n	8005e40 <_printf_common+0xac>
 8005e38:	f04f 30ff 	mov.w	r0, #4294967295
 8005e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e40:	3501      	adds	r5, #1
 8005e42:	e7c6      	b.n	8005dd2 <_printf_common+0x3e>
 8005e44:	18e1      	adds	r1, r4, r3
 8005e46:	1c5a      	adds	r2, r3, #1
 8005e48:	2030      	movs	r0, #48	; 0x30
 8005e4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e4e:	4422      	add	r2, r4
 8005e50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e58:	3302      	adds	r3, #2
 8005e5a:	e7c7      	b.n	8005dec <_printf_common+0x58>
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	4622      	mov	r2, r4
 8005e60:	4649      	mov	r1, r9
 8005e62:	4638      	mov	r0, r7
 8005e64:	47c0      	blx	r8
 8005e66:	3001      	adds	r0, #1
 8005e68:	d0e6      	beq.n	8005e38 <_printf_common+0xa4>
 8005e6a:	3601      	adds	r6, #1
 8005e6c:	e7d9      	b.n	8005e22 <_printf_common+0x8e>
	...

08005e70 <_printf_i>:
 8005e70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e74:	7e0f      	ldrb	r7, [r1, #24]
 8005e76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e78:	2f78      	cmp	r7, #120	; 0x78
 8005e7a:	4691      	mov	r9, r2
 8005e7c:	4680      	mov	r8, r0
 8005e7e:	460c      	mov	r4, r1
 8005e80:	469a      	mov	sl, r3
 8005e82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e86:	d807      	bhi.n	8005e98 <_printf_i+0x28>
 8005e88:	2f62      	cmp	r7, #98	; 0x62
 8005e8a:	d80a      	bhi.n	8005ea2 <_printf_i+0x32>
 8005e8c:	2f00      	cmp	r7, #0
 8005e8e:	f000 80d4 	beq.w	800603a <_printf_i+0x1ca>
 8005e92:	2f58      	cmp	r7, #88	; 0x58
 8005e94:	f000 80c0 	beq.w	8006018 <_printf_i+0x1a8>
 8005e98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ea0:	e03a      	b.n	8005f18 <_printf_i+0xa8>
 8005ea2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ea6:	2b15      	cmp	r3, #21
 8005ea8:	d8f6      	bhi.n	8005e98 <_printf_i+0x28>
 8005eaa:	a101      	add	r1, pc, #4	; (adr r1, 8005eb0 <_printf_i+0x40>)
 8005eac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005eb0:	08005f09 	.word	0x08005f09
 8005eb4:	08005f1d 	.word	0x08005f1d
 8005eb8:	08005e99 	.word	0x08005e99
 8005ebc:	08005e99 	.word	0x08005e99
 8005ec0:	08005e99 	.word	0x08005e99
 8005ec4:	08005e99 	.word	0x08005e99
 8005ec8:	08005f1d 	.word	0x08005f1d
 8005ecc:	08005e99 	.word	0x08005e99
 8005ed0:	08005e99 	.word	0x08005e99
 8005ed4:	08005e99 	.word	0x08005e99
 8005ed8:	08005e99 	.word	0x08005e99
 8005edc:	08006021 	.word	0x08006021
 8005ee0:	08005f49 	.word	0x08005f49
 8005ee4:	08005fdb 	.word	0x08005fdb
 8005ee8:	08005e99 	.word	0x08005e99
 8005eec:	08005e99 	.word	0x08005e99
 8005ef0:	08006043 	.word	0x08006043
 8005ef4:	08005e99 	.word	0x08005e99
 8005ef8:	08005f49 	.word	0x08005f49
 8005efc:	08005e99 	.word	0x08005e99
 8005f00:	08005e99 	.word	0x08005e99
 8005f04:	08005fe3 	.word	0x08005fe3
 8005f08:	682b      	ldr	r3, [r5, #0]
 8005f0a:	1d1a      	adds	r2, r3, #4
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	602a      	str	r2, [r5, #0]
 8005f10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e09f      	b.n	800605c <_printf_i+0x1ec>
 8005f1c:	6820      	ldr	r0, [r4, #0]
 8005f1e:	682b      	ldr	r3, [r5, #0]
 8005f20:	0607      	lsls	r7, r0, #24
 8005f22:	f103 0104 	add.w	r1, r3, #4
 8005f26:	6029      	str	r1, [r5, #0]
 8005f28:	d501      	bpl.n	8005f2e <_printf_i+0xbe>
 8005f2a:	681e      	ldr	r6, [r3, #0]
 8005f2c:	e003      	b.n	8005f36 <_printf_i+0xc6>
 8005f2e:	0646      	lsls	r6, r0, #25
 8005f30:	d5fb      	bpl.n	8005f2a <_printf_i+0xba>
 8005f32:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005f36:	2e00      	cmp	r6, #0
 8005f38:	da03      	bge.n	8005f42 <_printf_i+0xd2>
 8005f3a:	232d      	movs	r3, #45	; 0x2d
 8005f3c:	4276      	negs	r6, r6
 8005f3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f42:	485a      	ldr	r0, [pc, #360]	; (80060ac <_printf_i+0x23c>)
 8005f44:	230a      	movs	r3, #10
 8005f46:	e012      	b.n	8005f6e <_printf_i+0xfe>
 8005f48:	682b      	ldr	r3, [r5, #0]
 8005f4a:	6820      	ldr	r0, [r4, #0]
 8005f4c:	1d19      	adds	r1, r3, #4
 8005f4e:	6029      	str	r1, [r5, #0]
 8005f50:	0605      	lsls	r5, r0, #24
 8005f52:	d501      	bpl.n	8005f58 <_printf_i+0xe8>
 8005f54:	681e      	ldr	r6, [r3, #0]
 8005f56:	e002      	b.n	8005f5e <_printf_i+0xee>
 8005f58:	0641      	lsls	r1, r0, #25
 8005f5a:	d5fb      	bpl.n	8005f54 <_printf_i+0xe4>
 8005f5c:	881e      	ldrh	r6, [r3, #0]
 8005f5e:	4853      	ldr	r0, [pc, #332]	; (80060ac <_printf_i+0x23c>)
 8005f60:	2f6f      	cmp	r7, #111	; 0x6f
 8005f62:	bf0c      	ite	eq
 8005f64:	2308      	moveq	r3, #8
 8005f66:	230a      	movne	r3, #10
 8005f68:	2100      	movs	r1, #0
 8005f6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f6e:	6865      	ldr	r5, [r4, #4]
 8005f70:	60a5      	str	r5, [r4, #8]
 8005f72:	2d00      	cmp	r5, #0
 8005f74:	bfa2      	ittt	ge
 8005f76:	6821      	ldrge	r1, [r4, #0]
 8005f78:	f021 0104 	bicge.w	r1, r1, #4
 8005f7c:	6021      	strge	r1, [r4, #0]
 8005f7e:	b90e      	cbnz	r6, 8005f84 <_printf_i+0x114>
 8005f80:	2d00      	cmp	r5, #0
 8005f82:	d04b      	beq.n	800601c <_printf_i+0x1ac>
 8005f84:	4615      	mov	r5, r2
 8005f86:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f8a:	fb03 6711 	mls	r7, r3, r1, r6
 8005f8e:	5dc7      	ldrb	r7, [r0, r7]
 8005f90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f94:	4637      	mov	r7, r6
 8005f96:	42bb      	cmp	r3, r7
 8005f98:	460e      	mov	r6, r1
 8005f9a:	d9f4      	bls.n	8005f86 <_printf_i+0x116>
 8005f9c:	2b08      	cmp	r3, #8
 8005f9e:	d10b      	bne.n	8005fb8 <_printf_i+0x148>
 8005fa0:	6823      	ldr	r3, [r4, #0]
 8005fa2:	07de      	lsls	r6, r3, #31
 8005fa4:	d508      	bpl.n	8005fb8 <_printf_i+0x148>
 8005fa6:	6923      	ldr	r3, [r4, #16]
 8005fa8:	6861      	ldr	r1, [r4, #4]
 8005faa:	4299      	cmp	r1, r3
 8005fac:	bfde      	ittt	le
 8005fae:	2330      	movle	r3, #48	; 0x30
 8005fb0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005fb4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005fb8:	1b52      	subs	r2, r2, r5
 8005fba:	6122      	str	r2, [r4, #16]
 8005fbc:	f8cd a000 	str.w	sl, [sp]
 8005fc0:	464b      	mov	r3, r9
 8005fc2:	aa03      	add	r2, sp, #12
 8005fc4:	4621      	mov	r1, r4
 8005fc6:	4640      	mov	r0, r8
 8005fc8:	f7ff fee4 	bl	8005d94 <_printf_common>
 8005fcc:	3001      	adds	r0, #1
 8005fce:	d14a      	bne.n	8006066 <_printf_i+0x1f6>
 8005fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fd4:	b004      	add	sp, #16
 8005fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	f043 0320 	orr.w	r3, r3, #32
 8005fe0:	6023      	str	r3, [r4, #0]
 8005fe2:	4833      	ldr	r0, [pc, #204]	; (80060b0 <_printf_i+0x240>)
 8005fe4:	2778      	movs	r7, #120	; 0x78
 8005fe6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005fea:	6823      	ldr	r3, [r4, #0]
 8005fec:	6829      	ldr	r1, [r5, #0]
 8005fee:	061f      	lsls	r7, r3, #24
 8005ff0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ff4:	d402      	bmi.n	8005ffc <_printf_i+0x18c>
 8005ff6:	065f      	lsls	r7, r3, #25
 8005ff8:	bf48      	it	mi
 8005ffa:	b2b6      	uxthmi	r6, r6
 8005ffc:	07df      	lsls	r7, r3, #31
 8005ffe:	bf48      	it	mi
 8006000:	f043 0320 	orrmi.w	r3, r3, #32
 8006004:	6029      	str	r1, [r5, #0]
 8006006:	bf48      	it	mi
 8006008:	6023      	strmi	r3, [r4, #0]
 800600a:	b91e      	cbnz	r6, 8006014 <_printf_i+0x1a4>
 800600c:	6823      	ldr	r3, [r4, #0]
 800600e:	f023 0320 	bic.w	r3, r3, #32
 8006012:	6023      	str	r3, [r4, #0]
 8006014:	2310      	movs	r3, #16
 8006016:	e7a7      	b.n	8005f68 <_printf_i+0xf8>
 8006018:	4824      	ldr	r0, [pc, #144]	; (80060ac <_printf_i+0x23c>)
 800601a:	e7e4      	b.n	8005fe6 <_printf_i+0x176>
 800601c:	4615      	mov	r5, r2
 800601e:	e7bd      	b.n	8005f9c <_printf_i+0x12c>
 8006020:	682b      	ldr	r3, [r5, #0]
 8006022:	6826      	ldr	r6, [r4, #0]
 8006024:	6961      	ldr	r1, [r4, #20]
 8006026:	1d18      	adds	r0, r3, #4
 8006028:	6028      	str	r0, [r5, #0]
 800602a:	0635      	lsls	r5, r6, #24
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	d501      	bpl.n	8006034 <_printf_i+0x1c4>
 8006030:	6019      	str	r1, [r3, #0]
 8006032:	e002      	b.n	800603a <_printf_i+0x1ca>
 8006034:	0670      	lsls	r0, r6, #25
 8006036:	d5fb      	bpl.n	8006030 <_printf_i+0x1c0>
 8006038:	8019      	strh	r1, [r3, #0]
 800603a:	2300      	movs	r3, #0
 800603c:	6123      	str	r3, [r4, #16]
 800603e:	4615      	mov	r5, r2
 8006040:	e7bc      	b.n	8005fbc <_printf_i+0x14c>
 8006042:	682b      	ldr	r3, [r5, #0]
 8006044:	1d1a      	adds	r2, r3, #4
 8006046:	602a      	str	r2, [r5, #0]
 8006048:	681d      	ldr	r5, [r3, #0]
 800604a:	6862      	ldr	r2, [r4, #4]
 800604c:	2100      	movs	r1, #0
 800604e:	4628      	mov	r0, r5
 8006050:	f7fa f8c6 	bl	80001e0 <memchr>
 8006054:	b108      	cbz	r0, 800605a <_printf_i+0x1ea>
 8006056:	1b40      	subs	r0, r0, r5
 8006058:	6060      	str	r0, [r4, #4]
 800605a:	6863      	ldr	r3, [r4, #4]
 800605c:	6123      	str	r3, [r4, #16]
 800605e:	2300      	movs	r3, #0
 8006060:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006064:	e7aa      	b.n	8005fbc <_printf_i+0x14c>
 8006066:	6923      	ldr	r3, [r4, #16]
 8006068:	462a      	mov	r2, r5
 800606a:	4649      	mov	r1, r9
 800606c:	4640      	mov	r0, r8
 800606e:	47d0      	blx	sl
 8006070:	3001      	adds	r0, #1
 8006072:	d0ad      	beq.n	8005fd0 <_printf_i+0x160>
 8006074:	6823      	ldr	r3, [r4, #0]
 8006076:	079b      	lsls	r3, r3, #30
 8006078:	d413      	bmi.n	80060a2 <_printf_i+0x232>
 800607a:	68e0      	ldr	r0, [r4, #12]
 800607c:	9b03      	ldr	r3, [sp, #12]
 800607e:	4298      	cmp	r0, r3
 8006080:	bfb8      	it	lt
 8006082:	4618      	movlt	r0, r3
 8006084:	e7a6      	b.n	8005fd4 <_printf_i+0x164>
 8006086:	2301      	movs	r3, #1
 8006088:	4632      	mov	r2, r6
 800608a:	4649      	mov	r1, r9
 800608c:	4640      	mov	r0, r8
 800608e:	47d0      	blx	sl
 8006090:	3001      	adds	r0, #1
 8006092:	d09d      	beq.n	8005fd0 <_printf_i+0x160>
 8006094:	3501      	adds	r5, #1
 8006096:	68e3      	ldr	r3, [r4, #12]
 8006098:	9903      	ldr	r1, [sp, #12]
 800609a:	1a5b      	subs	r3, r3, r1
 800609c:	42ab      	cmp	r3, r5
 800609e:	dcf2      	bgt.n	8006086 <_printf_i+0x216>
 80060a0:	e7eb      	b.n	800607a <_printf_i+0x20a>
 80060a2:	2500      	movs	r5, #0
 80060a4:	f104 0619 	add.w	r6, r4, #25
 80060a8:	e7f5      	b.n	8006096 <_printf_i+0x226>
 80060aa:	bf00      	nop
 80060ac:	08008566 	.word	0x08008566
 80060b0:	08008577 	.word	0x08008577

080060b4 <std>:
 80060b4:	2300      	movs	r3, #0
 80060b6:	b510      	push	{r4, lr}
 80060b8:	4604      	mov	r4, r0
 80060ba:	e9c0 3300 	strd	r3, r3, [r0]
 80060be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060c2:	6083      	str	r3, [r0, #8]
 80060c4:	8181      	strh	r1, [r0, #12]
 80060c6:	6643      	str	r3, [r0, #100]	; 0x64
 80060c8:	81c2      	strh	r2, [r0, #14]
 80060ca:	6183      	str	r3, [r0, #24]
 80060cc:	4619      	mov	r1, r3
 80060ce:	2208      	movs	r2, #8
 80060d0:	305c      	adds	r0, #92	; 0x5c
 80060d2:	f000 f914 	bl	80062fe <memset>
 80060d6:	4b0d      	ldr	r3, [pc, #52]	; (800610c <std+0x58>)
 80060d8:	6263      	str	r3, [r4, #36]	; 0x24
 80060da:	4b0d      	ldr	r3, [pc, #52]	; (8006110 <std+0x5c>)
 80060dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80060de:	4b0d      	ldr	r3, [pc, #52]	; (8006114 <std+0x60>)
 80060e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80060e2:	4b0d      	ldr	r3, [pc, #52]	; (8006118 <std+0x64>)
 80060e4:	6323      	str	r3, [r4, #48]	; 0x30
 80060e6:	4b0d      	ldr	r3, [pc, #52]	; (800611c <std+0x68>)
 80060e8:	6224      	str	r4, [r4, #32]
 80060ea:	429c      	cmp	r4, r3
 80060ec:	d006      	beq.n	80060fc <std+0x48>
 80060ee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80060f2:	4294      	cmp	r4, r2
 80060f4:	d002      	beq.n	80060fc <std+0x48>
 80060f6:	33d0      	adds	r3, #208	; 0xd0
 80060f8:	429c      	cmp	r4, r3
 80060fa:	d105      	bne.n	8006108 <std+0x54>
 80060fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006104:	f000 b978 	b.w	80063f8 <__retarget_lock_init_recursive>
 8006108:	bd10      	pop	{r4, pc}
 800610a:	bf00      	nop
 800610c:	08006279 	.word	0x08006279
 8006110:	0800629b 	.word	0x0800629b
 8006114:	080062d3 	.word	0x080062d3
 8006118:	080062f7 	.word	0x080062f7
 800611c:	200003e4 	.word	0x200003e4

08006120 <stdio_exit_handler>:
 8006120:	4a02      	ldr	r2, [pc, #8]	; (800612c <stdio_exit_handler+0xc>)
 8006122:	4903      	ldr	r1, [pc, #12]	; (8006130 <stdio_exit_handler+0x10>)
 8006124:	4803      	ldr	r0, [pc, #12]	; (8006134 <stdio_exit_handler+0x14>)
 8006126:	f000 b869 	b.w	80061fc <_fwalk_sglue>
 800612a:	bf00      	nop
 800612c:	20000010 	.word	0x20000010
 8006130:	08007da9 	.word	0x08007da9
 8006134:	2000001c 	.word	0x2000001c

08006138 <cleanup_stdio>:
 8006138:	6841      	ldr	r1, [r0, #4]
 800613a:	4b0c      	ldr	r3, [pc, #48]	; (800616c <cleanup_stdio+0x34>)
 800613c:	4299      	cmp	r1, r3
 800613e:	b510      	push	{r4, lr}
 8006140:	4604      	mov	r4, r0
 8006142:	d001      	beq.n	8006148 <cleanup_stdio+0x10>
 8006144:	f001 fe30 	bl	8007da8 <_fflush_r>
 8006148:	68a1      	ldr	r1, [r4, #8]
 800614a:	4b09      	ldr	r3, [pc, #36]	; (8006170 <cleanup_stdio+0x38>)
 800614c:	4299      	cmp	r1, r3
 800614e:	d002      	beq.n	8006156 <cleanup_stdio+0x1e>
 8006150:	4620      	mov	r0, r4
 8006152:	f001 fe29 	bl	8007da8 <_fflush_r>
 8006156:	68e1      	ldr	r1, [r4, #12]
 8006158:	4b06      	ldr	r3, [pc, #24]	; (8006174 <cleanup_stdio+0x3c>)
 800615a:	4299      	cmp	r1, r3
 800615c:	d004      	beq.n	8006168 <cleanup_stdio+0x30>
 800615e:	4620      	mov	r0, r4
 8006160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006164:	f001 be20 	b.w	8007da8 <_fflush_r>
 8006168:	bd10      	pop	{r4, pc}
 800616a:	bf00      	nop
 800616c:	200003e4 	.word	0x200003e4
 8006170:	2000044c 	.word	0x2000044c
 8006174:	200004b4 	.word	0x200004b4

08006178 <global_stdio_init.part.0>:
 8006178:	b510      	push	{r4, lr}
 800617a:	4b0b      	ldr	r3, [pc, #44]	; (80061a8 <global_stdio_init.part.0+0x30>)
 800617c:	4c0b      	ldr	r4, [pc, #44]	; (80061ac <global_stdio_init.part.0+0x34>)
 800617e:	4a0c      	ldr	r2, [pc, #48]	; (80061b0 <global_stdio_init.part.0+0x38>)
 8006180:	601a      	str	r2, [r3, #0]
 8006182:	4620      	mov	r0, r4
 8006184:	2200      	movs	r2, #0
 8006186:	2104      	movs	r1, #4
 8006188:	f7ff ff94 	bl	80060b4 <std>
 800618c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006190:	2201      	movs	r2, #1
 8006192:	2109      	movs	r1, #9
 8006194:	f7ff ff8e 	bl	80060b4 <std>
 8006198:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800619c:	2202      	movs	r2, #2
 800619e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061a2:	2112      	movs	r1, #18
 80061a4:	f7ff bf86 	b.w	80060b4 <std>
 80061a8:	2000051c 	.word	0x2000051c
 80061ac:	200003e4 	.word	0x200003e4
 80061b0:	08006121 	.word	0x08006121

080061b4 <__sfp_lock_acquire>:
 80061b4:	4801      	ldr	r0, [pc, #4]	; (80061bc <__sfp_lock_acquire+0x8>)
 80061b6:	f000 b920 	b.w	80063fa <__retarget_lock_acquire_recursive>
 80061ba:	bf00      	nop
 80061bc:	20000525 	.word	0x20000525

080061c0 <__sfp_lock_release>:
 80061c0:	4801      	ldr	r0, [pc, #4]	; (80061c8 <__sfp_lock_release+0x8>)
 80061c2:	f000 b91b 	b.w	80063fc <__retarget_lock_release_recursive>
 80061c6:	bf00      	nop
 80061c8:	20000525 	.word	0x20000525

080061cc <__sinit>:
 80061cc:	b510      	push	{r4, lr}
 80061ce:	4604      	mov	r4, r0
 80061d0:	f7ff fff0 	bl	80061b4 <__sfp_lock_acquire>
 80061d4:	6a23      	ldr	r3, [r4, #32]
 80061d6:	b11b      	cbz	r3, 80061e0 <__sinit+0x14>
 80061d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061dc:	f7ff bff0 	b.w	80061c0 <__sfp_lock_release>
 80061e0:	4b04      	ldr	r3, [pc, #16]	; (80061f4 <__sinit+0x28>)
 80061e2:	6223      	str	r3, [r4, #32]
 80061e4:	4b04      	ldr	r3, [pc, #16]	; (80061f8 <__sinit+0x2c>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1f5      	bne.n	80061d8 <__sinit+0xc>
 80061ec:	f7ff ffc4 	bl	8006178 <global_stdio_init.part.0>
 80061f0:	e7f2      	b.n	80061d8 <__sinit+0xc>
 80061f2:	bf00      	nop
 80061f4:	08006139 	.word	0x08006139
 80061f8:	2000051c 	.word	0x2000051c

080061fc <_fwalk_sglue>:
 80061fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006200:	4607      	mov	r7, r0
 8006202:	4688      	mov	r8, r1
 8006204:	4614      	mov	r4, r2
 8006206:	2600      	movs	r6, #0
 8006208:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800620c:	f1b9 0901 	subs.w	r9, r9, #1
 8006210:	d505      	bpl.n	800621e <_fwalk_sglue+0x22>
 8006212:	6824      	ldr	r4, [r4, #0]
 8006214:	2c00      	cmp	r4, #0
 8006216:	d1f7      	bne.n	8006208 <_fwalk_sglue+0xc>
 8006218:	4630      	mov	r0, r6
 800621a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800621e:	89ab      	ldrh	r3, [r5, #12]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d907      	bls.n	8006234 <_fwalk_sglue+0x38>
 8006224:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006228:	3301      	adds	r3, #1
 800622a:	d003      	beq.n	8006234 <_fwalk_sglue+0x38>
 800622c:	4629      	mov	r1, r5
 800622e:	4638      	mov	r0, r7
 8006230:	47c0      	blx	r8
 8006232:	4306      	orrs	r6, r0
 8006234:	3568      	adds	r5, #104	; 0x68
 8006236:	e7e9      	b.n	800620c <_fwalk_sglue+0x10>

08006238 <siprintf>:
 8006238:	b40e      	push	{r1, r2, r3}
 800623a:	b500      	push	{lr}
 800623c:	b09c      	sub	sp, #112	; 0x70
 800623e:	ab1d      	add	r3, sp, #116	; 0x74
 8006240:	9002      	str	r0, [sp, #8]
 8006242:	9006      	str	r0, [sp, #24]
 8006244:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006248:	4809      	ldr	r0, [pc, #36]	; (8006270 <siprintf+0x38>)
 800624a:	9107      	str	r1, [sp, #28]
 800624c:	9104      	str	r1, [sp, #16]
 800624e:	4909      	ldr	r1, [pc, #36]	; (8006274 <siprintf+0x3c>)
 8006250:	f853 2b04 	ldr.w	r2, [r3], #4
 8006254:	9105      	str	r1, [sp, #20]
 8006256:	6800      	ldr	r0, [r0, #0]
 8006258:	9301      	str	r3, [sp, #4]
 800625a:	a902      	add	r1, sp, #8
 800625c:	f001 fc20 	bl	8007aa0 <_svfiprintf_r>
 8006260:	9b02      	ldr	r3, [sp, #8]
 8006262:	2200      	movs	r2, #0
 8006264:	701a      	strb	r2, [r3, #0]
 8006266:	b01c      	add	sp, #112	; 0x70
 8006268:	f85d eb04 	ldr.w	lr, [sp], #4
 800626c:	b003      	add	sp, #12
 800626e:	4770      	bx	lr
 8006270:	20000068 	.word	0x20000068
 8006274:	ffff0208 	.word	0xffff0208

08006278 <__sread>:
 8006278:	b510      	push	{r4, lr}
 800627a:	460c      	mov	r4, r1
 800627c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006280:	f000 f86c 	bl	800635c <_read_r>
 8006284:	2800      	cmp	r0, #0
 8006286:	bfab      	itete	ge
 8006288:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800628a:	89a3      	ldrhlt	r3, [r4, #12]
 800628c:	181b      	addge	r3, r3, r0
 800628e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006292:	bfac      	ite	ge
 8006294:	6563      	strge	r3, [r4, #84]	; 0x54
 8006296:	81a3      	strhlt	r3, [r4, #12]
 8006298:	bd10      	pop	{r4, pc}

0800629a <__swrite>:
 800629a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800629e:	461f      	mov	r7, r3
 80062a0:	898b      	ldrh	r3, [r1, #12]
 80062a2:	05db      	lsls	r3, r3, #23
 80062a4:	4605      	mov	r5, r0
 80062a6:	460c      	mov	r4, r1
 80062a8:	4616      	mov	r6, r2
 80062aa:	d505      	bpl.n	80062b8 <__swrite+0x1e>
 80062ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062b0:	2302      	movs	r3, #2
 80062b2:	2200      	movs	r2, #0
 80062b4:	f000 f840 	bl	8006338 <_lseek_r>
 80062b8:	89a3      	ldrh	r3, [r4, #12]
 80062ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062c2:	81a3      	strh	r3, [r4, #12]
 80062c4:	4632      	mov	r2, r6
 80062c6:	463b      	mov	r3, r7
 80062c8:	4628      	mov	r0, r5
 80062ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062ce:	f000 b857 	b.w	8006380 <_write_r>

080062d2 <__sseek>:
 80062d2:	b510      	push	{r4, lr}
 80062d4:	460c      	mov	r4, r1
 80062d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062da:	f000 f82d 	bl	8006338 <_lseek_r>
 80062de:	1c43      	adds	r3, r0, #1
 80062e0:	89a3      	ldrh	r3, [r4, #12]
 80062e2:	bf15      	itete	ne
 80062e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80062e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80062ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80062ee:	81a3      	strheq	r3, [r4, #12]
 80062f0:	bf18      	it	ne
 80062f2:	81a3      	strhne	r3, [r4, #12]
 80062f4:	bd10      	pop	{r4, pc}

080062f6 <__sclose>:
 80062f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062fa:	f000 b80d 	b.w	8006318 <_close_r>

080062fe <memset>:
 80062fe:	4402      	add	r2, r0
 8006300:	4603      	mov	r3, r0
 8006302:	4293      	cmp	r3, r2
 8006304:	d100      	bne.n	8006308 <memset+0xa>
 8006306:	4770      	bx	lr
 8006308:	f803 1b01 	strb.w	r1, [r3], #1
 800630c:	e7f9      	b.n	8006302 <memset+0x4>
	...

08006310 <_localeconv_r>:
 8006310:	4800      	ldr	r0, [pc, #0]	; (8006314 <_localeconv_r+0x4>)
 8006312:	4770      	bx	lr
 8006314:	2000015c 	.word	0x2000015c

08006318 <_close_r>:
 8006318:	b538      	push	{r3, r4, r5, lr}
 800631a:	4d06      	ldr	r5, [pc, #24]	; (8006334 <_close_r+0x1c>)
 800631c:	2300      	movs	r3, #0
 800631e:	4604      	mov	r4, r0
 8006320:	4608      	mov	r0, r1
 8006322:	602b      	str	r3, [r5, #0]
 8006324:	f7fb fdd7 	bl	8001ed6 <_close>
 8006328:	1c43      	adds	r3, r0, #1
 800632a:	d102      	bne.n	8006332 <_close_r+0x1a>
 800632c:	682b      	ldr	r3, [r5, #0]
 800632e:	b103      	cbz	r3, 8006332 <_close_r+0x1a>
 8006330:	6023      	str	r3, [r4, #0]
 8006332:	bd38      	pop	{r3, r4, r5, pc}
 8006334:	20000520 	.word	0x20000520

08006338 <_lseek_r>:
 8006338:	b538      	push	{r3, r4, r5, lr}
 800633a:	4d07      	ldr	r5, [pc, #28]	; (8006358 <_lseek_r+0x20>)
 800633c:	4604      	mov	r4, r0
 800633e:	4608      	mov	r0, r1
 8006340:	4611      	mov	r1, r2
 8006342:	2200      	movs	r2, #0
 8006344:	602a      	str	r2, [r5, #0]
 8006346:	461a      	mov	r2, r3
 8006348:	f7fb fdec 	bl	8001f24 <_lseek>
 800634c:	1c43      	adds	r3, r0, #1
 800634e:	d102      	bne.n	8006356 <_lseek_r+0x1e>
 8006350:	682b      	ldr	r3, [r5, #0]
 8006352:	b103      	cbz	r3, 8006356 <_lseek_r+0x1e>
 8006354:	6023      	str	r3, [r4, #0]
 8006356:	bd38      	pop	{r3, r4, r5, pc}
 8006358:	20000520 	.word	0x20000520

0800635c <_read_r>:
 800635c:	b538      	push	{r3, r4, r5, lr}
 800635e:	4d07      	ldr	r5, [pc, #28]	; (800637c <_read_r+0x20>)
 8006360:	4604      	mov	r4, r0
 8006362:	4608      	mov	r0, r1
 8006364:	4611      	mov	r1, r2
 8006366:	2200      	movs	r2, #0
 8006368:	602a      	str	r2, [r5, #0]
 800636a:	461a      	mov	r2, r3
 800636c:	f7fb fd7a 	bl	8001e64 <_read>
 8006370:	1c43      	adds	r3, r0, #1
 8006372:	d102      	bne.n	800637a <_read_r+0x1e>
 8006374:	682b      	ldr	r3, [r5, #0]
 8006376:	b103      	cbz	r3, 800637a <_read_r+0x1e>
 8006378:	6023      	str	r3, [r4, #0]
 800637a:	bd38      	pop	{r3, r4, r5, pc}
 800637c:	20000520 	.word	0x20000520

08006380 <_write_r>:
 8006380:	b538      	push	{r3, r4, r5, lr}
 8006382:	4d07      	ldr	r5, [pc, #28]	; (80063a0 <_write_r+0x20>)
 8006384:	4604      	mov	r4, r0
 8006386:	4608      	mov	r0, r1
 8006388:	4611      	mov	r1, r2
 800638a:	2200      	movs	r2, #0
 800638c:	602a      	str	r2, [r5, #0]
 800638e:	461a      	mov	r2, r3
 8006390:	f7fb fd85 	bl	8001e9e <_write>
 8006394:	1c43      	adds	r3, r0, #1
 8006396:	d102      	bne.n	800639e <_write_r+0x1e>
 8006398:	682b      	ldr	r3, [r5, #0]
 800639a:	b103      	cbz	r3, 800639e <_write_r+0x1e>
 800639c:	6023      	str	r3, [r4, #0]
 800639e:	bd38      	pop	{r3, r4, r5, pc}
 80063a0:	20000520 	.word	0x20000520

080063a4 <__errno>:
 80063a4:	4b01      	ldr	r3, [pc, #4]	; (80063ac <__errno+0x8>)
 80063a6:	6818      	ldr	r0, [r3, #0]
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	20000068 	.word	0x20000068

080063b0 <__libc_init_array>:
 80063b0:	b570      	push	{r4, r5, r6, lr}
 80063b2:	4d0d      	ldr	r5, [pc, #52]	; (80063e8 <__libc_init_array+0x38>)
 80063b4:	4c0d      	ldr	r4, [pc, #52]	; (80063ec <__libc_init_array+0x3c>)
 80063b6:	1b64      	subs	r4, r4, r5
 80063b8:	10a4      	asrs	r4, r4, #2
 80063ba:	2600      	movs	r6, #0
 80063bc:	42a6      	cmp	r6, r4
 80063be:	d109      	bne.n	80063d4 <__libc_init_array+0x24>
 80063c0:	4d0b      	ldr	r5, [pc, #44]	; (80063f0 <__libc_init_array+0x40>)
 80063c2:	4c0c      	ldr	r4, [pc, #48]	; (80063f4 <__libc_init_array+0x44>)
 80063c4:	f002 f894 	bl	80084f0 <_init>
 80063c8:	1b64      	subs	r4, r4, r5
 80063ca:	10a4      	asrs	r4, r4, #2
 80063cc:	2600      	movs	r6, #0
 80063ce:	42a6      	cmp	r6, r4
 80063d0:	d105      	bne.n	80063de <__libc_init_array+0x2e>
 80063d2:	bd70      	pop	{r4, r5, r6, pc}
 80063d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80063d8:	4798      	blx	r3
 80063da:	3601      	adds	r6, #1
 80063dc:	e7ee      	b.n	80063bc <__libc_init_array+0xc>
 80063de:	f855 3b04 	ldr.w	r3, [r5], #4
 80063e2:	4798      	blx	r3
 80063e4:	3601      	adds	r6, #1
 80063e6:	e7f2      	b.n	80063ce <__libc_init_array+0x1e>
 80063e8:	080088cc 	.word	0x080088cc
 80063ec:	080088cc 	.word	0x080088cc
 80063f0:	080088cc 	.word	0x080088cc
 80063f4:	080088d0 	.word	0x080088d0

080063f8 <__retarget_lock_init_recursive>:
 80063f8:	4770      	bx	lr

080063fa <__retarget_lock_acquire_recursive>:
 80063fa:	4770      	bx	lr

080063fc <__retarget_lock_release_recursive>:
 80063fc:	4770      	bx	lr

080063fe <quorem>:
 80063fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006402:	6903      	ldr	r3, [r0, #16]
 8006404:	690c      	ldr	r4, [r1, #16]
 8006406:	42a3      	cmp	r3, r4
 8006408:	4607      	mov	r7, r0
 800640a:	db7e      	blt.n	800650a <quorem+0x10c>
 800640c:	3c01      	subs	r4, #1
 800640e:	f101 0814 	add.w	r8, r1, #20
 8006412:	f100 0514 	add.w	r5, r0, #20
 8006416:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800641a:	9301      	str	r3, [sp, #4]
 800641c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006420:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006424:	3301      	adds	r3, #1
 8006426:	429a      	cmp	r2, r3
 8006428:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800642c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006430:	fbb2 f6f3 	udiv	r6, r2, r3
 8006434:	d331      	bcc.n	800649a <quorem+0x9c>
 8006436:	f04f 0e00 	mov.w	lr, #0
 800643a:	4640      	mov	r0, r8
 800643c:	46ac      	mov	ip, r5
 800643e:	46f2      	mov	sl, lr
 8006440:	f850 2b04 	ldr.w	r2, [r0], #4
 8006444:	b293      	uxth	r3, r2
 8006446:	fb06 e303 	mla	r3, r6, r3, lr
 800644a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800644e:	0c1a      	lsrs	r2, r3, #16
 8006450:	b29b      	uxth	r3, r3
 8006452:	ebaa 0303 	sub.w	r3, sl, r3
 8006456:	f8dc a000 	ldr.w	sl, [ip]
 800645a:	fa13 f38a 	uxtah	r3, r3, sl
 800645e:	fb06 220e 	mla	r2, r6, lr, r2
 8006462:	9300      	str	r3, [sp, #0]
 8006464:	9b00      	ldr	r3, [sp, #0]
 8006466:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800646a:	b292      	uxth	r2, r2
 800646c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006470:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006474:	f8bd 3000 	ldrh.w	r3, [sp]
 8006478:	4581      	cmp	r9, r0
 800647a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800647e:	f84c 3b04 	str.w	r3, [ip], #4
 8006482:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006486:	d2db      	bcs.n	8006440 <quorem+0x42>
 8006488:	f855 300b 	ldr.w	r3, [r5, fp]
 800648c:	b92b      	cbnz	r3, 800649a <quorem+0x9c>
 800648e:	9b01      	ldr	r3, [sp, #4]
 8006490:	3b04      	subs	r3, #4
 8006492:	429d      	cmp	r5, r3
 8006494:	461a      	mov	r2, r3
 8006496:	d32c      	bcc.n	80064f2 <quorem+0xf4>
 8006498:	613c      	str	r4, [r7, #16]
 800649a:	4638      	mov	r0, r7
 800649c:	f001 f9a6 	bl	80077ec <__mcmp>
 80064a0:	2800      	cmp	r0, #0
 80064a2:	db22      	blt.n	80064ea <quorem+0xec>
 80064a4:	3601      	adds	r6, #1
 80064a6:	4629      	mov	r1, r5
 80064a8:	2000      	movs	r0, #0
 80064aa:	f858 2b04 	ldr.w	r2, [r8], #4
 80064ae:	f8d1 c000 	ldr.w	ip, [r1]
 80064b2:	b293      	uxth	r3, r2
 80064b4:	1ac3      	subs	r3, r0, r3
 80064b6:	0c12      	lsrs	r2, r2, #16
 80064b8:	fa13 f38c 	uxtah	r3, r3, ip
 80064bc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80064c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064ca:	45c1      	cmp	r9, r8
 80064cc:	f841 3b04 	str.w	r3, [r1], #4
 80064d0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80064d4:	d2e9      	bcs.n	80064aa <quorem+0xac>
 80064d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064de:	b922      	cbnz	r2, 80064ea <quorem+0xec>
 80064e0:	3b04      	subs	r3, #4
 80064e2:	429d      	cmp	r5, r3
 80064e4:	461a      	mov	r2, r3
 80064e6:	d30a      	bcc.n	80064fe <quorem+0x100>
 80064e8:	613c      	str	r4, [r7, #16]
 80064ea:	4630      	mov	r0, r6
 80064ec:	b003      	add	sp, #12
 80064ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064f2:	6812      	ldr	r2, [r2, #0]
 80064f4:	3b04      	subs	r3, #4
 80064f6:	2a00      	cmp	r2, #0
 80064f8:	d1ce      	bne.n	8006498 <quorem+0x9a>
 80064fa:	3c01      	subs	r4, #1
 80064fc:	e7c9      	b.n	8006492 <quorem+0x94>
 80064fe:	6812      	ldr	r2, [r2, #0]
 8006500:	3b04      	subs	r3, #4
 8006502:	2a00      	cmp	r2, #0
 8006504:	d1f0      	bne.n	80064e8 <quorem+0xea>
 8006506:	3c01      	subs	r4, #1
 8006508:	e7eb      	b.n	80064e2 <quorem+0xe4>
 800650a:	2000      	movs	r0, #0
 800650c:	e7ee      	b.n	80064ec <quorem+0xee>
	...

08006510 <_dtoa_r>:
 8006510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006514:	ed2d 8b04 	vpush	{d8-d9}
 8006518:	69c5      	ldr	r5, [r0, #28]
 800651a:	b093      	sub	sp, #76	; 0x4c
 800651c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006520:	ec57 6b10 	vmov	r6, r7, d0
 8006524:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006528:	9107      	str	r1, [sp, #28]
 800652a:	4604      	mov	r4, r0
 800652c:	920a      	str	r2, [sp, #40]	; 0x28
 800652e:	930d      	str	r3, [sp, #52]	; 0x34
 8006530:	b975      	cbnz	r5, 8006550 <_dtoa_r+0x40>
 8006532:	2010      	movs	r0, #16
 8006534:	f000 fe2a 	bl	800718c <malloc>
 8006538:	4602      	mov	r2, r0
 800653a:	61e0      	str	r0, [r4, #28]
 800653c:	b920      	cbnz	r0, 8006548 <_dtoa_r+0x38>
 800653e:	4bae      	ldr	r3, [pc, #696]	; (80067f8 <_dtoa_r+0x2e8>)
 8006540:	21ef      	movs	r1, #239	; 0xef
 8006542:	48ae      	ldr	r0, [pc, #696]	; (80067fc <_dtoa_r+0x2ec>)
 8006544:	f001 fc90 	bl	8007e68 <__assert_func>
 8006548:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800654c:	6005      	str	r5, [r0, #0]
 800654e:	60c5      	str	r5, [r0, #12]
 8006550:	69e3      	ldr	r3, [r4, #28]
 8006552:	6819      	ldr	r1, [r3, #0]
 8006554:	b151      	cbz	r1, 800656c <_dtoa_r+0x5c>
 8006556:	685a      	ldr	r2, [r3, #4]
 8006558:	604a      	str	r2, [r1, #4]
 800655a:	2301      	movs	r3, #1
 800655c:	4093      	lsls	r3, r2
 800655e:	608b      	str	r3, [r1, #8]
 8006560:	4620      	mov	r0, r4
 8006562:	f000 ff07 	bl	8007374 <_Bfree>
 8006566:	69e3      	ldr	r3, [r4, #28]
 8006568:	2200      	movs	r2, #0
 800656a:	601a      	str	r2, [r3, #0]
 800656c:	1e3b      	subs	r3, r7, #0
 800656e:	bfbb      	ittet	lt
 8006570:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006574:	9303      	strlt	r3, [sp, #12]
 8006576:	2300      	movge	r3, #0
 8006578:	2201      	movlt	r2, #1
 800657a:	bfac      	ite	ge
 800657c:	f8c8 3000 	strge.w	r3, [r8]
 8006580:	f8c8 2000 	strlt.w	r2, [r8]
 8006584:	4b9e      	ldr	r3, [pc, #632]	; (8006800 <_dtoa_r+0x2f0>)
 8006586:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800658a:	ea33 0308 	bics.w	r3, r3, r8
 800658e:	d11b      	bne.n	80065c8 <_dtoa_r+0xb8>
 8006590:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006592:	f242 730f 	movw	r3, #9999	; 0x270f
 8006596:	6013      	str	r3, [r2, #0]
 8006598:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800659c:	4333      	orrs	r3, r6
 800659e:	f000 8593 	beq.w	80070c8 <_dtoa_r+0xbb8>
 80065a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065a4:	b963      	cbnz	r3, 80065c0 <_dtoa_r+0xb0>
 80065a6:	4b97      	ldr	r3, [pc, #604]	; (8006804 <_dtoa_r+0x2f4>)
 80065a8:	e027      	b.n	80065fa <_dtoa_r+0xea>
 80065aa:	4b97      	ldr	r3, [pc, #604]	; (8006808 <_dtoa_r+0x2f8>)
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	3308      	adds	r3, #8
 80065b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80065b2:	6013      	str	r3, [r2, #0]
 80065b4:	9800      	ldr	r0, [sp, #0]
 80065b6:	b013      	add	sp, #76	; 0x4c
 80065b8:	ecbd 8b04 	vpop	{d8-d9}
 80065bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065c0:	4b90      	ldr	r3, [pc, #576]	; (8006804 <_dtoa_r+0x2f4>)
 80065c2:	9300      	str	r3, [sp, #0]
 80065c4:	3303      	adds	r3, #3
 80065c6:	e7f3      	b.n	80065b0 <_dtoa_r+0xa0>
 80065c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80065cc:	2200      	movs	r2, #0
 80065ce:	ec51 0b17 	vmov	r0, r1, d7
 80065d2:	eeb0 8a47 	vmov.f32	s16, s14
 80065d6:	eef0 8a67 	vmov.f32	s17, s15
 80065da:	2300      	movs	r3, #0
 80065dc:	f7fa fa7c 	bl	8000ad8 <__aeabi_dcmpeq>
 80065e0:	4681      	mov	r9, r0
 80065e2:	b160      	cbz	r0, 80065fe <_dtoa_r+0xee>
 80065e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80065e6:	2301      	movs	r3, #1
 80065e8:	6013      	str	r3, [r2, #0]
 80065ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f000 8568 	beq.w	80070c2 <_dtoa_r+0xbb2>
 80065f2:	4b86      	ldr	r3, [pc, #536]	; (800680c <_dtoa_r+0x2fc>)
 80065f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80065f6:	6013      	str	r3, [r2, #0]
 80065f8:	3b01      	subs	r3, #1
 80065fa:	9300      	str	r3, [sp, #0]
 80065fc:	e7da      	b.n	80065b4 <_dtoa_r+0xa4>
 80065fe:	aa10      	add	r2, sp, #64	; 0x40
 8006600:	a911      	add	r1, sp, #68	; 0x44
 8006602:	4620      	mov	r0, r4
 8006604:	eeb0 0a48 	vmov.f32	s0, s16
 8006608:	eef0 0a68 	vmov.f32	s1, s17
 800660c:	f001 f994 	bl	8007938 <__d2b>
 8006610:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006614:	4682      	mov	sl, r0
 8006616:	2d00      	cmp	r5, #0
 8006618:	d07f      	beq.n	800671a <_dtoa_r+0x20a>
 800661a:	ee18 3a90 	vmov	r3, s17
 800661e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006622:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006626:	ec51 0b18 	vmov	r0, r1, d8
 800662a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800662e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006632:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006636:	4619      	mov	r1, r3
 8006638:	2200      	movs	r2, #0
 800663a:	4b75      	ldr	r3, [pc, #468]	; (8006810 <_dtoa_r+0x300>)
 800663c:	f7f9 fe2c 	bl	8000298 <__aeabi_dsub>
 8006640:	a367      	add	r3, pc, #412	; (adr r3, 80067e0 <_dtoa_r+0x2d0>)
 8006642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006646:	f7f9 ffdf 	bl	8000608 <__aeabi_dmul>
 800664a:	a367      	add	r3, pc, #412	; (adr r3, 80067e8 <_dtoa_r+0x2d8>)
 800664c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006650:	f7f9 fe24 	bl	800029c <__adddf3>
 8006654:	4606      	mov	r6, r0
 8006656:	4628      	mov	r0, r5
 8006658:	460f      	mov	r7, r1
 800665a:	f7f9 ff6b 	bl	8000534 <__aeabi_i2d>
 800665e:	a364      	add	r3, pc, #400	; (adr r3, 80067f0 <_dtoa_r+0x2e0>)
 8006660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006664:	f7f9 ffd0 	bl	8000608 <__aeabi_dmul>
 8006668:	4602      	mov	r2, r0
 800666a:	460b      	mov	r3, r1
 800666c:	4630      	mov	r0, r6
 800666e:	4639      	mov	r1, r7
 8006670:	f7f9 fe14 	bl	800029c <__adddf3>
 8006674:	4606      	mov	r6, r0
 8006676:	460f      	mov	r7, r1
 8006678:	f7fa fa76 	bl	8000b68 <__aeabi_d2iz>
 800667c:	2200      	movs	r2, #0
 800667e:	4683      	mov	fp, r0
 8006680:	2300      	movs	r3, #0
 8006682:	4630      	mov	r0, r6
 8006684:	4639      	mov	r1, r7
 8006686:	f7fa fa31 	bl	8000aec <__aeabi_dcmplt>
 800668a:	b148      	cbz	r0, 80066a0 <_dtoa_r+0x190>
 800668c:	4658      	mov	r0, fp
 800668e:	f7f9 ff51 	bl	8000534 <__aeabi_i2d>
 8006692:	4632      	mov	r2, r6
 8006694:	463b      	mov	r3, r7
 8006696:	f7fa fa1f 	bl	8000ad8 <__aeabi_dcmpeq>
 800669a:	b908      	cbnz	r0, 80066a0 <_dtoa_r+0x190>
 800669c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80066a0:	f1bb 0f16 	cmp.w	fp, #22
 80066a4:	d857      	bhi.n	8006756 <_dtoa_r+0x246>
 80066a6:	4b5b      	ldr	r3, [pc, #364]	; (8006814 <_dtoa_r+0x304>)
 80066a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80066ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b0:	ec51 0b18 	vmov	r0, r1, d8
 80066b4:	f7fa fa1a 	bl	8000aec <__aeabi_dcmplt>
 80066b8:	2800      	cmp	r0, #0
 80066ba:	d04e      	beq.n	800675a <_dtoa_r+0x24a>
 80066bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80066c0:	2300      	movs	r3, #0
 80066c2:	930c      	str	r3, [sp, #48]	; 0x30
 80066c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80066c6:	1b5b      	subs	r3, r3, r5
 80066c8:	1e5a      	subs	r2, r3, #1
 80066ca:	bf45      	ittet	mi
 80066cc:	f1c3 0301 	rsbmi	r3, r3, #1
 80066d0:	9305      	strmi	r3, [sp, #20]
 80066d2:	2300      	movpl	r3, #0
 80066d4:	2300      	movmi	r3, #0
 80066d6:	9206      	str	r2, [sp, #24]
 80066d8:	bf54      	ite	pl
 80066da:	9305      	strpl	r3, [sp, #20]
 80066dc:	9306      	strmi	r3, [sp, #24]
 80066de:	f1bb 0f00 	cmp.w	fp, #0
 80066e2:	db3c      	blt.n	800675e <_dtoa_r+0x24e>
 80066e4:	9b06      	ldr	r3, [sp, #24]
 80066e6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80066ea:	445b      	add	r3, fp
 80066ec:	9306      	str	r3, [sp, #24]
 80066ee:	2300      	movs	r3, #0
 80066f0:	9308      	str	r3, [sp, #32]
 80066f2:	9b07      	ldr	r3, [sp, #28]
 80066f4:	2b09      	cmp	r3, #9
 80066f6:	d868      	bhi.n	80067ca <_dtoa_r+0x2ba>
 80066f8:	2b05      	cmp	r3, #5
 80066fa:	bfc4      	itt	gt
 80066fc:	3b04      	subgt	r3, #4
 80066fe:	9307      	strgt	r3, [sp, #28]
 8006700:	9b07      	ldr	r3, [sp, #28]
 8006702:	f1a3 0302 	sub.w	r3, r3, #2
 8006706:	bfcc      	ite	gt
 8006708:	2500      	movgt	r5, #0
 800670a:	2501      	movle	r5, #1
 800670c:	2b03      	cmp	r3, #3
 800670e:	f200 8085 	bhi.w	800681c <_dtoa_r+0x30c>
 8006712:	e8df f003 	tbb	[pc, r3]
 8006716:	3b2e      	.short	0x3b2e
 8006718:	5839      	.short	0x5839
 800671a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800671e:	441d      	add	r5, r3
 8006720:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006724:	2b20      	cmp	r3, #32
 8006726:	bfc1      	itttt	gt
 8006728:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800672c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006730:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006734:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006738:	bfd6      	itet	le
 800673a:	f1c3 0320 	rsble	r3, r3, #32
 800673e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006742:	fa06 f003 	lslle.w	r0, r6, r3
 8006746:	f7f9 fee5 	bl	8000514 <__aeabi_ui2d>
 800674a:	2201      	movs	r2, #1
 800674c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006750:	3d01      	subs	r5, #1
 8006752:	920e      	str	r2, [sp, #56]	; 0x38
 8006754:	e76f      	b.n	8006636 <_dtoa_r+0x126>
 8006756:	2301      	movs	r3, #1
 8006758:	e7b3      	b.n	80066c2 <_dtoa_r+0x1b2>
 800675a:	900c      	str	r0, [sp, #48]	; 0x30
 800675c:	e7b2      	b.n	80066c4 <_dtoa_r+0x1b4>
 800675e:	9b05      	ldr	r3, [sp, #20]
 8006760:	eba3 030b 	sub.w	r3, r3, fp
 8006764:	9305      	str	r3, [sp, #20]
 8006766:	f1cb 0300 	rsb	r3, fp, #0
 800676a:	9308      	str	r3, [sp, #32]
 800676c:	2300      	movs	r3, #0
 800676e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006770:	e7bf      	b.n	80066f2 <_dtoa_r+0x1e2>
 8006772:	2300      	movs	r3, #0
 8006774:	9309      	str	r3, [sp, #36]	; 0x24
 8006776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006778:	2b00      	cmp	r3, #0
 800677a:	dc52      	bgt.n	8006822 <_dtoa_r+0x312>
 800677c:	2301      	movs	r3, #1
 800677e:	9301      	str	r3, [sp, #4]
 8006780:	9304      	str	r3, [sp, #16]
 8006782:	461a      	mov	r2, r3
 8006784:	920a      	str	r2, [sp, #40]	; 0x28
 8006786:	e00b      	b.n	80067a0 <_dtoa_r+0x290>
 8006788:	2301      	movs	r3, #1
 800678a:	e7f3      	b.n	8006774 <_dtoa_r+0x264>
 800678c:	2300      	movs	r3, #0
 800678e:	9309      	str	r3, [sp, #36]	; 0x24
 8006790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006792:	445b      	add	r3, fp
 8006794:	9301      	str	r3, [sp, #4]
 8006796:	3301      	adds	r3, #1
 8006798:	2b01      	cmp	r3, #1
 800679a:	9304      	str	r3, [sp, #16]
 800679c:	bfb8      	it	lt
 800679e:	2301      	movlt	r3, #1
 80067a0:	69e0      	ldr	r0, [r4, #28]
 80067a2:	2100      	movs	r1, #0
 80067a4:	2204      	movs	r2, #4
 80067a6:	f102 0614 	add.w	r6, r2, #20
 80067aa:	429e      	cmp	r6, r3
 80067ac:	d93d      	bls.n	800682a <_dtoa_r+0x31a>
 80067ae:	6041      	str	r1, [r0, #4]
 80067b0:	4620      	mov	r0, r4
 80067b2:	f000 fd9f 	bl	80072f4 <_Balloc>
 80067b6:	9000      	str	r0, [sp, #0]
 80067b8:	2800      	cmp	r0, #0
 80067ba:	d139      	bne.n	8006830 <_dtoa_r+0x320>
 80067bc:	4b16      	ldr	r3, [pc, #88]	; (8006818 <_dtoa_r+0x308>)
 80067be:	4602      	mov	r2, r0
 80067c0:	f240 11af 	movw	r1, #431	; 0x1af
 80067c4:	e6bd      	b.n	8006542 <_dtoa_r+0x32>
 80067c6:	2301      	movs	r3, #1
 80067c8:	e7e1      	b.n	800678e <_dtoa_r+0x27e>
 80067ca:	2501      	movs	r5, #1
 80067cc:	2300      	movs	r3, #0
 80067ce:	9307      	str	r3, [sp, #28]
 80067d0:	9509      	str	r5, [sp, #36]	; 0x24
 80067d2:	f04f 33ff 	mov.w	r3, #4294967295
 80067d6:	9301      	str	r3, [sp, #4]
 80067d8:	9304      	str	r3, [sp, #16]
 80067da:	2200      	movs	r2, #0
 80067dc:	2312      	movs	r3, #18
 80067de:	e7d1      	b.n	8006784 <_dtoa_r+0x274>
 80067e0:	636f4361 	.word	0x636f4361
 80067e4:	3fd287a7 	.word	0x3fd287a7
 80067e8:	8b60c8b3 	.word	0x8b60c8b3
 80067ec:	3fc68a28 	.word	0x3fc68a28
 80067f0:	509f79fb 	.word	0x509f79fb
 80067f4:	3fd34413 	.word	0x3fd34413
 80067f8:	08008595 	.word	0x08008595
 80067fc:	080085ac 	.word	0x080085ac
 8006800:	7ff00000 	.word	0x7ff00000
 8006804:	08008591 	.word	0x08008591
 8006808:	08008588 	.word	0x08008588
 800680c:	08008565 	.word	0x08008565
 8006810:	3ff80000 	.word	0x3ff80000
 8006814:	08008698 	.word	0x08008698
 8006818:	08008604 	.word	0x08008604
 800681c:	2301      	movs	r3, #1
 800681e:	9309      	str	r3, [sp, #36]	; 0x24
 8006820:	e7d7      	b.n	80067d2 <_dtoa_r+0x2c2>
 8006822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006824:	9301      	str	r3, [sp, #4]
 8006826:	9304      	str	r3, [sp, #16]
 8006828:	e7ba      	b.n	80067a0 <_dtoa_r+0x290>
 800682a:	3101      	adds	r1, #1
 800682c:	0052      	lsls	r2, r2, #1
 800682e:	e7ba      	b.n	80067a6 <_dtoa_r+0x296>
 8006830:	69e3      	ldr	r3, [r4, #28]
 8006832:	9a00      	ldr	r2, [sp, #0]
 8006834:	601a      	str	r2, [r3, #0]
 8006836:	9b04      	ldr	r3, [sp, #16]
 8006838:	2b0e      	cmp	r3, #14
 800683a:	f200 80a8 	bhi.w	800698e <_dtoa_r+0x47e>
 800683e:	2d00      	cmp	r5, #0
 8006840:	f000 80a5 	beq.w	800698e <_dtoa_r+0x47e>
 8006844:	f1bb 0f00 	cmp.w	fp, #0
 8006848:	dd38      	ble.n	80068bc <_dtoa_r+0x3ac>
 800684a:	4bc0      	ldr	r3, [pc, #768]	; (8006b4c <_dtoa_r+0x63c>)
 800684c:	f00b 020f 	and.w	r2, fp, #15
 8006850:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006854:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006858:	e9d3 6700 	ldrd	r6, r7, [r3]
 800685c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006860:	d019      	beq.n	8006896 <_dtoa_r+0x386>
 8006862:	4bbb      	ldr	r3, [pc, #748]	; (8006b50 <_dtoa_r+0x640>)
 8006864:	ec51 0b18 	vmov	r0, r1, d8
 8006868:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800686c:	f7f9 fff6 	bl	800085c <__aeabi_ddiv>
 8006870:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006874:	f008 080f 	and.w	r8, r8, #15
 8006878:	2503      	movs	r5, #3
 800687a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006b50 <_dtoa_r+0x640>
 800687e:	f1b8 0f00 	cmp.w	r8, #0
 8006882:	d10a      	bne.n	800689a <_dtoa_r+0x38a>
 8006884:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006888:	4632      	mov	r2, r6
 800688a:	463b      	mov	r3, r7
 800688c:	f7f9 ffe6 	bl	800085c <__aeabi_ddiv>
 8006890:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006894:	e02b      	b.n	80068ee <_dtoa_r+0x3de>
 8006896:	2502      	movs	r5, #2
 8006898:	e7ef      	b.n	800687a <_dtoa_r+0x36a>
 800689a:	f018 0f01 	tst.w	r8, #1
 800689e:	d008      	beq.n	80068b2 <_dtoa_r+0x3a2>
 80068a0:	4630      	mov	r0, r6
 80068a2:	4639      	mov	r1, r7
 80068a4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80068a8:	f7f9 feae 	bl	8000608 <__aeabi_dmul>
 80068ac:	3501      	adds	r5, #1
 80068ae:	4606      	mov	r6, r0
 80068b0:	460f      	mov	r7, r1
 80068b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80068b6:	f109 0908 	add.w	r9, r9, #8
 80068ba:	e7e0      	b.n	800687e <_dtoa_r+0x36e>
 80068bc:	f000 809f 	beq.w	80069fe <_dtoa_r+0x4ee>
 80068c0:	f1cb 0600 	rsb	r6, fp, #0
 80068c4:	4ba1      	ldr	r3, [pc, #644]	; (8006b4c <_dtoa_r+0x63c>)
 80068c6:	4fa2      	ldr	r7, [pc, #648]	; (8006b50 <_dtoa_r+0x640>)
 80068c8:	f006 020f 	and.w	r2, r6, #15
 80068cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d4:	ec51 0b18 	vmov	r0, r1, d8
 80068d8:	f7f9 fe96 	bl	8000608 <__aeabi_dmul>
 80068dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068e0:	1136      	asrs	r6, r6, #4
 80068e2:	2300      	movs	r3, #0
 80068e4:	2502      	movs	r5, #2
 80068e6:	2e00      	cmp	r6, #0
 80068e8:	d17e      	bne.n	80069e8 <_dtoa_r+0x4d8>
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1d0      	bne.n	8006890 <_dtoa_r+0x380>
 80068ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068f0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f000 8084 	beq.w	8006a02 <_dtoa_r+0x4f2>
 80068fa:	4b96      	ldr	r3, [pc, #600]	; (8006b54 <_dtoa_r+0x644>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	4640      	mov	r0, r8
 8006900:	4649      	mov	r1, r9
 8006902:	f7fa f8f3 	bl	8000aec <__aeabi_dcmplt>
 8006906:	2800      	cmp	r0, #0
 8006908:	d07b      	beq.n	8006a02 <_dtoa_r+0x4f2>
 800690a:	9b04      	ldr	r3, [sp, #16]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d078      	beq.n	8006a02 <_dtoa_r+0x4f2>
 8006910:	9b01      	ldr	r3, [sp, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	dd39      	ble.n	800698a <_dtoa_r+0x47a>
 8006916:	4b90      	ldr	r3, [pc, #576]	; (8006b58 <_dtoa_r+0x648>)
 8006918:	2200      	movs	r2, #0
 800691a:	4640      	mov	r0, r8
 800691c:	4649      	mov	r1, r9
 800691e:	f7f9 fe73 	bl	8000608 <__aeabi_dmul>
 8006922:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006926:	9e01      	ldr	r6, [sp, #4]
 8006928:	f10b 37ff 	add.w	r7, fp, #4294967295
 800692c:	3501      	adds	r5, #1
 800692e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006932:	4628      	mov	r0, r5
 8006934:	f7f9 fdfe 	bl	8000534 <__aeabi_i2d>
 8006938:	4642      	mov	r2, r8
 800693a:	464b      	mov	r3, r9
 800693c:	f7f9 fe64 	bl	8000608 <__aeabi_dmul>
 8006940:	4b86      	ldr	r3, [pc, #536]	; (8006b5c <_dtoa_r+0x64c>)
 8006942:	2200      	movs	r2, #0
 8006944:	f7f9 fcaa 	bl	800029c <__adddf3>
 8006948:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800694c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006950:	9303      	str	r3, [sp, #12]
 8006952:	2e00      	cmp	r6, #0
 8006954:	d158      	bne.n	8006a08 <_dtoa_r+0x4f8>
 8006956:	4b82      	ldr	r3, [pc, #520]	; (8006b60 <_dtoa_r+0x650>)
 8006958:	2200      	movs	r2, #0
 800695a:	4640      	mov	r0, r8
 800695c:	4649      	mov	r1, r9
 800695e:	f7f9 fc9b 	bl	8000298 <__aeabi_dsub>
 8006962:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006966:	4680      	mov	r8, r0
 8006968:	4689      	mov	r9, r1
 800696a:	f7fa f8dd 	bl	8000b28 <__aeabi_dcmpgt>
 800696e:	2800      	cmp	r0, #0
 8006970:	f040 8296 	bne.w	8006ea0 <_dtoa_r+0x990>
 8006974:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006978:	4640      	mov	r0, r8
 800697a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800697e:	4649      	mov	r1, r9
 8006980:	f7fa f8b4 	bl	8000aec <__aeabi_dcmplt>
 8006984:	2800      	cmp	r0, #0
 8006986:	f040 8289 	bne.w	8006e9c <_dtoa_r+0x98c>
 800698a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800698e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006990:	2b00      	cmp	r3, #0
 8006992:	f2c0 814e 	blt.w	8006c32 <_dtoa_r+0x722>
 8006996:	f1bb 0f0e 	cmp.w	fp, #14
 800699a:	f300 814a 	bgt.w	8006c32 <_dtoa_r+0x722>
 800699e:	4b6b      	ldr	r3, [pc, #428]	; (8006b4c <_dtoa_r+0x63c>)
 80069a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80069a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80069a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	f280 80dc 	bge.w	8006b68 <_dtoa_r+0x658>
 80069b0:	9b04      	ldr	r3, [sp, #16]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f300 80d8 	bgt.w	8006b68 <_dtoa_r+0x658>
 80069b8:	f040 826f 	bne.w	8006e9a <_dtoa_r+0x98a>
 80069bc:	4b68      	ldr	r3, [pc, #416]	; (8006b60 <_dtoa_r+0x650>)
 80069be:	2200      	movs	r2, #0
 80069c0:	4640      	mov	r0, r8
 80069c2:	4649      	mov	r1, r9
 80069c4:	f7f9 fe20 	bl	8000608 <__aeabi_dmul>
 80069c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069cc:	f7fa f8a2 	bl	8000b14 <__aeabi_dcmpge>
 80069d0:	9e04      	ldr	r6, [sp, #16]
 80069d2:	4637      	mov	r7, r6
 80069d4:	2800      	cmp	r0, #0
 80069d6:	f040 8245 	bne.w	8006e64 <_dtoa_r+0x954>
 80069da:	9d00      	ldr	r5, [sp, #0]
 80069dc:	2331      	movs	r3, #49	; 0x31
 80069de:	f805 3b01 	strb.w	r3, [r5], #1
 80069e2:	f10b 0b01 	add.w	fp, fp, #1
 80069e6:	e241      	b.n	8006e6c <_dtoa_r+0x95c>
 80069e8:	07f2      	lsls	r2, r6, #31
 80069ea:	d505      	bpl.n	80069f8 <_dtoa_r+0x4e8>
 80069ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069f0:	f7f9 fe0a 	bl	8000608 <__aeabi_dmul>
 80069f4:	3501      	adds	r5, #1
 80069f6:	2301      	movs	r3, #1
 80069f8:	1076      	asrs	r6, r6, #1
 80069fa:	3708      	adds	r7, #8
 80069fc:	e773      	b.n	80068e6 <_dtoa_r+0x3d6>
 80069fe:	2502      	movs	r5, #2
 8006a00:	e775      	b.n	80068ee <_dtoa_r+0x3de>
 8006a02:	9e04      	ldr	r6, [sp, #16]
 8006a04:	465f      	mov	r7, fp
 8006a06:	e792      	b.n	800692e <_dtoa_r+0x41e>
 8006a08:	9900      	ldr	r1, [sp, #0]
 8006a0a:	4b50      	ldr	r3, [pc, #320]	; (8006b4c <_dtoa_r+0x63c>)
 8006a0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a10:	4431      	add	r1, r6
 8006a12:	9102      	str	r1, [sp, #8]
 8006a14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a16:	eeb0 9a47 	vmov.f32	s18, s14
 8006a1a:	eef0 9a67 	vmov.f32	s19, s15
 8006a1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006a22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a26:	2900      	cmp	r1, #0
 8006a28:	d044      	beq.n	8006ab4 <_dtoa_r+0x5a4>
 8006a2a:	494e      	ldr	r1, [pc, #312]	; (8006b64 <_dtoa_r+0x654>)
 8006a2c:	2000      	movs	r0, #0
 8006a2e:	f7f9 ff15 	bl	800085c <__aeabi_ddiv>
 8006a32:	ec53 2b19 	vmov	r2, r3, d9
 8006a36:	f7f9 fc2f 	bl	8000298 <__aeabi_dsub>
 8006a3a:	9d00      	ldr	r5, [sp, #0]
 8006a3c:	ec41 0b19 	vmov	d9, r0, r1
 8006a40:	4649      	mov	r1, r9
 8006a42:	4640      	mov	r0, r8
 8006a44:	f7fa f890 	bl	8000b68 <__aeabi_d2iz>
 8006a48:	4606      	mov	r6, r0
 8006a4a:	f7f9 fd73 	bl	8000534 <__aeabi_i2d>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	460b      	mov	r3, r1
 8006a52:	4640      	mov	r0, r8
 8006a54:	4649      	mov	r1, r9
 8006a56:	f7f9 fc1f 	bl	8000298 <__aeabi_dsub>
 8006a5a:	3630      	adds	r6, #48	; 0x30
 8006a5c:	f805 6b01 	strb.w	r6, [r5], #1
 8006a60:	ec53 2b19 	vmov	r2, r3, d9
 8006a64:	4680      	mov	r8, r0
 8006a66:	4689      	mov	r9, r1
 8006a68:	f7fa f840 	bl	8000aec <__aeabi_dcmplt>
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	d164      	bne.n	8006b3a <_dtoa_r+0x62a>
 8006a70:	4642      	mov	r2, r8
 8006a72:	464b      	mov	r3, r9
 8006a74:	4937      	ldr	r1, [pc, #220]	; (8006b54 <_dtoa_r+0x644>)
 8006a76:	2000      	movs	r0, #0
 8006a78:	f7f9 fc0e 	bl	8000298 <__aeabi_dsub>
 8006a7c:	ec53 2b19 	vmov	r2, r3, d9
 8006a80:	f7fa f834 	bl	8000aec <__aeabi_dcmplt>
 8006a84:	2800      	cmp	r0, #0
 8006a86:	f040 80b6 	bne.w	8006bf6 <_dtoa_r+0x6e6>
 8006a8a:	9b02      	ldr	r3, [sp, #8]
 8006a8c:	429d      	cmp	r5, r3
 8006a8e:	f43f af7c 	beq.w	800698a <_dtoa_r+0x47a>
 8006a92:	4b31      	ldr	r3, [pc, #196]	; (8006b58 <_dtoa_r+0x648>)
 8006a94:	ec51 0b19 	vmov	r0, r1, d9
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f7f9 fdb5 	bl	8000608 <__aeabi_dmul>
 8006a9e:	4b2e      	ldr	r3, [pc, #184]	; (8006b58 <_dtoa_r+0x648>)
 8006aa0:	ec41 0b19 	vmov	d9, r0, r1
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	4640      	mov	r0, r8
 8006aa8:	4649      	mov	r1, r9
 8006aaa:	f7f9 fdad 	bl	8000608 <__aeabi_dmul>
 8006aae:	4680      	mov	r8, r0
 8006ab0:	4689      	mov	r9, r1
 8006ab2:	e7c5      	b.n	8006a40 <_dtoa_r+0x530>
 8006ab4:	ec51 0b17 	vmov	r0, r1, d7
 8006ab8:	f7f9 fda6 	bl	8000608 <__aeabi_dmul>
 8006abc:	9b02      	ldr	r3, [sp, #8]
 8006abe:	9d00      	ldr	r5, [sp, #0]
 8006ac0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ac2:	ec41 0b19 	vmov	d9, r0, r1
 8006ac6:	4649      	mov	r1, r9
 8006ac8:	4640      	mov	r0, r8
 8006aca:	f7fa f84d 	bl	8000b68 <__aeabi_d2iz>
 8006ace:	4606      	mov	r6, r0
 8006ad0:	f7f9 fd30 	bl	8000534 <__aeabi_i2d>
 8006ad4:	3630      	adds	r6, #48	; 0x30
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	460b      	mov	r3, r1
 8006ada:	4640      	mov	r0, r8
 8006adc:	4649      	mov	r1, r9
 8006ade:	f7f9 fbdb 	bl	8000298 <__aeabi_dsub>
 8006ae2:	f805 6b01 	strb.w	r6, [r5], #1
 8006ae6:	9b02      	ldr	r3, [sp, #8]
 8006ae8:	429d      	cmp	r5, r3
 8006aea:	4680      	mov	r8, r0
 8006aec:	4689      	mov	r9, r1
 8006aee:	f04f 0200 	mov.w	r2, #0
 8006af2:	d124      	bne.n	8006b3e <_dtoa_r+0x62e>
 8006af4:	4b1b      	ldr	r3, [pc, #108]	; (8006b64 <_dtoa_r+0x654>)
 8006af6:	ec51 0b19 	vmov	r0, r1, d9
 8006afa:	f7f9 fbcf 	bl	800029c <__adddf3>
 8006afe:	4602      	mov	r2, r0
 8006b00:	460b      	mov	r3, r1
 8006b02:	4640      	mov	r0, r8
 8006b04:	4649      	mov	r1, r9
 8006b06:	f7fa f80f 	bl	8000b28 <__aeabi_dcmpgt>
 8006b0a:	2800      	cmp	r0, #0
 8006b0c:	d173      	bne.n	8006bf6 <_dtoa_r+0x6e6>
 8006b0e:	ec53 2b19 	vmov	r2, r3, d9
 8006b12:	4914      	ldr	r1, [pc, #80]	; (8006b64 <_dtoa_r+0x654>)
 8006b14:	2000      	movs	r0, #0
 8006b16:	f7f9 fbbf 	bl	8000298 <__aeabi_dsub>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	4640      	mov	r0, r8
 8006b20:	4649      	mov	r1, r9
 8006b22:	f7f9 ffe3 	bl	8000aec <__aeabi_dcmplt>
 8006b26:	2800      	cmp	r0, #0
 8006b28:	f43f af2f 	beq.w	800698a <_dtoa_r+0x47a>
 8006b2c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006b2e:	1e6b      	subs	r3, r5, #1
 8006b30:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b36:	2b30      	cmp	r3, #48	; 0x30
 8006b38:	d0f8      	beq.n	8006b2c <_dtoa_r+0x61c>
 8006b3a:	46bb      	mov	fp, r7
 8006b3c:	e04a      	b.n	8006bd4 <_dtoa_r+0x6c4>
 8006b3e:	4b06      	ldr	r3, [pc, #24]	; (8006b58 <_dtoa_r+0x648>)
 8006b40:	f7f9 fd62 	bl	8000608 <__aeabi_dmul>
 8006b44:	4680      	mov	r8, r0
 8006b46:	4689      	mov	r9, r1
 8006b48:	e7bd      	b.n	8006ac6 <_dtoa_r+0x5b6>
 8006b4a:	bf00      	nop
 8006b4c:	08008698 	.word	0x08008698
 8006b50:	08008670 	.word	0x08008670
 8006b54:	3ff00000 	.word	0x3ff00000
 8006b58:	40240000 	.word	0x40240000
 8006b5c:	401c0000 	.word	0x401c0000
 8006b60:	40140000 	.word	0x40140000
 8006b64:	3fe00000 	.word	0x3fe00000
 8006b68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006b6c:	9d00      	ldr	r5, [sp, #0]
 8006b6e:	4642      	mov	r2, r8
 8006b70:	464b      	mov	r3, r9
 8006b72:	4630      	mov	r0, r6
 8006b74:	4639      	mov	r1, r7
 8006b76:	f7f9 fe71 	bl	800085c <__aeabi_ddiv>
 8006b7a:	f7f9 fff5 	bl	8000b68 <__aeabi_d2iz>
 8006b7e:	9001      	str	r0, [sp, #4]
 8006b80:	f7f9 fcd8 	bl	8000534 <__aeabi_i2d>
 8006b84:	4642      	mov	r2, r8
 8006b86:	464b      	mov	r3, r9
 8006b88:	f7f9 fd3e 	bl	8000608 <__aeabi_dmul>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	460b      	mov	r3, r1
 8006b90:	4630      	mov	r0, r6
 8006b92:	4639      	mov	r1, r7
 8006b94:	f7f9 fb80 	bl	8000298 <__aeabi_dsub>
 8006b98:	9e01      	ldr	r6, [sp, #4]
 8006b9a:	9f04      	ldr	r7, [sp, #16]
 8006b9c:	3630      	adds	r6, #48	; 0x30
 8006b9e:	f805 6b01 	strb.w	r6, [r5], #1
 8006ba2:	9e00      	ldr	r6, [sp, #0]
 8006ba4:	1bae      	subs	r6, r5, r6
 8006ba6:	42b7      	cmp	r7, r6
 8006ba8:	4602      	mov	r2, r0
 8006baa:	460b      	mov	r3, r1
 8006bac:	d134      	bne.n	8006c18 <_dtoa_r+0x708>
 8006bae:	f7f9 fb75 	bl	800029c <__adddf3>
 8006bb2:	4642      	mov	r2, r8
 8006bb4:	464b      	mov	r3, r9
 8006bb6:	4606      	mov	r6, r0
 8006bb8:	460f      	mov	r7, r1
 8006bba:	f7f9 ffb5 	bl	8000b28 <__aeabi_dcmpgt>
 8006bbe:	b9c8      	cbnz	r0, 8006bf4 <_dtoa_r+0x6e4>
 8006bc0:	4642      	mov	r2, r8
 8006bc2:	464b      	mov	r3, r9
 8006bc4:	4630      	mov	r0, r6
 8006bc6:	4639      	mov	r1, r7
 8006bc8:	f7f9 ff86 	bl	8000ad8 <__aeabi_dcmpeq>
 8006bcc:	b110      	cbz	r0, 8006bd4 <_dtoa_r+0x6c4>
 8006bce:	9b01      	ldr	r3, [sp, #4]
 8006bd0:	07db      	lsls	r3, r3, #31
 8006bd2:	d40f      	bmi.n	8006bf4 <_dtoa_r+0x6e4>
 8006bd4:	4651      	mov	r1, sl
 8006bd6:	4620      	mov	r0, r4
 8006bd8:	f000 fbcc 	bl	8007374 <_Bfree>
 8006bdc:	2300      	movs	r3, #0
 8006bde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006be0:	702b      	strb	r3, [r5, #0]
 8006be2:	f10b 0301 	add.w	r3, fp, #1
 8006be6:	6013      	str	r3, [r2, #0]
 8006be8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f43f ace2 	beq.w	80065b4 <_dtoa_r+0xa4>
 8006bf0:	601d      	str	r5, [r3, #0]
 8006bf2:	e4df      	b.n	80065b4 <_dtoa_r+0xa4>
 8006bf4:	465f      	mov	r7, fp
 8006bf6:	462b      	mov	r3, r5
 8006bf8:	461d      	mov	r5, r3
 8006bfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bfe:	2a39      	cmp	r2, #57	; 0x39
 8006c00:	d106      	bne.n	8006c10 <_dtoa_r+0x700>
 8006c02:	9a00      	ldr	r2, [sp, #0]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d1f7      	bne.n	8006bf8 <_dtoa_r+0x6e8>
 8006c08:	9900      	ldr	r1, [sp, #0]
 8006c0a:	2230      	movs	r2, #48	; 0x30
 8006c0c:	3701      	adds	r7, #1
 8006c0e:	700a      	strb	r2, [r1, #0]
 8006c10:	781a      	ldrb	r2, [r3, #0]
 8006c12:	3201      	adds	r2, #1
 8006c14:	701a      	strb	r2, [r3, #0]
 8006c16:	e790      	b.n	8006b3a <_dtoa_r+0x62a>
 8006c18:	4ba3      	ldr	r3, [pc, #652]	; (8006ea8 <_dtoa_r+0x998>)
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f7f9 fcf4 	bl	8000608 <__aeabi_dmul>
 8006c20:	2200      	movs	r2, #0
 8006c22:	2300      	movs	r3, #0
 8006c24:	4606      	mov	r6, r0
 8006c26:	460f      	mov	r7, r1
 8006c28:	f7f9 ff56 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c2c:	2800      	cmp	r0, #0
 8006c2e:	d09e      	beq.n	8006b6e <_dtoa_r+0x65e>
 8006c30:	e7d0      	b.n	8006bd4 <_dtoa_r+0x6c4>
 8006c32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c34:	2a00      	cmp	r2, #0
 8006c36:	f000 80ca 	beq.w	8006dce <_dtoa_r+0x8be>
 8006c3a:	9a07      	ldr	r2, [sp, #28]
 8006c3c:	2a01      	cmp	r2, #1
 8006c3e:	f300 80ad 	bgt.w	8006d9c <_dtoa_r+0x88c>
 8006c42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c44:	2a00      	cmp	r2, #0
 8006c46:	f000 80a5 	beq.w	8006d94 <_dtoa_r+0x884>
 8006c4a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006c4e:	9e08      	ldr	r6, [sp, #32]
 8006c50:	9d05      	ldr	r5, [sp, #20]
 8006c52:	9a05      	ldr	r2, [sp, #20]
 8006c54:	441a      	add	r2, r3
 8006c56:	9205      	str	r2, [sp, #20]
 8006c58:	9a06      	ldr	r2, [sp, #24]
 8006c5a:	2101      	movs	r1, #1
 8006c5c:	441a      	add	r2, r3
 8006c5e:	4620      	mov	r0, r4
 8006c60:	9206      	str	r2, [sp, #24]
 8006c62:	f000 fc3d 	bl	80074e0 <__i2b>
 8006c66:	4607      	mov	r7, r0
 8006c68:	b165      	cbz	r5, 8006c84 <_dtoa_r+0x774>
 8006c6a:	9b06      	ldr	r3, [sp, #24]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	dd09      	ble.n	8006c84 <_dtoa_r+0x774>
 8006c70:	42ab      	cmp	r3, r5
 8006c72:	9a05      	ldr	r2, [sp, #20]
 8006c74:	bfa8      	it	ge
 8006c76:	462b      	movge	r3, r5
 8006c78:	1ad2      	subs	r2, r2, r3
 8006c7a:	9205      	str	r2, [sp, #20]
 8006c7c:	9a06      	ldr	r2, [sp, #24]
 8006c7e:	1aed      	subs	r5, r5, r3
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	9306      	str	r3, [sp, #24]
 8006c84:	9b08      	ldr	r3, [sp, #32]
 8006c86:	b1f3      	cbz	r3, 8006cc6 <_dtoa_r+0x7b6>
 8006c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	f000 80a3 	beq.w	8006dd6 <_dtoa_r+0x8c6>
 8006c90:	2e00      	cmp	r6, #0
 8006c92:	dd10      	ble.n	8006cb6 <_dtoa_r+0x7a6>
 8006c94:	4639      	mov	r1, r7
 8006c96:	4632      	mov	r2, r6
 8006c98:	4620      	mov	r0, r4
 8006c9a:	f000 fce1 	bl	8007660 <__pow5mult>
 8006c9e:	4652      	mov	r2, sl
 8006ca0:	4601      	mov	r1, r0
 8006ca2:	4607      	mov	r7, r0
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	f000 fc31 	bl	800750c <__multiply>
 8006caa:	4651      	mov	r1, sl
 8006cac:	4680      	mov	r8, r0
 8006cae:	4620      	mov	r0, r4
 8006cb0:	f000 fb60 	bl	8007374 <_Bfree>
 8006cb4:	46c2      	mov	sl, r8
 8006cb6:	9b08      	ldr	r3, [sp, #32]
 8006cb8:	1b9a      	subs	r2, r3, r6
 8006cba:	d004      	beq.n	8006cc6 <_dtoa_r+0x7b6>
 8006cbc:	4651      	mov	r1, sl
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	f000 fcce 	bl	8007660 <__pow5mult>
 8006cc4:	4682      	mov	sl, r0
 8006cc6:	2101      	movs	r1, #1
 8006cc8:	4620      	mov	r0, r4
 8006cca:	f000 fc09 	bl	80074e0 <__i2b>
 8006cce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	4606      	mov	r6, r0
 8006cd4:	f340 8081 	ble.w	8006dda <_dtoa_r+0x8ca>
 8006cd8:	461a      	mov	r2, r3
 8006cda:	4601      	mov	r1, r0
 8006cdc:	4620      	mov	r0, r4
 8006cde:	f000 fcbf 	bl	8007660 <__pow5mult>
 8006ce2:	9b07      	ldr	r3, [sp, #28]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	4606      	mov	r6, r0
 8006ce8:	dd7a      	ble.n	8006de0 <_dtoa_r+0x8d0>
 8006cea:	f04f 0800 	mov.w	r8, #0
 8006cee:	6933      	ldr	r3, [r6, #16]
 8006cf0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006cf4:	6918      	ldr	r0, [r3, #16]
 8006cf6:	f000 fba5 	bl	8007444 <__hi0bits>
 8006cfa:	f1c0 0020 	rsb	r0, r0, #32
 8006cfe:	9b06      	ldr	r3, [sp, #24]
 8006d00:	4418      	add	r0, r3
 8006d02:	f010 001f 	ands.w	r0, r0, #31
 8006d06:	f000 8094 	beq.w	8006e32 <_dtoa_r+0x922>
 8006d0a:	f1c0 0320 	rsb	r3, r0, #32
 8006d0e:	2b04      	cmp	r3, #4
 8006d10:	f340 8085 	ble.w	8006e1e <_dtoa_r+0x90e>
 8006d14:	9b05      	ldr	r3, [sp, #20]
 8006d16:	f1c0 001c 	rsb	r0, r0, #28
 8006d1a:	4403      	add	r3, r0
 8006d1c:	9305      	str	r3, [sp, #20]
 8006d1e:	9b06      	ldr	r3, [sp, #24]
 8006d20:	4403      	add	r3, r0
 8006d22:	4405      	add	r5, r0
 8006d24:	9306      	str	r3, [sp, #24]
 8006d26:	9b05      	ldr	r3, [sp, #20]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	dd05      	ble.n	8006d38 <_dtoa_r+0x828>
 8006d2c:	4651      	mov	r1, sl
 8006d2e:	461a      	mov	r2, r3
 8006d30:	4620      	mov	r0, r4
 8006d32:	f000 fcef 	bl	8007714 <__lshift>
 8006d36:	4682      	mov	sl, r0
 8006d38:	9b06      	ldr	r3, [sp, #24]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	dd05      	ble.n	8006d4a <_dtoa_r+0x83a>
 8006d3e:	4631      	mov	r1, r6
 8006d40:	461a      	mov	r2, r3
 8006d42:	4620      	mov	r0, r4
 8006d44:	f000 fce6 	bl	8007714 <__lshift>
 8006d48:	4606      	mov	r6, r0
 8006d4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d072      	beq.n	8006e36 <_dtoa_r+0x926>
 8006d50:	4631      	mov	r1, r6
 8006d52:	4650      	mov	r0, sl
 8006d54:	f000 fd4a 	bl	80077ec <__mcmp>
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	da6c      	bge.n	8006e36 <_dtoa_r+0x926>
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	4651      	mov	r1, sl
 8006d60:	220a      	movs	r2, #10
 8006d62:	4620      	mov	r0, r4
 8006d64:	f000 fb28 	bl	80073b8 <__multadd>
 8006d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d6a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d6e:	4682      	mov	sl, r0
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f000 81b0 	beq.w	80070d6 <_dtoa_r+0xbc6>
 8006d76:	2300      	movs	r3, #0
 8006d78:	4639      	mov	r1, r7
 8006d7a:	220a      	movs	r2, #10
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	f000 fb1b 	bl	80073b8 <__multadd>
 8006d82:	9b01      	ldr	r3, [sp, #4]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	4607      	mov	r7, r0
 8006d88:	f300 8096 	bgt.w	8006eb8 <_dtoa_r+0x9a8>
 8006d8c:	9b07      	ldr	r3, [sp, #28]
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	dc59      	bgt.n	8006e46 <_dtoa_r+0x936>
 8006d92:	e091      	b.n	8006eb8 <_dtoa_r+0x9a8>
 8006d94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006d9a:	e758      	b.n	8006c4e <_dtoa_r+0x73e>
 8006d9c:	9b04      	ldr	r3, [sp, #16]
 8006d9e:	1e5e      	subs	r6, r3, #1
 8006da0:	9b08      	ldr	r3, [sp, #32]
 8006da2:	42b3      	cmp	r3, r6
 8006da4:	bfbf      	itttt	lt
 8006da6:	9b08      	ldrlt	r3, [sp, #32]
 8006da8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006daa:	9608      	strlt	r6, [sp, #32]
 8006dac:	1af3      	sublt	r3, r6, r3
 8006dae:	bfb4      	ite	lt
 8006db0:	18d2      	addlt	r2, r2, r3
 8006db2:	1b9e      	subge	r6, r3, r6
 8006db4:	9b04      	ldr	r3, [sp, #16]
 8006db6:	bfbc      	itt	lt
 8006db8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006dba:	2600      	movlt	r6, #0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	bfb7      	itett	lt
 8006dc0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006dc4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006dc8:	1a9d      	sublt	r5, r3, r2
 8006dca:	2300      	movlt	r3, #0
 8006dcc:	e741      	b.n	8006c52 <_dtoa_r+0x742>
 8006dce:	9e08      	ldr	r6, [sp, #32]
 8006dd0:	9d05      	ldr	r5, [sp, #20]
 8006dd2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006dd4:	e748      	b.n	8006c68 <_dtoa_r+0x758>
 8006dd6:	9a08      	ldr	r2, [sp, #32]
 8006dd8:	e770      	b.n	8006cbc <_dtoa_r+0x7ac>
 8006dda:	9b07      	ldr	r3, [sp, #28]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	dc19      	bgt.n	8006e14 <_dtoa_r+0x904>
 8006de0:	9b02      	ldr	r3, [sp, #8]
 8006de2:	b9bb      	cbnz	r3, 8006e14 <_dtoa_r+0x904>
 8006de4:	9b03      	ldr	r3, [sp, #12]
 8006de6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006dea:	b99b      	cbnz	r3, 8006e14 <_dtoa_r+0x904>
 8006dec:	9b03      	ldr	r3, [sp, #12]
 8006dee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006df2:	0d1b      	lsrs	r3, r3, #20
 8006df4:	051b      	lsls	r3, r3, #20
 8006df6:	b183      	cbz	r3, 8006e1a <_dtoa_r+0x90a>
 8006df8:	9b05      	ldr	r3, [sp, #20]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	9305      	str	r3, [sp, #20]
 8006dfe:	9b06      	ldr	r3, [sp, #24]
 8006e00:	3301      	adds	r3, #1
 8006e02:	9306      	str	r3, [sp, #24]
 8006e04:	f04f 0801 	mov.w	r8, #1
 8006e08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f47f af6f 	bne.w	8006cee <_dtoa_r+0x7de>
 8006e10:	2001      	movs	r0, #1
 8006e12:	e774      	b.n	8006cfe <_dtoa_r+0x7ee>
 8006e14:	f04f 0800 	mov.w	r8, #0
 8006e18:	e7f6      	b.n	8006e08 <_dtoa_r+0x8f8>
 8006e1a:	4698      	mov	r8, r3
 8006e1c:	e7f4      	b.n	8006e08 <_dtoa_r+0x8f8>
 8006e1e:	d082      	beq.n	8006d26 <_dtoa_r+0x816>
 8006e20:	9a05      	ldr	r2, [sp, #20]
 8006e22:	331c      	adds	r3, #28
 8006e24:	441a      	add	r2, r3
 8006e26:	9205      	str	r2, [sp, #20]
 8006e28:	9a06      	ldr	r2, [sp, #24]
 8006e2a:	441a      	add	r2, r3
 8006e2c:	441d      	add	r5, r3
 8006e2e:	9206      	str	r2, [sp, #24]
 8006e30:	e779      	b.n	8006d26 <_dtoa_r+0x816>
 8006e32:	4603      	mov	r3, r0
 8006e34:	e7f4      	b.n	8006e20 <_dtoa_r+0x910>
 8006e36:	9b04      	ldr	r3, [sp, #16]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	dc37      	bgt.n	8006eac <_dtoa_r+0x99c>
 8006e3c:	9b07      	ldr	r3, [sp, #28]
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	dd34      	ble.n	8006eac <_dtoa_r+0x99c>
 8006e42:	9b04      	ldr	r3, [sp, #16]
 8006e44:	9301      	str	r3, [sp, #4]
 8006e46:	9b01      	ldr	r3, [sp, #4]
 8006e48:	b963      	cbnz	r3, 8006e64 <_dtoa_r+0x954>
 8006e4a:	4631      	mov	r1, r6
 8006e4c:	2205      	movs	r2, #5
 8006e4e:	4620      	mov	r0, r4
 8006e50:	f000 fab2 	bl	80073b8 <__multadd>
 8006e54:	4601      	mov	r1, r0
 8006e56:	4606      	mov	r6, r0
 8006e58:	4650      	mov	r0, sl
 8006e5a:	f000 fcc7 	bl	80077ec <__mcmp>
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	f73f adbb 	bgt.w	80069da <_dtoa_r+0x4ca>
 8006e64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e66:	9d00      	ldr	r5, [sp, #0]
 8006e68:	ea6f 0b03 	mvn.w	fp, r3
 8006e6c:	f04f 0800 	mov.w	r8, #0
 8006e70:	4631      	mov	r1, r6
 8006e72:	4620      	mov	r0, r4
 8006e74:	f000 fa7e 	bl	8007374 <_Bfree>
 8006e78:	2f00      	cmp	r7, #0
 8006e7a:	f43f aeab 	beq.w	8006bd4 <_dtoa_r+0x6c4>
 8006e7e:	f1b8 0f00 	cmp.w	r8, #0
 8006e82:	d005      	beq.n	8006e90 <_dtoa_r+0x980>
 8006e84:	45b8      	cmp	r8, r7
 8006e86:	d003      	beq.n	8006e90 <_dtoa_r+0x980>
 8006e88:	4641      	mov	r1, r8
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	f000 fa72 	bl	8007374 <_Bfree>
 8006e90:	4639      	mov	r1, r7
 8006e92:	4620      	mov	r0, r4
 8006e94:	f000 fa6e 	bl	8007374 <_Bfree>
 8006e98:	e69c      	b.n	8006bd4 <_dtoa_r+0x6c4>
 8006e9a:	2600      	movs	r6, #0
 8006e9c:	4637      	mov	r7, r6
 8006e9e:	e7e1      	b.n	8006e64 <_dtoa_r+0x954>
 8006ea0:	46bb      	mov	fp, r7
 8006ea2:	4637      	mov	r7, r6
 8006ea4:	e599      	b.n	80069da <_dtoa_r+0x4ca>
 8006ea6:	bf00      	nop
 8006ea8:	40240000 	.word	0x40240000
 8006eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f000 80c8 	beq.w	8007044 <_dtoa_r+0xb34>
 8006eb4:	9b04      	ldr	r3, [sp, #16]
 8006eb6:	9301      	str	r3, [sp, #4]
 8006eb8:	2d00      	cmp	r5, #0
 8006eba:	dd05      	ble.n	8006ec8 <_dtoa_r+0x9b8>
 8006ebc:	4639      	mov	r1, r7
 8006ebe:	462a      	mov	r2, r5
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	f000 fc27 	bl	8007714 <__lshift>
 8006ec6:	4607      	mov	r7, r0
 8006ec8:	f1b8 0f00 	cmp.w	r8, #0
 8006ecc:	d05b      	beq.n	8006f86 <_dtoa_r+0xa76>
 8006ece:	6879      	ldr	r1, [r7, #4]
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	f000 fa0f 	bl	80072f4 <_Balloc>
 8006ed6:	4605      	mov	r5, r0
 8006ed8:	b928      	cbnz	r0, 8006ee6 <_dtoa_r+0x9d6>
 8006eda:	4b83      	ldr	r3, [pc, #524]	; (80070e8 <_dtoa_r+0xbd8>)
 8006edc:	4602      	mov	r2, r0
 8006ede:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006ee2:	f7ff bb2e 	b.w	8006542 <_dtoa_r+0x32>
 8006ee6:	693a      	ldr	r2, [r7, #16]
 8006ee8:	3202      	adds	r2, #2
 8006eea:	0092      	lsls	r2, r2, #2
 8006eec:	f107 010c 	add.w	r1, r7, #12
 8006ef0:	300c      	adds	r0, #12
 8006ef2:	f000 ffab 	bl	8007e4c <memcpy>
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	4629      	mov	r1, r5
 8006efa:	4620      	mov	r0, r4
 8006efc:	f000 fc0a 	bl	8007714 <__lshift>
 8006f00:	9b00      	ldr	r3, [sp, #0]
 8006f02:	3301      	adds	r3, #1
 8006f04:	9304      	str	r3, [sp, #16]
 8006f06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	9308      	str	r3, [sp, #32]
 8006f0e:	9b02      	ldr	r3, [sp, #8]
 8006f10:	f003 0301 	and.w	r3, r3, #1
 8006f14:	46b8      	mov	r8, r7
 8006f16:	9306      	str	r3, [sp, #24]
 8006f18:	4607      	mov	r7, r0
 8006f1a:	9b04      	ldr	r3, [sp, #16]
 8006f1c:	4631      	mov	r1, r6
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	4650      	mov	r0, sl
 8006f22:	9301      	str	r3, [sp, #4]
 8006f24:	f7ff fa6b 	bl	80063fe <quorem>
 8006f28:	4641      	mov	r1, r8
 8006f2a:	9002      	str	r0, [sp, #8]
 8006f2c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006f30:	4650      	mov	r0, sl
 8006f32:	f000 fc5b 	bl	80077ec <__mcmp>
 8006f36:	463a      	mov	r2, r7
 8006f38:	9005      	str	r0, [sp, #20]
 8006f3a:	4631      	mov	r1, r6
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	f000 fc71 	bl	8007824 <__mdiff>
 8006f42:	68c2      	ldr	r2, [r0, #12]
 8006f44:	4605      	mov	r5, r0
 8006f46:	bb02      	cbnz	r2, 8006f8a <_dtoa_r+0xa7a>
 8006f48:	4601      	mov	r1, r0
 8006f4a:	4650      	mov	r0, sl
 8006f4c:	f000 fc4e 	bl	80077ec <__mcmp>
 8006f50:	4602      	mov	r2, r0
 8006f52:	4629      	mov	r1, r5
 8006f54:	4620      	mov	r0, r4
 8006f56:	9209      	str	r2, [sp, #36]	; 0x24
 8006f58:	f000 fa0c 	bl	8007374 <_Bfree>
 8006f5c:	9b07      	ldr	r3, [sp, #28]
 8006f5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f60:	9d04      	ldr	r5, [sp, #16]
 8006f62:	ea43 0102 	orr.w	r1, r3, r2
 8006f66:	9b06      	ldr	r3, [sp, #24]
 8006f68:	4319      	orrs	r1, r3
 8006f6a:	d110      	bne.n	8006f8e <_dtoa_r+0xa7e>
 8006f6c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006f70:	d029      	beq.n	8006fc6 <_dtoa_r+0xab6>
 8006f72:	9b05      	ldr	r3, [sp, #20]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	dd02      	ble.n	8006f7e <_dtoa_r+0xa6e>
 8006f78:	9b02      	ldr	r3, [sp, #8]
 8006f7a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006f7e:	9b01      	ldr	r3, [sp, #4]
 8006f80:	f883 9000 	strb.w	r9, [r3]
 8006f84:	e774      	b.n	8006e70 <_dtoa_r+0x960>
 8006f86:	4638      	mov	r0, r7
 8006f88:	e7ba      	b.n	8006f00 <_dtoa_r+0x9f0>
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	e7e1      	b.n	8006f52 <_dtoa_r+0xa42>
 8006f8e:	9b05      	ldr	r3, [sp, #20]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	db04      	blt.n	8006f9e <_dtoa_r+0xa8e>
 8006f94:	9907      	ldr	r1, [sp, #28]
 8006f96:	430b      	orrs	r3, r1
 8006f98:	9906      	ldr	r1, [sp, #24]
 8006f9a:	430b      	orrs	r3, r1
 8006f9c:	d120      	bne.n	8006fe0 <_dtoa_r+0xad0>
 8006f9e:	2a00      	cmp	r2, #0
 8006fa0:	dded      	ble.n	8006f7e <_dtoa_r+0xa6e>
 8006fa2:	4651      	mov	r1, sl
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	f000 fbb4 	bl	8007714 <__lshift>
 8006fac:	4631      	mov	r1, r6
 8006fae:	4682      	mov	sl, r0
 8006fb0:	f000 fc1c 	bl	80077ec <__mcmp>
 8006fb4:	2800      	cmp	r0, #0
 8006fb6:	dc03      	bgt.n	8006fc0 <_dtoa_r+0xab0>
 8006fb8:	d1e1      	bne.n	8006f7e <_dtoa_r+0xa6e>
 8006fba:	f019 0f01 	tst.w	r9, #1
 8006fbe:	d0de      	beq.n	8006f7e <_dtoa_r+0xa6e>
 8006fc0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006fc4:	d1d8      	bne.n	8006f78 <_dtoa_r+0xa68>
 8006fc6:	9a01      	ldr	r2, [sp, #4]
 8006fc8:	2339      	movs	r3, #57	; 0x39
 8006fca:	7013      	strb	r3, [r2, #0]
 8006fcc:	462b      	mov	r3, r5
 8006fce:	461d      	mov	r5, r3
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006fd6:	2a39      	cmp	r2, #57	; 0x39
 8006fd8:	d06c      	beq.n	80070b4 <_dtoa_r+0xba4>
 8006fda:	3201      	adds	r2, #1
 8006fdc:	701a      	strb	r2, [r3, #0]
 8006fde:	e747      	b.n	8006e70 <_dtoa_r+0x960>
 8006fe0:	2a00      	cmp	r2, #0
 8006fe2:	dd07      	ble.n	8006ff4 <_dtoa_r+0xae4>
 8006fe4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006fe8:	d0ed      	beq.n	8006fc6 <_dtoa_r+0xab6>
 8006fea:	9a01      	ldr	r2, [sp, #4]
 8006fec:	f109 0301 	add.w	r3, r9, #1
 8006ff0:	7013      	strb	r3, [r2, #0]
 8006ff2:	e73d      	b.n	8006e70 <_dtoa_r+0x960>
 8006ff4:	9b04      	ldr	r3, [sp, #16]
 8006ff6:	9a08      	ldr	r2, [sp, #32]
 8006ff8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d043      	beq.n	8007088 <_dtoa_r+0xb78>
 8007000:	4651      	mov	r1, sl
 8007002:	2300      	movs	r3, #0
 8007004:	220a      	movs	r2, #10
 8007006:	4620      	mov	r0, r4
 8007008:	f000 f9d6 	bl	80073b8 <__multadd>
 800700c:	45b8      	cmp	r8, r7
 800700e:	4682      	mov	sl, r0
 8007010:	f04f 0300 	mov.w	r3, #0
 8007014:	f04f 020a 	mov.w	r2, #10
 8007018:	4641      	mov	r1, r8
 800701a:	4620      	mov	r0, r4
 800701c:	d107      	bne.n	800702e <_dtoa_r+0xb1e>
 800701e:	f000 f9cb 	bl	80073b8 <__multadd>
 8007022:	4680      	mov	r8, r0
 8007024:	4607      	mov	r7, r0
 8007026:	9b04      	ldr	r3, [sp, #16]
 8007028:	3301      	adds	r3, #1
 800702a:	9304      	str	r3, [sp, #16]
 800702c:	e775      	b.n	8006f1a <_dtoa_r+0xa0a>
 800702e:	f000 f9c3 	bl	80073b8 <__multadd>
 8007032:	4639      	mov	r1, r7
 8007034:	4680      	mov	r8, r0
 8007036:	2300      	movs	r3, #0
 8007038:	220a      	movs	r2, #10
 800703a:	4620      	mov	r0, r4
 800703c:	f000 f9bc 	bl	80073b8 <__multadd>
 8007040:	4607      	mov	r7, r0
 8007042:	e7f0      	b.n	8007026 <_dtoa_r+0xb16>
 8007044:	9b04      	ldr	r3, [sp, #16]
 8007046:	9301      	str	r3, [sp, #4]
 8007048:	9d00      	ldr	r5, [sp, #0]
 800704a:	4631      	mov	r1, r6
 800704c:	4650      	mov	r0, sl
 800704e:	f7ff f9d6 	bl	80063fe <quorem>
 8007052:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007056:	9b00      	ldr	r3, [sp, #0]
 8007058:	f805 9b01 	strb.w	r9, [r5], #1
 800705c:	1aea      	subs	r2, r5, r3
 800705e:	9b01      	ldr	r3, [sp, #4]
 8007060:	4293      	cmp	r3, r2
 8007062:	dd07      	ble.n	8007074 <_dtoa_r+0xb64>
 8007064:	4651      	mov	r1, sl
 8007066:	2300      	movs	r3, #0
 8007068:	220a      	movs	r2, #10
 800706a:	4620      	mov	r0, r4
 800706c:	f000 f9a4 	bl	80073b8 <__multadd>
 8007070:	4682      	mov	sl, r0
 8007072:	e7ea      	b.n	800704a <_dtoa_r+0xb3a>
 8007074:	9b01      	ldr	r3, [sp, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	bfc8      	it	gt
 800707a:	461d      	movgt	r5, r3
 800707c:	9b00      	ldr	r3, [sp, #0]
 800707e:	bfd8      	it	le
 8007080:	2501      	movle	r5, #1
 8007082:	441d      	add	r5, r3
 8007084:	f04f 0800 	mov.w	r8, #0
 8007088:	4651      	mov	r1, sl
 800708a:	2201      	movs	r2, #1
 800708c:	4620      	mov	r0, r4
 800708e:	f000 fb41 	bl	8007714 <__lshift>
 8007092:	4631      	mov	r1, r6
 8007094:	4682      	mov	sl, r0
 8007096:	f000 fba9 	bl	80077ec <__mcmp>
 800709a:	2800      	cmp	r0, #0
 800709c:	dc96      	bgt.n	8006fcc <_dtoa_r+0xabc>
 800709e:	d102      	bne.n	80070a6 <_dtoa_r+0xb96>
 80070a0:	f019 0f01 	tst.w	r9, #1
 80070a4:	d192      	bne.n	8006fcc <_dtoa_r+0xabc>
 80070a6:	462b      	mov	r3, r5
 80070a8:	461d      	mov	r5, r3
 80070aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070ae:	2a30      	cmp	r2, #48	; 0x30
 80070b0:	d0fa      	beq.n	80070a8 <_dtoa_r+0xb98>
 80070b2:	e6dd      	b.n	8006e70 <_dtoa_r+0x960>
 80070b4:	9a00      	ldr	r2, [sp, #0]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d189      	bne.n	8006fce <_dtoa_r+0xabe>
 80070ba:	f10b 0b01 	add.w	fp, fp, #1
 80070be:	2331      	movs	r3, #49	; 0x31
 80070c0:	e796      	b.n	8006ff0 <_dtoa_r+0xae0>
 80070c2:	4b0a      	ldr	r3, [pc, #40]	; (80070ec <_dtoa_r+0xbdc>)
 80070c4:	f7ff ba99 	b.w	80065fa <_dtoa_r+0xea>
 80070c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f47f aa6d 	bne.w	80065aa <_dtoa_r+0x9a>
 80070d0:	4b07      	ldr	r3, [pc, #28]	; (80070f0 <_dtoa_r+0xbe0>)
 80070d2:	f7ff ba92 	b.w	80065fa <_dtoa_r+0xea>
 80070d6:	9b01      	ldr	r3, [sp, #4]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	dcb5      	bgt.n	8007048 <_dtoa_r+0xb38>
 80070dc:	9b07      	ldr	r3, [sp, #28]
 80070de:	2b02      	cmp	r3, #2
 80070e0:	f73f aeb1 	bgt.w	8006e46 <_dtoa_r+0x936>
 80070e4:	e7b0      	b.n	8007048 <_dtoa_r+0xb38>
 80070e6:	bf00      	nop
 80070e8:	08008604 	.word	0x08008604
 80070ec:	08008564 	.word	0x08008564
 80070f0:	08008588 	.word	0x08008588

080070f4 <_free_r>:
 80070f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070f6:	2900      	cmp	r1, #0
 80070f8:	d044      	beq.n	8007184 <_free_r+0x90>
 80070fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070fe:	9001      	str	r0, [sp, #4]
 8007100:	2b00      	cmp	r3, #0
 8007102:	f1a1 0404 	sub.w	r4, r1, #4
 8007106:	bfb8      	it	lt
 8007108:	18e4      	addlt	r4, r4, r3
 800710a:	f000 f8e7 	bl	80072dc <__malloc_lock>
 800710e:	4a1e      	ldr	r2, [pc, #120]	; (8007188 <_free_r+0x94>)
 8007110:	9801      	ldr	r0, [sp, #4]
 8007112:	6813      	ldr	r3, [r2, #0]
 8007114:	b933      	cbnz	r3, 8007124 <_free_r+0x30>
 8007116:	6063      	str	r3, [r4, #4]
 8007118:	6014      	str	r4, [r2, #0]
 800711a:	b003      	add	sp, #12
 800711c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007120:	f000 b8e2 	b.w	80072e8 <__malloc_unlock>
 8007124:	42a3      	cmp	r3, r4
 8007126:	d908      	bls.n	800713a <_free_r+0x46>
 8007128:	6825      	ldr	r5, [r4, #0]
 800712a:	1961      	adds	r1, r4, r5
 800712c:	428b      	cmp	r3, r1
 800712e:	bf01      	itttt	eq
 8007130:	6819      	ldreq	r1, [r3, #0]
 8007132:	685b      	ldreq	r3, [r3, #4]
 8007134:	1949      	addeq	r1, r1, r5
 8007136:	6021      	streq	r1, [r4, #0]
 8007138:	e7ed      	b.n	8007116 <_free_r+0x22>
 800713a:	461a      	mov	r2, r3
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	b10b      	cbz	r3, 8007144 <_free_r+0x50>
 8007140:	42a3      	cmp	r3, r4
 8007142:	d9fa      	bls.n	800713a <_free_r+0x46>
 8007144:	6811      	ldr	r1, [r2, #0]
 8007146:	1855      	adds	r5, r2, r1
 8007148:	42a5      	cmp	r5, r4
 800714a:	d10b      	bne.n	8007164 <_free_r+0x70>
 800714c:	6824      	ldr	r4, [r4, #0]
 800714e:	4421      	add	r1, r4
 8007150:	1854      	adds	r4, r2, r1
 8007152:	42a3      	cmp	r3, r4
 8007154:	6011      	str	r1, [r2, #0]
 8007156:	d1e0      	bne.n	800711a <_free_r+0x26>
 8007158:	681c      	ldr	r4, [r3, #0]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	6053      	str	r3, [r2, #4]
 800715e:	440c      	add	r4, r1
 8007160:	6014      	str	r4, [r2, #0]
 8007162:	e7da      	b.n	800711a <_free_r+0x26>
 8007164:	d902      	bls.n	800716c <_free_r+0x78>
 8007166:	230c      	movs	r3, #12
 8007168:	6003      	str	r3, [r0, #0]
 800716a:	e7d6      	b.n	800711a <_free_r+0x26>
 800716c:	6825      	ldr	r5, [r4, #0]
 800716e:	1961      	adds	r1, r4, r5
 8007170:	428b      	cmp	r3, r1
 8007172:	bf04      	itt	eq
 8007174:	6819      	ldreq	r1, [r3, #0]
 8007176:	685b      	ldreq	r3, [r3, #4]
 8007178:	6063      	str	r3, [r4, #4]
 800717a:	bf04      	itt	eq
 800717c:	1949      	addeq	r1, r1, r5
 800717e:	6021      	streq	r1, [r4, #0]
 8007180:	6054      	str	r4, [r2, #4]
 8007182:	e7ca      	b.n	800711a <_free_r+0x26>
 8007184:	b003      	add	sp, #12
 8007186:	bd30      	pop	{r4, r5, pc}
 8007188:	20000528 	.word	0x20000528

0800718c <malloc>:
 800718c:	4b02      	ldr	r3, [pc, #8]	; (8007198 <malloc+0xc>)
 800718e:	4601      	mov	r1, r0
 8007190:	6818      	ldr	r0, [r3, #0]
 8007192:	f000 b823 	b.w	80071dc <_malloc_r>
 8007196:	bf00      	nop
 8007198:	20000068 	.word	0x20000068

0800719c <sbrk_aligned>:
 800719c:	b570      	push	{r4, r5, r6, lr}
 800719e:	4e0e      	ldr	r6, [pc, #56]	; (80071d8 <sbrk_aligned+0x3c>)
 80071a0:	460c      	mov	r4, r1
 80071a2:	6831      	ldr	r1, [r6, #0]
 80071a4:	4605      	mov	r5, r0
 80071a6:	b911      	cbnz	r1, 80071ae <sbrk_aligned+0x12>
 80071a8:	f000 fe40 	bl	8007e2c <_sbrk_r>
 80071ac:	6030      	str	r0, [r6, #0]
 80071ae:	4621      	mov	r1, r4
 80071b0:	4628      	mov	r0, r5
 80071b2:	f000 fe3b 	bl	8007e2c <_sbrk_r>
 80071b6:	1c43      	adds	r3, r0, #1
 80071b8:	d00a      	beq.n	80071d0 <sbrk_aligned+0x34>
 80071ba:	1cc4      	adds	r4, r0, #3
 80071bc:	f024 0403 	bic.w	r4, r4, #3
 80071c0:	42a0      	cmp	r0, r4
 80071c2:	d007      	beq.n	80071d4 <sbrk_aligned+0x38>
 80071c4:	1a21      	subs	r1, r4, r0
 80071c6:	4628      	mov	r0, r5
 80071c8:	f000 fe30 	bl	8007e2c <_sbrk_r>
 80071cc:	3001      	adds	r0, #1
 80071ce:	d101      	bne.n	80071d4 <sbrk_aligned+0x38>
 80071d0:	f04f 34ff 	mov.w	r4, #4294967295
 80071d4:	4620      	mov	r0, r4
 80071d6:	bd70      	pop	{r4, r5, r6, pc}
 80071d8:	2000052c 	.word	0x2000052c

080071dc <_malloc_r>:
 80071dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071e0:	1ccd      	adds	r5, r1, #3
 80071e2:	f025 0503 	bic.w	r5, r5, #3
 80071e6:	3508      	adds	r5, #8
 80071e8:	2d0c      	cmp	r5, #12
 80071ea:	bf38      	it	cc
 80071ec:	250c      	movcc	r5, #12
 80071ee:	2d00      	cmp	r5, #0
 80071f0:	4607      	mov	r7, r0
 80071f2:	db01      	blt.n	80071f8 <_malloc_r+0x1c>
 80071f4:	42a9      	cmp	r1, r5
 80071f6:	d905      	bls.n	8007204 <_malloc_r+0x28>
 80071f8:	230c      	movs	r3, #12
 80071fa:	603b      	str	r3, [r7, #0]
 80071fc:	2600      	movs	r6, #0
 80071fe:	4630      	mov	r0, r6
 8007200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007204:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80072d8 <_malloc_r+0xfc>
 8007208:	f000 f868 	bl	80072dc <__malloc_lock>
 800720c:	f8d8 3000 	ldr.w	r3, [r8]
 8007210:	461c      	mov	r4, r3
 8007212:	bb5c      	cbnz	r4, 800726c <_malloc_r+0x90>
 8007214:	4629      	mov	r1, r5
 8007216:	4638      	mov	r0, r7
 8007218:	f7ff ffc0 	bl	800719c <sbrk_aligned>
 800721c:	1c43      	adds	r3, r0, #1
 800721e:	4604      	mov	r4, r0
 8007220:	d155      	bne.n	80072ce <_malloc_r+0xf2>
 8007222:	f8d8 4000 	ldr.w	r4, [r8]
 8007226:	4626      	mov	r6, r4
 8007228:	2e00      	cmp	r6, #0
 800722a:	d145      	bne.n	80072b8 <_malloc_r+0xdc>
 800722c:	2c00      	cmp	r4, #0
 800722e:	d048      	beq.n	80072c2 <_malloc_r+0xe6>
 8007230:	6823      	ldr	r3, [r4, #0]
 8007232:	4631      	mov	r1, r6
 8007234:	4638      	mov	r0, r7
 8007236:	eb04 0903 	add.w	r9, r4, r3
 800723a:	f000 fdf7 	bl	8007e2c <_sbrk_r>
 800723e:	4581      	cmp	r9, r0
 8007240:	d13f      	bne.n	80072c2 <_malloc_r+0xe6>
 8007242:	6821      	ldr	r1, [r4, #0]
 8007244:	1a6d      	subs	r5, r5, r1
 8007246:	4629      	mov	r1, r5
 8007248:	4638      	mov	r0, r7
 800724a:	f7ff ffa7 	bl	800719c <sbrk_aligned>
 800724e:	3001      	adds	r0, #1
 8007250:	d037      	beq.n	80072c2 <_malloc_r+0xe6>
 8007252:	6823      	ldr	r3, [r4, #0]
 8007254:	442b      	add	r3, r5
 8007256:	6023      	str	r3, [r4, #0]
 8007258:	f8d8 3000 	ldr.w	r3, [r8]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d038      	beq.n	80072d2 <_malloc_r+0xf6>
 8007260:	685a      	ldr	r2, [r3, #4]
 8007262:	42a2      	cmp	r2, r4
 8007264:	d12b      	bne.n	80072be <_malloc_r+0xe2>
 8007266:	2200      	movs	r2, #0
 8007268:	605a      	str	r2, [r3, #4]
 800726a:	e00f      	b.n	800728c <_malloc_r+0xb0>
 800726c:	6822      	ldr	r2, [r4, #0]
 800726e:	1b52      	subs	r2, r2, r5
 8007270:	d41f      	bmi.n	80072b2 <_malloc_r+0xd6>
 8007272:	2a0b      	cmp	r2, #11
 8007274:	d917      	bls.n	80072a6 <_malloc_r+0xca>
 8007276:	1961      	adds	r1, r4, r5
 8007278:	42a3      	cmp	r3, r4
 800727a:	6025      	str	r5, [r4, #0]
 800727c:	bf18      	it	ne
 800727e:	6059      	strne	r1, [r3, #4]
 8007280:	6863      	ldr	r3, [r4, #4]
 8007282:	bf08      	it	eq
 8007284:	f8c8 1000 	streq.w	r1, [r8]
 8007288:	5162      	str	r2, [r4, r5]
 800728a:	604b      	str	r3, [r1, #4]
 800728c:	4638      	mov	r0, r7
 800728e:	f104 060b 	add.w	r6, r4, #11
 8007292:	f000 f829 	bl	80072e8 <__malloc_unlock>
 8007296:	f026 0607 	bic.w	r6, r6, #7
 800729a:	1d23      	adds	r3, r4, #4
 800729c:	1af2      	subs	r2, r6, r3
 800729e:	d0ae      	beq.n	80071fe <_malloc_r+0x22>
 80072a0:	1b9b      	subs	r3, r3, r6
 80072a2:	50a3      	str	r3, [r4, r2]
 80072a4:	e7ab      	b.n	80071fe <_malloc_r+0x22>
 80072a6:	42a3      	cmp	r3, r4
 80072a8:	6862      	ldr	r2, [r4, #4]
 80072aa:	d1dd      	bne.n	8007268 <_malloc_r+0x8c>
 80072ac:	f8c8 2000 	str.w	r2, [r8]
 80072b0:	e7ec      	b.n	800728c <_malloc_r+0xb0>
 80072b2:	4623      	mov	r3, r4
 80072b4:	6864      	ldr	r4, [r4, #4]
 80072b6:	e7ac      	b.n	8007212 <_malloc_r+0x36>
 80072b8:	4634      	mov	r4, r6
 80072ba:	6876      	ldr	r6, [r6, #4]
 80072bc:	e7b4      	b.n	8007228 <_malloc_r+0x4c>
 80072be:	4613      	mov	r3, r2
 80072c0:	e7cc      	b.n	800725c <_malloc_r+0x80>
 80072c2:	230c      	movs	r3, #12
 80072c4:	603b      	str	r3, [r7, #0]
 80072c6:	4638      	mov	r0, r7
 80072c8:	f000 f80e 	bl	80072e8 <__malloc_unlock>
 80072cc:	e797      	b.n	80071fe <_malloc_r+0x22>
 80072ce:	6025      	str	r5, [r4, #0]
 80072d0:	e7dc      	b.n	800728c <_malloc_r+0xb0>
 80072d2:	605b      	str	r3, [r3, #4]
 80072d4:	deff      	udf	#255	; 0xff
 80072d6:	bf00      	nop
 80072d8:	20000528 	.word	0x20000528

080072dc <__malloc_lock>:
 80072dc:	4801      	ldr	r0, [pc, #4]	; (80072e4 <__malloc_lock+0x8>)
 80072de:	f7ff b88c 	b.w	80063fa <__retarget_lock_acquire_recursive>
 80072e2:	bf00      	nop
 80072e4:	20000524 	.word	0x20000524

080072e8 <__malloc_unlock>:
 80072e8:	4801      	ldr	r0, [pc, #4]	; (80072f0 <__malloc_unlock+0x8>)
 80072ea:	f7ff b887 	b.w	80063fc <__retarget_lock_release_recursive>
 80072ee:	bf00      	nop
 80072f0:	20000524 	.word	0x20000524

080072f4 <_Balloc>:
 80072f4:	b570      	push	{r4, r5, r6, lr}
 80072f6:	69c6      	ldr	r6, [r0, #28]
 80072f8:	4604      	mov	r4, r0
 80072fa:	460d      	mov	r5, r1
 80072fc:	b976      	cbnz	r6, 800731c <_Balloc+0x28>
 80072fe:	2010      	movs	r0, #16
 8007300:	f7ff ff44 	bl	800718c <malloc>
 8007304:	4602      	mov	r2, r0
 8007306:	61e0      	str	r0, [r4, #28]
 8007308:	b920      	cbnz	r0, 8007314 <_Balloc+0x20>
 800730a:	4b18      	ldr	r3, [pc, #96]	; (800736c <_Balloc+0x78>)
 800730c:	4818      	ldr	r0, [pc, #96]	; (8007370 <_Balloc+0x7c>)
 800730e:	216b      	movs	r1, #107	; 0x6b
 8007310:	f000 fdaa 	bl	8007e68 <__assert_func>
 8007314:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007318:	6006      	str	r6, [r0, #0]
 800731a:	60c6      	str	r6, [r0, #12]
 800731c:	69e6      	ldr	r6, [r4, #28]
 800731e:	68f3      	ldr	r3, [r6, #12]
 8007320:	b183      	cbz	r3, 8007344 <_Balloc+0x50>
 8007322:	69e3      	ldr	r3, [r4, #28]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800732a:	b9b8      	cbnz	r0, 800735c <_Balloc+0x68>
 800732c:	2101      	movs	r1, #1
 800732e:	fa01 f605 	lsl.w	r6, r1, r5
 8007332:	1d72      	adds	r2, r6, #5
 8007334:	0092      	lsls	r2, r2, #2
 8007336:	4620      	mov	r0, r4
 8007338:	f000 fdb4 	bl	8007ea4 <_calloc_r>
 800733c:	b160      	cbz	r0, 8007358 <_Balloc+0x64>
 800733e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007342:	e00e      	b.n	8007362 <_Balloc+0x6e>
 8007344:	2221      	movs	r2, #33	; 0x21
 8007346:	2104      	movs	r1, #4
 8007348:	4620      	mov	r0, r4
 800734a:	f000 fdab 	bl	8007ea4 <_calloc_r>
 800734e:	69e3      	ldr	r3, [r4, #28]
 8007350:	60f0      	str	r0, [r6, #12]
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1e4      	bne.n	8007322 <_Balloc+0x2e>
 8007358:	2000      	movs	r0, #0
 800735a:	bd70      	pop	{r4, r5, r6, pc}
 800735c:	6802      	ldr	r2, [r0, #0]
 800735e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007362:	2300      	movs	r3, #0
 8007364:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007368:	e7f7      	b.n	800735a <_Balloc+0x66>
 800736a:	bf00      	nop
 800736c:	08008595 	.word	0x08008595
 8007370:	08008615 	.word	0x08008615

08007374 <_Bfree>:
 8007374:	b570      	push	{r4, r5, r6, lr}
 8007376:	69c6      	ldr	r6, [r0, #28]
 8007378:	4605      	mov	r5, r0
 800737a:	460c      	mov	r4, r1
 800737c:	b976      	cbnz	r6, 800739c <_Bfree+0x28>
 800737e:	2010      	movs	r0, #16
 8007380:	f7ff ff04 	bl	800718c <malloc>
 8007384:	4602      	mov	r2, r0
 8007386:	61e8      	str	r0, [r5, #28]
 8007388:	b920      	cbnz	r0, 8007394 <_Bfree+0x20>
 800738a:	4b09      	ldr	r3, [pc, #36]	; (80073b0 <_Bfree+0x3c>)
 800738c:	4809      	ldr	r0, [pc, #36]	; (80073b4 <_Bfree+0x40>)
 800738e:	218f      	movs	r1, #143	; 0x8f
 8007390:	f000 fd6a 	bl	8007e68 <__assert_func>
 8007394:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007398:	6006      	str	r6, [r0, #0]
 800739a:	60c6      	str	r6, [r0, #12]
 800739c:	b13c      	cbz	r4, 80073ae <_Bfree+0x3a>
 800739e:	69eb      	ldr	r3, [r5, #28]
 80073a0:	6862      	ldr	r2, [r4, #4]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80073a8:	6021      	str	r1, [r4, #0]
 80073aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80073ae:	bd70      	pop	{r4, r5, r6, pc}
 80073b0:	08008595 	.word	0x08008595
 80073b4:	08008615 	.word	0x08008615

080073b8 <__multadd>:
 80073b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073bc:	690d      	ldr	r5, [r1, #16]
 80073be:	4607      	mov	r7, r0
 80073c0:	460c      	mov	r4, r1
 80073c2:	461e      	mov	r6, r3
 80073c4:	f101 0c14 	add.w	ip, r1, #20
 80073c8:	2000      	movs	r0, #0
 80073ca:	f8dc 3000 	ldr.w	r3, [ip]
 80073ce:	b299      	uxth	r1, r3
 80073d0:	fb02 6101 	mla	r1, r2, r1, r6
 80073d4:	0c1e      	lsrs	r6, r3, #16
 80073d6:	0c0b      	lsrs	r3, r1, #16
 80073d8:	fb02 3306 	mla	r3, r2, r6, r3
 80073dc:	b289      	uxth	r1, r1
 80073de:	3001      	adds	r0, #1
 80073e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80073e4:	4285      	cmp	r5, r0
 80073e6:	f84c 1b04 	str.w	r1, [ip], #4
 80073ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80073ee:	dcec      	bgt.n	80073ca <__multadd+0x12>
 80073f0:	b30e      	cbz	r6, 8007436 <__multadd+0x7e>
 80073f2:	68a3      	ldr	r3, [r4, #8]
 80073f4:	42ab      	cmp	r3, r5
 80073f6:	dc19      	bgt.n	800742c <__multadd+0x74>
 80073f8:	6861      	ldr	r1, [r4, #4]
 80073fa:	4638      	mov	r0, r7
 80073fc:	3101      	adds	r1, #1
 80073fe:	f7ff ff79 	bl	80072f4 <_Balloc>
 8007402:	4680      	mov	r8, r0
 8007404:	b928      	cbnz	r0, 8007412 <__multadd+0x5a>
 8007406:	4602      	mov	r2, r0
 8007408:	4b0c      	ldr	r3, [pc, #48]	; (800743c <__multadd+0x84>)
 800740a:	480d      	ldr	r0, [pc, #52]	; (8007440 <__multadd+0x88>)
 800740c:	21ba      	movs	r1, #186	; 0xba
 800740e:	f000 fd2b 	bl	8007e68 <__assert_func>
 8007412:	6922      	ldr	r2, [r4, #16]
 8007414:	3202      	adds	r2, #2
 8007416:	f104 010c 	add.w	r1, r4, #12
 800741a:	0092      	lsls	r2, r2, #2
 800741c:	300c      	adds	r0, #12
 800741e:	f000 fd15 	bl	8007e4c <memcpy>
 8007422:	4621      	mov	r1, r4
 8007424:	4638      	mov	r0, r7
 8007426:	f7ff ffa5 	bl	8007374 <_Bfree>
 800742a:	4644      	mov	r4, r8
 800742c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007430:	3501      	adds	r5, #1
 8007432:	615e      	str	r6, [r3, #20]
 8007434:	6125      	str	r5, [r4, #16]
 8007436:	4620      	mov	r0, r4
 8007438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800743c:	08008604 	.word	0x08008604
 8007440:	08008615 	.word	0x08008615

08007444 <__hi0bits>:
 8007444:	0c03      	lsrs	r3, r0, #16
 8007446:	041b      	lsls	r3, r3, #16
 8007448:	b9d3      	cbnz	r3, 8007480 <__hi0bits+0x3c>
 800744a:	0400      	lsls	r0, r0, #16
 800744c:	2310      	movs	r3, #16
 800744e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007452:	bf04      	itt	eq
 8007454:	0200      	lsleq	r0, r0, #8
 8007456:	3308      	addeq	r3, #8
 8007458:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800745c:	bf04      	itt	eq
 800745e:	0100      	lsleq	r0, r0, #4
 8007460:	3304      	addeq	r3, #4
 8007462:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007466:	bf04      	itt	eq
 8007468:	0080      	lsleq	r0, r0, #2
 800746a:	3302      	addeq	r3, #2
 800746c:	2800      	cmp	r0, #0
 800746e:	db05      	blt.n	800747c <__hi0bits+0x38>
 8007470:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007474:	f103 0301 	add.w	r3, r3, #1
 8007478:	bf08      	it	eq
 800747a:	2320      	moveq	r3, #32
 800747c:	4618      	mov	r0, r3
 800747e:	4770      	bx	lr
 8007480:	2300      	movs	r3, #0
 8007482:	e7e4      	b.n	800744e <__hi0bits+0xa>

08007484 <__lo0bits>:
 8007484:	6803      	ldr	r3, [r0, #0]
 8007486:	f013 0207 	ands.w	r2, r3, #7
 800748a:	d00c      	beq.n	80074a6 <__lo0bits+0x22>
 800748c:	07d9      	lsls	r1, r3, #31
 800748e:	d422      	bmi.n	80074d6 <__lo0bits+0x52>
 8007490:	079a      	lsls	r2, r3, #30
 8007492:	bf49      	itett	mi
 8007494:	085b      	lsrmi	r3, r3, #1
 8007496:	089b      	lsrpl	r3, r3, #2
 8007498:	6003      	strmi	r3, [r0, #0]
 800749a:	2201      	movmi	r2, #1
 800749c:	bf5c      	itt	pl
 800749e:	6003      	strpl	r3, [r0, #0]
 80074a0:	2202      	movpl	r2, #2
 80074a2:	4610      	mov	r0, r2
 80074a4:	4770      	bx	lr
 80074a6:	b299      	uxth	r1, r3
 80074a8:	b909      	cbnz	r1, 80074ae <__lo0bits+0x2a>
 80074aa:	0c1b      	lsrs	r3, r3, #16
 80074ac:	2210      	movs	r2, #16
 80074ae:	b2d9      	uxtb	r1, r3
 80074b0:	b909      	cbnz	r1, 80074b6 <__lo0bits+0x32>
 80074b2:	3208      	adds	r2, #8
 80074b4:	0a1b      	lsrs	r3, r3, #8
 80074b6:	0719      	lsls	r1, r3, #28
 80074b8:	bf04      	itt	eq
 80074ba:	091b      	lsreq	r3, r3, #4
 80074bc:	3204      	addeq	r2, #4
 80074be:	0799      	lsls	r1, r3, #30
 80074c0:	bf04      	itt	eq
 80074c2:	089b      	lsreq	r3, r3, #2
 80074c4:	3202      	addeq	r2, #2
 80074c6:	07d9      	lsls	r1, r3, #31
 80074c8:	d403      	bmi.n	80074d2 <__lo0bits+0x4e>
 80074ca:	085b      	lsrs	r3, r3, #1
 80074cc:	f102 0201 	add.w	r2, r2, #1
 80074d0:	d003      	beq.n	80074da <__lo0bits+0x56>
 80074d2:	6003      	str	r3, [r0, #0]
 80074d4:	e7e5      	b.n	80074a2 <__lo0bits+0x1e>
 80074d6:	2200      	movs	r2, #0
 80074d8:	e7e3      	b.n	80074a2 <__lo0bits+0x1e>
 80074da:	2220      	movs	r2, #32
 80074dc:	e7e1      	b.n	80074a2 <__lo0bits+0x1e>
	...

080074e0 <__i2b>:
 80074e0:	b510      	push	{r4, lr}
 80074e2:	460c      	mov	r4, r1
 80074e4:	2101      	movs	r1, #1
 80074e6:	f7ff ff05 	bl	80072f4 <_Balloc>
 80074ea:	4602      	mov	r2, r0
 80074ec:	b928      	cbnz	r0, 80074fa <__i2b+0x1a>
 80074ee:	4b05      	ldr	r3, [pc, #20]	; (8007504 <__i2b+0x24>)
 80074f0:	4805      	ldr	r0, [pc, #20]	; (8007508 <__i2b+0x28>)
 80074f2:	f240 1145 	movw	r1, #325	; 0x145
 80074f6:	f000 fcb7 	bl	8007e68 <__assert_func>
 80074fa:	2301      	movs	r3, #1
 80074fc:	6144      	str	r4, [r0, #20]
 80074fe:	6103      	str	r3, [r0, #16]
 8007500:	bd10      	pop	{r4, pc}
 8007502:	bf00      	nop
 8007504:	08008604 	.word	0x08008604
 8007508:	08008615 	.word	0x08008615

0800750c <__multiply>:
 800750c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007510:	4691      	mov	r9, r2
 8007512:	690a      	ldr	r2, [r1, #16]
 8007514:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007518:	429a      	cmp	r2, r3
 800751a:	bfb8      	it	lt
 800751c:	460b      	movlt	r3, r1
 800751e:	460c      	mov	r4, r1
 8007520:	bfbc      	itt	lt
 8007522:	464c      	movlt	r4, r9
 8007524:	4699      	movlt	r9, r3
 8007526:	6927      	ldr	r7, [r4, #16]
 8007528:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800752c:	68a3      	ldr	r3, [r4, #8]
 800752e:	6861      	ldr	r1, [r4, #4]
 8007530:	eb07 060a 	add.w	r6, r7, sl
 8007534:	42b3      	cmp	r3, r6
 8007536:	b085      	sub	sp, #20
 8007538:	bfb8      	it	lt
 800753a:	3101      	addlt	r1, #1
 800753c:	f7ff feda 	bl	80072f4 <_Balloc>
 8007540:	b930      	cbnz	r0, 8007550 <__multiply+0x44>
 8007542:	4602      	mov	r2, r0
 8007544:	4b44      	ldr	r3, [pc, #272]	; (8007658 <__multiply+0x14c>)
 8007546:	4845      	ldr	r0, [pc, #276]	; (800765c <__multiply+0x150>)
 8007548:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800754c:	f000 fc8c 	bl	8007e68 <__assert_func>
 8007550:	f100 0514 	add.w	r5, r0, #20
 8007554:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007558:	462b      	mov	r3, r5
 800755a:	2200      	movs	r2, #0
 800755c:	4543      	cmp	r3, r8
 800755e:	d321      	bcc.n	80075a4 <__multiply+0x98>
 8007560:	f104 0314 	add.w	r3, r4, #20
 8007564:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007568:	f109 0314 	add.w	r3, r9, #20
 800756c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007570:	9202      	str	r2, [sp, #8]
 8007572:	1b3a      	subs	r2, r7, r4
 8007574:	3a15      	subs	r2, #21
 8007576:	f022 0203 	bic.w	r2, r2, #3
 800757a:	3204      	adds	r2, #4
 800757c:	f104 0115 	add.w	r1, r4, #21
 8007580:	428f      	cmp	r7, r1
 8007582:	bf38      	it	cc
 8007584:	2204      	movcc	r2, #4
 8007586:	9201      	str	r2, [sp, #4]
 8007588:	9a02      	ldr	r2, [sp, #8]
 800758a:	9303      	str	r3, [sp, #12]
 800758c:	429a      	cmp	r2, r3
 800758e:	d80c      	bhi.n	80075aa <__multiply+0x9e>
 8007590:	2e00      	cmp	r6, #0
 8007592:	dd03      	ble.n	800759c <__multiply+0x90>
 8007594:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007598:	2b00      	cmp	r3, #0
 800759a:	d05b      	beq.n	8007654 <__multiply+0x148>
 800759c:	6106      	str	r6, [r0, #16]
 800759e:	b005      	add	sp, #20
 80075a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075a4:	f843 2b04 	str.w	r2, [r3], #4
 80075a8:	e7d8      	b.n	800755c <__multiply+0x50>
 80075aa:	f8b3 a000 	ldrh.w	sl, [r3]
 80075ae:	f1ba 0f00 	cmp.w	sl, #0
 80075b2:	d024      	beq.n	80075fe <__multiply+0xf2>
 80075b4:	f104 0e14 	add.w	lr, r4, #20
 80075b8:	46a9      	mov	r9, r5
 80075ba:	f04f 0c00 	mov.w	ip, #0
 80075be:	f85e 2b04 	ldr.w	r2, [lr], #4
 80075c2:	f8d9 1000 	ldr.w	r1, [r9]
 80075c6:	fa1f fb82 	uxth.w	fp, r2
 80075ca:	b289      	uxth	r1, r1
 80075cc:	fb0a 110b 	mla	r1, sl, fp, r1
 80075d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80075d4:	f8d9 2000 	ldr.w	r2, [r9]
 80075d8:	4461      	add	r1, ip
 80075da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80075de:	fb0a c20b 	mla	r2, sl, fp, ip
 80075e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80075e6:	b289      	uxth	r1, r1
 80075e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80075ec:	4577      	cmp	r7, lr
 80075ee:	f849 1b04 	str.w	r1, [r9], #4
 80075f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80075f6:	d8e2      	bhi.n	80075be <__multiply+0xb2>
 80075f8:	9a01      	ldr	r2, [sp, #4]
 80075fa:	f845 c002 	str.w	ip, [r5, r2]
 80075fe:	9a03      	ldr	r2, [sp, #12]
 8007600:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007604:	3304      	adds	r3, #4
 8007606:	f1b9 0f00 	cmp.w	r9, #0
 800760a:	d021      	beq.n	8007650 <__multiply+0x144>
 800760c:	6829      	ldr	r1, [r5, #0]
 800760e:	f104 0c14 	add.w	ip, r4, #20
 8007612:	46ae      	mov	lr, r5
 8007614:	f04f 0a00 	mov.w	sl, #0
 8007618:	f8bc b000 	ldrh.w	fp, [ip]
 800761c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007620:	fb09 220b 	mla	r2, r9, fp, r2
 8007624:	4452      	add	r2, sl
 8007626:	b289      	uxth	r1, r1
 8007628:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800762c:	f84e 1b04 	str.w	r1, [lr], #4
 8007630:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007634:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007638:	f8be 1000 	ldrh.w	r1, [lr]
 800763c:	fb09 110a 	mla	r1, r9, sl, r1
 8007640:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007644:	4567      	cmp	r7, ip
 8007646:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800764a:	d8e5      	bhi.n	8007618 <__multiply+0x10c>
 800764c:	9a01      	ldr	r2, [sp, #4]
 800764e:	50a9      	str	r1, [r5, r2]
 8007650:	3504      	adds	r5, #4
 8007652:	e799      	b.n	8007588 <__multiply+0x7c>
 8007654:	3e01      	subs	r6, #1
 8007656:	e79b      	b.n	8007590 <__multiply+0x84>
 8007658:	08008604 	.word	0x08008604
 800765c:	08008615 	.word	0x08008615

08007660 <__pow5mult>:
 8007660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007664:	4615      	mov	r5, r2
 8007666:	f012 0203 	ands.w	r2, r2, #3
 800766a:	4606      	mov	r6, r0
 800766c:	460f      	mov	r7, r1
 800766e:	d007      	beq.n	8007680 <__pow5mult+0x20>
 8007670:	4c25      	ldr	r4, [pc, #148]	; (8007708 <__pow5mult+0xa8>)
 8007672:	3a01      	subs	r2, #1
 8007674:	2300      	movs	r3, #0
 8007676:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800767a:	f7ff fe9d 	bl	80073b8 <__multadd>
 800767e:	4607      	mov	r7, r0
 8007680:	10ad      	asrs	r5, r5, #2
 8007682:	d03d      	beq.n	8007700 <__pow5mult+0xa0>
 8007684:	69f4      	ldr	r4, [r6, #28]
 8007686:	b97c      	cbnz	r4, 80076a8 <__pow5mult+0x48>
 8007688:	2010      	movs	r0, #16
 800768a:	f7ff fd7f 	bl	800718c <malloc>
 800768e:	4602      	mov	r2, r0
 8007690:	61f0      	str	r0, [r6, #28]
 8007692:	b928      	cbnz	r0, 80076a0 <__pow5mult+0x40>
 8007694:	4b1d      	ldr	r3, [pc, #116]	; (800770c <__pow5mult+0xac>)
 8007696:	481e      	ldr	r0, [pc, #120]	; (8007710 <__pow5mult+0xb0>)
 8007698:	f240 11b3 	movw	r1, #435	; 0x1b3
 800769c:	f000 fbe4 	bl	8007e68 <__assert_func>
 80076a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80076a4:	6004      	str	r4, [r0, #0]
 80076a6:	60c4      	str	r4, [r0, #12]
 80076a8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80076ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80076b0:	b94c      	cbnz	r4, 80076c6 <__pow5mult+0x66>
 80076b2:	f240 2171 	movw	r1, #625	; 0x271
 80076b6:	4630      	mov	r0, r6
 80076b8:	f7ff ff12 	bl	80074e0 <__i2b>
 80076bc:	2300      	movs	r3, #0
 80076be:	f8c8 0008 	str.w	r0, [r8, #8]
 80076c2:	4604      	mov	r4, r0
 80076c4:	6003      	str	r3, [r0, #0]
 80076c6:	f04f 0900 	mov.w	r9, #0
 80076ca:	07eb      	lsls	r3, r5, #31
 80076cc:	d50a      	bpl.n	80076e4 <__pow5mult+0x84>
 80076ce:	4639      	mov	r1, r7
 80076d0:	4622      	mov	r2, r4
 80076d2:	4630      	mov	r0, r6
 80076d4:	f7ff ff1a 	bl	800750c <__multiply>
 80076d8:	4639      	mov	r1, r7
 80076da:	4680      	mov	r8, r0
 80076dc:	4630      	mov	r0, r6
 80076de:	f7ff fe49 	bl	8007374 <_Bfree>
 80076e2:	4647      	mov	r7, r8
 80076e4:	106d      	asrs	r5, r5, #1
 80076e6:	d00b      	beq.n	8007700 <__pow5mult+0xa0>
 80076e8:	6820      	ldr	r0, [r4, #0]
 80076ea:	b938      	cbnz	r0, 80076fc <__pow5mult+0x9c>
 80076ec:	4622      	mov	r2, r4
 80076ee:	4621      	mov	r1, r4
 80076f0:	4630      	mov	r0, r6
 80076f2:	f7ff ff0b 	bl	800750c <__multiply>
 80076f6:	6020      	str	r0, [r4, #0]
 80076f8:	f8c0 9000 	str.w	r9, [r0]
 80076fc:	4604      	mov	r4, r0
 80076fe:	e7e4      	b.n	80076ca <__pow5mult+0x6a>
 8007700:	4638      	mov	r0, r7
 8007702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007706:	bf00      	nop
 8007708:	08008760 	.word	0x08008760
 800770c:	08008595 	.word	0x08008595
 8007710:	08008615 	.word	0x08008615

08007714 <__lshift>:
 8007714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007718:	460c      	mov	r4, r1
 800771a:	6849      	ldr	r1, [r1, #4]
 800771c:	6923      	ldr	r3, [r4, #16]
 800771e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007722:	68a3      	ldr	r3, [r4, #8]
 8007724:	4607      	mov	r7, r0
 8007726:	4691      	mov	r9, r2
 8007728:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800772c:	f108 0601 	add.w	r6, r8, #1
 8007730:	42b3      	cmp	r3, r6
 8007732:	db0b      	blt.n	800774c <__lshift+0x38>
 8007734:	4638      	mov	r0, r7
 8007736:	f7ff fddd 	bl	80072f4 <_Balloc>
 800773a:	4605      	mov	r5, r0
 800773c:	b948      	cbnz	r0, 8007752 <__lshift+0x3e>
 800773e:	4602      	mov	r2, r0
 8007740:	4b28      	ldr	r3, [pc, #160]	; (80077e4 <__lshift+0xd0>)
 8007742:	4829      	ldr	r0, [pc, #164]	; (80077e8 <__lshift+0xd4>)
 8007744:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007748:	f000 fb8e 	bl	8007e68 <__assert_func>
 800774c:	3101      	adds	r1, #1
 800774e:	005b      	lsls	r3, r3, #1
 8007750:	e7ee      	b.n	8007730 <__lshift+0x1c>
 8007752:	2300      	movs	r3, #0
 8007754:	f100 0114 	add.w	r1, r0, #20
 8007758:	f100 0210 	add.w	r2, r0, #16
 800775c:	4618      	mov	r0, r3
 800775e:	4553      	cmp	r3, sl
 8007760:	db33      	blt.n	80077ca <__lshift+0xb6>
 8007762:	6920      	ldr	r0, [r4, #16]
 8007764:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007768:	f104 0314 	add.w	r3, r4, #20
 800776c:	f019 091f 	ands.w	r9, r9, #31
 8007770:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007774:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007778:	d02b      	beq.n	80077d2 <__lshift+0xbe>
 800777a:	f1c9 0e20 	rsb	lr, r9, #32
 800777e:	468a      	mov	sl, r1
 8007780:	2200      	movs	r2, #0
 8007782:	6818      	ldr	r0, [r3, #0]
 8007784:	fa00 f009 	lsl.w	r0, r0, r9
 8007788:	4310      	orrs	r0, r2
 800778a:	f84a 0b04 	str.w	r0, [sl], #4
 800778e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007792:	459c      	cmp	ip, r3
 8007794:	fa22 f20e 	lsr.w	r2, r2, lr
 8007798:	d8f3      	bhi.n	8007782 <__lshift+0x6e>
 800779a:	ebac 0304 	sub.w	r3, ip, r4
 800779e:	3b15      	subs	r3, #21
 80077a0:	f023 0303 	bic.w	r3, r3, #3
 80077a4:	3304      	adds	r3, #4
 80077a6:	f104 0015 	add.w	r0, r4, #21
 80077aa:	4584      	cmp	ip, r0
 80077ac:	bf38      	it	cc
 80077ae:	2304      	movcc	r3, #4
 80077b0:	50ca      	str	r2, [r1, r3]
 80077b2:	b10a      	cbz	r2, 80077b8 <__lshift+0xa4>
 80077b4:	f108 0602 	add.w	r6, r8, #2
 80077b8:	3e01      	subs	r6, #1
 80077ba:	4638      	mov	r0, r7
 80077bc:	612e      	str	r6, [r5, #16]
 80077be:	4621      	mov	r1, r4
 80077c0:	f7ff fdd8 	bl	8007374 <_Bfree>
 80077c4:	4628      	mov	r0, r5
 80077c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80077ce:	3301      	adds	r3, #1
 80077d0:	e7c5      	b.n	800775e <__lshift+0x4a>
 80077d2:	3904      	subs	r1, #4
 80077d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80077d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80077dc:	459c      	cmp	ip, r3
 80077de:	d8f9      	bhi.n	80077d4 <__lshift+0xc0>
 80077e0:	e7ea      	b.n	80077b8 <__lshift+0xa4>
 80077e2:	bf00      	nop
 80077e4:	08008604 	.word	0x08008604
 80077e8:	08008615 	.word	0x08008615

080077ec <__mcmp>:
 80077ec:	b530      	push	{r4, r5, lr}
 80077ee:	6902      	ldr	r2, [r0, #16]
 80077f0:	690c      	ldr	r4, [r1, #16]
 80077f2:	1b12      	subs	r2, r2, r4
 80077f4:	d10e      	bne.n	8007814 <__mcmp+0x28>
 80077f6:	f100 0314 	add.w	r3, r0, #20
 80077fa:	3114      	adds	r1, #20
 80077fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007800:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007804:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007808:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800780c:	42a5      	cmp	r5, r4
 800780e:	d003      	beq.n	8007818 <__mcmp+0x2c>
 8007810:	d305      	bcc.n	800781e <__mcmp+0x32>
 8007812:	2201      	movs	r2, #1
 8007814:	4610      	mov	r0, r2
 8007816:	bd30      	pop	{r4, r5, pc}
 8007818:	4283      	cmp	r3, r0
 800781a:	d3f3      	bcc.n	8007804 <__mcmp+0x18>
 800781c:	e7fa      	b.n	8007814 <__mcmp+0x28>
 800781e:	f04f 32ff 	mov.w	r2, #4294967295
 8007822:	e7f7      	b.n	8007814 <__mcmp+0x28>

08007824 <__mdiff>:
 8007824:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007828:	460c      	mov	r4, r1
 800782a:	4606      	mov	r6, r0
 800782c:	4611      	mov	r1, r2
 800782e:	4620      	mov	r0, r4
 8007830:	4690      	mov	r8, r2
 8007832:	f7ff ffdb 	bl	80077ec <__mcmp>
 8007836:	1e05      	subs	r5, r0, #0
 8007838:	d110      	bne.n	800785c <__mdiff+0x38>
 800783a:	4629      	mov	r1, r5
 800783c:	4630      	mov	r0, r6
 800783e:	f7ff fd59 	bl	80072f4 <_Balloc>
 8007842:	b930      	cbnz	r0, 8007852 <__mdiff+0x2e>
 8007844:	4b3a      	ldr	r3, [pc, #232]	; (8007930 <__mdiff+0x10c>)
 8007846:	4602      	mov	r2, r0
 8007848:	f240 2137 	movw	r1, #567	; 0x237
 800784c:	4839      	ldr	r0, [pc, #228]	; (8007934 <__mdiff+0x110>)
 800784e:	f000 fb0b 	bl	8007e68 <__assert_func>
 8007852:	2301      	movs	r3, #1
 8007854:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007858:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800785c:	bfa4      	itt	ge
 800785e:	4643      	movge	r3, r8
 8007860:	46a0      	movge	r8, r4
 8007862:	4630      	mov	r0, r6
 8007864:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007868:	bfa6      	itte	ge
 800786a:	461c      	movge	r4, r3
 800786c:	2500      	movge	r5, #0
 800786e:	2501      	movlt	r5, #1
 8007870:	f7ff fd40 	bl	80072f4 <_Balloc>
 8007874:	b920      	cbnz	r0, 8007880 <__mdiff+0x5c>
 8007876:	4b2e      	ldr	r3, [pc, #184]	; (8007930 <__mdiff+0x10c>)
 8007878:	4602      	mov	r2, r0
 800787a:	f240 2145 	movw	r1, #581	; 0x245
 800787e:	e7e5      	b.n	800784c <__mdiff+0x28>
 8007880:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007884:	6926      	ldr	r6, [r4, #16]
 8007886:	60c5      	str	r5, [r0, #12]
 8007888:	f104 0914 	add.w	r9, r4, #20
 800788c:	f108 0514 	add.w	r5, r8, #20
 8007890:	f100 0e14 	add.w	lr, r0, #20
 8007894:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007898:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800789c:	f108 0210 	add.w	r2, r8, #16
 80078a0:	46f2      	mov	sl, lr
 80078a2:	2100      	movs	r1, #0
 80078a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80078a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80078ac:	fa11 f88b 	uxtah	r8, r1, fp
 80078b0:	b299      	uxth	r1, r3
 80078b2:	0c1b      	lsrs	r3, r3, #16
 80078b4:	eba8 0801 	sub.w	r8, r8, r1
 80078b8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80078bc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80078c0:	fa1f f888 	uxth.w	r8, r8
 80078c4:	1419      	asrs	r1, r3, #16
 80078c6:	454e      	cmp	r6, r9
 80078c8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80078cc:	f84a 3b04 	str.w	r3, [sl], #4
 80078d0:	d8e8      	bhi.n	80078a4 <__mdiff+0x80>
 80078d2:	1b33      	subs	r3, r6, r4
 80078d4:	3b15      	subs	r3, #21
 80078d6:	f023 0303 	bic.w	r3, r3, #3
 80078da:	3304      	adds	r3, #4
 80078dc:	3415      	adds	r4, #21
 80078de:	42a6      	cmp	r6, r4
 80078e0:	bf38      	it	cc
 80078e2:	2304      	movcc	r3, #4
 80078e4:	441d      	add	r5, r3
 80078e6:	4473      	add	r3, lr
 80078e8:	469e      	mov	lr, r3
 80078ea:	462e      	mov	r6, r5
 80078ec:	4566      	cmp	r6, ip
 80078ee:	d30e      	bcc.n	800790e <__mdiff+0xea>
 80078f0:	f10c 0203 	add.w	r2, ip, #3
 80078f4:	1b52      	subs	r2, r2, r5
 80078f6:	f022 0203 	bic.w	r2, r2, #3
 80078fa:	3d03      	subs	r5, #3
 80078fc:	45ac      	cmp	ip, r5
 80078fe:	bf38      	it	cc
 8007900:	2200      	movcc	r2, #0
 8007902:	4413      	add	r3, r2
 8007904:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007908:	b17a      	cbz	r2, 800792a <__mdiff+0x106>
 800790a:	6107      	str	r7, [r0, #16]
 800790c:	e7a4      	b.n	8007858 <__mdiff+0x34>
 800790e:	f856 8b04 	ldr.w	r8, [r6], #4
 8007912:	fa11 f288 	uxtah	r2, r1, r8
 8007916:	1414      	asrs	r4, r2, #16
 8007918:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800791c:	b292      	uxth	r2, r2
 800791e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007922:	f84e 2b04 	str.w	r2, [lr], #4
 8007926:	1421      	asrs	r1, r4, #16
 8007928:	e7e0      	b.n	80078ec <__mdiff+0xc8>
 800792a:	3f01      	subs	r7, #1
 800792c:	e7ea      	b.n	8007904 <__mdiff+0xe0>
 800792e:	bf00      	nop
 8007930:	08008604 	.word	0x08008604
 8007934:	08008615 	.word	0x08008615

08007938 <__d2b>:
 8007938:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800793c:	460f      	mov	r7, r1
 800793e:	2101      	movs	r1, #1
 8007940:	ec59 8b10 	vmov	r8, r9, d0
 8007944:	4616      	mov	r6, r2
 8007946:	f7ff fcd5 	bl	80072f4 <_Balloc>
 800794a:	4604      	mov	r4, r0
 800794c:	b930      	cbnz	r0, 800795c <__d2b+0x24>
 800794e:	4602      	mov	r2, r0
 8007950:	4b24      	ldr	r3, [pc, #144]	; (80079e4 <__d2b+0xac>)
 8007952:	4825      	ldr	r0, [pc, #148]	; (80079e8 <__d2b+0xb0>)
 8007954:	f240 310f 	movw	r1, #783	; 0x30f
 8007958:	f000 fa86 	bl	8007e68 <__assert_func>
 800795c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007960:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007964:	bb2d      	cbnz	r5, 80079b2 <__d2b+0x7a>
 8007966:	9301      	str	r3, [sp, #4]
 8007968:	f1b8 0300 	subs.w	r3, r8, #0
 800796c:	d026      	beq.n	80079bc <__d2b+0x84>
 800796e:	4668      	mov	r0, sp
 8007970:	9300      	str	r3, [sp, #0]
 8007972:	f7ff fd87 	bl	8007484 <__lo0bits>
 8007976:	e9dd 1200 	ldrd	r1, r2, [sp]
 800797a:	b1e8      	cbz	r0, 80079b8 <__d2b+0x80>
 800797c:	f1c0 0320 	rsb	r3, r0, #32
 8007980:	fa02 f303 	lsl.w	r3, r2, r3
 8007984:	430b      	orrs	r3, r1
 8007986:	40c2      	lsrs	r2, r0
 8007988:	6163      	str	r3, [r4, #20]
 800798a:	9201      	str	r2, [sp, #4]
 800798c:	9b01      	ldr	r3, [sp, #4]
 800798e:	61a3      	str	r3, [r4, #24]
 8007990:	2b00      	cmp	r3, #0
 8007992:	bf14      	ite	ne
 8007994:	2202      	movne	r2, #2
 8007996:	2201      	moveq	r2, #1
 8007998:	6122      	str	r2, [r4, #16]
 800799a:	b1bd      	cbz	r5, 80079cc <__d2b+0x94>
 800799c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80079a0:	4405      	add	r5, r0
 80079a2:	603d      	str	r5, [r7, #0]
 80079a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80079a8:	6030      	str	r0, [r6, #0]
 80079aa:	4620      	mov	r0, r4
 80079ac:	b003      	add	sp, #12
 80079ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079b6:	e7d6      	b.n	8007966 <__d2b+0x2e>
 80079b8:	6161      	str	r1, [r4, #20]
 80079ba:	e7e7      	b.n	800798c <__d2b+0x54>
 80079bc:	a801      	add	r0, sp, #4
 80079be:	f7ff fd61 	bl	8007484 <__lo0bits>
 80079c2:	9b01      	ldr	r3, [sp, #4]
 80079c4:	6163      	str	r3, [r4, #20]
 80079c6:	3020      	adds	r0, #32
 80079c8:	2201      	movs	r2, #1
 80079ca:	e7e5      	b.n	8007998 <__d2b+0x60>
 80079cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80079d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80079d4:	6038      	str	r0, [r7, #0]
 80079d6:	6918      	ldr	r0, [r3, #16]
 80079d8:	f7ff fd34 	bl	8007444 <__hi0bits>
 80079dc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80079e0:	e7e2      	b.n	80079a8 <__d2b+0x70>
 80079e2:	bf00      	nop
 80079e4:	08008604 	.word	0x08008604
 80079e8:	08008615 	.word	0x08008615

080079ec <__ssputs_r>:
 80079ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079f0:	688e      	ldr	r6, [r1, #8]
 80079f2:	461f      	mov	r7, r3
 80079f4:	42be      	cmp	r6, r7
 80079f6:	680b      	ldr	r3, [r1, #0]
 80079f8:	4682      	mov	sl, r0
 80079fa:	460c      	mov	r4, r1
 80079fc:	4690      	mov	r8, r2
 80079fe:	d82c      	bhi.n	8007a5a <__ssputs_r+0x6e>
 8007a00:	898a      	ldrh	r2, [r1, #12]
 8007a02:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a06:	d026      	beq.n	8007a56 <__ssputs_r+0x6a>
 8007a08:	6965      	ldr	r5, [r4, #20]
 8007a0a:	6909      	ldr	r1, [r1, #16]
 8007a0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a10:	eba3 0901 	sub.w	r9, r3, r1
 8007a14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a18:	1c7b      	adds	r3, r7, #1
 8007a1a:	444b      	add	r3, r9
 8007a1c:	106d      	asrs	r5, r5, #1
 8007a1e:	429d      	cmp	r5, r3
 8007a20:	bf38      	it	cc
 8007a22:	461d      	movcc	r5, r3
 8007a24:	0553      	lsls	r3, r2, #21
 8007a26:	d527      	bpl.n	8007a78 <__ssputs_r+0x8c>
 8007a28:	4629      	mov	r1, r5
 8007a2a:	f7ff fbd7 	bl	80071dc <_malloc_r>
 8007a2e:	4606      	mov	r6, r0
 8007a30:	b360      	cbz	r0, 8007a8c <__ssputs_r+0xa0>
 8007a32:	6921      	ldr	r1, [r4, #16]
 8007a34:	464a      	mov	r2, r9
 8007a36:	f000 fa09 	bl	8007e4c <memcpy>
 8007a3a:	89a3      	ldrh	r3, [r4, #12]
 8007a3c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a44:	81a3      	strh	r3, [r4, #12]
 8007a46:	6126      	str	r6, [r4, #16]
 8007a48:	6165      	str	r5, [r4, #20]
 8007a4a:	444e      	add	r6, r9
 8007a4c:	eba5 0509 	sub.w	r5, r5, r9
 8007a50:	6026      	str	r6, [r4, #0]
 8007a52:	60a5      	str	r5, [r4, #8]
 8007a54:	463e      	mov	r6, r7
 8007a56:	42be      	cmp	r6, r7
 8007a58:	d900      	bls.n	8007a5c <__ssputs_r+0x70>
 8007a5a:	463e      	mov	r6, r7
 8007a5c:	6820      	ldr	r0, [r4, #0]
 8007a5e:	4632      	mov	r2, r6
 8007a60:	4641      	mov	r1, r8
 8007a62:	f000 f9c9 	bl	8007df8 <memmove>
 8007a66:	68a3      	ldr	r3, [r4, #8]
 8007a68:	1b9b      	subs	r3, r3, r6
 8007a6a:	60a3      	str	r3, [r4, #8]
 8007a6c:	6823      	ldr	r3, [r4, #0]
 8007a6e:	4433      	add	r3, r6
 8007a70:	6023      	str	r3, [r4, #0]
 8007a72:	2000      	movs	r0, #0
 8007a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a78:	462a      	mov	r2, r5
 8007a7a:	f000 fa3b 	bl	8007ef4 <_realloc_r>
 8007a7e:	4606      	mov	r6, r0
 8007a80:	2800      	cmp	r0, #0
 8007a82:	d1e0      	bne.n	8007a46 <__ssputs_r+0x5a>
 8007a84:	6921      	ldr	r1, [r4, #16]
 8007a86:	4650      	mov	r0, sl
 8007a88:	f7ff fb34 	bl	80070f4 <_free_r>
 8007a8c:	230c      	movs	r3, #12
 8007a8e:	f8ca 3000 	str.w	r3, [sl]
 8007a92:	89a3      	ldrh	r3, [r4, #12]
 8007a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a98:	81a3      	strh	r3, [r4, #12]
 8007a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a9e:	e7e9      	b.n	8007a74 <__ssputs_r+0x88>

08007aa0 <_svfiprintf_r>:
 8007aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa4:	4698      	mov	r8, r3
 8007aa6:	898b      	ldrh	r3, [r1, #12]
 8007aa8:	061b      	lsls	r3, r3, #24
 8007aaa:	b09d      	sub	sp, #116	; 0x74
 8007aac:	4607      	mov	r7, r0
 8007aae:	460d      	mov	r5, r1
 8007ab0:	4614      	mov	r4, r2
 8007ab2:	d50e      	bpl.n	8007ad2 <_svfiprintf_r+0x32>
 8007ab4:	690b      	ldr	r3, [r1, #16]
 8007ab6:	b963      	cbnz	r3, 8007ad2 <_svfiprintf_r+0x32>
 8007ab8:	2140      	movs	r1, #64	; 0x40
 8007aba:	f7ff fb8f 	bl	80071dc <_malloc_r>
 8007abe:	6028      	str	r0, [r5, #0]
 8007ac0:	6128      	str	r0, [r5, #16]
 8007ac2:	b920      	cbnz	r0, 8007ace <_svfiprintf_r+0x2e>
 8007ac4:	230c      	movs	r3, #12
 8007ac6:	603b      	str	r3, [r7, #0]
 8007ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8007acc:	e0d0      	b.n	8007c70 <_svfiprintf_r+0x1d0>
 8007ace:	2340      	movs	r3, #64	; 0x40
 8007ad0:	616b      	str	r3, [r5, #20]
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ad6:	2320      	movs	r3, #32
 8007ad8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007adc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ae0:	2330      	movs	r3, #48	; 0x30
 8007ae2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007c88 <_svfiprintf_r+0x1e8>
 8007ae6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007aea:	f04f 0901 	mov.w	r9, #1
 8007aee:	4623      	mov	r3, r4
 8007af0:	469a      	mov	sl, r3
 8007af2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007af6:	b10a      	cbz	r2, 8007afc <_svfiprintf_r+0x5c>
 8007af8:	2a25      	cmp	r2, #37	; 0x25
 8007afa:	d1f9      	bne.n	8007af0 <_svfiprintf_r+0x50>
 8007afc:	ebba 0b04 	subs.w	fp, sl, r4
 8007b00:	d00b      	beq.n	8007b1a <_svfiprintf_r+0x7a>
 8007b02:	465b      	mov	r3, fp
 8007b04:	4622      	mov	r2, r4
 8007b06:	4629      	mov	r1, r5
 8007b08:	4638      	mov	r0, r7
 8007b0a:	f7ff ff6f 	bl	80079ec <__ssputs_r>
 8007b0e:	3001      	adds	r0, #1
 8007b10:	f000 80a9 	beq.w	8007c66 <_svfiprintf_r+0x1c6>
 8007b14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b16:	445a      	add	r2, fp
 8007b18:	9209      	str	r2, [sp, #36]	; 0x24
 8007b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f000 80a1 	beq.w	8007c66 <_svfiprintf_r+0x1c6>
 8007b24:	2300      	movs	r3, #0
 8007b26:	f04f 32ff 	mov.w	r2, #4294967295
 8007b2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b2e:	f10a 0a01 	add.w	sl, sl, #1
 8007b32:	9304      	str	r3, [sp, #16]
 8007b34:	9307      	str	r3, [sp, #28]
 8007b36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b3a:	931a      	str	r3, [sp, #104]	; 0x68
 8007b3c:	4654      	mov	r4, sl
 8007b3e:	2205      	movs	r2, #5
 8007b40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b44:	4850      	ldr	r0, [pc, #320]	; (8007c88 <_svfiprintf_r+0x1e8>)
 8007b46:	f7f8 fb4b 	bl	80001e0 <memchr>
 8007b4a:	9a04      	ldr	r2, [sp, #16]
 8007b4c:	b9d8      	cbnz	r0, 8007b86 <_svfiprintf_r+0xe6>
 8007b4e:	06d0      	lsls	r0, r2, #27
 8007b50:	bf44      	itt	mi
 8007b52:	2320      	movmi	r3, #32
 8007b54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b58:	0711      	lsls	r1, r2, #28
 8007b5a:	bf44      	itt	mi
 8007b5c:	232b      	movmi	r3, #43	; 0x2b
 8007b5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b62:	f89a 3000 	ldrb.w	r3, [sl]
 8007b66:	2b2a      	cmp	r3, #42	; 0x2a
 8007b68:	d015      	beq.n	8007b96 <_svfiprintf_r+0xf6>
 8007b6a:	9a07      	ldr	r2, [sp, #28]
 8007b6c:	4654      	mov	r4, sl
 8007b6e:	2000      	movs	r0, #0
 8007b70:	f04f 0c0a 	mov.w	ip, #10
 8007b74:	4621      	mov	r1, r4
 8007b76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b7a:	3b30      	subs	r3, #48	; 0x30
 8007b7c:	2b09      	cmp	r3, #9
 8007b7e:	d94d      	bls.n	8007c1c <_svfiprintf_r+0x17c>
 8007b80:	b1b0      	cbz	r0, 8007bb0 <_svfiprintf_r+0x110>
 8007b82:	9207      	str	r2, [sp, #28]
 8007b84:	e014      	b.n	8007bb0 <_svfiprintf_r+0x110>
 8007b86:	eba0 0308 	sub.w	r3, r0, r8
 8007b8a:	fa09 f303 	lsl.w	r3, r9, r3
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	9304      	str	r3, [sp, #16]
 8007b92:	46a2      	mov	sl, r4
 8007b94:	e7d2      	b.n	8007b3c <_svfiprintf_r+0x9c>
 8007b96:	9b03      	ldr	r3, [sp, #12]
 8007b98:	1d19      	adds	r1, r3, #4
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	9103      	str	r1, [sp, #12]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	bfbb      	ittet	lt
 8007ba2:	425b      	neglt	r3, r3
 8007ba4:	f042 0202 	orrlt.w	r2, r2, #2
 8007ba8:	9307      	strge	r3, [sp, #28]
 8007baa:	9307      	strlt	r3, [sp, #28]
 8007bac:	bfb8      	it	lt
 8007bae:	9204      	strlt	r2, [sp, #16]
 8007bb0:	7823      	ldrb	r3, [r4, #0]
 8007bb2:	2b2e      	cmp	r3, #46	; 0x2e
 8007bb4:	d10c      	bne.n	8007bd0 <_svfiprintf_r+0x130>
 8007bb6:	7863      	ldrb	r3, [r4, #1]
 8007bb8:	2b2a      	cmp	r3, #42	; 0x2a
 8007bba:	d134      	bne.n	8007c26 <_svfiprintf_r+0x186>
 8007bbc:	9b03      	ldr	r3, [sp, #12]
 8007bbe:	1d1a      	adds	r2, r3, #4
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	9203      	str	r2, [sp, #12]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	bfb8      	it	lt
 8007bc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bcc:	3402      	adds	r4, #2
 8007bce:	9305      	str	r3, [sp, #20]
 8007bd0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007c98 <_svfiprintf_r+0x1f8>
 8007bd4:	7821      	ldrb	r1, [r4, #0]
 8007bd6:	2203      	movs	r2, #3
 8007bd8:	4650      	mov	r0, sl
 8007bda:	f7f8 fb01 	bl	80001e0 <memchr>
 8007bde:	b138      	cbz	r0, 8007bf0 <_svfiprintf_r+0x150>
 8007be0:	9b04      	ldr	r3, [sp, #16]
 8007be2:	eba0 000a 	sub.w	r0, r0, sl
 8007be6:	2240      	movs	r2, #64	; 0x40
 8007be8:	4082      	lsls	r2, r0
 8007bea:	4313      	orrs	r3, r2
 8007bec:	3401      	adds	r4, #1
 8007bee:	9304      	str	r3, [sp, #16]
 8007bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bf4:	4825      	ldr	r0, [pc, #148]	; (8007c8c <_svfiprintf_r+0x1ec>)
 8007bf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bfa:	2206      	movs	r2, #6
 8007bfc:	f7f8 faf0 	bl	80001e0 <memchr>
 8007c00:	2800      	cmp	r0, #0
 8007c02:	d038      	beq.n	8007c76 <_svfiprintf_r+0x1d6>
 8007c04:	4b22      	ldr	r3, [pc, #136]	; (8007c90 <_svfiprintf_r+0x1f0>)
 8007c06:	bb1b      	cbnz	r3, 8007c50 <_svfiprintf_r+0x1b0>
 8007c08:	9b03      	ldr	r3, [sp, #12]
 8007c0a:	3307      	adds	r3, #7
 8007c0c:	f023 0307 	bic.w	r3, r3, #7
 8007c10:	3308      	adds	r3, #8
 8007c12:	9303      	str	r3, [sp, #12]
 8007c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c16:	4433      	add	r3, r6
 8007c18:	9309      	str	r3, [sp, #36]	; 0x24
 8007c1a:	e768      	b.n	8007aee <_svfiprintf_r+0x4e>
 8007c1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c20:	460c      	mov	r4, r1
 8007c22:	2001      	movs	r0, #1
 8007c24:	e7a6      	b.n	8007b74 <_svfiprintf_r+0xd4>
 8007c26:	2300      	movs	r3, #0
 8007c28:	3401      	adds	r4, #1
 8007c2a:	9305      	str	r3, [sp, #20]
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	f04f 0c0a 	mov.w	ip, #10
 8007c32:	4620      	mov	r0, r4
 8007c34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c38:	3a30      	subs	r2, #48	; 0x30
 8007c3a:	2a09      	cmp	r2, #9
 8007c3c:	d903      	bls.n	8007c46 <_svfiprintf_r+0x1a6>
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d0c6      	beq.n	8007bd0 <_svfiprintf_r+0x130>
 8007c42:	9105      	str	r1, [sp, #20]
 8007c44:	e7c4      	b.n	8007bd0 <_svfiprintf_r+0x130>
 8007c46:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c4a:	4604      	mov	r4, r0
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	e7f0      	b.n	8007c32 <_svfiprintf_r+0x192>
 8007c50:	ab03      	add	r3, sp, #12
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	462a      	mov	r2, r5
 8007c56:	4b0f      	ldr	r3, [pc, #60]	; (8007c94 <_svfiprintf_r+0x1f4>)
 8007c58:	a904      	add	r1, sp, #16
 8007c5a:	4638      	mov	r0, r7
 8007c5c:	f7fd fe64 	bl	8005928 <_printf_float>
 8007c60:	1c42      	adds	r2, r0, #1
 8007c62:	4606      	mov	r6, r0
 8007c64:	d1d6      	bne.n	8007c14 <_svfiprintf_r+0x174>
 8007c66:	89ab      	ldrh	r3, [r5, #12]
 8007c68:	065b      	lsls	r3, r3, #25
 8007c6a:	f53f af2d 	bmi.w	8007ac8 <_svfiprintf_r+0x28>
 8007c6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c70:	b01d      	add	sp, #116	; 0x74
 8007c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c76:	ab03      	add	r3, sp, #12
 8007c78:	9300      	str	r3, [sp, #0]
 8007c7a:	462a      	mov	r2, r5
 8007c7c:	4b05      	ldr	r3, [pc, #20]	; (8007c94 <_svfiprintf_r+0x1f4>)
 8007c7e:	a904      	add	r1, sp, #16
 8007c80:	4638      	mov	r0, r7
 8007c82:	f7fe f8f5 	bl	8005e70 <_printf_i>
 8007c86:	e7eb      	b.n	8007c60 <_svfiprintf_r+0x1c0>
 8007c88:	0800876c 	.word	0x0800876c
 8007c8c:	08008776 	.word	0x08008776
 8007c90:	08005929 	.word	0x08005929
 8007c94:	080079ed 	.word	0x080079ed
 8007c98:	08008772 	.word	0x08008772

08007c9c <__sflush_r>:
 8007c9c:	898a      	ldrh	r2, [r1, #12]
 8007c9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ca2:	4605      	mov	r5, r0
 8007ca4:	0710      	lsls	r0, r2, #28
 8007ca6:	460c      	mov	r4, r1
 8007ca8:	d458      	bmi.n	8007d5c <__sflush_r+0xc0>
 8007caa:	684b      	ldr	r3, [r1, #4]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	dc05      	bgt.n	8007cbc <__sflush_r+0x20>
 8007cb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	dc02      	bgt.n	8007cbc <__sflush_r+0x20>
 8007cb6:	2000      	movs	r0, #0
 8007cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cbe:	2e00      	cmp	r6, #0
 8007cc0:	d0f9      	beq.n	8007cb6 <__sflush_r+0x1a>
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007cc8:	682f      	ldr	r7, [r5, #0]
 8007cca:	6a21      	ldr	r1, [r4, #32]
 8007ccc:	602b      	str	r3, [r5, #0]
 8007cce:	d032      	beq.n	8007d36 <__sflush_r+0x9a>
 8007cd0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007cd2:	89a3      	ldrh	r3, [r4, #12]
 8007cd4:	075a      	lsls	r2, r3, #29
 8007cd6:	d505      	bpl.n	8007ce4 <__sflush_r+0x48>
 8007cd8:	6863      	ldr	r3, [r4, #4]
 8007cda:	1ac0      	subs	r0, r0, r3
 8007cdc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007cde:	b10b      	cbz	r3, 8007ce4 <__sflush_r+0x48>
 8007ce0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ce2:	1ac0      	subs	r0, r0, r3
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cea:	6a21      	ldr	r1, [r4, #32]
 8007cec:	4628      	mov	r0, r5
 8007cee:	47b0      	blx	r6
 8007cf0:	1c43      	adds	r3, r0, #1
 8007cf2:	89a3      	ldrh	r3, [r4, #12]
 8007cf4:	d106      	bne.n	8007d04 <__sflush_r+0x68>
 8007cf6:	6829      	ldr	r1, [r5, #0]
 8007cf8:	291d      	cmp	r1, #29
 8007cfa:	d82b      	bhi.n	8007d54 <__sflush_r+0xb8>
 8007cfc:	4a29      	ldr	r2, [pc, #164]	; (8007da4 <__sflush_r+0x108>)
 8007cfe:	410a      	asrs	r2, r1
 8007d00:	07d6      	lsls	r6, r2, #31
 8007d02:	d427      	bmi.n	8007d54 <__sflush_r+0xb8>
 8007d04:	2200      	movs	r2, #0
 8007d06:	6062      	str	r2, [r4, #4]
 8007d08:	04d9      	lsls	r1, r3, #19
 8007d0a:	6922      	ldr	r2, [r4, #16]
 8007d0c:	6022      	str	r2, [r4, #0]
 8007d0e:	d504      	bpl.n	8007d1a <__sflush_r+0x7e>
 8007d10:	1c42      	adds	r2, r0, #1
 8007d12:	d101      	bne.n	8007d18 <__sflush_r+0x7c>
 8007d14:	682b      	ldr	r3, [r5, #0]
 8007d16:	b903      	cbnz	r3, 8007d1a <__sflush_r+0x7e>
 8007d18:	6560      	str	r0, [r4, #84]	; 0x54
 8007d1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d1c:	602f      	str	r7, [r5, #0]
 8007d1e:	2900      	cmp	r1, #0
 8007d20:	d0c9      	beq.n	8007cb6 <__sflush_r+0x1a>
 8007d22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d26:	4299      	cmp	r1, r3
 8007d28:	d002      	beq.n	8007d30 <__sflush_r+0x94>
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	f7ff f9e2 	bl	80070f4 <_free_r>
 8007d30:	2000      	movs	r0, #0
 8007d32:	6360      	str	r0, [r4, #52]	; 0x34
 8007d34:	e7c0      	b.n	8007cb8 <__sflush_r+0x1c>
 8007d36:	2301      	movs	r3, #1
 8007d38:	4628      	mov	r0, r5
 8007d3a:	47b0      	blx	r6
 8007d3c:	1c41      	adds	r1, r0, #1
 8007d3e:	d1c8      	bne.n	8007cd2 <__sflush_r+0x36>
 8007d40:	682b      	ldr	r3, [r5, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d0c5      	beq.n	8007cd2 <__sflush_r+0x36>
 8007d46:	2b1d      	cmp	r3, #29
 8007d48:	d001      	beq.n	8007d4e <__sflush_r+0xb2>
 8007d4a:	2b16      	cmp	r3, #22
 8007d4c:	d101      	bne.n	8007d52 <__sflush_r+0xb6>
 8007d4e:	602f      	str	r7, [r5, #0]
 8007d50:	e7b1      	b.n	8007cb6 <__sflush_r+0x1a>
 8007d52:	89a3      	ldrh	r3, [r4, #12]
 8007d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d58:	81a3      	strh	r3, [r4, #12]
 8007d5a:	e7ad      	b.n	8007cb8 <__sflush_r+0x1c>
 8007d5c:	690f      	ldr	r7, [r1, #16]
 8007d5e:	2f00      	cmp	r7, #0
 8007d60:	d0a9      	beq.n	8007cb6 <__sflush_r+0x1a>
 8007d62:	0793      	lsls	r3, r2, #30
 8007d64:	680e      	ldr	r6, [r1, #0]
 8007d66:	bf08      	it	eq
 8007d68:	694b      	ldreq	r3, [r1, #20]
 8007d6a:	600f      	str	r7, [r1, #0]
 8007d6c:	bf18      	it	ne
 8007d6e:	2300      	movne	r3, #0
 8007d70:	eba6 0807 	sub.w	r8, r6, r7
 8007d74:	608b      	str	r3, [r1, #8]
 8007d76:	f1b8 0f00 	cmp.w	r8, #0
 8007d7a:	dd9c      	ble.n	8007cb6 <__sflush_r+0x1a>
 8007d7c:	6a21      	ldr	r1, [r4, #32]
 8007d7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d80:	4643      	mov	r3, r8
 8007d82:	463a      	mov	r2, r7
 8007d84:	4628      	mov	r0, r5
 8007d86:	47b0      	blx	r6
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	dc06      	bgt.n	8007d9a <__sflush_r+0xfe>
 8007d8c:	89a3      	ldrh	r3, [r4, #12]
 8007d8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d92:	81a3      	strh	r3, [r4, #12]
 8007d94:	f04f 30ff 	mov.w	r0, #4294967295
 8007d98:	e78e      	b.n	8007cb8 <__sflush_r+0x1c>
 8007d9a:	4407      	add	r7, r0
 8007d9c:	eba8 0800 	sub.w	r8, r8, r0
 8007da0:	e7e9      	b.n	8007d76 <__sflush_r+0xda>
 8007da2:	bf00      	nop
 8007da4:	dfbffffe 	.word	0xdfbffffe

08007da8 <_fflush_r>:
 8007da8:	b538      	push	{r3, r4, r5, lr}
 8007daa:	690b      	ldr	r3, [r1, #16]
 8007dac:	4605      	mov	r5, r0
 8007dae:	460c      	mov	r4, r1
 8007db0:	b913      	cbnz	r3, 8007db8 <_fflush_r+0x10>
 8007db2:	2500      	movs	r5, #0
 8007db4:	4628      	mov	r0, r5
 8007db6:	bd38      	pop	{r3, r4, r5, pc}
 8007db8:	b118      	cbz	r0, 8007dc2 <_fflush_r+0x1a>
 8007dba:	6a03      	ldr	r3, [r0, #32]
 8007dbc:	b90b      	cbnz	r3, 8007dc2 <_fflush_r+0x1a>
 8007dbe:	f7fe fa05 	bl	80061cc <__sinit>
 8007dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d0f3      	beq.n	8007db2 <_fflush_r+0xa>
 8007dca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007dcc:	07d0      	lsls	r0, r2, #31
 8007dce:	d404      	bmi.n	8007dda <_fflush_r+0x32>
 8007dd0:	0599      	lsls	r1, r3, #22
 8007dd2:	d402      	bmi.n	8007dda <_fflush_r+0x32>
 8007dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dd6:	f7fe fb10 	bl	80063fa <__retarget_lock_acquire_recursive>
 8007dda:	4628      	mov	r0, r5
 8007ddc:	4621      	mov	r1, r4
 8007dde:	f7ff ff5d 	bl	8007c9c <__sflush_r>
 8007de2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007de4:	07da      	lsls	r2, r3, #31
 8007de6:	4605      	mov	r5, r0
 8007de8:	d4e4      	bmi.n	8007db4 <_fflush_r+0xc>
 8007dea:	89a3      	ldrh	r3, [r4, #12]
 8007dec:	059b      	lsls	r3, r3, #22
 8007dee:	d4e1      	bmi.n	8007db4 <_fflush_r+0xc>
 8007df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007df2:	f7fe fb03 	bl	80063fc <__retarget_lock_release_recursive>
 8007df6:	e7dd      	b.n	8007db4 <_fflush_r+0xc>

08007df8 <memmove>:
 8007df8:	4288      	cmp	r0, r1
 8007dfa:	b510      	push	{r4, lr}
 8007dfc:	eb01 0402 	add.w	r4, r1, r2
 8007e00:	d902      	bls.n	8007e08 <memmove+0x10>
 8007e02:	4284      	cmp	r4, r0
 8007e04:	4623      	mov	r3, r4
 8007e06:	d807      	bhi.n	8007e18 <memmove+0x20>
 8007e08:	1e43      	subs	r3, r0, #1
 8007e0a:	42a1      	cmp	r1, r4
 8007e0c:	d008      	beq.n	8007e20 <memmove+0x28>
 8007e0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e16:	e7f8      	b.n	8007e0a <memmove+0x12>
 8007e18:	4402      	add	r2, r0
 8007e1a:	4601      	mov	r1, r0
 8007e1c:	428a      	cmp	r2, r1
 8007e1e:	d100      	bne.n	8007e22 <memmove+0x2a>
 8007e20:	bd10      	pop	{r4, pc}
 8007e22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e2a:	e7f7      	b.n	8007e1c <memmove+0x24>

08007e2c <_sbrk_r>:
 8007e2c:	b538      	push	{r3, r4, r5, lr}
 8007e2e:	4d06      	ldr	r5, [pc, #24]	; (8007e48 <_sbrk_r+0x1c>)
 8007e30:	2300      	movs	r3, #0
 8007e32:	4604      	mov	r4, r0
 8007e34:	4608      	mov	r0, r1
 8007e36:	602b      	str	r3, [r5, #0]
 8007e38:	f7fa f882 	bl	8001f40 <_sbrk>
 8007e3c:	1c43      	adds	r3, r0, #1
 8007e3e:	d102      	bne.n	8007e46 <_sbrk_r+0x1a>
 8007e40:	682b      	ldr	r3, [r5, #0]
 8007e42:	b103      	cbz	r3, 8007e46 <_sbrk_r+0x1a>
 8007e44:	6023      	str	r3, [r4, #0]
 8007e46:	bd38      	pop	{r3, r4, r5, pc}
 8007e48:	20000520 	.word	0x20000520

08007e4c <memcpy>:
 8007e4c:	440a      	add	r2, r1
 8007e4e:	4291      	cmp	r1, r2
 8007e50:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e54:	d100      	bne.n	8007e58 <memcpy+0xc>
 8007e56:	4770      	bx	lr
 8007e58:	b510      	push	{r4, lr}
 8007e5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e62:	4291      	cmp	r1, r2
 8007e64:	d1f9      	bne.n	8007e5a <memcpy+0xe>
 8007e66:	bd10      	pop	{r4, pc}

08007e68 <__assert_func>:
 8007e68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e6a:	4614      	mov	r4, r2
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	4b09      	ldr	r3, [pc, #36]	; (8007e94 <__assert_func+0x2c>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4605      	mov	r5, r0
 8007e74:	68d8      	ldr	r0, [r3, #12]
 8007e76:	b14c      	cbz	r4, 8007e8c <__assert_func+0x24>
 8007e78:	4b07      	ldr	r3, [pc, #28]	; (8007e98 <__assert_func+0x30>)
 8007e7a:	9100      	str	r1, [sp, #0]
 8007e7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e80:	4906      	ldr	r1, [pc, #24]	; (8007e9c <__assert_func+0x34>)
 8007e82:	462b      	mov	r3, r5
 8007e84:	f000 f872 	bl	8007f6c <fiprintf>
 8007e88:	f000 f882 	bl	8007f90 <abort>
 8007e8c:	4b04      	ldr	r3, [pc, #16]	; (8007ea0 <__assert_func+0x38>)
 8007e8e:	461c      	mov	r4, r3
 8007e90:	e7f3      	b.n	8007e7a <__assert_func+0x12>
 8007e92:	bf00      	nop
 8007e94:	20000068 	.word	0x20000068
 8007e98:	08008787 	.word	0x08008787
 8007e9c:	08008794 	.word	0x08008794
 8007ea0:	080087c2 	.word	0x080087c2

08007ea4 <_calloc_r>:
 8007ea4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ea6:	fba1 2402 	umull	r2, r4, r1, r2
 8007eaa:	b94c      	cbnz	r4, 8007ec0 <_calloc_r+0x1c>
 8007eac:	4611      	mov	r1, r2
 8007eae:	9201      	str	r2, [sp, #4]
 8007eb0:	f7ff f994 	bl	80071dc <_malloc_r>
 8007eb4:	9a01      	ldr	r2, [sp, #4]
 8007eb6:	4605      	mov	r5, r0
 8007eb8:	b930      	cbnz	r0, 8007ec8 <_calloc_r+0x24>
 8007eba:	4628      	mov	r0, r5
 8007ebc:	b003      	add	sp, #12
 8007ebe:	bd30      	pop	{r4, r5, pc}
 8007ec0:	220c      	movs	r2, #12
 8007ec2:	6002      	str	r2, [r0, #0]
 8007ec4:	2500      	movs	r5, #0
 8007ec6:	e7f8      	b.n	8007eba <_calloc_r+0x16>
 8007ec8:	4621      	mov	r1, r4
 8007eca:	f7fe fa18 	bl	80062fe <memset>
 8007ece:	e7f4      	b.n	8007eba <_calloc_r+0x16>

08007ed0 <__ascii_mbtowc>:
 8007ed0:	b082      	sub	sp, #8
 8007ed2:	b901      	cbnz	r1, 8007ed6 <__ascii_mbtowc+0x6>
 8007ed4:	a901      	add	r1, sp, #4
 8007ed6:	b142      	cbz	r2, 8007eea <__ascii_mbtowc+0x1a>
 8007ed8:	b14b      	cbz	r3, 8007eee <__ascii_mbtowc+0x1e>
 8007eda:	7813      	ldrb	r3, [r2, #0]
 8007edc:	600b      	str	r3, [r1, #0]
 8007ede:	7812      	ldrb	r2, [r2, #0]
 8007ee0:	1e10      	subs	r0, r2, #0
 8007ee2:	bf18      	it	ne
 8007ee4:	2001      	movne	r0, #1
 8007ee6:	b002      	add	sp, #8
 8007ee8:	4770      	bx	lr
 8007eea:	4610      	mov	r0, r2
 8007eec:	e7fb      	b.n	8007ee6 <__ascii_mbtowc+0x16>
 8007eee:	f06f 0001 	mvn.w	r0, #1
 8007ef2:	e7f8      	b.n	8007ee6 <__ascii_mbtowc+0x16>

08007ef4 <_realloc_r>:
 8007ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ef8:	4680      	mov	r8, r0
 8007efa:	4614      	mov	r4, r2
 8007efc:	460e      	mov	r6, r1
 8007efe:	b921      	cbnz	r1, 8007f0a <_realloc_r+0x16>
 8007f00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f04:	4611      	mov	r1, r2
 8007f06:	f7ff b969 	b.w	80071dc <_malloc_r>
 8007f0a:	b92a      	cbnz	r2, 8007f18 <_realloc_r+0x24>
 8007f0c:	f7ff f8f2 	bl	80070f4 <_free_r>
 8007f10:	4625      	mov	r5, r4
 8007f12:	4628      	mov	r0, r5
 8007f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f18:	f000 f841 	bl	8007f9e <_malloc_usable_size_r>
 8007f1c:	4284      	cmp	r4, r0
 8007f1e:	4607      	mov	r7, r0
 8007f20:	d802      	bhi.n	8007f28 <_realloc_r+0x34>
 8007f22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f26:	d812      	bhi.n	8007f4e <_realloc_r+0x5a>
 8007f28:	4621      	mov	r1, r4
 8007f2a:	4640      	mov	r0, r8
 8007f2c:	f7ff f956 	bl	80071dc <_malloc_r>
 8007f30:	4605      	mov	r5, r0
 8007f32:	2800      	cmp	r0, #0
 8007f34:	d0ed      	beq.n	8007f12 <_realloc_r+0x1e>
 8007f36:	42bc      	cmp	r4, r7
 8007f38:	4622      	mov	r2, r4
 8007f3a:	4631      	mov	r1, r6
 8007f3c:	bf28      	it	cs
 8007f3e:	463a      	movcs	r2, r7
 8007f40:	f7ff ff84 	bl	8007e4c <memcpy>
 8007f44:	4631      	mov	r1, r6
 8007f46:	4640      	mov	r0, r8
 8007f48:	f7ff f8d4 	bl	80070f4 <_free_r>
 8007f4c:	e7e1      	b.n	8007f12 <_realloc_r+0x1e>
 8007f4e:	4635      	mov	r5, r6
 8007f50:	e7df      	b.n	8007f12 <_realloc_r+0x1e>

08007f52 <__ascii_wctomb>:
 8007f52:	b149      	cbz	r1, 8007f68 <__ascii_wctomb+0x16>
 8007f54:	2aff      	cmp	r2, #255	; 0xff
 8007f56:	bf85      	ittet	hi
 8007f58:	238a      	movhi	r3, #138	; 0x8a
 8007f5a:	6003      	strhi	r3, [r0, #0]
 8007f5c:	700a      	strbls	r2, [r1, #0]
 8007f5e:	f04f 30ff 	movhi.w	r0, #4294967295
 8007f62:	bf98      	it	ls
 8007f64:	2001      	movls	r0, #1
 8007f66:	4770      	bx	lr
 8007f68:	4608      	mov	r0, r1
 8007f6a:	4770      	bx	lr

08007f6c <fiprintf>:
 8007f6c:	b40e      	push	{r1, r2, r3}
 8007f6e:	b503      	push	{r0, r1, lr}
 8007f70:	4601      	mov	r1, r0
 8007f72:	ab03      	add	r3, sp, #12
 8007f74:	4805      	ldr	r0, [pc, #20]	; (8007f8c <fiprintf+0x20>)
 8007f76:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f7a:	6800      	ldr	r0, [r0, #0]
 8007f7c:	9301      	str	r3, [sp, #4]
 8007f7e:	f000 f83f 	bl	8008000 <_vfiprintf_r>
 8007f82:	b002      	add	sp, #8
 8007f84:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f88:	b003      	add	sp, #12
 8007f8a:	4770      	bx	lr
 8007f8c:	20000068 	.word	0x20000068

08007f90 <abort>:
 8007f90:	b508      	push	{r3, lr}
 8007f92:	2006      	movs	r0, #6
 8007f94:	f000 fa0c 	bl	80083b0 <raise>
 8007f98:	2001      	movs	r0, #1
 8007f9a:	f7f9 ff59 	bl	8001e50 <_exit>

08007f9e <_malloc_usable_size_r>:
 8007f9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fa2:	1f18      	subs	r0, r3, #4
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	bfbc      	itt	lt
 8007fa8:	580b      	ldrlt	r3, [r1, r0]
 8007faa:	18c0      	addlt	r0, r0, r3
 8007fac:	4770      	bx	lr

08007fae <__sfputc_r>:
 8007fae:	6893      	ldr	r3, [r2, #8]
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	b410      	push	{r4}
 8007fb6:	6093      	str	r3, [r2, #8]
 8007fb8:	da08      	bge.n	8007fcc <__sfputc_r+0x1e>
 8007fba:	6994      	ldr	r4, [r2, #24]
 8007fbc:	42a3      	cmp	r3, r4
 8007fbe:	db01      	blt.n	8007fc4 <__sfputc_r+0x16>
 8007fc0:	290a      	cmp	r1, #10
 8007fc2:	d103      	bne.n	8007fcc <__sfputc_r+0x1e>
 8007fc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fc8:	f000 b934 	b.w	8008234 <__swbuf_r>
 8007fcc:	6813      	ldr	r3, [r2, #0]
 8007fce:	1c58      	adds	r0, r3, #1
 8007fd0:	6010      	str	r0, [r2, #0]
 8007fd2:	7019      	strb	r1, [r3, #0]
 8007fd4:	4608      	mov	r0, r1
 8007fd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <__sfputs_r>:
 8007fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fde:	4606      	mov	r6, r0
 8007fe0:	460f      	mov	r7, r1
 8007fe2:	4614      	mov	r4, r2
 8007fe4:	18d5      	adds	r5, r2, r3
 8007fe6:	42ac      	cmp	r4, r5
 8007fe8:	d101      	bne.n	8007fee <__sfputs_r+0x12>
 8007fea:	2000      	movs	r0, #0
 8007fec:	e007      	b.n	8007ffe <__sfputs_r+0x22>
 8007fee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ff2:	463a      	mov	r2, r7
 8007ff4:	4630      	mov	r0, r6
 8007ff6:	f7ff ffda 	bl	8007fae <__sfputc_r>
 8007ffa:	1c43      	adds	r3, r0, #1
 8007ffc:	d1f3      	bne.n	8007fe6 <__sfputs_r+0xa>
 8007ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008000 <_vfiprintf_r>:
 8008000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008004:	460d      	mov	r5, r1
 8008006:	b09d      	sub	sp, #116	; 0x74
 8008008:	4614      	mov	r4, r2
 800800a:	4698      	mov	r8, r3
 800800c:	4606      	mov	r6, r0
 800800e:	b118      	cbz	r0, 8008018 <_vfiprintf_r+0x18>
 8008010:	6a03      	ldr	r3, [r0, #32]
 8008012:	b90b      	cbnz	r3, 8008018 <_vfiprintf_r+0x18>
 8008014:	f7fe f8da 	bl	80061cc <__sinit>
 8008018:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800801a:	07d9      	lsls	r1, r3, #31
 800801c:	d405      	bmi.n	800802a <_vfiprintf_r+0x2a>
 800801e:	89ab      	ldrh	r3, [r5, #12]
 8008020:	059a      	lsls	r2, r3, #22
 8008022:	d402      	bmi.n	800802a <_vfiprintf_r+0x2a>
 8008024:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008026:	f7fe f9e8 	bl	80063fa <__retarget_lock_acquire_recursive>
 800802a:	89ab      	ldrh	r3, [r5, #12]
 800802c:	071b      	lsls	r3, r3, #28
 800802e:	d501      	bpl.n	8008034 <_vfiprintf_r+0x34>
 8008030:	692b      	ldr	r3, [r5, #16]
 8008032:	b99b      	cbnz	r3, 800805c <_vfiprintf_r+0x5c>
 8008034:	4629      	mov	r1, r5
 8008036:	4630      	mov	r0, r6
 8008038:	f000 f93a 	bl	80082b0 <__swsetup_r>
 800803c:	b170      	cbz	r0, 800805c <_vfiprintf_r+0x5c>
 800803e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008040:	07dc      	lsls	r4, r3, #31
 8008042:	d504      	bpl.n	800804e <_vfiprintf_r+0x4e>
 8008044:	f04f 30ff 	mov.w	r0, #4294967295
 8008048:	b01d      	add	sp, #116	; 0x74
 800804a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800804e:	89ab      	ldrh	r3, [r5, #12]
 8008050:	0598      	lsls	r0, r3, #22
 8008052:	d4f7      	bmi.n	8008044 <_vfiprintf_r+0x44>
 8008054:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008056:	f7fe f9d1 	bl	80063fc <__retarget_lock_release_recursive>
 800805a:	e7f3      	b.n	8008044 <_vfiprintf_r+0x44>
 800805c:	2300      	movs	r3, #0
 800805e:	9309      	str	r3, [sp, #36]	; 0x24
 8008060:	2320      	movs	r3, #32
 8008062:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008066:	f8cd 800c 	str.w	r8, [sp, #12]
 800806a:	2330      	movs	r3, #48	; 0x30
 800806c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008220 <_vfiprintf_r+0x220>
 8008070:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008074:	f04f 0901 	mov.w	r9, #1
 8008078:	4623      	mov	r3, r4
 800807a:	469a      	mov	sl, r3
 800807c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008080:	b10a      	cbz	r2, 8008086 <_vfiprintf_r+0x86>
 8008082:	2a25      	cmp	r2, #37	; 0x25
 8008084:	d1f9      	bne.n	800807a <_vfiprintf_r+0x7a>
 8008086:	ebba 0b04 	subs.w	fp, sl, r4
 800808a:	d00b      	beq.n	80080a4 <_vfiprintf_r+0xa4>
 800808c:	465b      	mov	r3, fp
 800808e:	4622      	mov	r2, r4
 8008090:	4629      	mov	r1, r5
 8008092:	4630      	mov	r0, r6
 8008094:	f7ff ffa2 	bl	8007fdc <__sfputs_r>
 8008098:	3001      	adds	r0, #1
 800809a:	f000 80a9 	beq.w	80081f0 <_vfiprintf_r+0x1f0>
 800809e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080a0:	445a      	add	r2, fp
 80080a2:	9209      	str	r2, [sp, #36]	; 0x24
 80080a4:	f89a 3000 	ldrb.w	r3, [sl]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	f000 80a1 	beq.w	80081f0 <_vfiprintf_r+0x1f0>
 80080ae:	2300      	movs	r3, #0
 80080b0:	f04f 32ff 	mov.w	r2, #4294967295
 80080b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080b8:	f10a 0a01 	add.w	sl, sl, #1
 80080bc:	9304      	str	r3, [sp, #16]
 80080be:	9307      	str	r3, [sp, #28]
 80080c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080c4:	931a      	str	r3, [sp, #104]	; 0x68
 80080c6:	4654      	mov	r4, sl
 80080c8:	2205      	movs	r2, #5
 80080ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080ce:	4854      	ldr	r0, [pc, #336]	; (8008220 <_vfiprintf_r+0x220>)
 80080d0:	f7f8 f886 	bl	80001e0 <memchr>
 80080d4:	9a04      	ldr	r2, [sp, #16]
 80080d6:	b9d8      	cbnz	r0, 8008110 <_vfiprintf_r+0x110>
 80080d8:	06d1      	lsls	r1, r2, #27
 80080da:	bf44      	itt	mi
 80080dc:	2320      	movmi	r3, #32
 80080de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080e2:	0713      	lsls	r3, r2, #28
 80080e4:	bf44      	itt	mi
 80080e6:	232b      	movmi	r3, #43	; 0x2b
 80080e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080ec:	f89a 3000 	ldrb.w	r3, [sl]
 80080f0:	2b2a      	cmp	r3, #42	; 0x2a
 80080f2:	d015      	beq.n	8008120 <_vfiprintf_r+0x120>
 80080f4:	9a07      	ldr	r2, [sp, #28]
 80080f6:	4654      	mov	r4, sl
 80080f8:	2000      	movs	r0, #0
 80080fa:	f04f 0c0a 	mov.w	ip, #10
 80080fe:	4621      	mov	r1, r4
 8008100:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008104:	3b30      	subs	r3, #48	; 0x30
 8008106:	2b09      	cmp	r3, #9
 8008108:	d94d      	bls.n	80081a6 <_vfiprintf_r+0x1a6>
 800810a:	b1b0      	cbz	r0, 800813a <_vfiprintf_r+0x13a>
 800810c:	9207      	str	r2, [sp, #28]
 800810e:	e014      	b.n	800813a <_vfiprintf_r+0x13a>
 8008110:	eba0 0308 	sub.w	r3, r0, r8
 8008114:	fa09 f303 	lsl.w	r3, r9, r3
 8008118:	4313      	orrs	r3, r2
 800811a:	9304      	str	r3, [sp, #16]
 800811c:	46a2      	mov	sl, r4
 800811e:	e7d2      	b.n	80080c6 <_vfiprintf_r+0xc6>
 8008120:	9b03      	ldr	r3, [sp, #12]
 8008122:	1d19      	adds	r1, r3, #4
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	9103      	str	r1, [sp, #12]
 8008128:	2b00      	cmp	r3, #0
 800812a:	bfbb      	ittet	lt
 800812c:	425b      	neglt	r3, r3
 800812e:	f042 0202 	orrlt.w	r2, r2, #2
 8008132:	9307      	strge	r3, [sp, #28]
 8008134:	9307      	strlt	r3, [sp, #28]
 8008136:	bfb8      	it	lt
 8008138:	9204      	strlt	r2, [sp, #16]
 800813a:	7823      	ldrb	r3, [r4, #0]
 800813c:	2b2e      	cmp	r3, #46	; 0x2e
 800813e:	d10c      	bne.n	800815a <_vfiprintf_r+0x15a>
 8008140:	7863      	ldrb	r3, [r4, #1]
 8008142:	2b2a      	cmp	r3, #42	; 0x2a
 8008144:	d134      	bne.n	80081b0 <_vfiprintf_r+0x1b0>
 8008146:	9b03      	ldr	r3, [sp, #12]
 8008148:	1d1a      	adds	r2, r3, #4
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	9203      	str	r2, [sp, #12]
 800814e:	2b00      	cmp	r3, #0
 8008150:	bfb8      	it	lt
 8008152:	f04f 33ff 	movlt.w	r3, #4294967295
 8008156:	3402      	adds	r4, #2
 8008158:	9305      	str	r3, [sp, #20]
 800815a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008230 <_vfiprintf_r+0x230>
 800815e:	7821      	ldrb	r1, [r4, #0]
 8008160:	2203      	movs	r2, #3
 8008162:	4650      	mov	r0, sl
 8008164:	f7f8 f83c 	bl	80001e0 <memchr>
 8008168:	b138      	cbz	r0, 800817a <_vfiprintf_r+0x17a>
 800816a:	9b04      	ldr	r3, [sp, #16]
 800816c:	eba0 000a 	sub.w	r0, r0, sl
 8008170:	2240      	movs	r2, #64	; 0x40
 8008172:	4082      	lsls	r2, r0
 8008174:	4313      	orrs	r3, r2
 8008176:	3401      	adds	r4, #1
 8008178:	9304      	str	r3, [sp, #16]
 800817a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800817e:	4829      	ldr	r0, [pc, #164]	; (8008224 <_vfiprintf_r+0x224>)
 8008180:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008184:	2206      	movs	r2, #6
 8008186:	f7f8 f82b 	bl	80001e0 <memchr>
 800818a:	2800      	cmp	r0, #0
 800818c:	d03f      	beq.n	800820e <_vfiprintf_r+0x20e>
 800818e:	4b26      	ldr	r3, [pc, #152]	; (8008228 <_vfiprintf_r+0x228>)
 8008190:	bb1b      	cbnz	r3, 80081da <_vfiprintf_r+0x1da>
 8008192:	9b03      	ldr	r3, [sp, #12]
 8008194:	3307      	adds	r3, #7
 8008196:	f023 0307 	bic.w	r3, r3, #7
 800819a:	3308      	adds	r3, #8
 800819c:	9303      	str	r3, [sp, #12]
 800819e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081a0:	443b      	add	r3, r7
 80081a2:	9309      	str	r3, [sp, #36]	; 0x24
 80081a4:	e768      	b.n	8008078 <_vfiprintf_r+0x78>
 80081a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80081aa:	460c      	mov	r4, r1
 80081ac:	2001      	movs	r0, #1
 80081ae:	e7a6      	b.n	80080fe <_vfiprintf_r+0xfe>
 80081b0:	2300      	movs	r3, #0
 80081b2:	3401      	adds	r4, #1
 80081b4:	9305      	str	r3, [sp, #20]
 80081b6:	4619      	mov	r1, r3
 80081b8:	f04f 0c0a 	mov.w	ip, #10
 80081bc:	4620      	mov	r0, r4
 80081be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081c2:	3a30      	subs	r2, #48	; 0x30
 80081c4:	2a09      	cmp	r2, #9
 80081c6:	d903      	bls.n	80081d0 <_vfiprintf_r+0x1d0>
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d0c6      	beq.n	800815a <_vfiprintf_r+0x15a>
 80081cc:	9105      	str	r1, [sp, #20]
 80081ce:	e7c4      	b.n	800815a <_vfiprintf_r+0x15a>
 80081d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80081d4:	4604      	mov	r4, r0
 80081d6:	2301      	movs	r3, #1
 80081d8:	e7f0      	b.n	80081bc <_vfiprintf_r+0x1bc>
 80081da:	ab03      	add	r3, sp, #12
 80081dc:	9300      	str	r3, [sp, #0]
 80081de:	462a      	mov	r2, r5
 80081e0:	4b12      	ldr	r3, [pc, #72]	; (800822c <_vfiprintf_r+0x22c>)
 80081e2:	a904      	add	r1, sp, #16
 80081e4:	4630      	mov	r0, r6
 80081e6:	f7fd fb9f 	bl	8005928 <_printf_float>
 80081ea:	4607      	mov	r7, r0
 80081ec:	1c78      	adds	r0, r7, #1
 80081ee:	d1d6      	bne.n	800819e <_vfiprintf_r+0x19e>
 80081f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081f2:	07d9      	lsls	r1, r3, #31
 80081f4:	d405      	bmi.n	8008202 <_vfiprintf_r+0x202>
 80081f6:	89ab      	ldrh	r3, [r5, #12]
 80081f8:	059a      	lsls	r2, r3, #22
 80081fa:	d402      	bmi.n	8008202 <_vfiprintf_r+0x202>
 80081fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081fe:	f7fe f8fd 	bl	80063fc <__retarget_lock_release_recursive>
 8008202:	89ab      	ldrh	r3, [r5, #12]
 8008204:	065b      	lsls	r3, r3, #25
 8008206:	f53f af1d 	bmi.w	8008044 <_vfiprintf_r+0x44>
 800820a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800820c:	e71c      	b.n	8008048 <_vfiprintf_r+0x48>
 800820e:	ab03      	add	r3, sp, #12
 8008210:	9300      	str	r3, [sp, #0]
 8008212:	462a      	mov	r2, r5
 8008214:	4b05      	ldr	r3, [pc, #20]	; (800822c <_vfiprintf_r+0x22c>)
 8008216:	a904      	add	r1, sp, #16
 8008218:	4630      	mov	r0, r6
 800821a:	f7fd fe29 	bl	8005e70 <_printf_i>
 800821e:	e7e4      	b.n	80081ea <_vfiprintf_r+0x1ea>
 8008220:	0800876c 	.word	0x0800876c
 8008224:	08008776 	.word	0x08008776
 8008228:	08005929 	.word	0x08005929
 800822c:	08007fdd 	.word	0x08007fdd
 8008230:	08008772 	.word	0x08008772

08008234 <__swbuf_r>:
 8008234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008236:	460e      	mov	r6, r1
 8008238:	4614      	mov	r4, r2
 800823a:	4605      	mov	r5, r0
 800823c:	b118      	cbz	r0, 8008246 <__swbuf_r+0x12>
 800823e:	6a03      	ldr	r3, [r0, #32]
 8008240:	b90b      	cbnz	r3, 8008246 <__swbuf_r+0x12>
 8008242:	f7fd ffc3 	bl	80061cc <__sinit>
 8008246:	69a3      	ldr	r3, [r4, #24]
 8008248:	60a3      	str	r3, [r4, #8]
 800824a:	89a3      	ldrh	r3, [r4, #12]
 800824c:	071a      	lsls	r2, r3, #28
 800824e:	d525      	bpl.n	800829c <__swbuf_r+0x68>
 8008250:	6923      	ldr	r3, [r4, #16]
 8008252:	b31b      	cbz	r3, 800829c <__swbuf_r+0x68>
 8008254:	6823      	ldr	r3, [r4, #0]
 8008256:	6922      	ldr	r2, [r4, #16]
 8008258:	1a98      	subs	r0, r3, r2
 800825a:	6963      	ldr	r3, [r4, #20]
 800825c:	b2f6      	uxtb	r6, r6
 800825e:	4283      	cmp	r3, r0
 8008260:	4637      	mov	r7, r6
 8008262:	dc04      	bgt.n	800826e <__swbuf_r+0x3a>
 8008264:	4621      	mov	r1, r4
 8008266:	4628      	mov	r0, r5
 8008268:	f7ff fd9e 	bl	8007da8 <_fflush_r>
 800826c:	b9e0      	cbnz	r0, 80082a8 <__swbuf_r+0x74>
 800826e:	68a3      	ldr	r3, [r4, #8]
 8008270:	3b01      	subs	r3, #1
 8008272:	60a3      	str	r3, [r4, #8]
 8008274:	6823      	ldr	r3, [r4, #0]
 8008276:	1c5a      	adds	r2, r3, #1
 8008278:	6022      	str	r2, [r4, #0]
 800827a:	701e      	strb	r6, [r3, #0]
 800827c:	6962      	ldr	r2, [r4, #20]
 800827e:	1c43      	adds	r3, r0, #1
 8008280:	429a      	cmp	r2, r3
 8008282:	d004      	beq.n	800828e <__swbuf_r+0x5a>
 8008284:	89a3      	ldrh	r3, [r4, #12]
 8008286:	07db      	lsls	r3, r3, #31
 8008288:	d506      	bpl.n	8008298 <__swbuf_r+0x64>
 800828a:	2e0a      	cmp	r6, #10
 800828c:	d104      	bne.n	8008298 <__swbuf_r+0x64>
 800828e:	4621      	mov	r1, r4
 8008290:	4628      	mov	r0, r5
 8008292:	f7ff fd89 	bl	8007da8 <_fflush_r>
 8008296:	b938      	cbnz	r0, 80082a8 <__swbuf_r+0x74>
 8008298:	4638      	mov	r0, r7
 800829a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800829c:	4621      	mov	r1, r4
 800829e:	4628      	mov	r0, r5
 80082a0:	f000 f806 	bl	80082b0 <__swsetup_r>
 80082a4:	2800      	cmp	r0, #0
 80082a6:	d0d5      	beq.n	8008254 <__swbuf_r+0x20>
 80082a8:	f04f 37ff 	mov.w	r7, #4294967295
 80082ac:	e7f4      	b.n	8008298 <__swbuf_r+0x64>
	...

080082b0 <__swsetup_r>:
 80082b0:	b538      	push	{r3, r4, r5, lr}
 80082b2:	4b2a      	ldr	r3, [pc, #168]	; (800835c <__swsetup_r+0xac>)
 80082b4:	4605      	mov	r5, r0
 80082b6:	6818      	ldr	r0, [r3, #0]
 80082b8:	460c      	mov	r4, r1
 80082ba:	b118      	cbz	r0, 80082c4 <__swsetup_r+0x14>
 80082bc:	6a03      	ldr	r3, [r0, #32]
 80082be:	b90b      	cbnz	r3, 80082c4 <__swsetup_r+0x14>
 80082c0:	f7fd ff84 	bl	80061cc <__sinit>
 80082c4:	89a3      	ldrh	r3, [r4, #12]
 80082c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082ca:	0718      	lsls	r0, r3, #28
 80082cc:	d422      	bmi.n	8008314 <__swsetup_r+0x64>
 80082ce:	06d9      	lsls	r1, r3, #27
 80082d0:	d407      	bmi.n	80082e2 <__swsetup_r+0x32>
 80082d2:	2309      	movs	r3, #9
 80082d4:	602b      	str	r3, [r5, #0]
 80082d6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80082da:	81a3      	strh	r3, [r4, #12]
 80082dc:	f04f 30ff 	mov.w	r0, #4294967295
 80082e0:	e034      	b.n	800834c <__swsetup_r+0x9c>
 80082e2:	0758      	lsls	r0, r3, #29
 80082e4:	d512      	bpl.n	800830c <__swsetup_r+0x5c>
 80082e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082e8:	b141      	cbz	r1, 80082fc <__swsetup_r+0x4c>
 80082ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082ee:	4299      	cmp	r1, r3
 80082f0:	d002      	beq.n	80082f8 <__swsetup_r+0x48>
 80082f2:	4628      	mov	r0, r5
 80082f4:	f7fe fefe 	bl	80070f4 <_free_r>
 80082f8:	2300      	movs	r3, #0
 80082fa:	6363      	str	r3, [r4, #52]	; 0x34
 80082fc:	89a3      	ldrh	r3, [r4, #12]
 80082fe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008302:	81a3      	strh	r3, [r4, #12]
 8008304:	2300      	movs	r3, #0
 8008306:	6063      	str	r3, [r4, #4]
 8008308:	6923      	ldr	r3, [r4, #16]
 800830a:	6023      	str	r3, [r4, #0]
 800830c:	89a3      	ldrh	r3, [r4, #12]
 800830e:	f043 0308 	orr.w	r3, r3, #8
 8008312:	81a3      	strh	r3, [r4, #12]
 8008314:	6923      	ldr	r3, [r4, #16]
 8008316:	b94b      	cbnz	r3, 800832c <__swsetup_r+0x7c>
 8008318:	89a3      	ldrh	r3, [r4, #12]
 800831a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800831e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008322:	d003      	beq.n	800832c <__swsetup_r+0x7c>
 8008324:	4621      	mov	r1, r4
 8008326:	4628      	mov	r0, r5
 8008328:	f000 f884 	bl	8008434 <__smakebuf_r>
 800832c:	89a0      	ldrh	r0, [r4, #12]
 800832e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008332:	f010 0301 	ands.w	r3, r0, #1
 8008336:	d00a      	beq.n	800834e <__swsetup_r+0x9e>
 8008338:	2300      	movs	r3, #0
 800833a:	60a3      	str	r3, [r4, #8]
 800833c:	6963      	ldr	r3, [r4, #20]
 800833e:	425b      	negs	r3, r3
 8008340:	61a3      	str	r3, [r4, #24]
 8008342:	6923      	ldr	r3, [r4, #16]
 8008344:	b943      	cbnz	r3, 8008358 <__swsetup_r+0xa8>
 8008346:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800834a:	d1c4      	bne.n	80082d6 <__swsetup_r+0x26>
 800834c:	bd38      	pop	{r3, r4, r5, pc}
 800834e:	0781      	lsls	r1, r0, #30
 8008350:	bf58      	it	pl
 8008352:	6963      	ldrpl	r3, [r4, #20]
 8008354:	60a3      	str	r3, [r4, #8]
 8008356:	e7f4      	b.n	8008342 <__swsetup_r+0x92>
 8008358:	2000      	movs	r0, #0
 800835a:	e7f7      	b.n	800834c <__swsetup_r+0x9c>
 800835c:	20000068 	.word	0x20000068

08008360 <_raise_r>:
 8008360:	291f      	cmp	r1, #31
 8008362:	b538      	push	{r3, r4, r5, lr}
 8008364:	4604      	mov	r4, r0
 8008366:	460d      	mov	r5, r1
 8008368:	d904      	bls.n	8008374 <_raise_r+0x14>
 800836a:	2316      	movs	r3, #22
 800836c:	6003      	str	r3, [r0, #0]
 800836e:	f04f 30ff 	mov.w	r0, #4294967295
 8008372:	bd38      	pop	{r3, r4, r5, pc}
 8008374:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008376:	b112      	cbz	r2, 800837e <_raise_r+0x1e>
 8008378:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800837c:	b94b      	cbnz	r3, 8008392 <_raise_r+0x32>
 800837e:	4620      	mov	r0, r4
 8008380:	f000 f830 	bl	80083e4 <_getpid_r>
 8008384:	462a      	mov	r2, r5
 8008386:	4601      	mov	r1, r0
 8008388:	4620      	mov	r0, r4
 800838a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800838e:	f000 b817 	b.w	80083c0 <_kill_r>
 8008392:	2b01      	cmp	r3, #1
 8008394:	d00a      	beq.n	80083ac <_raise_r+0x4c>
 8008396:	1c59      	adds	r1, r3, #1
 8008398:	d103      	bne.n	80083a2 <_raise_r+0x42>
 800839a:	2316      	movs	r3, #22
 800839c:	6003      	str	r3, [r0, #0]
 800839e:	2001      	movs	r0, #1
 80083a0:	e7e7      	b.n	8008372 <_raise_r+0x12>
 80083a2:	2400      	movs	r4, #0
 80083a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80083a8:	4628      	mov	r0, r5
 80083aa:	4798      	blx	r3
 80083ac:	2000      	movs	r0, #0
 80083ae:	e7e0      	b.n	8008372 <_raise_r+0x12>

080083b0 <raise>:
 80083b0:	4b02      	ldr	r3, [pc, #8]	; (80083bc <raise+0xc>)
 80083b2:	4601      	mov	r1, r0
 80083b4:	6818      	ldr	r0, [r3, #0]
 80083b6:	f7ff bfd3 	b.w	8008360 <_raise_r>
 80083ba:	bf00      	nop
 80083bc:	20000068 	.word	0x20000068

080083c0 <_kill_r>:
 80083c0:	b538      	push	{r3, r4, r5, lr}
 80083c2:	4d07      	ldr	r5, [pc, #28]	; (80083e0 <_kill_r+0x20>)
 80083c4:	2300      	movs	r3, #0
 80083c6:	4604      	mov	r4, r0
 80083c8:	4608      	mov	r0, r1
 80083ca:	4611      	mov	r1, r2
 80083cc:	602b      	str	r3, [r5, #0]
 80083ce:	f7f9 fd2f 	bl	8001e30 <_kill>
 80083d2:	1c43      	adds	r3, r0, #1
 80083d4:	d102      	bne.n	80083dc <_kill_r+0x1c>
 80083d6:	682b      	ldr	r3, [r5, #0]
 80083d8:	b103      	cbz	r3, 80083dc <_kill_r+0x1c>
 80083da:	6023      	str	r3, [r4, #0]
 80083dc:	bd38      	pop	{r3, r4, r5, pc}
 80083de:	bf00      	nop
 80083e0:	20000520 	.word	0x20000520

080083e4 <_getpid_r>:
 80083e4:	f7f9 bd1c 	b.w	8001e20 <_getpid>

080083e8 <__swhatbuf_r>:
 80083e8:	b570      	push	{r4, r5, r6, lr}
 80083ea:	460c      	mov	r4, r1
 80083ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083f0:	2900      	cmp	r1, #0
 80083f2:	b096      	sub	sp, #88	; 0x58
 80083f4:	4615      	mov	r5, r2
 80083f6:	461e      	mov	r6, r3
 80083f8:	da0d      	bge.n	8008416 <__swhatbuf_r+0x2e>
 80083fa:	89a3      	ldrh	r3, [r4, #12]
 80083fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008400:	f04f 0100 	mov.w	r1, #0
 8008404:	bf0c      	ite	eq
 8008406:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800840a:	2340      	movne	r3, #64	; 0x40
 800840c:	2000      	movs	r0, #0
 800840e:	6031      	str	r1, [r6, #0]
 8008410:	602b      	str	r3, [r5, #0]
 8008412:	b016      	add	sp, #88	; 0x58
 8008414:	bd70      	pop	{r4, r5, r6, pc}
 8008416:	466a      	mov	r2, sp
 8008418:	f000 f848 	bl	80084ac <_fstat_r>
 800841c:	2800      	cmp	r0, #0
 800841e:	dbec      	blt.n	80083fa <__swhatbuf_r+0x12>
 8008420:	9901      	ldr	r1, [sp, #4]
 8008422:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008426:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800842a:	4259      	negs	r1, r3
 800842c:	4159      	adcs	r1, r3
 800842e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008432:	e7eb      	b.n	800840c <__swhatbuf_r+0x24>

08008434 <__smakebuf_r>:
 8008434:	898b      	ldrh	r3, [r1, #12]
 8008436:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008438:	079d      	lsls	r5, r3, #30
 800843a:	4606      	mov	r6, r0
 800843c:	460c      	mov	r4, r1
 800843e:	d507      	bpl.n	8008450 <__smakebuf_r+0x1c>
 8008440:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008444:	6023      	str	r3, [r4, #0]
 8008446:	6123      	str	r3, [r4, #16]
 8008448:	2301      	movs	r3, #1
 800844a:	6163      	str	r3, [r4, #20]
 800844c:	b002      	add	sp, #8
 800844e:	bd70      	pop	{r4, r5, r6, pc}
 8008450:	ab01      	add	r3, sp, #4
 8008452:	466a      	mov	r2, sp
 8008454:	f7ff ffc8 	bl	80083e8 <__swhatbuf_r>
 8008458:	9900      	ldr	r1, [sp, #0]
 800845a:	4605      	mov	r5, r0
 800845c:	4630      	mov	r0, r6
 800845e:	f7fe febd 	bl	80071dc <_malloc_r>
 8008462:	b948      	cbnz	r0, 8008478 <__smakebuf_r+0x44>
 8008464:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008468:	059a      	lsls	r2, r3, #22
 800846a:	d4ef      	bmi.n	800844c <__smakebuf_r+0x18>
 800846c:	f023 0303 	bic.w	r3, r3, #3
 8008470:	f043 0302 	orr.w	r3, r3, #2
 8008474:	81a3      	strh	r3, [r4, #12]
 8008476:	e7e3      	b.n	8008440 <__smakebuf_r+0xc>
 8008478:	89a3      	ldrh	r3, [r4, #12]
 800847a:	6020      	str	r0, [r4, #0]
 800847c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008480:	81a3      	strh	r3, [r4, #12]
 8008482:	9b00      	ldr	r3, [sp, #0]
 8008484:	6163      	str	r3, [r4, #20]
 8008486:	9b01      	ldr	r3, [sp, #4]
 8008488:	6120      	str	r0, [r4, #16]
 800848a:	b15b      	cbz	r3, 80084a4 <__smakebuf_r+0x70>
 800848c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008490:	4630      	mov	r0, r6
 8008492:	f000 f81d 	bl	80084d0 <_isatty_r>
 8008496:	b128      	cbz	r0, 80084a4 <__smakebuf_r+0x70>
 8008498:	89a3      	ldrh	r3, [r4, #12]
 800849a:	f023 0303 	bic.w	r3, r3, #3
 800849e:	f043 0301 	orr.w	r3, r3, #1
 80084a2:	81a3      	strh	r3, [r4, #12]
 80084a4:	89a3      	ldrh	r3, [r4, #12]
 80084a6:	431d      	orrs	r5, r3
 80084a8:	81a5      	strh	r5, [r4, #12]
 80084aa:	e7cf      	b.n	800844c <__smakebuf_r+0x18>

080084ac <_fstat_r>:
 80084ac:	b538      	push	{r3, r4, r5, lr}
 80084ae:	4d07      	ldr	r5, [pc, #28]	; (80084cc <_fstat_r+0x20>)
 80084b0:	2300      	movs	r3, #0
 80084b2:	4604      	mov	r4, r0
 80084b4:	4608      	mov	r0, r1
 80084b6:	4611      	mov	r1, r2
 80084b8:	602b      	str	r3, [r5, #0]
 80084ba:	f7f9 fd18 	bl	8001eee <_fstat>
 80084be:	1c43      	adds	r3, r0, #1
 80084c0:	d102      	bne.n	80084c8 <_fstat_r+0x1c>
 80084c2:	682b      	ldr	r3, [r5, #0]
 80084c4:	b103      	cbz	r3, 80084c8 <_fstat_r+0x1c>
 80084c6:	6023      	str	r3, [r4, #0]
 80084c8:	bd38      	pop	{r3, r4, r5, pc}
 80084ca:	bf00      	nop
 80084cc:	20000520 	.word	0x20000520

080084d0 <_isatty_r>:
 80084d0:	b538      	push	{r3, r4, r5, lr}
 80084d2:	4d06      	ldr	r5, [pc, #24]	; (80084ec <_isatty_r+0x1c>)
 80084d4:	2300      	movs	r3, #0
 80084d6:	4604      	mov	r4, r0
 80084d8:	4608      	mov	r0, r1
 80084da:	602b      	str	r3, [r5, #0]
 80084dc:	f7f9 fd17 	bl	8001f0e <_isatty>
 80084e0:	1c43      	adds	r3, r0, #1
 80084e2:	d102      	bne.n	80084ea <_isatty_r+0x1a>
 80084e4:	682b      	ldr	r3, [r5, #0]
 80084e6:	b103      	cbz	r3, 80084ea <_isatty_r+0x1a>
 80084e8:	6023      	str	r3, [r4, #0]
 80084ea:	bd38      	pop	{r3, r4, r5, pc}
 80084ec:	20000520 	.word	0x20000520

080084f0 <_init>:
 80084f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084f2:	bf00      	nop
 80084f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084f6:	bc08      	pop	{r3}
 80084f8:	469e      	mov	lr, r3
 80084fa:	4770      	bx	lr

080084fc <_fini>:
 80084fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084fe:	bf00      	nop
 8008500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008502:	bc08      	pop	{r3}
 8008504:	469e      	mov	lr, r3
 8008506:	4770      	bx	lr
