
DCMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009160  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  08009300  08009300  00019300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096b4  080096b4  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  080096b4  080096b4  000196b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096bc  080096bc  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096bc  080096bc  000196bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096c0  080096c0  000196c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080096c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  200001d8  0800989c  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005f8  0800989c  000205f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f0cc  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000246b  00000000  00000000  0002f317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e60  00000000  00000000  00031788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b2d  00000000  00000000  000325e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001896d  00000000  00000000  00033115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001140c  00000000  00000000  0004ba82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009bc04  00000000  00000000  0005ce8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d58  00000000  00000000  000f8a94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000fd7ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080092e8 	.word	0x080092e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	080092e8 	.word	0x080092e8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <updatePID>:
#include "PID.h"

void updatePID(PID_Controller* pid, double current) {
 8000ef4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ef8:	b08c      	sub	sp, #48	; 0x30
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	60f8      	str	r0, [r7, #12]
 8000efe:	ed87 0b00 	vstr	d0, [r7]
	double error=0;
 8000f02:	f04f 0200 	mov.w	r2, #0
 8000f06:	f04f 0300 	mov.w	r3, #0
 8000f0a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	switch (pid->ControlMode){
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	f000 8083 	beq.w	800101e <updatePID+0x12a>
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	f300 8081 	bgt.w	8001020 <updatePID+0x12c>
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d002      	beq.n	8000f28 <updatePID+0x34>
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d00c      	beq.n	8000f40 <updatePID+0x4c>
 8000f26:	e07b      	b.n	8001020 <updatePID+0x12c>
	case Velocity:
		error = pid->target - current;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8000f2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f32:	f7ff f9b1 	bl	8000298 <__aeabi_dsub>
 8000f36:	4602      	mov	r2, r0
 8000f38:	460b      	mov	r3, r1
 8000f3a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		break;
 8000f3e:	e06f      	b.n	8001020 <updatePID+0x12c>
	case Position:
		int ModifiedTarget;
		if (pid->target<(ENCODER_RESOLUTION/2)){
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8000f46:	f04f 0200 	mov.w	r2, #0
 8000f4a:	4ba5      	ldr	r3, [pc, #660]	; (80011e0 <updatePID+0x2ec>)
 8000f4c:	f7ff fdce 	bl	8000aec <__aeabi_dcmplt>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d010      	beq.n	8000f78 <updatePID+0x84>
			ModifiedTarget= ENCODER_RESOLUTION/2 + pid->target ;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8000f5c:	f04f 0200 	mov.w	r2, #0
 8000f60:	4b9f      	ldr	r3, [pc, #636]	; (80011e0 <updatePID+0x2ec>)
 8000f62:	f7ff f99b 	bl	800029c <__adddf3>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f7ff fdfb 	bl	8000b68 <__aeabi_d2iz>
 8000f72:	4603      	mov	r3, r0
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
 8000f76:	e00f      	b.n	8000f98 <updatePID+0xa4>
		}
		else{
			ModifiedTarget= - ( ENCODER_RESOLUTION/2 ) + pid->target ;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8000f7e:	f04f 0200 	mov.w	r2, #0
 8000f82:	4b97      	ldr	r3, [pc, #604]	; (80011e0 <updatePID+0x2ec>)
 8000f84:	f7ff f988 	bl	8000298 <__aeabi_dsub>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f7ff fdea 	bl	8000b68 <__aeabi_d2iz>
 8000f94:	4603      	mov	r3, r0
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
		}
		error = ModifiedTarget - current;
 8000f98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f9a:	f7ff facb 	bl	8000534 <__aeabi_i2d>
 8000f9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fa2:	f7ff f979 	bl	8000298 <__aeabi_dsub>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	460b      	mov	r3, r1
 8000faa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		if (error >0){
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000fba:	f7ff fdb5 	bl	8000b28 <__aeabi_dcmpgt>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d00b      	beq.n	8000fdc <updatePID+0xe8>
			error=(ENCODER_RESOLUTION/2)-error;
 8000fc4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000fc8:	f04f 0000 	mov.w	r0, #0
 8000fcc:	4984      	ldr	r1, [pc, #528]	; (80011e0 <updatePID+0x2ec>)
 8000fce:	f7ff f963 	bl	8000298 <__aeabi_dsub>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			error=-((ENCODER_RESOLUTION/2)+error);
		}
		else{
			error= 0;
		}
		break;
 8000fda:	e021      	b.n	8001020 <updatePID+0x12c>
		else if (error<0){
 8000fdc:	f04f 0200 	mov.w	r2, #0
 8000fe0:	f04f 0300 	mov.w	r3, #0
 8000fe4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000fe8:	f7ff fd80 	bl	8000aec <__aeabi_dcmplt>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d00e      	beq.n	8001010 <updatePID+0x11c>
			error=-((ENCODER_RESOLUTION/2)+error);
 8000ff2:	f04f 0200 	mov.w	r2, #0
 8000ff6:	4b7a      	ldr	r3, [pc, #488]	; (80011e0 <updatePID+0x2ec>)
 8000ff8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000ffc:	f7ff f94e 	bl	800029c <__adddf3>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	4611      	mov	r1, r2
 8001006:	62b9      	str	r1, [r7, #40]	; 0x28
 8001008:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800100c:	62fb      	str	r3, [r7, #44]	; 0x2c
		break;
 800100e:	e007      	b.n	8001020 <updatePID+0x12c>
			error= 0;
 8001010:	f04f 0200 	mov.w	r2, #0
 8001014:	f04f 0300 	mov.w	r3, #0
 8001018:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		break;
 800101c:	e000      	b.n	8001020 <updatePID+0x12c>
	case Torque:

		break;
 800101e:	bf00      	nop

	}
	pid->CurrentError=error;
 8001020:	68f9      	ldr	r1, [r7, #12]
 8001022:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001026:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	double P,D;
	if (pid->ControlMode!=Position){
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b01      	cmp	r3, #1
 8001030:	f000 8091 	beq.w	8001156 <updatePID+0x262>
		// Proportional
		P = pid->Kp * error;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800103a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800103e:	f7ff fae3 	bl	8000608 <__aeabi_dmul>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	e9c7 2306 	strd	r2, r3, [r7, #24]
		// Integral
		pid->integral += pid->Ki * error * (pid->dt/1000);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001056:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800105a:	f7ff fad5 	bl	8000608 <__aeabi_dmul>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	4690      	mov	r8, r2
 8001064:	4699      	mov	r9, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800106c:	f04f 0200 	mov.w	r2, #0
 8001070:	4b5c      	ldr	r3, [pc, #368]	; (80011e4 <updatePID+0x2f0>)
 8001072:	f7ff fbf3 	bl	800085c <__aeabi_ddiv>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	4640      	mov	r0, r8
 800107c:	4649      	mov	r1, r9
 800107e:	f7ff fac3 	bl	8000608 <__aeabi_dmul>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4620      	mov	r0, r4
 8001088:	4629      	mov	r1, r5
 800108a:	f7ff f907 	bl	800029c <__adddf3>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	68f9      	ldr	r1, [r7, #12]
 8001094:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		// Derivative
		D = pid->Kd * (error - pid->prev_error) / (pid->dt/1000);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80010a4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80010a8:	f7ff f8f6 	bl	8000298 <__aeabi_dsub>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	4620      	mov	r0, r4
 80010b2:	4629      	mov	r1, r5
 80010b4:	f7ff faa8 	bl	8000608 <__aeabi_dmul>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4614      	mov	r4, r2
 80010be:	461d      	mov	r5, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80010c6:	f04f 0200 	mov.w	r2, #0
 80010ca:	4b46      	ldr	r3, [pc, #280]	; (80011e4 <updatePID+0x2f0>)
 80010cc:	f7ff fbc6 	bl	800085c <__aeabi_ddiv>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	4620      	mov	r0, r4
 80010d6:	4629      	mov	r1, r5
 80010d8:	f7ff fbc0 	bl	800085c <__aeabi_ddiv>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
		// Total
		pid->output = P + pid->integral + D;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80010ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80010ee:	f7ff f8d5 	bl	800029c <__adddf3>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4610      	mov	r0, r2
 80010f8:	4619      	mov	r1, r3
 80010fa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80010fe:	f7ff f8cd 	bl	800029c <__adddf3>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	68f9      	ldr	r1, [r7, #12]
 8001108:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		// Integral with anti-windup
		if (pid->integral > pid->max_output) {
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001118:	f7ff fd06 	bl	8000b28 <__aeabi_dcmpgt>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d006      	beq.n	8001130 <updatePID+0x23c>
			pid->integral = pid->max_output;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001128:	68f9      	ldr	r1, [r7, #12]
 800112a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 800112e:	e0af      	b.n	8001290 <updatePID+0x39c>
		} else if (pid->integral < pid->min_output) {
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800113c:	f7ff fcd6 	bl	8000aec <__aeabi_dcmplt>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	f000 80a4 	beq.w	8001290 <updatePID+0x39c>
			pid->integral = pid->min_output;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800114e:	68f9      	ldr	r1, [r7, #12]
 8001150:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8001154:	e09c      	b.n	8001290 <updatePID+0x39c>
		}
	}
	else {
		P = pid->Kp * error;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800115c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001160:	f7ff fa52 	bl	8000608 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	e9c7 2306 	strd	r2, r3, [r7, #24]
		pid->integral += pid->Ki * error * (pid->dt/1000);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001178:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800117c:	f7ff fa44 	bl	8000608 <__aeabi_dmul>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4690      	mov	r8, r2
 8001186:	4699      	mov	r9, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <updatePID+0x2f0>)
 8001194:	f7ff fb62 	bl	800085c <__aeabi_ddiv>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4640      	mov	r0, r8
 800119e:	4649      	mov	r1, r9
 80011a0:	f7ff fa32 	bl	8000608 <__aeabi_dmul>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4620      	mov	r0, r4
 80011aa:	4629      	mov	r1, r5
 80011ac:	f7ff f876 	bl	800029c <__adddf3>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	68f9      	ldr	r1, [r7, #12]
 80011b6:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		// Integral with anti-windup
		if (pid->integral > pid->max_Integral) {
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80011c6:	f7ff fcaf 	bl	8000b28 <__aeabi_dcmpgt>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d00b      	beq.n	80011e8 <updatePID+0x2f4>
			pid->integral = pid->max_Integral;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80011d6:	68f9      	ldr	r1, [r7, #12]
 80011d8:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 80011dc:	e015      	b.n	800120a <updatePID+0x316>
 80011de:	bf00      	nop
 80011e0:	40600000 	.word	0x40600000
 80011e4:	408f4000 	.word	0x408f4000
		} else if (pid->integral < pid->min_Integral) {
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80011f4:	f7ff fc7a 	bl	8000aec <__aeabi_dcmplt>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d005      	beq.n	800120a <updatePID+0x316>
			pid->integral = pid->min_Integral;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001204:	68f9      	ldr	r1, [r7, #12]
 8001206:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		}
		D = pid->Kd * (error - pid->prev_error) / (pid->dt/1000);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001216:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800121a:	f7ff f83d 	bl	8000298 <__aeabi_dsub>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4620      	mov	r0, r4
 8001224:	4629      	mov	r1, r5
 8001226:	f7ff f9ef 	bl	8000608 <__aeabi_dmul>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	4614      	mov	r4, r2
 8001230:	461d      	mov	r5, r3
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	4b2b      	ldr	r3, [pc, #172]	; (80012ec <updatePID+0x3f8>)
 800123e:	f7ff fb0d 	bl	800085c <__aeabi_ddiv>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4620      	mov	r0, r4
 8001248:	4629      	mov	r1, r5
 800124a:	f7ff fb07 	bl	800085c <__aeabi_ddiv>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	e9c7 2304 	strd	r2, r3, [r7, #16]
		// Total
		pid->output = (PWM_MAXVALUE/2) + P + pid->integral + D;
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	4b25      	ldr	r3, [pc, #148]	; (80012f0 <updatePID+0x3fc>)
 800125c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001260:	f7ff f81c 	bl	800029c <__adddf3>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4610      	mov	r0, r2
 800126a:	4619      	mov	r1, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001272:	f7ff f813 	bl	800029c <__adddf3>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4610      	mov	r0, r2
 800127c:	4619      	mov	r1, r3
 800127e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001282:	f7ff f80b 	bl	800029c <__adddf3>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	68f9      	ldr	r1, [r7, #12]
 800128c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	}


	// Saturate output within limits
	if (pid->output > pid->max_output) {
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800129c:	f7ff fc44 	bl	8000b28 <__aeabi_dcmpgt>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d006      	beq.n	80012b4 <updatePID+0x3c0>
		pid->output = pid->max_output;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80012ac:	68f9      	ldr	r1, [r7, #12]
 80012ae:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 80012b2:	e010      	b.n	80012d6 <updatePID+0x3e2>
	} else if (pid->output < pid->min_output) {
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80012c0:	f7ff fc14 	bl	8000aec <__aeabi_dcmplt>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d005      	beq.n	80012d6 <updatePID+0x3e2>
		pid->output = pid->min_output;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80012d0:	68f9      	ldr	r1, [r7, #12]
 80012d2:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	}
	pid->prev_error = error;
 80012d6:	68f9      	ldr	r1, [r7, #12]
 80012d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80012dc:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 80012e0:	bf00      	nop
 80012e2:	3730      	adds	r7, #48	; 0x30
 80012e4:	46bd      	mov	sp, r7
 80012e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012ea:	bf00      	nop
 80012ec:	408f4000 	.word	0x408f4000
 80012f0:	407f4000 	.word	0x407f4000

080012f4 <ParseSBUS>:
#include "Sbus.h"

void ParseSBUS(tsbus* sbus){
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
	sbus->ch[0]  = ( (sbus->ReceivedData[1]		| sbus->ReceivedData[2]<<8) 								& 0x07FF );
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	785b      	ldrb	r3, [r3, #1]
 8001300:	b21a      	sxth	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	789b      	ldrb	r3, [r3, #2]
 8001306:	021b      	lsls	r3, r3, #8
 8001308:	b21b      	sxth	r3, r3
 800130a:	4313      	orrs	r3, r2
 800130c:	b21b      	sxth	r3, r3
 800130e:	b29b      	uxth	r3, r3
 8001310:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001314:	b29a      	uxth	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	835a      	strh	r2, [r3, #26]
	sbus->ch[1]  = ( (sbus->ReceivedData[2]>>3	| sbus->ReceivedData[3]<<5) 								& 0x07FF );
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	789b      	ldrb	r3, [r3, #2]
 800131e:	08db      	lsrs	r3, r3, #3
 8001320:	b2db      	uxtb	r3, r3
 8001322:	b21a      	sxth	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	78db      	ldrb	r3, [r3, #3]
 8001328:	015b      	lsls	r3, r3, #5
 800132a:	b21b      	sxth	r3, r3
 800132c:	4313      	orrs	r3, r2
 800132e:	b21b      	sxth	r3, r3
 8001330:	b29b      	uxth	r3, r3
 8001332:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001336:	b29a      	uxth	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	839a      	strh	r2, [r3, #28]
	sbus->ch[2]  = ( (sbus->ReceivedData[3]>>6	| sbus->ReceivedData[4]<<2 	| sbus->ReceivedData[5]<<10 ) 	& 0x07FF );
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	78db      	ldrb	r3, [r3, #3]
 8001340:	099b      	lsrs	r3, r3, #6
 8001342:	b2db      	uxtb	r3, r3
 8001344:	b21a      	sxth	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	791b      	ldrb	r3, [r3, #4]
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	b21b      	sxth	r3, r3
 800134e:	4313      	orrs	r3, r2
 8001350:	b21a      	sxth	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	795b      	ldrb	r3, [r3, #5]
 8001356:	029b      	lsls	r3, r3, #10
 8001358:	b21b      	sxth	r3, r3
 800135a:	4313      	orrs	r3, r2
 800135c:	b21b      	sxth	r3, r3
 800135e:	b29b      	uxth	r3, r3
 8001360:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001364:	b29a      	uxth	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	83da      	strh	r2, [r3, #30]
	sbus->ch[3]  = ( (sbus->ReceivedData[5]>>1	| sbus->ReceivedData[6]<<7) 								& 0x07FF );
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	795b      	ldrb	r3, [r3, #5]
 800136e:	085b      	lsrs	r3, r3, #1
 8001370:	b2db      	uxtb	r3, r3
 8001372:	b21a      	sxth	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	799b      	ldrb	r3, [r3, #6]
 8001378:	01db      	lsls	r3, r3, #7
 800137a:	b21b      	sxth	r3, r3
 800137c:	4313      	orrs	r3, r2
 800137e:	b21b      	sxth	r3, r3
 8001380:	b29b      	uxth	r3, r3
 8001382:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001386:	b29a      	uxth	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	841a      	strh	r2, [r3, #32]
	sbus->ch[4]  = ( (sbus->ReceivedData[6]>>4	| sbus->ReceivedData[7]<<4) 								& 0x07FF );
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	799b      	ldrb	r3, [r3, #6]
 8001390:	091b      	lsrs	r3, r3, #4
 8001392:	b2db      	uxtb	r3, r3
 8001394:	b21a      	sxth	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	79db      	ldrb	r3, [r3, #7]
 800139a:	011b      	lsls	r3, r3, #4
 800139c:	b21b      	sxth	r3, r3
 800139e:	4313      	orrs	r3, r2
 80013a0:	b21b      	sxth	r3, r3
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	845a      	strh	r2, [r3, #34]	; 0x22
	sbus->ch[5]  = ( (sbus->ReceivedData[7]>>7	| sbus->ReceivedData[8]<<1	| sbus->ReceivedData[9]<<9 ) 	& 0x07FF );
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	79db      	ldrb	r3, [r3, #7]
 80013b2:	09db      	lsrs	r3, r3, #7
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	b21a      	sxth	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	7a1b      	ldrb	r3, [r3, #8]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	b21b      	sxth	r3, r3
 80013c0:	4313      	orrs	r3, r2
 80013c2:	b21a      	sxth	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	7a5b      	ldrb	r3, [r3, #9]
 80013c8:	025b      	lsls	r3, r3, #9
 80013ca:	b21b      	sxth	r3, r3
 80013cc:	4313      	orrs	r3, r2
 80013ce:	b21b      	sxth	r3, r3
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	849a      	strh	r2, [r3, #36]	; 0x24
	sbus->ch[6]  = ( (sbus->ReceivedData[9]>>2 	| sbus->ReceivedData[10]<<6) 								& 0x07FF );
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	7a5b      	ldrb	r3, [r3, #9]
 80013e0:	089b      	lsrs	r3, r3, #2
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	b21a      	sxth	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	7a9b      	ldrb	r3, [r3, #10]
 80013ea:	019b      	lsls	r3, r3, #6
 80013ec:	b21b      	sxth	r3, r3
 80013ee:	4313      	orrs	r3, r2
 80013f0:	b21b      	sxth	r3, r3
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	84da      	strh	r2, [r3, #38]	; 0x26
	sbus->ch[7]  = ( (sbus->ReceivedData[10]>>5 | sbus->ReceivedData[11]<<3) 								& 0x07FF );
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	7a9b      	ldrb	r3, [r3, #10]
 8001402:	095b      	lsrs	r3, r3, #5
 8001404:	b2db      	uxtb	r3, r3
 8001406:	b21a      	sxth	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	7adb      	ldrb	r3, [r3, #11]
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	b21b      	sxth	r3, r3
 8001410:	4313      	orrs	r3, r2
 8001412:	b21b      	sxth	r3, r3
 8001414:	b29b      	uxth	r3, r3
 8001416:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800141a:	b29a      	uxth	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	851a      	strh	r2, [r3, #40]	; 0x28
	sbus->ch[8]  = ( (sbus->ReceivedData[12]	| sbus->ReceivedData[13]<<8) 								& 0x07FF );
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	7b1b      	ldrb	r3, [r3, #12]
 8001424:	b21a      	sxth	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	7b5b      	ldrb	r3, [r3, #13]
 800142a:	021b      	lsls	r3, r3, #8
 800142c:	b21b      	sxth	r3, r3
 800142e:	4313      	orrs	r3, r2
 8001430:	b21b      	sxth	r3, r3
 8001432:	b29b      	uxth	r3, r3
 8001434:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001438:	b29a      	uxth	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	855a      	strh	r2, [r3, #42]	; 0x2a
	sbus->ch[9]  = ( (sbus->ReceivedData[13]>>3 | sbus->ReceivedData[14]<<5) 								& 0x07FF );
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	7b5b      	ldrb	r3, [r3, #13]
 8001442:	08db      	lsrs	r3, r3, #3
 8001444:	b2db      	uxtb	r3, r3
 8001446:	b21a      	sxth	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	7b9b      	ldrb	r3, [r3, #14]
 800144c:	015b      	lsls	r3, r3, #5
 800144e:	b21b      	sxth	r3, r3
 8001450:	4313      	orrs	r3, r2
 8001452:	b21b      	sxth	r3, r3
 8001454:	b29b      	uxth	r3, r3
 8001456:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800145a:	b29a      	uxth	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	859a      	strh	r2, [r3, #44]	; 0x2c
	sbus->ch[10] = ( (sbus->ReceivedData[14]>>6 | sbus->ReceivedData[15]<<2 | sbus->ReceivedData[16]<<10) 	& 0x07FF );
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	7b9b      	ldrb	r3, [r3, #14]
 8001464:	099b      	lsrs	r3, r3, #6
 8001466:	b2db      	uxtb	r3, r3
 8001468:	b21a      	sxth	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	7bdb      	ldrb	r3, [r3, #15]
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	b21b      	sxth	r3, r3
 8001472:	4313      	orrs	r3, r2
 8001474:	b21a      	sxth	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	7c1b      	ldrb	r3, [r3, #16]
 800147a:	029b      	lsls	r3, r3, #10
 800147c:	b21b      	sxth	r3, r3
 800147e:	4313      	orrs	r3, r2
 8001480:	b21b      	sxth	r3, r3
 8001482:	b29b      	uxth	r3, r3
 8001484:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001488:	b29a      	uxth	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	85da      	strh	r2, [r3, #46]	; 0x2e
	sbus->ch[11] = ( (sbus->ReceivedData[16]>>1 | sbus->ReceivedData[17]<<7)								& 0x07FF );
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	7c1b      	ldrb	r3, [r3, #16]
 8001492:	085b      	lsrs	r3, r3, #1
 8001494:	b2db      	uxtb	r3, r3
 8001496:	b21a      	sxth	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	7c5b      	ldrb	r3, [r3, #17]
 800149c:	01db      	lsls	r3, r3, #7
 800149e:	b21b      	sxth	r3, r3
 80014a0:	4313      	orrs	r3, r2
 80014a2:	b21b      	sxth	r3, r3
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	861a      	strh	r2, [r3, #48]	; 0x30
	sbus->ch[12] = ( (sbus->ReceivedData[17]>>4 | sbus->ReceivedData[18]<<4)								& 0x07FF );
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	7c5b      	ldrb	r3, [r3, #17]
 80014b4:	091b      	lsrs	r3, r3, #4
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	b21a      	sxth	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	7c9b      	ldrb	r3, [r3, #18]
 80014be:	011b      	lsls	r3, r3, #4
 80014c0:	b21b      	sxth	r3, r3
 80014c2:	4313      	orrs	r3, r2
 80014c4:	b21b      	sxth	r3, r3
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	865a      	strh	r2, [r3, #50]	; 0x32
	sbus->ch[13] = ( (sbus->ReceivedData[18]>>7 | sbus->ReceivedData[19]<<1 | sbus->ReceivedData[20]<<9) 	& 0x07FF );
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	7c9b      	ldrb	r3, [r3, #18]
 80014d6:	09db      	lsrs	r3, r3, #7
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	b21a      	sxth	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	7cdb      	ldrb	r3, [r3, #19]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	b21b      	sxth	r3, r3
 80014e4:	4313      	orrs	r3, r2
 80014e6:	b21a      	sxth	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	7d1b      	ldrb	r3, [r3, #20]
 80014ec:	025b      	lsls	r3, r3, #9
 80014ee:	b21b      	sxth	r3, r3
 80014f0:	4313      	orrs	r3, r2
 80014f2:	b21b      	sxth	r3, r3
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	869a      	strh	r2, [r3, #52]	; 0x34
	sbus->ch[14] = ( (sbus->ReceivedData[20]>>2 | sbus->ReceivedData[21]<<6) 								& 0x07FF );
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	7d1b      	ldrb	r3, [r3, #20]
 8001504:	089b      	lsrs	r3, r3, #2
 8001506:	b2db      	uxtb	r3, r3
 8001508:	b21a      	sxth	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	7d5b      	ldrb	r3, [r3, #21]
 800150e:	019b      	lsls	r3, r3, #6
 8001510:	b21b      	sxth	r3, r3
 8001512:	4313      	orrs	r3, r2
 8001514:	b21b      	sxth	r3, r3
 8001516:	b29b      	uxth	r3, r3
 8001518:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800151c:	b29a      	uxth	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	86da      	strh	r2, [r3, #54]	; 0x36
	sbus->ch[15] = ( (sbus->ReceivedData[21]>>5 | sbus->ReceivedData[22]<<3) 								& 0x07FF );
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	7d5b      	ldrb	r3, [r3, #21]
 8001526:	095b      	lsrs	r3, r3, #5
 8001528:	b2db      	uxtb	r3, r3
 800152a:	b21a      	sxth	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	7d9b      	ldrb	r3, [r3, #22]
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	b21b      	sxth	r3, r3
 8001534:	4313      	orrs	r3, r2
 8001536:	b21b      	sxth	r3, r3
 8001538:	b29b      	uxth	r3, r3
 800153a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800153e:	b29a      	uxth	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	871a      	strh	r2, [r3, #56]	; 0x38
	sbus->ch[16] = (  sbus->ReceivedData[23] 	& 0x0001 ) ? 2047: 0;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	7ddb      	ldrb	r3, [r3, #23]
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	2b00      	cmp	r3, #0
 800154e:	d002      	beq.n	8001556 <ParseSBUS+0x262>
 8001550:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001554:	e000      	b.n	8001558 <ParseSBUS+0x264>
 8001556:	2200      	movs	r2, #0
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	875a      	strh	r2, [r3, #58]	; 0x3a
	sbus->ch[17] = (  sbus->ReceivedData[23]>>1 & 0x0001 ) ? 2047: 0;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7ddb      	ldrb	r3, [r3, #23]
 8001560:	085b      	lsrs	r3, r3, #1
 8001562:	b2db      	uxtb	r3, r3
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	2b00      	cmp	r3, #0
 800156a:	d002      	beq.n	8001572 <ParseSBUS+0x27e>
 800156c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001570:	e000      	b.n	8001574 <ParseSBUS+0x280>
 8001572:	2200      	movs	r2, #0
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <GetEncoderValue>:
#include "encoder.h"
#include "main.h"

void GetEncoderValue(encoder_data *encoder){
 8001584:	b580      	push	{r7, lr}
 8001586:	b096      	sub	sp, #88	; 0x58
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
	  int EncoderGrayConvert[8] ={0,0,0,0,0,0,0,0};
 800158c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001590:	2220      	movs	r2, #32
 8001592:	2100      	movs	r1, #0
 8001594:	4618      	mov	r0, r3
 8001596:	f005 fdae 	bl	80070f6 <memset>
	  int GrayCode=0;
 800159a:	2300      	movs	r3, #0
 800159c:	64bb      	str	r3, [r7, #72]	; 0x48
	  int GrayMSBDetected = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	657b      	str	r3, [r7, #84]	; 0x54
	  //reading encoder value as gray code
#ifdef ENCODER_GPIO_MODE
	  //EncoderGrayCode = GrayCodeConvert[(HAL_GPIO_ReadPin(Encoder_A_GPIO_Port, Encoder_A_Pin) <<1 | HAL_GPIO_ReadPin(Encoder_B_GPIO_Port, Encoder_B_Pin)) & 0x03];
	  int b[8];
	  b[0]=!HAL_GPIO_ReadPin(Encoder_0_GPIO_Port, Encoder_0_Pin);
 80015a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015a6:	4883      	ldr	r0, [pc, #524]	; (80017b4 <GetEncoderValue+0x230>)
 80015a8:	f002 fad0 	bl	8003b4c <HAL_GPIO_ReadPin>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	bf0c      	ite	eq
 80015b2:	2301      	moveq	r3, #1
 80015b4:	2300      	movne	r3, #0
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	60bb      	str	r3, [r7, #8]
	  b[1]=!HAL_GPIO_ReadPin(Encoder_1_GPIO_Port, Encoder_1_Pin);
 80015ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015be:	487d      	ldr	r0, [pc, #500]	; (80017b4 <GetEncoderValue+0x230>)
 80015c0:	f002 fac4 	bl	8003b4c <HAL_GPIO_ReadPin>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	bf0c      	ite	eq
 80015ca:	2301      	moveq	r3, #1
 80015cc:	2300      	movne	r3, #0
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	60fb      	str	r3, [r7, #12]
	  b[2]=!HAL_GPIO_ReadPin(Encoder_2_GPIO_Port, Encoder_2_Pin);
 80015d2:	2120      	movs	r1, #32
 80015d4:	4878      	ldr	r0, [pc, #480]	; (80017b8 <GetEncoderValue+0x234>)
 80015d6:	f002 fab9 	bl	8003b4c <HAL_GPIO_ReadPin>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	bf0c      	ite	eq
 80015e0:	2301      	moveq	r3, #1
 80015e2:	2300      	movne	r3, #0
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	613b      	str	r3, [r7, #16]
	  b[3]=!HAL_GPIO_ReadPin(Encoder_3_GPIO_Port, Encoder_3_Pin);
 80015e8:	2140      	movs	r1, #64	; 0x40
 80015ea:	4873      	ldr	r0, [pc, #460]	; (80017b8 <GetEncoderValue+0x234>)
 80015ec:	f002 faae 	bl	8003b4c <HAL_GPIO_ReadPin>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	bf0c      	ite	eq
 80015f6:	2301      	moveq	r3, #1
 80015f8:	2300      	movne	r3, #0
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	617b      	str	r3, [r7, #20]
	  b[4]=!HAL_GPIO_ReadPin(Encoder_4_GPIO_Port, Encoder_4_Pin);
 80015fe:	2180      	movs	r1, #128	; 0x80
 8001600:	486d      	ldr	r0, [pc, #436]	; (80017b8 <GetEncoderValue+0x234>)
 8001602:	f002 faa3 	bl	8003b4c <HAL_GPIO_ReadPin>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	bf0c      	ite	eq
 800160c:	2301      	moveq	r3, #1
 800160e:	2300      	movne	r3, #0
 8001610:	b2db      	uxtb	r3, r3
 8001612:	61bb      	str	r3, [r7, #24]
	  b[5]=!HAL_GPIO_ReadPin(Encoder_5_GPIO_Port, Encoder_5_Pin);
 8001614:	2140      	movs	r1, #64	; 0x40
 8001616:	4867      	ldr	r0, [pc, #412]	; (80017b4 <GetEncoderValue+0x230>)
 8001618:	f002 fa98 	bl	8003b4c <HAL_GPIO_ReadPin>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	bf0c      	ite	eq
 8001622:	2301      	moveq	r3, #1
 8001624:	2300      	movne	r3, #0
 8001626:	b2db      	uxtb	r3, r3
 8001628:	61fb      	str	r3, [r7, #28]
	  b[6]=!HAL_GPIO_ReadPin(Encoder_6_GPIO_Port, Encoder_6_Pin);
 800162a:	2180      	movs	r1, #128	; 0x80
 800162c:	4863      	ldr	r0, [pc, #396]	; (80017bc <GetEncoderValue+0x238>)
 800162e:	f002 fa8d 	bl	8003b4c <HAL_GPIO_ReadPin>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	bf0c      	ite	eq
 8001638:	2301      	moveq	r3, #1
 800163a:	2300      	movne	r3, #0
 800163c:	b2db      	uxtb	r3, r3
 800163e:	623b      	str	r3, [r7, #32]
	  b[7]=!HAL_GPIO_ReadPin(Encoder_7_GPIO_Port, Encoder_7_Pin);
 8001640:	2110      	movs	r1, #16
 8001642:	485c      	ldr	r0, [pc, #368]	; (80017b4 <GetEncoderValue+0x230>)
 8001644:	f002 fa82 	bl	8003b4c <HAL_GPIO_ReadPin>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	bf0c      	ite	eq
 800164e:	2301      	moveq	r3, #1
 8001650:	2300      	movne	r3, #0
 8001652:	b2db      	uxtb	r3, r3
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
	  encoder->EncoderRawValue =(b[7] <<7 | b[6] <<6 | b[5] <<5 | b[4] <<4 | b[3] <<3 | b[2] <<2 | b[1] <<1 | b[0]) & 0b11111111;
 8001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001658:	01da      	lsls	r2, r3, #7
 800165a:	6a3b      	ldr	r3, [r7, #32]
 800165c:	019b      	lsls	r3, r3, #6
 800165e:	431a      	orrs	r2, r3
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	015b      	lsls	r3, r3, #5
 8001664:	431a      	orrs	r2, r3
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	011b      	lsls	r3, r3, #4
 800166a:	431a      	orrs	r2, r3
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	431a      	orrs	r2, r3
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	431a      	orrs	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	431a      	orrs	r2, r3
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	4313      	orrs	r3, r2
 8001682:	b2da      	uxtb	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	609a      	str	r2, [r3, #8]
	  //To convert Gray to Binary write the most significant bit MSB then compare the next bit with that if similar put 0 if different put 1
	  for (int index = 7 ; index >= 0 ; index--){
 8001688:	2307      	movs	r3, #7
 800168a:	653b      	str	r3, [r7, #80]	; 0x50
 800168c:	e046      	b.n	800171c <GetEncoderValue+0x198>
	          if ((b[index]==1) & ! (GrayMSBDetected)) {
 800168e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	3358      	adds	r3, #88	; 0x58
 8001694:	443b      	add	r3, r7
 8001696:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800169a:	2b01      	cmp	r3, #1
 800169c:	bf0c      	ite	eq
 800169e:	2301      	moveq	r3, #1
 80016a0:	2300      	movne	r3, #0
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	bf0c      	ite	eq
 80016aa:	2301      	moveq	r3, #1
 80016ac:	2300      	movne	r3, #0
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	4013      	ands	r3, r2
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d00d      	beq.n	80016d4 <GetEncoderValue+0x150>
	        	  EncoderGrayConvert[index]=b[index];
 80016b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	3358      	adds	r3, #88	; 0x58
 80016be:	443b      	add	r3, r7
 80016c0:	f853 2c50 	ldr.w	r2, [r3, #-80]
 80016c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	3358      	adds	r3, #88	; 0x58
 80016ca:	443b      	add	r3, r7
 80016cc:	f843 2c30 	str.w	r2, [r3, #-48]
	              GrayMSBDetected=index;
 80016d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016d2:	657b      	str	r3, [r7, #84]	; 0x54
	          }
	          if(GrayMSBDetected){
 80016d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d01d      	beq.n	8001716 <GetEncoderValue+0x192>
	              if (EncoderGrayConvert[index+1]==b[index]) EncoderGrayConvert[index]=0;
 80016da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016dc:	3301      	adds	r3, #1
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	3358      	adds	r3, #88	; 0x58
 80016e2:	443b      	add	r3, r7
 80016e4:	f853 2c30 	ldr.w	r2, [r3, #-48]
 80016e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	3358      	adds	r3, #88	; 0x58
 80016ee:	443b      	add	r3, r7
 80016f0:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d107      	bne.n	8001708 <GetEncoderValue+0x184>
 80016f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	3358      	adds	r3, #88	; 0x58
 80016fe:	443b      	add	r3, r7
 8001700:	2200      	movs	r2, #0
 8001702:	f843 2c30 	str.w	r2, [r3, #-48]
 8001706:	e006      	b.n	8001716 <GetEncoderValue+0x192>
	              else EncoderGrayConvert[index]=1;
 8001708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	3358      	adds	r3, #88	; 0x58
 800170e:	443b      	add	r3, r7
 8001710:	2201      	movs	r2, #1
 8001712:	f843 2c30 	str.w	r2, [r3, #-48]
	  for (int index = 7 ; index >= 0 ; index--){
 8001716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001718:	3b01      	subs	r3, #1
 800171a:	653b      	str	r3, [r7, #80]	; 0x50
 800171c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800171e:	2b00      	cmp	r3, #0
 8001720:	dab5      	bge.n	800168e <GetEncoderValue+0x10a>
	          }
	  }
	  encoder->GrayCode  = GrayCode =((   EncoderGrayConvert[7] <<7 |
 8001722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001724:	01da      	lsls	r2, r3, #7
										  EncoderGrayConvert[6] <<6 |
 8001726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001728:	019b      	lsls	r3, r3, #6
	  encoder->GrayCode  = GrayCode =((   EncoderGrayConvert[7] <<7 |
 800172a:	431a      	orrs	r2, r3
										  EncoderGrayConvert[5] <<5 |
 800172c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800172e:	015b      	lsls	r3, r3, #5
										  EncoderGrayConvert[6] <<6 |
 8001730:	431a      	orrs	r2, r3
										  EncoderGrayConvert[4] <<4 |
 8001732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001734:	011b      	lsls	r3, r3, #4
										  EncoderGrayConvert[5] <<5 |
 8001736:	431a      	orrs	r2, r3
										  EncoderGrayConvert[3] <<3 |
 8001738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800173a:	00db      	lsls	r3, r3, #3
										  EncoderGrayConvert[4] <<4 |
 800173c:	431a      	orrs	r2, r3
										  EncoderGrayConvert[2] <<2 |
 800173e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001740:	009b      	lsls	r3, r3, #2
										  EncoderGrayConvert[3] <<3 |
 8001742:	431a      	orrs	r2, r3
										  EncoderGrayConvert[1] <<1 |
 8001744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001746:	005b      	lsls	r3, r3, #1
										  EncoderGrayConvert[2] <<2 |
 8001748:	431a      	orrs	r2, r3
										  EncoderGrayConvert[0]) & 0b11111111);
 800174a:	6abb      	ldr	r3, [r7, #40]	; 0x28
										  EncoderGrayConvert[1] <<1 |
 800174c:	4313      	orrs	r3, r2
	  encoder->GrayCode  = GrayCode =((   EncoderGrayConvert[7] <<7 |
 800174e:	b2db      	uxtb	r3, r3
 8001750:	64bb      	str	r3, [r7, #72]	; 0x48
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001756:	611a      	str	r2, [r3, #16]
	  EncoderGrayCode = GrayCodeConvert[(encoder->IT_EncoderChA <<1 | encoder->IT_EncoderChB) & 0x03];
#endif

#ifndef ENCODER_TIMER_MODE //the value will be written in main.c in timer interrupt function
	  //if encoder value updated
	  if (encoder->PreviusGrayCode != GrayCode){
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800175e:	429a      	cmp	r2, r3
 8001760:	d024      	beq.n	80017ac <GetEncoderValue+0x228>
		  int EncoderDeltaValue;
		  EncoderDeltaValue = GrayCode-encoder->PreviusGrayCode;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	64fb      	str	r3, [r7, #76]	; 0x4c
		  if (EncoderDeltaValue<0) {EncoderDeltaValue+=4;}
 800176c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800176e:	2b00      	cmp	r3, #0
 8001770:	da02      	bge.n	8001778 <GetEncoderValue+0x1f4>
 8001772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001774:	3304      	adds	r3, #4
 8001776:	64fb      	str	r3, [r7, #76]	; 0x4c
		  if (EncoderDeltaValue ==1) {
 8001778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800177a:	2b01      	cmp	r3, #1
 800177c:	d108      	bne.n	8001790 <GetEncoderValue+0x20c>
			  encoder->direction=CW;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2201      	movs	r2, #1
 8001782:	751a      	strb	r2, [r3, #20]
			  encoder->EncoderValue++;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	1c5a      	adds	r2, r3, #1
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	619a      	str	r2, [r3, #24]
 800178e:	e00a      	b.n	80017a6 <GetEncoderValue+0x222>
		  }
		  else if (EncoderDeltaValue ==3){
 8001790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001792:	2b03      	cmp	r3, #3
 8001794:	d107      	bne.n	80017a6 <GetEncoderValue+0x222>
			  encoder->direction=CCW;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2202      	movs	r2, #2
 800179a:	751a      	strb	r2, [r3, #20]
			  encoder->EncoderValue--;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	1e5a      	subs	r2, r3, #1
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	619a      	str	r2, [r3, #24]
		  }
		  encoder->PreviusGrayCode=GrayCode;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80017aa:	60da      	str	r2, [r3, #12]
	 }
#else
	  if (encoder->EncoderValue >=0){ encoder->direction = CW;}
	  else {encoder->direction = CCW;}
#endif
}
 80017ac:	bf00      	nop
 80017ae:	3758      	adds	r7, #88	; 0x58
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40020400 	.word	0x40020400
 80017b8:	40020000 	.word	0x40020000
 80017bc:	40020800 	.word	0x40020800

080017c0 <HAL_GPIO_EXTI_Callback>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_usart1_rx;

/* USER CODE BEGIN PV */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Encoder_0_Pin){
 80017ca:	88fb      	ldrh	r3, [r7, #6]
 80017cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017d0:	d10f      	bne.n	80017f2 <HAL_GPIO_EXTI_Callback+0x32>
		uint32_t CounterTemp;
		CounterTemp=  __HAL_TIM_GET_COUNTER(&htim2);
 80017d2:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <HAL_GPIO_EXTI_Callback+0x40>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d8:	60fb      	str	r3, [r7, #12]
		if (CounterTemp>20000){
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f644 6220 	movw	r2, #20000	; 0x4e20
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d906      	bls.n	80017f2 <HAL_GPIO_EXTI_Callback+0x32>
			Timer2Counter =CounterTemp;
 80017e4:	4a07      	ldr	r2, [pc, #28]	; (8001804 <HAL_GPIO_EXTI_Callback+0x44>)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(&htim2,0);
 80017ea:	4b05      	ldr	r3, [pc, #20]	; (8001800 <HAL_GPIO_EXTI_Callback+0x40>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2200      	movs	r2, #0
 80017f0:	625a      	str	r2, [r3, #36]	; 0x24
		}

	}
}
 80017f2:	bf00      	nop
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	20000374 	.word	0x20000374
 8001804:	200002dc 	.word	0x200002dc

08001808 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	if (huart == &huart1){
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a05      	ldr	r2, [pc, #20]	; (8001828 <HAL_UART_RxCpltCallback+0x20>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d102      	bne.n	800181e <HAL_UART_RxCpltCallback+0x16>
		ParseSBUS(&receivedSBUS);
 8001818:	4804      	ldr	r0, [pc, #16]	; (800182c <HAL_UART_RxCpltCallback+0x24>)
 800181a:	f7ff fd6b 	bl	80012f4 <ParseSBUS>
	}
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	200003bc 	.word	0x200003bc
 800182c:	200001f4 	.word	0x200001f4

08001830 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	if (huart == &huart2){
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a06      	ldr	r2, [pc, #24]	; (8001854 <HAL_UART_TxCpltCallback+0x24>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d102      	bne.n	8001846 <HAL_UART_TxCpltCallback+0x16>
		uart2Free=1;
 8001840:	4b05      	ldr	r3, [pc, #20]	; (8001858 <HAL_UART_TxCpltCallback+0x28>)
 8001842:	2201      	movs	r2, #1
 8001844:	601a      	str	r2, [r3, #0]
	}
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	20000400 	.word	0x20000400
 8001858:	20000000 	.word	0x20000000
 800185c:	00000000 	.word	0x00000000

08001860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001860:	b5b0      	push	{r4, r5, r7, lr}
 8001862:	b09e      	sub	sp, #120	; 0x78
 8001864:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001866:	f000 fff5 	bl	8002854 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800186a:	f000 fa57 	bl	8001d1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800186e:	f000 fc71 	bl	8002154 <MX_GPIO_Init>
  MX_DMA_Init();
 8001872:	f000 fc4f 	bl	8002114 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001876:	f000 fc23 	bl	80020c0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800187a:	f000 fb09 	bl	8001e90 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800187e:	f000 fbf3 	bl	8002068 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001882:	f000 fab3 	bl	8001dec <MX_ADC1_Init>
  MX_TIM2_Init();
 8001886:	f000 fba3 	bl	8001fd0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1, &receivedSBUS.ReceivedData[0], SBUS_LEN);
 800188a:	2219      	movs	r2, #25
 800188c:	499e      	ldr	r1, [pc, #632]	; (8001b08 <main+0x2a8>)
 800188e:	489f      	ldr	r0, [pc, #636]	; (8001b0c <main+0x2ac>)
 8001890:	f003 fdfc 	bl	800548c <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim1);
 8001894:	489e      	ldr	r0, [pc, #632]	; (8001b10 <main+0x2b0>)
 8001896:	f002 fee5 	bl	8004664 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim2);
 800189a:	489e      	ldr	r0, [pc, #632]	; (8001b14 <main+0x2b4>)
 800189c:	f002 fe88 	bl	80045b0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80018a0:	2100      	movs	r1, #0
 80018a2:	489b      	ldr	r0, [pc, #620]	; (8001b10 <main+0x2b0>)
 80018a4:	f002 ff9a 	bl	80047dc <HAL_TIM_PWM_Start>
  SystemTime=HAL_GetTick();
 80018a8:	f001 f83a 	bl	8002920 <HAL_GetTick>
 80018ac:	4603      	mov	r3, r0
 80018ae:	4a9a      	ldr	r2, [pc, #616]	; (8001b18 <main+0x2b8>)
 80018b0:	6013      	str	r3, [r2, #0]
  TestEncoder.PreviusGrayCode=0;
 80018b2:	4b9a      	ldr	r3, [pc, #616]	; (8001b1c <main+0x2bc>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	60da      	str	r2, [r3, #12]
  TestEncoder.EncoderValue=0;
 80018b8:	4b98      	ldr	r3, [pc, #608]	; (8001b1c <main+0x2bc>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	619a      	str	r2, [r3, #24]
  TestEncoder.PreviousEncoderValue=0;
 80018be:	4b97      	ldr	r3, [pc, #604]	; (8001b1c <main+0x2bc>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	61da      	str	r2, [r3, #28]
  TestEncoder.SpeedRPM=0;
 80018c4:	4b95      	ldr	r3, [pc, #596]	; (8001b1c <main+0x2bc>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	621a      	str	r2, [r3, #32]
  TestEncoder.direction=CW;
 80018ca:	4b94      	ldr	r3, [pc, #592]	; (8001b1c <main+0x2bc>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	751a      	strb	r2, [r3, #20]
  PID.Kp=5;
 80018d0:	4993      	ldr	r1, [pc, #588]	; (8001b20 <main+0x2c0>)
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	4b93      	ldr	r3, [pc, #588]	; (8001b24 <main+0x2c4>)
 80018d8:	e9c1 2302 	strd	r2, r3, [r1, #8]
  PID.Ki=1;
 80018dc:	4990      	ldr	r1, [pc, #576]	; (8001b20 <main+0x2c0>)
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	4b91      	ldr	r3, [pc, #580]	; (8001b28 <main+0x2c8>)
 80018e4:	e9c1 2304 	strd	r2, r3, [r1, #16]
  PID.Kd=0;
 80018e8:	498d      	ldr	r1, [pc, #564]	; (8001b20 <main+0x2c0>)
 80018ea:	f04f 0200 	mov.w	r2, #0
 80018ee:	f04f 0300 	mov.w	r3, #0
 80018f2:	e9c1 2306 	strd	r2, r3, [r1, #24]
  PID.dt=10;
 80018f6:	498a      	ldr	r1, [pc, #552]	; (8001b20 <main+0x2c0>)
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	4b8b      	ldr	r3, [pc, #556]	; (8001b2c <main+0x2cc>)
 80018fe:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
  PID.integral=0;
 8001902:	4987      	ldr	r1, [pc, #540]	; (8001b20 <main+0x2c0>)
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
  PID.min_output=400;
 8001910:	4983      	ldr	r1, [pc, #524]	; (8001b20 <main+0x2c0>)
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	4b86      	ldr	r3, [pc, #536]	; (8001b30 <main+0x2d0>)
 8001918:	e9c1 2308 	strd	r2, r3, [r1, #32]
  PID.max_output=600;
 800191c:	4980      	ldr	r1, [pc, #512]	; (8001b20 <main+0x2c0>)
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	4b84      	ldr	r3, [pc, #528]	; (8001b34 <main+0x2d4>)
 8001924:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  PID.min_Integral=-100;
 8001928:	497d      	ldr	r1, [pc, #500]	; (8001b20 <main+0x2c0>)
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	4b82      	ldr	r3, [pc, #520]	; (8001b38 <main+0x2d8>)
 8001930:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
  PID.max_Integral= 100;
 8001934:	497a      	ldr	r1, [pc, #488]	; (8001b20 <main+0x2c0>)
 8001936:	f04f 0200 	mov.w	r2, #0
 800193a:	4b80      	ldr	r3, [pc, #512]	; (8001b3c <main+0x2dc>)
 800193c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
  PID.output=5000;
 8001940:	4977      	ldr	r1, [pc, #476]	; (8001b20 <main+0x2c0>)
 8001942:	a36d      	add	r3, pc, #436	; (adr r3, 8001af8 <main+0x298>)
 8001944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001948:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
  PID.target=0;
 800194c:	4974      	ldr	r1, [pc, #464]	; (8001b20 <main+0x2c0>)
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  ToggleSetpointInput=3;
 800195a:	4b79      	ldr	r3, [pc, #484]	; (8001b40 <main+0x2e0>)
 800195c:	2203      	movs	r2, #3
 800195e:	601a      	str	r2, [r3, #0]
	  //read Encoder
	  GetEncoderValue(&TestEncoder);
 8001960:	486e      	ldr	r0, [pc, #440]	; (8001b1c <main+0x2bc>)
 8001962:	f7ff fe0f 	bl	8001584 <GetEncoderValue>
	  //reading SBUS from remote controller and writing PWM output
	  if (!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){
 8001966:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800196a:	4876      	ldr	r0, [pc, #472]	; (8001b44 <main+0x2e4>)
 800196c:	f002 f8ee 	bl	8003b4c <HAL_GPIO_ReadPin>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d11f      	bne.n	80019b6 <main+0x156>
		  while(!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){}
 8001976:	bf00      	nop
 8001978:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800197c:	4871      	ldr	r0, [pc, #452]	; (8001b44 <main+0x2e4>)
 800197e:	f002 f8e5 	bl	8003b4c <HAL_GPIO_ReadPin>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d0f7      	beq.n	8001978 <main+0x118>
		  if (ToggleSetpointInput==3){
 8001988:	4b6d      	ldr	r3, [pc, #436]	; (8001b40 <main+0x2e0>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b03      	cmp	r3, #3
 800198e:	d103      	bne.n	8001998 <main+0x138>
			  ToggleSetpointInput=0;
 8001990:	4b6b      	ldr	r3, [pc, #428]	; (8001b40 <main+0x2e0>)
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	e004      	b.n	80019a2 <main+0x142>
		  }
		  else ToggleSetpointInput++;
 8001998:	4b69      	ldr	r3, [pc, #420]	; (8001b40 <main+0x2e0>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	3301      	adds	r3, #1
 800199e:	4a68      	ldr	r2, [pc, #416]	; (8001b40 <main+0x2e0>)
 80019a0:	6013      	str	r3, [r2, #0]
		  if (ToggleSetpointInput==2){
 80019a2:	4b67      	ldr	r3, [pc, #412]	; (8001b40 <main+0x2e0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d105      	bne.n	80019b6 <main+0x156>
			  PID.target=250;
 80019aa:	495d      	ldr	r1, [pc, #372]	; (8001b20 <main+0x2c0>)
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	4b65      	ldr	r3, [pc, #404]	; (8001b48 <main+0x2e8>)
 80019b2:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		  }
	  }
	  switch (ToggleSetpointInput) {
 80019b6:	4b62      	ldr	r3, [pc, #392]	; (8001b40 <main+0x2e0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2b03      	cmp	r3, #3
 80019bc:	f200 80f2 	bhi.w	8001ba4 <main+0x344>
 80019c0:	a201      	add	r2, pc, #4	; (adr r2, 80019c8 <main+0x168>)
 80019c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c6:	bf00      	nop
 80019c8:	080019d9 	.word	0x080019d9
 80019cc:	080019f7 	.word	0x080019f7
 80019d0:	08001a7d 	.word	0x08001a7d
 80019d4:	08001b55 	.word	0x08001b55
	  case 0://get speed command from remote controller
		  PID.target = 0 ;
 80019d8:	4951      	ldr	r1, [pc, #324]	; (8001b20 <main+0x2c0>)
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	f04f 0300 	mov.w	r3, #0
 80019e2:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		  ProcessValue= TestEncoder.SpeedRPM;
 80019e6:	4b4d      	ldr	r3, [pc, #308]	; (8001b1c <main+0x2bc>)
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	4a58      	ldr	r2, [pc, #352]	; (8001b4c <main+0x2ec>)
 80019ec:	6013      	str	r3, [r2, #0]
		  PID.ControlMode=Velocity;
 80019ee:	4b4c      	ldr	r3, [pc, #304]	; (8001b20 <main+0x2c0>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]
		  break;
 80019f4:	e0d6      	b.n	8001ba4 <main+0x344>
	  case 1:
		  PID.ControlMode=Velocity;
 80019f6:	4b4a      	ldr	r3, [pc, #296]	; (8001b20 <main+0x2c0>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]
		  if (receivedSBUS.ch[1]>1000 && receivedSBUS.ch[1]<2000){
 80019fc:	4b42      	ldr	r3, [pc, #264]	; (8001b08 <main+0x2a8>)
 80019fe:	8b9b      	ldrh	r3, [r3, #28]
 8001a00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a04:	d912      	bls.n	8001a2c <main+0x1cc>
 8001a06:	4b40      	ldr	r3, [pc, #256]	; (8001b08 <main+0x2a8>)
 8001a08:	8b9b      	ldrh	r3, [r3, #28]
 8001a0a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001a0e:	d20d      	bcs.n	8001a2c <main+0x1cc>
			  PID.target = 2* ( receivedSBUS.ch[1]-1000);
 8001a10:	4b3d      	ldr	r3, [pc, #244]	; (8001b08 <main+0x2a8>)
 8001a12:	8b9b      	ldrh	r3, [r3, #28]
 8001a14:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7fe fd8a 	bl	8000534 <__aeabi_i2d>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	493e      	ldr	r1, [pc, #248]	; (8001b20 <main+0x2c0>)
 8001a26:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8001a2a:	e022      	b.n	8001a72 <main+0x212>
		  }
		  else if (receivedSBUS.ch[1]>0 && receivedSBUS.ch[1]<990){
 8001a2c:	4b36      	ldr	r3, [pc, #216]	; (8001b08 <main+0x2a8>)
 8001a2e:	8b9b      	ldrh	r3, [r3, #28]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d017      	beq.n	8001a64 <main+0x204>
 8001a34:	4b34      	ldr	r3, [pc, #208]	; (8001b08 <main+0x2a8>)
 8001a36:	8b9b      	ldrh	r3, [r3, #28]
 8001a38:	f240 32dd 	movw	r2, #989	; 0x3dd
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d811      	bhi.n	8001a64 <main+0x204>
			  PID.target = -2* (990- receivedSBUS.ch[1]);
 8001a40:	4b31      	ldr	r3, [pc, #196]	; (8001b08 <main+0x2a8>)
 8001a42:	8b9b      	ldrh	r3, [r3, #28]
 8001a44:	f5c3 7277 	rsb	r2, r3, #988	; 0x3dc
 8001a48:	3202      	adds	r2, #2
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	07db      	lsls	r3, r3, #31
 8001a4e:	1a9b      	subs	r3, r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe fd6e 	bl	8000534 <__aeabi_i2d>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4930      	ldr	r1, [pc, #192]	; (8001b20 <main+0x2c0>)
 8001a5e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8001a62:	e006      	b.n	8001a72 <main+0x212>
		  }
		  else{
			  PID.target=0;
 8001a64:	492e      	ldr	r1, [pc, #184]	; (8001b20 <main+0x2c0>)
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	f04f 0300 	mov.w	r3, #0
 8001a6e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		  }
		  ProcessValue= TestEncoder.SpeedRPM;
 8001a72:	4b2a      	ldr	r3, [pc, #168]	; (8001b1c <main+0x2bc>)
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	4a35      	ldr	r2, [pc, #212]	; (8001b4c <main+0x2ec>)
 8001a78:	6013      	str	r3, [r2, #0]
		  break;
 8001a7a:	e093      	b.n	8001ba4 <main+0x344>
	  case 2: // toggle speed automatically
		  PID.ControlMode=Velocity;
 8001a7c:	4b28      	ldr	r3, [pc, #160]	; (8001b20 <main+0x2c0>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]
		  if(HAL_GetTick()-speedUpdateTime>=10000){
 8001a82:	f000 ff4d 	bl	8002920 <HAL_GetTick>
 8001a86:	4603      	mov	r3, r0
 8001a88:	4a31      	ldr	r2, [pc, #196]	; (8001b50 <main+0x2f0>)
 8001a8a:	6812      	ldr	r2, [r2, #0]
 8001a8c:	1a9b      	subs	r3, r3, r2
 8001a8e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d928      	bls.n	8001ae8 <main+0x288>
	 		  if(PID.target==-250) PID.target=250;
 8001a96:	4b22      	ldr	r3, [pc, #136]	; (8001b20 <main+0x2c0>)
 8001a98:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001a9c:	a318      	add	r3, pc, #96	; (adr r3, 8001b00 <main+0x2a0>)
 8001a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa2:	f7ff f819 	bl	8000ad8 <__aeabi_dcmpeq>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d006      	beq.n	8001aba <main+0x25a>
 8001aac:	491c      	ldr	r1, [pc, #112]	; (8001b20 <main+0x2c0>)
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	4b25      	ldr	r3, [pc, #148]	; (8001b48 <main+0x2e8>)
 8001ab4:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8001ab8:	e010      	b.n	8001adc <main+0x27c>
	 		  else if (PID.target==250) PID.target=-250;
 8001aba:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <main+0x2c0>)
 8001abc:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	4b20      	ldr	r3, [pc, #128]	; (8001b48 <main+0x2e8>)
 8001ac6:	f7ff f807 	bl	8000ad8 <__aeabi_dcmpeq>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d005      	beq.n	8001adc <main+0x27c>
 8001ad0:	4913      	ldr	r1, [pc, #76]	; (8001b20 <main+0x2c0>)
 8001ad2:	a30b      	add	r3, pc, #44	; (adr r3, 8001b00 <main+0x2a0>)
 8001ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	 		  speedUpdateTime=HAL_GetTick();
 8001adc:	f000 ff20 	bl	8002920 <HAL_GetTick>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <main+0x2f0>)
 8001ae6:	601a      	str	r2, [r3, #0]
		  }
		  ProcessValue= TestEncoder.SpeedRPM;
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <main+0x2bc>)
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	4a17      	ldr	r2, [pc, #92]	; (8001b4c <main+0x2ec>)
 8001aee:	6013      	str	r3, [r2, #0]
		  break;
 8001af0:	e058      	b.n	8001ba4 <main+0x344>
 8001af2:	bf00      	nop
 8001af4:	f3af 8000 	nop.w
 8001af8:	00000000 	.word	0x00000000
 8001afc:	40b38800 	.word	0x40b38800
 8001b00:	00000000 	.word	0x00000000
 8001b04:	c06f4000 	.word	0xc06f4000
 8001b08:	200001f4 	.word	0x200001f4
 8001b0c:	200003bc 	.word	0x200003bc
 8001b10:	2000032c 	.word	0x2000032c
 8001b14:	20000374 	.word	0x20000374
 8001b18:	20000234 	.word	0x20000234
 8001b1c:	20000238 	.word	0x20000238
 8001b20:	20000260 	.word	0x20000260
 8001b24:	40140000 	.word	0x40140000
 8001b28:	3ff00000 	.word	0x3ff00000
 8001b2c:	40240000 	.word	0x40240000
 8001b30:	40790000 	.word	0x40790000
 8001b34:	4082c000 	.word	0x4082c000
 8001b38:	c0590000 	.word	0xc0590000
 8001b3c:	40590000 	.word	0x40590000
 8001b40:	200002d8 	.word	0x200002d8
 8001b44:	40020800 	.word	0x40020800
 8001b48:	406f4000 	.word	0x406f4000
 8001b4c:	200002e0 	.word	0x200002e0
 8001b50:	200002d4 	.word	0x200002d4
	  case 3: //Position control

		  if (receivedSBUS.ch[2]>180 && receivedSBUS.ch[2]<2000){
 8001b54:	4b61      	ldr	r3, [pc, #388]	; (8001cdc <main+0x47c>)
 8001b56:	8bdb      	ldrh	r3, [r3, #30]
 8001b58:	2bb4      	cmp	r3, #180	; 0xb4
 8001b5a:	d914      	bls.n	8001b86 <main+0x326>
 8001b5c:	4b5f      	ldr	r3, [pc, #380]	; (8001cdc <main+0x47c>)
 8001b5e:	8bdb      	ldrh	r3, [r3, #30]
 8001b60:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b64:	d20f      	bcs.n	8001b86 <main+0x326>
		  		PID.target = receivedSBUS.ch[2]/10;
 8001b66:	4b5d      	ldr	r3, [pc, #372]	; (8001cdc <main+0x47c>)
 8001b68:	8bdb      	ldrh	r3, [r3, #30]
 8001b6a:	4a5d      	ldr	r2, [pc, #372]	; (8001ce0 <main+0x480>)
 8001b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b70:	08db      	lsrs	r3, r3, #3
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe fcdd 	bl	8000534 <__aeabi_i2d>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4959      	ldr	r1, [pc, #356]	; (8001ce4 <main+0x484>)
 8001b80:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8001b84:	e006      	b.n	8001b94 <main+0x334>
		  }
		  else{
			  PID.target=0;
 8001b86:	4957      	ldr	r1, [pc, #348]	; (8001ce4 <main+0x484>)
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	f04f 0300 	mov.w	r3, #0
 8001b90:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		  }

		  PID.ControlMode=Position;
 8001b94:	4b53      	ldr	r3, [pc, #332]	; (8001ce4 <main+0x484>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	701a      	strb	r2, [r3, #0]
		  ProcessValue= TestEncoder.GrayCode;
 8001b9a:	4b53      	ldr	r3, [pc, #332]	; (8001ce8 <main+0x488>)
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	4a53      	ldr	r2, [pc, #332]	; (8001cec <main+0x48c>)
 8001ba0:	6013      	str	r3, [r2, #0]
		  break;
 8001ba2:	bf00      	nop
	  }

	  //Calculate RPM
	  if (HAL_GetTick()-SystemTime>=(PID.dt)){
 8001ba4:	f000 febc 	bl	8002920 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	4b51      	ldr	r3, [pc, #324]	; (8001cf0 <main+0x490>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe fcaf 	bl	8000514 <__aeabi_ui2d>
 8001bb6:	4b4b      	ldr	r3, [pc, #300]	; (8001ce4 <main+0x484>)
 8001bb8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001bbc:	f7fe ffaa 	bl	8000b14 <__aeabi_dcmpge>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d052      	beq.n	8001c6c <main+0x40c>
		  TestEncoder.SpeedRPM=(TestEncoder.EncoderValue-TestEncoder.PreviousEncoderValue)*(1000/PID.dt)*60/256;//1000/dt for converting to pulse per second - 60 for 1sec to 1min - 256 for pules/rev - for gray code to pulse
 8001bc6:	4b48      	ldr	r3, [pc, #288]	; (8001ce8 <main+0x488>)
 8001bc8:	699a      	ldr	r2, [r3, #24]
 8001bca:	4b47      	ldr	r3, [pc, #284]	; (8001ce8 <main+0x488>)
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fcaf 	bl	8000534 <__aeabi_i2d>
 8001bd6:	4604      	mov	r4, r0
 8001bd8:	460d      	mov	r5, r1
 8001bda:	4b42      	ldr	r3, [pc, #264]	; (8001ce4 <main+0x484>)
 8001bdc:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001be0:	f04f 0000 	mov.w	r0, #0
 8001be4:	4943      	ldr	r1, [pc, #268]	; (8001cf4 <main+0x494>)
 8001be6:	f7fe fe39 	bl	800085c <__aeabi_ddiv>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4620      	mov	r0, r4
 8001bf0:	4629      	mov	r1, r5
 8001bf2:	f7fe fd09 	bl	8000608 <__aeabi_dmul>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	4b3d      	ldr	r3, [pc, #244]	; (8001cf8 <main+0x498>)
 8001c04:	f7fe fd00 	bl	8000608 <__aeabi_dmul>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f04f 0200 	mov.w	r2, #0
 8001c14:	4b39      	ldr	r3, [pc, #228]	; (8001cfc <main+0x49c>)
 8001c16:	f7fe fe21 	bl	800085c <__aeabi_ddiv>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4610      	mov	r0, r2
 8001c20:	4619      	mov	r1, r3
 8001c22:	f7fe ffa1 	bl	8000b68 <__aeabi_d2iz>
 8001c26:	4603      	mov	r3, r0
 8001c28:	4a2f      	ldr	r2, [pc, #188]	; (8001ce8 <main+0x488>)
 8001c2a:	6213      	str	r3, [r2, #32]
		  TestEncoder.PreviousEncoderValue=TestEncoder.EncoderValue;
 8001c2c:	4b2e      	ldr	r3, [pc, #184]	; (8001ce8 <main+0x488>)
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	4a2d      	ldr	r2, [pc, #180]	; (8001ce8 <main+0x488>)
 8001c32:	61d3      	str	r3, [r2, #28]
		  SystemTime=HAL_GetTick();
 8001c34:	f000 fe74 	bl	8002920 <HAL_GetTick>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	4a2d      	ldr	r2, [pc, #180]	; (8001cf0 <main+0x490>)
 8001c3c:	6013      	str	r3, [r2, #0]
		  updatePID(&PID, ProcessValue);
 8001c3e:	4b2b      	ldr	r3, [pc, #172]	; (8001cec <main+0x48c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fc76 	bl	8000534 <__aeabi_i2d>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	ec43 2b10 	vmov	d0, r2, r3
 8001c50:	4824      	ldr	r0, [pc, #144]	; (8001ce4 <main+0x484>)
 8001c52:	f7ff f94f 	bl	8000ef4 <updatePID>
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,PID.output);
 8001c56:	4b23      	ldr	r3, [pc, #140]	; (8001ce4 <main+0x484>)
 8001c58:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001c5c:	4928      	ldr	r1, [pc, #160]	; (8001d00 <main+0x4a0>)
 8001c5e:	680c      	ldr	r4, [r1, #0]
 8001c60:	4610      	mov	r0, r2
 8001c62:	4619      	mov	r1, r3
 8001c64:	f7fe ffa8 	bl	8000bb8 <__aeabi_d2uiz>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	6363      	str	r3, [r4, #52]	; 0x34
	  }
	  if (HAL_GetTick()-messageUpdateTime>=50){
 8001c6c:	f000 fe58 	bl	8002920 <HAL_GetTick>
 8001c70:	4603      	mov	r3, r0
 8001c72:	4a24      	ldr	r2, [pc, #144]	; (8001d04 <main+0x4a4>)
 8001c74:	6812      	ldr	r2, [r2, #0]
 8001c76:	1a9b      	subs	r3, r3, r2
 8001c78:	2b31      	cmp	r3, #49	; 0x31
 8001c7a:	f67f ae6e 	bls.w	800195a <main+0xfa>
		  char message[100];
		  int messagaLen=0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	667b      	str	r3, [r7, #100]	; 0x64
		  messagaLen=sprintf(&message,"G1=%ld, G2=%f,G3=%ld T1=%ld ,\n",ProcessValue,PID.target,93750000/Timer2Counter,messageUpdateTime);
 8001c82:	4b1a      	ldr	r3, [pc, #104]	; (8001cec <main+0x48c>)
 8001c84:	681d      	ldr	r5, [r3, #0]
 8001c86:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <main+0x484>)
 8001c88:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001c8c:	491e      	ldr	r1, [pc, #120]	; (8001d08 <main+0x4a8>)
 8001c8e:	6809      	ldr	r1, [r1, #0]
 8001c90:	481e      	ldr	r0, [pc, #120]	; (8001d0c <main+0x4ac>)
 8001c92:	fbb0 f1f1 	udiv	r1, r0, r1
 8001c96:	481b      	ldr	r0, [pc, #108]	; (8001d04 <main+0x4a4>)
 8001c98:	6800      	ldr	r0, [r0, #0]
 8001c9a:	463c      	mov	r4, r7
 8001c9c:	9003      	str	r0, [sp, #12]
 8001c9e:	9102      	str	r1, [sp, #8]
 8001ca0:	e9cd 2300 	strd	r2, r3, [sp]
 8001ca4:	462a      	mov	r2, r5
 8001ca6:	491a      	ldr	r1, [pc, #104]	; (8001d10 <main+0x4b0>)
 8001ca8:	4620      	mov	r0, r4
 8001caa:	f005 f9c1 	bl	8007030 <siprintf>
 8001cae:	6678      	str	r0, [r7, #100]	; 0x64
		  if (uart2Free==1){
 8001cb0:	4b18      	ldr	r3, [pc, #96]	; (8001d14 <main+0x4b4>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d109      	bne.n	8001ccc <main+0x46c>
			  HAL_UART_Transmit_IT(&huart2, message, messagaLen);
 8001cb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	463b      	mov	r3, r7
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4815      	ldr	r0, [pc, #84]	; (8001d18 <main+0x4b8>)
 8001cc2:	f003 fb9e 	bl	8005402 <HAL_UART_Transmit_IT>
			  uart2Free=0;
 8001cc6:	4b13      	ldr	r3, [pc, #76]	; (8001d14 <main+0x4b4>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
		  }
		  messageUpdateTime=HAL_GetTick();
 8001ccc:	f000 fe28 	bl	8002920 <HAL_GetTick>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <main+0x4a4>)
 8001cd6:	601a      	str	r2, [r3, #0]
	  ToggleSetpointInput=3;
 8001cd8:	e63f      	b.n	800195a <main+0xfa>
 8001cda:	bf00      	nop
 8001cdc:	200001f4 	.word	0x200001f4
 8001ce0:	cccccccd 	.word	0xcccccccd
 8001ce4:	20000260 	.word	0x20000260
 8001ce8:	20000238 	.word	0x20000238
 8001cec:	200002e0 	.word	0x200002e0
 8001cf0:	20000234 	.word	0x20000234
 8001cf4:	408f4000 	.word	0x408f4000
 8001cf8:	404e0000 	.word	0x404e0000
 8001cfc:	40700000 	.word	0x40700000
 8001d00:	2000032c 	.word	0x2000032c
 8001d04:	200002d0 	.word	0x200002d0
 8001d08:	200002dc 	.word	0x200002dc
 8001d0c:	059682f0 	.word	0x059682f0
 8001d10:	08009300 	.word	0x08009300
 8001d14:	20000000 	.word	0x20000000
 8001d18:	20000400 	.word	0x20000400

08001d1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b094      	sub	sp, #80	; 0x50
 8001d20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d22:	f107 0320 	add.w	r3, r7, #32
 8001d26:	2230      	movs	r2, #48	; 0x30
 8001d28:	2100      	movs	r1, #0
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f005 f9e3 	bl	80070f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d30:	f107 030c 	add.w	r3, r7, #12
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d40:	2300      	movs	r3, #0
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	4b27      	ldr	r3, [pc, #156]	; (8001de4 <SystemClock_Config+0xc8>)
 8001d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d48:	4a26      	ldr	r2, [pc, #152]	; (8001de4 <SystemClock_Config+0xc8>)
 8001d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d50:	4b24      	ldr	r3, [pc, #144]	; (8001de4 <SystemClock_Config+0xc8>)
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d58:	60bb      	str	r3, [r7, #8]
 8001d5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	607b      	str	r3, [r7, #4]
 8001d60:	4b21      	ldr	r3, [pc, #132]	; (8001de8 <SystemClock_Config+0xcc>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a20      	ldr	r2, [pc, #128]	; (8001de8 <SystemClock_Config+0xcc>)
 8001d66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d6a:	6013      	str	r3, [r2, #0]
 8001d6c:	4b1e      	ldr	r3, [pc, #120]	; (8001de8 <SystemClock_Config+0xcc>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d80:	2310      	movs	r3, #16
 8001d82:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d84:	2302      	movs	r3, #2
 8001d86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d8c:	2308      	movs	r3, #8
 8001d8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001d90:	2364      	movs	r3, #100	; 0x64
 8001d92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d94:	2302      	movs	r3, #2
 8001d96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d98:	2304      	movs	r3, #4
 8001d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d9c:	f107 0320 	add.w	r3, r7, #32
 8001da0:	4618      	mov	r0, r3
 8001da2:	f001 ff1d 	bl	8003be0 <HAL_RCC_OscConfig>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001dac:	f000 fa70 	bl	8002290 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001db0:	230f      	movs	r3, #15
 8001db2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001db4:	2302      	movs	r3, #2
 8001db6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001dc6:	f107 030c 	add.w	r3, r7, #12
 8001dca:	2103      	movs	r1, #3
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f002 f97f 	bl	80040d0 <HAL_RCC_ClockConfig>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001dd8:	f000 fa5a 	bl	8002290 <Error_Handler>
  }
}
 8001ddc:	bf00      	nop
 8001dde:	3750      	adds	r7, #80	; 0x50
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40007000 	.word	0x40007000

08001dec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001df2:	463b      	mov	r3, r7
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001dfe:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <MX_ADC1_Init+0x98>)
 8001e00:	4a21      	ldr	r2, [pc, #132]	; (8001e88 <MX_ADC1_Init+0x9c>)
 8001e02:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e04:	4b1f      	ldr	r3, [pc, #124]	; (8001e84 <MX_ADC1_Init+0x98>)
 8001e06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e0a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e0c:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <MX_ADC1_Init+0x98>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001e12:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <MX_ADC1_Init+0x98>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e18:	4b1a      	ldr	r3, [pc, #104]	; (8001e84 <MX_ADC1_Init+0x98>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e1e:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <MX_ADC1_Init+0x98>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e26:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <MX_ADC1_Init+0x98>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e2c:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <MX_ADC1_Init+0x98>)
 8001e2e:	4a17      	ldr	r2, [pc, #92]	; (8001e8c <MX_ADC1_Init+0xa0>)
 8001e30:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e32:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <MX_ADC1_Init+0x98>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001e38:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <MX_ADC1_Init+0x98>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e3e:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <MX_ADC1_Init+0x98>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e46:	4b0f      	ldr	r3, [pc, #60]	; (8001e84 <MX_ADC1_Init+0x98>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e4c:	480d      	ldr	r0, [pc, #52]	; (8001e84 <MX_ADC1_Init+0x98>)
 8001e4e:	f000 fd73 	bl	8002938 <HAL_ADC_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001e58:	f000 fa1a 	bl	8002290 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e60:	2301      	movs	r3, #1
 8001e62:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e68:	463b      	mov	r3, r7
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4805      	ldr	r0, [pc, #20]	; (8001e84 <MX_ADC1_Init+0x98>)
 8001e6e:	f000 fda7 	bl	80029c0 <HAL_ADC_ConfigChannel>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001e78:	f000 fa0a 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e7c:	bf00      	nop
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	200002e4 	.word	0x200002e4
 8001e88:	40012000 	.word	0x40012000
 8001e8c:	0f000001 	.word	0x0f000001

08001e90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b096      	sub	sp, #88	; 0x58
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	605a      	str	r2, [r3, #4]
 8001ea0:	609a      	str	r2, [r3, #8]
 8001ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	605a      	str	r2, [r3, #4]
 8001eb8:	609a      	str	r2, [r3, #8]
 8001eba:	60da      	str	r2, [r3, #12]
 8001ebc:	611a      	str	r2, [r3, #16]
 8001ebe:	615a      	str	r2, [r3, #20]
 8001ec0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	2220      	movs	r2, #32
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f005 f914 	bl	80070f6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ece:	4b3e      	ldr	r3, [pc, #248]	; (8001fc8 <MX_TIM1_Init+0x138>)
 8001ed0:	4a3e      	ldr	r2, [pc, #248]	; (8001fcc <MX_TIM1_Init+0x13c>)
 8001ed2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 8001ed4:	4b3c      	ldr	r3, [pc, #240]	; (8001fc8 <MX_TIM1_Init+0x138>)
 8001ed6:	2203      	movs	r2, #3
 8001ed8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eda:	4b3b      	ldr	r3, [pc, #236]	; (8001fc8 <MX_TIM1_Init+0x138>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001ee0:	4b39      	ldr	r3, [pc, #228]	; (8001fc8 <MX_TIM1_Init+0x138>)
 8001ee2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ee6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee8:	4b37      	ldr	r3, [pc, #220]	; (8001fc8 <MX_TIM1_Init+0x138>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001eee:	4b36      	ldr	r3, [pc, #216]	; (8001fc8 <MX_TIM1_Init+0x138>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ef4:	4b34      	ldr	r3, [pc, #208]	; (8001fc8 <MX_TIM1_Init+0x138>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001efa:	4833      	ldr	r0, [pc, #204]	; (8001fc8 <MX_TIM1_Init+0x138>)
 8001efc:	f002 fb08 	bl	8004510 <HAL_TIM_Base_Init>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001f06:	f000 f9c3 	bl	8002290 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f0e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f10:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f14:	4619      	mov	r1, r3
 8001f16:	482c      	ldr	r0, [pc, #176]	; (8001fc8 <MX_TIM1_Init+0x138>)
 8001f18:	f002 fdd2 	bl	8004ac0 <HAL_TIM_ConfigClockSource>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001f22:	f000 f9b5 	bl	8002290 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f26:	4828      	ldr	r0, [pc, #160]	; (8001fc8 <MX_TIM1_Init+0x138>)
 8001f28:	f002 fbfe 	bl	8004728 <HAL_TIM_PWM_Init>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001f32:	f000 f9ad 	bl	8002290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f36:	2300      	movs	r3, #0
 8001f38:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f42:	4619      	mov	r1, r3
 8001f44:	4820      	ldr	r0, [pc, #128]	; (8001fc8 <MX_TIM1_Init+0x138>)
 8001f46:	f003 f94f 	bl	80051e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001f50:	f000 f99e 	bl	8002290 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f54:	2360      	movs	r3, #96	; 0x60
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f60:	2300      	movs	r3, #0
 8001f62:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001f64:	2304      	movs	r3, #4
 8001f66:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f74:	2200      	movs	r2, #0
 8001f76:	4619      	mov	r1, r3
 8001f78:	4813      	ldr	r0, [pc, #76]	; (8001fc8 <MX_TIM1_Init+0x138>)
 8001f7a:	f002 fcdf 	bl	800493c <HAL_TIM_PWM_ConfigChannel>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001f84:	f000 f984 	bl	8002290 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fa0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001fa6:	1d3b      	adds	r3, r7, #4
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4807      	ldr	r0, [pc, #28]	; (8001fc8 <MX_TIM1_Init+0x138>)
 8001fac:	f003 f98a 	bl	80052c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001fb6:	f000 f96b 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001fba:	4803      	ldr	r0, [pc, #12]	; (8001fc8 <MX_TIM1_Init+0x138>)
 8001fbc:	f000 fa10 	bl	80023e0 <HAL_TIM_MspPostInit>

}
 8001fc0:	bf00      	nop
 8001fc2:	3758      	adds	r7, #88	; 0x58
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	2000032c 	.word	0x2000032c
 8001fcc:	40010000 	.word	0x40010000

08001fd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fd6:	f107 0308 	add.w	r3, r7, #8
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	605a      	str	r2, [r3, #4]
 8001fe0:	609a      	str	r2, [r3, #8]
 8001fe2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe4:	463b      	mov	r3, r7
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fec:	4b1d      	ldr	r3, [pc, #116]	; (8002064 <MX_TIM2_Init+0x94>)
 8001fee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ff2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ff4:	4b1b      	ldr	r3, [pc, #108]	; (8002064 <MX_TIM2_Init+0x94>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ffa:	4b1a      	ldr	r3, [pc, #104]	; (8002064 <MX_TIM2_Init+0x94>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002000:	4b18      	ldr	r3, [pc, #96]	; (8002064 <MX_TIM2_Init+0x94>)
 8002002:	f04f 32ff 	mov.w	r2, #4294967295
 8002006:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002008:	4b16      	ldr	r3, [pc, #88]	; (8002064 <MX_TIM2_Init+0x94>)
 800200a:	2200      	movs	r2, #0
 800200c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800200e:	4b15      	ldr	r3, [pc, #84]	; (8002064 <MX_TIM2_Init+0x94>)
 8002010:	2200      	movs	r2, #0
 8002012:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002014:	4813      	ldr	r0, [pc, #76]	; (8002064 <MX_TIM2_Init+0x94>)
 8002016:	f002 fa7b 	bl	8004510 <HAL_TIM_Base_Init>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002020:	f000 f936 	bl	8002290 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002024:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002028:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800202a:	f107 0308 	add.w	r3, r7, #8
 800202e:	4619      	mov	r1, r3
 8002030:	480c      	ldr	r0, [pc, #48]	; (8002064 <MX_TIM2_Init+0x94>)
 8002032:	f002 fd45 	bl	8004ac0 <HAL_TIM_ConfigClockSource>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800203c:	f000 f928 	bl	8002290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002040:	2300      	movs	r3, #0
 8002042:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002044:	2300      	movs	r3, #0
 8002046:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002048:	463b      	mov	r3, r7
 800204a:	4619      	mov	r1, r3
 800204c:	4805      	ldr	r0, [pc, #20]	; (8002064 <MX_TIM2_Init+0x94>)
 800204e:	f003 f8cb 	bl	80051e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002058:	f000 f91a 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800205c:	bf00      	nop
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20000374 	.word	0x20000374

08002068 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800206c:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <MX_USART1_UART_Init+0x4c>)
 800206e:	4a12      	ldr	r2, [pc, #72]	; (80020b8 <MX_USART1_UART_Init+0x50>)
 8002070:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8002072:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <MX_USART1_UART_Init+0x4c>)
 8002074:	4a11      	ldr	r2, [pc, #68]	; (80020bc <MX_USART1_UART_Init+0x54>)
 8002076:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002078:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <MX_USART1_UART_Init+0x4c>)
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 800207e:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <MX_USART1_UART_Init+0x4c>)
 8002080:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002084:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8002086:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <MX_USART1_UART_Init+0x4c>)
 8002088:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800208c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 800208e:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <MX_USART1_UART_Init+0x4c>)
 8002090:	2204      	movs	r2, #4
 8002092:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002094:	4b07      	ldr	r3, [pc, #28]	; (80020b4 <MX_USART1_UART_Init+0x4c>)
 8002096:	2200      	movs	r2, #0
 8002098:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800209a:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <MX_USART1_UART_Init+0x4c>)
 800209c:	2200      	movs	r2, #0
 800209e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020a0:	4804      	ldr	r0, [pc, #16]	; (80020b4 <MX_USART1_UART_Init+0x4c>)
 80020a2:	f003 f961 	bl	8005368 <HAL_UART_Init>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 80020ac:	f000 f8f0 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	200003bc 	.word	0x200003bc
 80020b8:	40011000 	.word	0x40011000
 80020bc:	000186a0 	.word	0x000186a0

080020c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020c4:	4b11      	ldr	r3, [pc, #68]	; (800210c <MX_USART2_UART_Init+0x4c>)
 80020c6:	4a12      	ldr	r2, [pc, #72]	; (8002110 <MX_USART2_UART_Init+0x50>)
 80020c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020ca:	4b10      	ldr	r3, [pc, #64]	; (800210c <MX_USART2_UART_Init+0x4c>)
 80020cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020d2:	4b0e      	ldr	r3, [pc, #56]	; (800210c <MX_USART2_UART_Init+0x4c>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020d8:	4b0c      	ldr	r3, [pc, #48]	; (800210c <MX_USART2_UART_Init+0x4c>)
 80020da:	2200      	movs	r2, #0
 80020dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020de:	4b0b      	ldr	r3, [pc, #44]	; (800210c <MX_USART2_UART_Init+0x4c>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020e4:	4b09      	ldr	r3, [pc, #36]	; (800210c <MX_USART2_UART_Init+0x4c>)
 80020e6:	220c      	movs	r2, #12
 80020e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ea:	4b08      	ldr	r3, [pc, #32]	; (800210c <MX_USART2_UART_Init+0x4c>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020f0:	4b06      	ldr	r3, [pc, #24]	; (800210c <MX_USART2_UART_Init+0x4c>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020f6:	4805      	ldr	r0, [pc, #20]	; (800210c <MX_USART2_UART_Init+0x4c>)
 80020f8:	f003 f936 	bl	8005368 <HAL_UART_Init>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002102:	f000 f8c5 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000400 	.word	0x20000400
 8002110:	40004400 	.word	0x40004400

08002114 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	607b      	str	r3, [r7, #4]
 800211e:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <MX_DMA_Init+0x3c>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	4a0b      	ldr	r2, [pc, #44]	; (8002150 <MX_DMA_Init+0x3c>)
 8002124:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002128:	6313      	str	r3, [r2, #48]	; 0x30
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <MX_DMA_Init+0x3c>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002132:	607b      	str	r3, [r7, #4]
 8002134:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002136:	2200      	movs	r2, #0
 8002138:	2100      	movs	r1, #0
 800213a:	203a      	movs	r0, #58	; 0x3a
 800213c:	f000 ff49 	bl	8002fd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002140:	203a      	movs	r0, #58	; 0x3a
 8002142:	f000 ff62 	bl	800300a <HAL_NVIC_EnableIRQ>

}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40023800 	.word	0x40023800

08002154 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08a      	sub	sp, #40	; 0x28
 8002158:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215a:	f107 0314 	add.w	r3, r7, #20
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	605a      	str	r2, [r3, #4]
 8002164:	609a      	str	r2, [r3, #8]
 8002166:	60da      	str	r2, [r3, #12]
 8002168:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
 800216e:	4b44      	ldr	r3, [pc, #272]	; (8002280 <MX_GPIO_Init+0x12c>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	4a43      	ldr	r2, [pc, #268]	; (8002280 <MX_GPIO_Init+0x12c>)
 8002174:	f043 0304 	orr.w	r3, r3, #4
 8002178:	6313      	str	r3, [r2, #48]	; 0x30
 800217a:	4b41      	ldr	r3, [pc, #260]	; (8002280 <MX_GPIO_Init+0x12c>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	4b3d      	ldr	r3, [pc, #244]	; (8002280 <MX_GPIO_Init+0x12c>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	4a3c      	ldr	r2, [pc, #240]	; (8002280 <MX_GPIO_Init+0x12c>)
 8002190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002194:	6313      	str	r3, [r2, #48]	; 0x30
 8002196:	4b3a      	ldr	r3, [pc, #232]	; (8002280 <MX_GPIO_Init+0x12c>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	60bb      	str	r3, [r7, #8]
 80021a6:	4b36      	ldr	r3, [pc, #216]	; (8002280 <MX_GPIO_Init+0x12c>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	4a35      	ldr	r2, [pc, #212]	; (8002280 <MX_GPIO_Init+0x12c>)
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	6313      	str	r3, [r2, #48]	; 0x30
 80021b2:	4b33      	ldr	r3, [pc, #204]	; (8002280 <MX_GPIO_Init+0x12c>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	60bb      	str	r3, [r7, #8]
 80021bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	607b      	str	r3, [r7, #4]
 80021c2:	4b2f      	ldr	r3, [pc, #188]	; (8002280 <MX_GPIO_Init+0x12c>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	4a2e      	ldr	r2, [pc, #184]	; (8002280 <MX_GPIO_Init+0x12c>)
 80021c8:	f043 0302 	orr.w	r3, r3, #2
 80021cc:	6313      	str	r3, [r2, #48]	; 0x30
 80021ce:	4b2c      	ldr	r3, [pc, #176]	; (8002280 <MX_GPIO_Init+0x12c>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	607b      	str	r3, [r7, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor_Enable_GPIO_Port, Motor_Enable_Pin, GPIO_PIN_RESET);
 80021da:	2200      	movs	r2, #0
 80021dc:	2102      	movs	r1, #2
 80021de:	4829      	ldr	r0, [pc, #164]	; (8002284 <MX_GPIO_Init+0x130>)
 80021e0:	f001 fccc 	bl	8003b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin Encoder_6_Pin */
  GPIO_InitStruct.Pin = B1_Pin|Encoder_6_Pin;
 80021e4:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 80021e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021f2:	f107 0314 	add.w	r3, r7, #20
 80021f6:	4619      	mov	r1, r3
 80021f8:	4822      	ldr	r0, [pc, #136]	; (8002284 <MX_GPIO_Init+0x130>)
 80021fa:	f001 fb23 	bl	8003844 <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_Enable_Pin */
  GPIO_InitStruct.Pin = Motor_Enable_Pin;
 80021fe:	2302      	movs	r3, #2
 8002200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002202:	2301      	movs	r3, #1
 8002204:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220a:	2300      	movs	r3, #0
 800220c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Motor_Enable_GPIO_Port, &GPIO_InitStruct);
 800220e:	f107 0314 	add.w	r3, r7, #20
 8002212:	4619      	mov	r1, r3
 8002214:	481b      	ldr	r0, [pc, #108]	; (8002284 <MX_GPIO_Init+0x130>)
 8002216:	f001 fb15 	bl	8003844 <HAL_GPIO_Init>

  /*Configure GPIO pins : Encoder_2_Pin Encoder_3_Pin Encoder_4_Pin */
  GPIO_InitStruct.Pin = Encoder_2_Pin|Encoder_3_Pin|Encoder_4_Pin;
 800221a:	23e0      	movs	r3, #224	; 0xe0
 800221c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800221e:	2300      	movs	r3, #0
 8002220:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002226:	f107 0314 	add.w	r3, r7, #20
 800222a:	4619      	mov	r1, r3
 800222c:	4816      	ldr	r0, [pc, #88]	; (8002288 <MX_GPIO_Init+0x134>)
 800222e:	f001 fb09 	bl	8003844 <HAL_GPIO_Init>

  /*Configure GPIO pins : Encoder_7_Pin Encoder_5_Pin Encoder_1_Pin */
  GPIO_InitStruct.Pin = Encoder_7_Pin|Encoder_5_Pin|Encoder_1_Pin;
 8002232:	f44f 7314 	mov.w	r3, #592	; 0x250
 8002236:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002238:	2300      	movs	r3, #0
 800223a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002240:	f107 0314 	add.w	r3, r7, #20
 8002244:	4619      	mov	r1, r3
 8002246:	4811      	ldr	r0, [pc, #68]	; (800228c <MX_GPIO_Init+0x138>)
 8002248:	f001 fafc 	bl	8003844 <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder_0_Pin */
  GPIO_InitStruct.Pin = Encoder_0_Pin;
 800224c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002252:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002256:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Encoder_0_GPIO_Port, &GPIO_InitStruct);
 800225c:	f107 0314 	add.w	r3, r7, #20
 8002260:	4619      	mov	r1, r3
 8002262:	480a      	ldr	r0, [pc, #40]	; (800228c <MX_GPIO_Init+0x138>)
 8002264:	f001 faee 	bl	8003844 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002268:	2200      	movs	r2, #0
 800226a:	2100      	movs	r1, #0
 800226c:	2017      	movs	r0, #23
 800226e:	f000 feb0 	bl	8002fd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002272:	2017      	movs	r0, #23
 8002274:	f000 fec9 	bl	800300a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002278:	bf00      	nop
 800227a:	3728      	adds	r7, #40	; 0x28
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40023800 	.word	0x40023800
 8002284:	40020800 	.word	0x40020800
 8002288:	40020000 	.word	0x40020000
 800228c:	40020400 	.word	0x40020400

08002290 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002294:	b672      	cpsid	i
}
 8002296:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002298:	e7fe      	b.n	8002298 <Error_Handler+0x8>
	...

0800229c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	607b      	str	r3, [r7, #4]
 80022a6:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <HAL_MspInit+0x4c>)
 80022a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022aa:	4a0f      	ldr	r2, [pc, #60]	; (80022e8 <HAL_MspInit+0x4c>)
 80022ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022b0:	6453      	str	r3, [r2, #68]	; 0x44
 80022b2:	4b0d      	ldr	r3, [pc, #52]	; (80022e8 <HAL_MspInit+0x4c>)
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ba:	607b      	str	r3, [r7, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	603b      	str	r3, [r7, #0]
 80022c2:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <HAL_MspInit+0x4c>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	4a08      	ldr	r2, [pc, #32]	; (80022e8 <HAL_MspInit+0x4c>)
 80022c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022cc:	6413      	str	r3, [r2, #64]	; 0x40
 80022ce:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <HAL_MspInit+0x4c>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d6:	603b      	str	r3, [r7, #0]
 80022d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80022da:	2007      	movs	r0, #7
 80022dc:	f000 fe6e 	bl	8002fbc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022e0:	bf00      	nop
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40023800 	.word	0x40023800

080022ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08a      	sub	sp, #40	; 0x28
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f4:	f107 0314 	add.w	r3, r7, #20
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	60da      	str	r2, [r3, #12]
 8002302:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a17      	ldr	r2, [pc, #92]	; (8002368 <HAL_ADC_MspInit+0x7c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d127      	bne.n	800235e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
 8002312:	4b16      	ldr	r3, [pc, #88]	; (800236c <HAL_ADC_MspInit+0x80>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002316:	4a15      	ldr	r2, [pc, #84]	; (800236c <HAL_ADC_MspInit+0x80>)
 8002318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800231c:	6453      	str	r3, [r2, #68]	; 0x44
 800231e:	4b13      	ldr	r3, [pc, #76]	; (800236c <HAL_ADC_MspInit+0x80>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002326:	613b      	str	r3, [r7, #16]
 8002328:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	4b0f      	ldr	r3, [pc, #60]	; (800236c <HAL_ADC_MspInit+0x80>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	4a0e      	ldr	r2, [pc, #56]	; (800236c <HAL_ADC_MspInit+0x80>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	6313      	str	r3, [r2, #48]	; 0x30
 800233a:	4b0c      	ldr	r3, [pc, #48]	; (800236c <HAL_ADC_MspInit+0x80>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Motor_Voltage_Pin;
 8002346:	2302      	movs	r3, #2
 8002348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800234a:	2303      	movs	r3, #3
 800234c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Motor_Voltage_GPIO_Port, &GPIO_InitStruct);
 8002352:	f107 0314 	add.w	r3, r7, #20
 8002356:	4619      	mov	r1, r3
 8002358:	4805      	ldr	r0, [pc, #20]	; (8002370 <HAL_ADC_MspInit+0x84>)
 800235a:	f001 fa73 	bl	8003844 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800235e:	bf00      	nop
 8002360:	3728      	adds	r7, #40	; 0x28
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40012000 	.word	0x40012000
 800236c:	40023800 	.word	0x40023800
 8002370:	40020000 	.word	0x40020000

08002374 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a15      	ldr	r2, [pc, #84]	; (80023d8 <HAL_TIM_Base_MspInit+0x64>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d10e      	bne.n	80023a4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	4b14      	ldr	r3, [pc, #80]	; (80023dc <HAL_TIM_Base_MspInit+0x68>)
 800238c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238e:	4a13      	ldr	r2, [pc, #76]	; (80023dc <HAL_TIM_Base_MspInit+0x68>)
 8002390:	f043 0301 	orr.w	r3, r3, #1
 8002394:	6453      	str	r3, [r2, #68]	; 0x44
 8002396:	4b11      	ldr	r3, [pc, #68]	; (80023dc <HAL_TIM_Base_MspInit+0x68>)
 8002398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80023a2:	e012      	b.n	80023ca <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ac:	d10d      	bne.n	80023ca <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <HAL_TIM_Base_MspInit+0x68>)
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	4a09      	ldr	r2, [pc, #36]	; (80023dc <HAL_TIM_Base_MspInit+0x68>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	6413      	str	r3, [r2, #64]	; 0x40
 80023be:	4b07      	ldr	r3, [pc, #28]	; (80023dc <HAL_TIM_Base_MspInit+0x68>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	68bb      	ldr	r3, [r7, #8]
}
 80023ca:	bf00      	nop
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	40010000 	.word	0x40010000
 80023dc:	40023800 	.word	0x40023800

080023e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e8:	f107 030c 	add.w	r3, r7, #12
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	605a      	str	r2, [r3, #4]
 80023f2:	609a      	str	r2, [r3, #8]
 80023f4:	60da      	str	r2, [r3, #12]
 80023f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a12      	ldr	r2, [pc, #72]	; (8002448 <HAL_TIM_MspPostInit+0x68>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d11e      	bne.n	8002440 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	60bb      	str	r3, [r7, #8]
 8002406:	4b11      	ldr	r3, [pc, #68]	; (800244c <HAL_TIM_MspPostInit+0x6c>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	4a10      	ldr	r2, [pc, #64]	; (800244c <HAL_TIM_MspPostInit+0x6c>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	6313      	str	r3, [r2, #48]	; 0x30
 8002412:	4b0e      	ldr	r3, [pc, #56]	; (800244c <HAL_TIM_MspPostInit+0x6c>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800241e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002422:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002424:	2302      	movs	r3, #2
 8002426:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242c:	2300      	movs	r3, #0
 800242e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002430:	2301      	movs	r3, #1
 8002432:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002434:	f107 030c 	add.w	r3, r7, #12
 8002438:	4619      	mov	r1, r3
 800243a:	4805      	ldr	r0, [pc, #20]	; (8002450 <HAL_TIM_MspPostInit+0x70>)
 800243c:	f001 fa02 	bl	8003844 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002440:	bf00      	nop
 8002442:	3720      	adds	r7, #32
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40010000 	.word	0x40010000
 800244c:	40023800 	.word	0x40023800
 8002450:	40020000 	.word	0x40020000

08002454 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08c      	sub	sp, #48	; 0x30
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245c:	f107 031c 	add.w	r3, r7, #28
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	60da      	str	r2, [r3, #12]
 800246a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a4e      	ldr	r2, [pc, #312]	; (80025ac <HAL_UART_MspInit+0x158>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d15c      	bne.n	8002530 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	61bb      	str	r3, [r7, #24]
 800247a:	4b4d      	ldr	r3, [pc, #308]	; (80025b0 <HAL_UART_MspInit+0x15c>)
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	4a4c      	ldr	r2, [pc, #304]	; (80025b0 <HAL_UART_MspInit+0x15c>)
 8002480:	f043 0310 	orr.w	r3, r3, #16
 8002484:	6453      	str	r3, [r2, #68]	; 0x44
 8002486:	4b4a      	ldr	r3, [pc, #296]	; (80025b0 <HAL_UART_MspInit+0x15c>)
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	f003 0310 	and.w	r3, r3, #16
 800248e:	61bb      	str	r3, [r7, #24]
 8002490:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	617b      	str	r3, [r7, #20]
 8002496:	4b46      	ldr	r3, [pc, #280]	; (80025b0 <HAL_UART_MspInit+0x15c>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	4a45      	ldr	r2, [pc, #276]	; (80025b0 <HAL_UART_MspInit+0x15c>)
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	6313      	str	r3, [r2, #48]	; 0x30
 80024a2:	4b43      	ldr	r3, [pc, #268]	; (80025b0 <HAL_UART_MspInit+0x15c>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80024ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80024b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b4:	2302      	movs	r3, #2
 80024b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024bc:	2303      	movs	r3, #3
 80024be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024c0:	2307      	movs	r3, #7
 80024c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c4:	f107 031c 	add.w	r3, r7, #28
 80024c8:	4619      	mov	r1, r3
 80024ca:	483a      	ldr	r0, [pc, #232]	; (80025b4 <HAL_UART_MspInit+0x160>)
 80024cc:	f001 f9ba 	bl	8003844 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80024d0:	4b39      	ldr	r3, [pc, #228]	; (80025b8 <HAL_UART_MspInit+0x164>)
 80024d2:	4a3a      	ldr	r2, [pc, #232]	; (80025bc <HAL_UART_MspInit+0x168>)
 80024d4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80024d6:	4b38      	ldr	r3, [pc, #224]	; (80025b8 <HAL_UART_MspInit+0x164>)
 80024d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024dc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024de:	4b36      	ldr	r3, [pc, #216]	; (80025b8 <HAL_UART_MspInit+0x164>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024e4:	4b34      	ldr	r3, [pc, #208]	; (80025b8 <HAL_UART_MspInit+0x164>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024ea:	4b33      	ldr	r3, [pc, #204]	; (80025b8 <HAL_UART_MspInit+0x164>)
 80024ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024f0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024f2:	4b31      	ldr	r3, [pc, #196]	; (80025b8 <HAL_UART_MspInit+0x164>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024f8:	4b2f      	ldr	r3, [pc, #188]	; (80025b8 <HAL_UART_MspInit+0x164>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80024fe:	4b2e      	ldr	r3, [pc, #184]	; (80025b8 <HAL_UART_MspInit+0x164>)
 8002500:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002504:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002506:	4b2c      	ldr	r3, [pc, #176]	; (80025b8 <HAL_UART_MspInit+0x164>)
 8002508:	2200      	movs	r2, #0
 800250a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800250c:	4b2a      	ldr	r3, [pc, #168]	; (80025b8 <HAL_UART_MspInit+0x164>)
 800250e:	2200      	movs	r2, #0
 8002510:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002512:	4829      	ldr	r0, [pc, #164]	; (80025b8 <HAL_UART_MspInit+0x164>)
 8002514:	f000 fd94 	bl	8003040 <HAL_DMA_Init>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800251e:	f7ff feb7 	bl	8002290 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a24      	ldr	r2, [pc, #144]	; (80025b8 <HAL_UART_MspInit+0x164>)
 8002526:	639a      	str	r2, [r3, #56]	; 0x38
 8002528:	4a23      	ldr	r2, [pc, #140]	; (80025b8 <HAL_UART_MspInit+0x164>)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800252e:	e038      	b.n	80025a2 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a22      	ldr	r2, [pc, #136]	; (80025c0 <HAL_UART_MspInit+0x16c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d133      	bne.n	80025a2 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	613b      	str	r3, [r7, #16]
 800253e:	4b1c      	ldr	r3, [pc, #112]	; (80025b0 <HAL_UART_MspInit+0x15c>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	4a1b      	ldr	r2, [pc, #108]	; (80025b0 <HAL_UART_MspInit+0x15c>)
 8002544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002548:	6413      	str	r3, [r2, #64]	; 0x40
 800254a:	4b19      	ldr	r3, [pc, #100]	; (80025b0 <HAL_UART_MspInit+0x15c>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <HAL_UART_MspInit+0x15c>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	4a14      	ldr	r2, [pc, #80]	; (80025b0 <HAL_UART_MspInit+0x15c>)
 8002560:	f043 0301 	orr.w	r3, r3, #1
 8002564:	6313      	str	r3, [r2, #48]	; 0x30
 8002566:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <HAL_UART_MspInit+0x15c>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002572:	230c      	movs	r3, #12
 8002574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002576:	2302      	movs	r3, #2
 8002578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	2300      	movs	r3, #0
 800257c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257e:	2303      	movs	r3, #3
 8002580:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002582:	2307      	movs	r3, #7
 8002584:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002586:	f107 031c 	add.w	r3, r7, #28
 800258a:	4619      	mov	r1, r3
 800258c:	4809      	ldr	r0, [pc, #36]	; (80025b4 <HAL_UART_MspInit+0x160>)
 800258e:	f001 f959 	bl	8003844 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002592:	2200      	movs	r2, #0
 8002594:	2100      	movs	r1, #0
 8002596:	2026      	movs	r0, #38	; 0x26
 8002598:	f000 fd1b 	bl	8002fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800259c:	2026      	movs	r0, #38	; 0x26
 800259e:	f000 fd34 	bl	800300a <HAL_NVIC_EnableIRQ>
}
 80025a2:	bf00      	nop
 80025a4:	3730      	adds	r7, #48	; 0x30
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40011000 	.word	0x40011000
 80025b0:	40023800 	.word	0x40023800
 80025b4:	40020000 	.word	0x40020000
 80025b8:	20000444 	.word	0x20000444
 80025bc:	40026440 	.word	0x40026440
 80025c0:	40004400 	.word	0x40004400

080025c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025c8:	e7fe      	b.n	80025c8 <NMI_Handler+0x4>

080025ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ca:	b480      	push	{r7}
 80025cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025ce:	e7fe      	b.n	80025ce <HardFault_Handler+0x4>

080025d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025d4:	e7fe      	b.n	80025d4 <MemManage_Handler+0x4>

080025d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025d6:	b480      	push	{r7}
 80025d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025da:	e7fe      	b.n	80025da <BusFault_Handler+0x4>

080025dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025e0:	e7fe      	b.n	80025e0 <UsageFault_Handler+0x4>

080025e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025e2:	b480      	push	{r7}
 80025e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025e6:	bf00      	nop
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025f4:	bf00      	nop
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025fe:	b480      	push	{r7}
 8002600:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002602:	bf00      	nop
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002610:	f000 f972 	bl	80028f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002614:	bf00      	nop
 8002616:	bd80      	pop	{r7, pc}

08002618 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_0_Pin);
 800261c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002620:	f001 fac6 	bl	8003bb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002624:	bf00      	nop
 8002626:	bd80      	pop	{r7, pc}

08002628 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800262c:	4802      	ldr	r0, [pc, #8]	; (8002638 <USART2_IRQHandler+0x10>)
 800262e:	f002 ff5d 	bl	80054ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20000400 	.word	0x20000400

0800263c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002640:	4802      	ldr	r0, [pc, #8]	; (800264c <DMA2_Stream2_IRQHandler+0x10>)
 8002642:	f000 fe95 	bl	8003370 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000444 	.word	0x20000444

08002650 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return 1;
 8002654:	2301      	movs	r3, #1
}
 8002656:	4618      	mov	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <_kill>:

int _kill(int pid, int sig)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800266a:	f004 fd97 	bl	800719c <__errno>
 800266e:	4603      	mov	r3, r0
 8002670:	2216      	movs	r2, #22
 8002672:	601a      	str	r2, [r3, #0]
  return -1;
 8002674:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002678:	4618      	mov	r0, r3
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <_exit>:

void _exit (int status)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002688:	f04f 31ff 	mov.w	r1, #4294967295
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f7ff ffe7 	bl	8002660 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002692:	e7fe      	b.n	8002692 <_exit+0x12>

08002694 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]
 80026a4:	e00a      	b.n	80026bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026a6:	f3af 8000 	nop.w
 80026aa:	4601      	mov	r1, r0
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	60ba      	str	r2, [r7, #8]
 80026b2:	b2ca      	uxtb	r2, r1
 80026b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	3301      	adds	r3, #1
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	dbf0      	blt.n	80026a6 <_read+0x12>
  }

  return len;
 80026c4:	687b      	ldr	r3, [r7, #4]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b086      	sub	sp, #24
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	60f8      	str	r0, [r7, #12]
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]
 80026de:	e009      	b.n	80026f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	1c5a      	adds	r2, r3, #1
 80026e4:	60ba      	str	r2, [r7, #8]
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	3301      	adds	r3, #1
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	dbf1      	blt.n	80026e0 <_write+0x12>
  }
  return len;
 80026fc:	687b      	ldr	r3, [r7, #4]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <_close>:

int _close(int file)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800270e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002712:	4618      	mov	r0, r3
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
 8002726:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800272e:	605a      	str	r2, [r3, #4]
  return 0;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <_isatty>:

int _isatty(int file)
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002746:	2301      	movs	r3, #1
}
 8002748:	4618      	mov	r0, r3
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3714      	adds	r7, #20
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
	...

08002770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002778:	4a14      	ldr	r2, [pc, #80]	; (80027cc <_sbrk+0x5c>)
 800277a:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <_sbrk+0x60>)
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002784:	4b13      	ldr	r3, [pc, #76]	; (80027d4 <_sbrk+0x64>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d102      	bne.n	8002792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800278c:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <_sbrk+0x64>)
 800278e:	4a12      	ldr	r2, [pc, #72]	; (80027d8 <_sbrk+0x68>)
 8002790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002792:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <_sbrk+0x64>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4413      	add	r3, r2
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	429a      	cmp	r2, r3
 800279e:	d207      	bcs.n	80027b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027a0:	f004 fcfc 	bl	800719c <__errno>
 80027a4:	4603      	mov	r3, r0
 80027a6:	220c      	movs	r2, #12
 80027a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027aa:	f04f 33ff 	mov.w	r3, #4294967295
 80027ae:	e009      	b.n	80027c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027b0:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <_sbrk+0x64>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027b6:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <_sbrk+0x64>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4413      	add	r3, r2
 80027be:	4a05      	ldr	r2, [pc, #20]	; (80027d4 <_sbrk+0x64>)
 80027c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027c2:	68fb      	ldr	r3, [r7, #12]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	20020000 	.word	0x20020000
 80027d0:	00000400 	.word	0x00000400
 80027d4:	200004a4 	.word	0x200004a4
 80027d8:	200005f8 	.word	0x200005f8

080027dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027e0:	4b06      	ldr	r3, [pc, #24]	; (80027fc <SystemInit+0x20>)
 80027e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e6:	4a05      	ldr	r2, [pc, #20]	; (80027fc <SystemInit+0x20>)
 80027e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027f0:	bf00      	nop
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002800:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002838 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002804:	480d      	ldr	r0, [pc, #52]	; (800283c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002806:	490e      	ldr	r1, [pc, #56]	; (8002840 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002808:	4a0e      	ldr	r2, [pc, #56]	; (8002844 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800280a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800280c:	e002      	b.n	8002814 <LoopCopyDataInit>

0800280e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800280e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002812:	3304      	adds	r3, #4

08002814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002818:	d3f9      	bcc.n	800280e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800281a:	4a0b      	ldr	r2, [pc, #44]	; (8002848 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800281c:	4c0b      	ldr	r4, [pc, #44]	; (800284c <LoopFillZerobss+0x26>)
  movs r3, #0
 800281e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002820:	e001      	b.n	8002826 <LoopFillZerobss>

08002822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002824:	3204      	adds	r2, #4

08002826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002828:	d3fb      	bcc.n	8002822 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800282a:	f7ff ffd7 	bl	80027dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800282e:	f004 fcbb 	bl	80071a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002832:	f7ff f815 	bl	8001860 <main>
  bx  lr    
 8002836:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002838:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800283c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002840:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002844:	080096c4 	.word	0x080096c4
  ldr r2, =_sbss
 8002848:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800284c:	200005f8 	.word	0x200005f8

08002850 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002850:	e7fe      	b.n	8002850 <ADC_IRQHandler>
	...

08002854 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002858:	4b0e      	ldr	r3, [pc, #56]	; (8002894 <HAL_Init+0x40>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a0d      	ldr	r2, [pc, #52]	; (8002894 <HAL_Init+0x40>)
 800285e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002862:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002864:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <HAL_Init+0x40>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a0a      	ldr	r2, [pc, #40]	; (8002894 <HAL_Init+0x40>)
 800286a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800286e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002870:	4b08      	ldr	r3, [pc, #32]	; (8002894 <HAL_Init+0x40>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a07      	ldr	r2, [pc, #28]	; (8002894 <HAL_Init+0x40>)
 8002876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800287a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800287c:	2003      	movs	r0, #3
 800287e:	f000 fb9d 	bl	8002fbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002882:	2000      	movs	r0, #0
 8002884:	f000 f808 	bl	8002898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002888:	f7ff fd08 	bl	800229c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40023c00 	.word	0x40023c00

08002898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028a0:	4b12      	ldr	r3, [pc, #72]	; (80028ec <HAL_InitTick+0x54>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <HAL_InitTick+0x58>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	4619      	mov	r1, r3
 80028aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80028b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 fbb5 	bl	8003026 <HAL_SYSTICK_Config>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e00e      	b.n	80028e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b0f      	cmp	r3, #15
 80028ca:	d80a      	bhi.n	80028e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028cc:	2200      	movs	r2, #0
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	f04f 30ff 	mov.w	r0, #4294967295
 80028d4:	f000 fb7d 	bl	8002fd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028d8:	4a06      	ldr	r2, [pc, #24]	; (80028f4 <HAL_InitTick+0x5c>)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028de:	2300      	movs	r3, #0
 80028e0:	e000      	b.n	80028e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20000004 	.word	0x20000004
 80028f0:	2000000c 	.word	0x2000000c
 80028f4:	20000008 	.word	0x20000008

080028f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <HAL_IncTick+0x20>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	461a      	mov	r2, r3
 8002902:	4b06      	ldr	r3, [pc, #24]	; (800291c <HAL_IncTick+0x24>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4413      	add	r3, r2
 8002908:	4a04      	ldr	r2, [pc, #16]	; (800291c <HAL_IncTick+0x24>)
 800290a:	6013      	str	r3, [r2, #0]
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	2000000c 	.word	0x2000000c
 800291c:	200004a8 	.word	0x200004a8

08002920 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  return uwTick;
 8002924:	4b03      	ldr	r3, [pc, #12]	; (8002934 <HAL_GetTick+0x14>)
 8002926:	681b      	ldr	r3, [r3, #0]
}
 8002928:	4618      	mov	r0, r3
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	200004a8 	.word	0x200004a8

08002938 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002940:	2300      	movs	r3, #0
 8002942:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e033      	b.n	80029b6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	2b00      	cmp	r3, #0
 8002954:	d109      	bne.n	800296a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7ff fcc8 	bl	80022ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	f003 0310 	and.w	r3, r3, #16
 8002972:	2b00      	cmp	r3, #0
 8002974:	d118      	bne.n	80029a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800297e:	f023 0302 	bic.w	r3, r3, #2
 8002982:	f043 0202 	orr.w	r2, r3, #2
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f94a 	bl	8002c24 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	f023 0303 	bic.w	r3, r3, #3
 800299e:	f043 0201 	orr.w	r2, r3, #1
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	641a      	str	r2, [r3, #64]	; 0x40
 80029a6:	e001      	b.n	80029ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
	...

080029c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x1c>
 80029d8:	2302      	movs	r3, #2
 80029da:	e113      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x244>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b09      	cmp	r3, #9
 80029ea:	d925      	bls.n	8002a38 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68d9      	ldr	r1, [r3, #12]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	461a      	mov	r2, r3
 80029fa:	4613      	mov	r3, r2
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	4413      	add	r3, r2
 8002a00:	3b1e      	subs	r3, #30
 8002a02:	2207      	movs	r2, #7
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	43da      	mvns	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	400a      	ands	r2, r1
 8002a10:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68d9      	ldr	r1, [r3, #12]
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	4618      	mov	r0, r3
 8002a24:	4603      	mov	r3, r0
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	4403      	add	r3, r0
 8002a2a:	3b1e      	subs	r3, #30
 8002a2c:	409a      	lsls	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	60da      	str	r2, [r3, #12]
 8002a36:	e022      	b.n	8002a7e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6919      	ldr	r1, [r3, #16]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	461a      	mov	r2, r3
 8002a46:	4613      	mov	r3, r2
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	4413      	add	r3, r2
 8002a4c:	2207      	movs	r2, #7
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	43da      	mvns	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	400a      	ands	r2, r1
 8002a5a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6919      	ldr	r1, [r3, #16]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	4603      	mov	r3, r0
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	4403      	add	r3, r0
 8002a74:	409a      	lsls	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b06      	cmp	r3, #6
 8002a84:	d824      	bhi.n	8002ad0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	3b05      	subs	r3, #5
 8002a98:	221f      	movs	r2, #31
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	43da      	mvns	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	400a      	ands	r2, r1
 8002aa6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	4613      	mov	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4413      	add	r3, r2
 8002ac0:	3b05      	subs	r3, #5
 8002ac2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	635a      	str	r2, [r3, #52]	; 0x34
 8002ace:	e04c      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2b0c      	cmp	r3, #12
 8002ad6:	d824      	bhi.n	8002b22 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3b23      	subs	r3, #35	; 0x23
 8002aea:	221f      	movs	r2, #31
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43da      	mvns	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	400a      	ands	r2, r1
 8002af8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	4618      	mov	r0, r3
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	3b23      	subs	r3, #35	; 0x23
 8002b14:	fa00 f203 	lsl.w	r2, r0, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	631a      	str	r2, [r3, #48]	; 0x30
 8002b20:	e023      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	3b41      	subs	r3, #65	; 0x41
 8002b34:	221f      	movs	r2, #31
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43da      	mvns	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	400a      	ands	r2, r1
 8002b42:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	4618      	mov	r0, r3
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3b41      	subs	r3, #65	; 0x41
 8002b5e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b6a:	4b29      	ldr	r3, [pc, #164]	; (8002c10 <HAL_ADC_ConfigChannel+0x250>)
 8002b6c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a28      	ldr	r2, [pc, #160]	; (8002c14 <HAL_ADC_ConfigChannel+0x254>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d10f      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x1d8>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b12      	cmp	r3, #18
 8002b7e:	d10b      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a1d      	ldr	r2, [pc, #116]	; (8002c14 <HAL_ADC_ConfigChannel+0x254>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d12b      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x23a>
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a1c      	ldr	r2, [pc, #112]	; (8002c18 <HAL_ADC_ConfigChannel+0x258>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d003      	beq.n	8002bb4 <HAL_ADC_ConfigChannel+0x1f4>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b11      	cmp	r3, #17
 8002bb2:	d122      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a11      	ldr	r2, [pc, #68]	; (8002c18 <HAL_ADC_ConfigChannel+0x258>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d111      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bd6:	4b11      	ldr	r3, [pc, #68]	; (8002c1c <HAL_ADC_ConfigChannel+0x25c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a11      	ldr	r2, [pc, #68]	; (8002c20 <HAL_ADC_ConfigChannel+0x260>)
 8002bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002be0:	0c9a      	lsrs	r2, r3, #18
 8002be2:	4613      	mov	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002bec:	e002      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f9      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	40012300 	.word	0x40012300
 8002c14:	40012000 	.word	0x40012000
 8002c18:	10000012 	.word	0x10000012
 8002c1c:	20000004 	.word	0x20000004
 8002c20:	431bde83 	.word	0x431bde83

08002c24 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c2c:	4b79      	ldr	r3, [pc, #484]	; (8002e14 <ADC_Init+0x1f0>)
 8002c2e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	431a      	orrs	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6859      	ldr	r1, [r3, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	021a      	lsls	r2, r3, #8
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6859      	ldr	r1, [r3, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6899      	ldr	r1, [r3, #8]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68da      	ldr	r2, [r3, #12]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb6:	4a58      	ldr	r2, [pc, #352]	; (8002e18 <ADC_Init+0x1f4>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d022      	beq.n	8002d02 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6899      	ldr	r1, [r3, #8]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6899      	ldr	r1, [r3, #8]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	609a      	str	r2, [r3, #8]
 8002d00:	e00f      	b.n	8002d22 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d20:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 0202 	bic.w	r2, r2, #2
 8002d30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6899      	ldr	r1, [r3, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	7e1b      	ldrb	r3, [r3, #24]
 8002d3c:	005a      	lsls	r2, r3, #1
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d01b      	beq.n	8002d88 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d5e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6859      	ldr	r1, [r3, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	035a      	lsls	r2, r3, #13
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	605a      	str	r2, [r3, #4]
 8002d86:	e007      	b.n	8002d98 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d96:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002da6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	051a      	lsls	r2, r3, #20
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002dcc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6899      	ldr	r1, [r3, #8]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dda:	025a      	lsls	r2, r3, #9
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002df2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6899      	ldr	r1, [r3, #8]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	029a      	lsls	r2, r3, #10
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	609a      	str	r2, [r3, #8]
}
 8002e08:	bf00      	nop
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	40012300 	.word	0x40012300
 8002e18:	0f000001 	.word	0x0f000001

08002e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e2c:	4b0c      	ldr	r3, [pc, #48]	; (8002e60 <__NVIC_SetPriorityGrouping+0x44>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e38:	4013      	ands	r3, r2
 8002e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e4e:	4a04      	ldr	r2, [pc, #16]	; (8002e60 <__NVIC_SetPriorityGrouping+0x44>)
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	60d3      	str	r3, [r2, #12]
}
 8002e54:	bf00      	nop
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	e000ed00 	.word	0xe000ed00

08002e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e68:	4b04      	ldr	r3, [pc, #16]	; (8002e7c <__NVIC_GetPriorityGrouping+0x18>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	0a1b      	lsrs	r3, r3, #8
 8002e6e:	f003 0307 	and.w	r3, r3, #7
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	e000ed00 	.word	0xe000ed00

08002e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	db0b      	blt.n	8002eaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e92:	79fb      	ldrb	r3, [r7, #7]
 8002e94:	f003 021f 	and.w	r2, r3, #31
 8002e98:	4907      	ldr	r1, [pc, #28]	; (8002eb8 <__NVIC_EnableIRQ+0x38>)
 8002e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9e:	095b      	lsrs	r3, r3, #5
 8002ea0:	2001      	movs	r0, #1
 8002ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	e000e100 	.word	0xe000e100

08002ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	6039      	str	r1, [r7, #0]
 8002ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	db0a      	blt.n	8002ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	490c      	ldr	r1, [pc, #48]	; (8002f08 <__NVIC_SetPriority+0x4c>)
 8002ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eda:	0112      	lsls	r2, r2, #4
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	440b      	add	r3, r1
 8002ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ee4:	e00a      	b.n	8002efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	4908      	ldr	r1, [pc, #32]	; (8002f0c <__NVIC_SetPriority+0x50>)
 8002eec:	79fb      	ldrb	r3, [r7, #7]
 8002eee:	f003 030f 	and.w	r3, r3, #15
 8002ef2:	3b04      	subs	r3, #4
 8002ef4:	0112      	lsls	r2, r2, #4
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	440b      	add	r3, r1
 8002efa:	761a      	strb	r2, [r3, #24]
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	e000e100 	.word	0xe000e100
 8002f0c:	e000ed00 	.word	0xe000ed00

08002f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b089      	sub	sp, #36	; 0x24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	f1c3 0307 	rsb	r3, r3, #7
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	bf28      	it	cs
 8002f2e:	2304      	movcs	r3, #4
 8002f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	3304      	adds	r3, #4
 8002f36:	2b06      	cmp	r3, #6
 8002f38:	d902      	bls.n	8002f40 <NVIC_EncodePriority+0x30>
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	3b03      	subs	r3, #3
 8002f3e:	e000      	b.n	8002f42 <NVIC_EncodePriority+0x32>
 8002f40:	2300      	movs	r3, #0
 8002f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f44:	f04f 32ff 	mov.w	r2, #4294967295
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	43da      	mvns	r2, r3
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	401a      	ands	r2, r3
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f58:	f04f 31ff 	mov.w	r1, #4294967295
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f62:	43d9      	mvns	r1, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f68:	4313      	orrs	r3, r2
         );
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3724      	adds	r7, #36	; 0x24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
	...

08002f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f88:	d301      	bcc.n	8002f8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e00f      	b.n	8002fae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f8e:	4a0a      	ldr	r2, [pc, #40]	; (8002fb8 <SysTick_Config+0x40>)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3b01      	subs	r3, #1
 8002f94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f96:	210f      	movs	r1, #15
 8002f98:	f04f 30ff 	mov.w	r0, #4294967295
 8002f9c:	f7ff ff8e 	bl	8002ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fa0:	4b05      	ldr	r3, [pc, #20]	; (8002fb8 <SysTick_Config+0x40>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fa6:	4b04      	ldr	r3, [pc, #16]	; (8002fb8 <SysTick_Config+0x40>)
 8002fa8:	2207      	movs	r2, #7
 8002faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	e000e010 	.word	0xe000e010

08002fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7ff ff29 	bl	8002e1c <__NVIC_SetPriorityGrouping>
}
 8002fca:	bf00      	nop
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b086      	sub	sp, #24
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	4603      	mov	r3, r0
 8002fda:	60b9      	str	r1, [r7, #8]
 8002fdc:	607a      	str	r2, [r7, #4]
 8002fde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fe4:	f7ff ff3e 	bl	8002e64 <__NVIC_GetPriorityGrouping>
 8002fe8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	68b9      	ldr	r1, [r7, #8]
 8002fee:	6978      	ldr	r0, [r7, #20]
 8002ff0:	f7ff ff8e 	bl	8002f10 <NVIC_EncodePriority>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ffa:	4611      	mov	r1, r2
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff ff5d 	bl	8002ebc <__NVIC_SetPriority>
}
 8003002:	bf00      	nop
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b082      	sub	sp, #8
 800300e:	af00      	add	r7, sp, #0
 8003010:	4603      	mov	r3, r0
 8003012:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff ff31 	bl	8002e80 <__NVIC_EnableIRQ>
}
 800301e:	bf00      	nop
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b082      	sub	sp, #8
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7ff ffa2 	bl	8002f78 <SysTick_Config>
 8003034:	4603      	mov	r3, r0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003048:	2300      	movs	r3, #0
 800304a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800304c:	f7ff fc68 	bl	8002920 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e099      	b.n	8003190 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2202      	movs	r2, #2
 8003060:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0201 	bic.w	r2, r2, #1
 800307a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800307c:	e00f      	b.n	800309e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800307e:	f7ff fc4f 	bl	8002920 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b05      	cmp	r3, #5
 800308a:	d908      	bls.n	800309e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2220      	movs	r2, #32
 8003090:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2203      	movs	r2, #3
 8003096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e078      	b.n	8003190 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1e8      	bne.n	800307e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	4b38      	ldr	r3, [pc, #224]	; (8003198 <HAL_DMA_Init+0x158>)
 80030b8:	4013      	ands	r3, r2
 80030ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	2b04      	cmp	r3, #4
 80030f6:	d107      	bne.n	8003108 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003100:	4313      	orrs	r3, r2
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	4313      	orrs	r3, r2
 8003106:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f023 0307 	bic.w	r3, r3, #7
 800311e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	4313      	orrs	r3, r2
 8003128:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	2b04      	cmp	r3, #4
 8003130:	d117      	bne.n	8003162 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	4313      	orrs	r3, r2
 800313a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00e      	beq.n	8003162 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 fb01 	bl	800374c <DMA_CheckFifoParam>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d008      	beq.n	8003162 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2240      	movs	r2, #64	; 0x40
 8003154:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800315e:	2301      	movs	r3, #1
 8003160:	e016      	b.n	8003190 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 fab8 	bl	80036e0 <DMA_CalcBaseAndBitshift>
 8003170:	4603      	mov	r3, r0
 8003172:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003178:	223f      	movs	r2, #63	; 0x3f
 800317a:	409a      	lsls	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3718      	adds	r7, #24
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	f010803f 	.word	0xf010803f

0800319c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
 80031a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031aa:	2300      	movs	r3, #0
 80031ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_DMA_Start_IT+0x26>
 80031be:	2302      	movs	r3, #2
 80031c0:	e040      	b.n	8003244 <HAL_DMA_Start_IT+0xa8>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d12f      	bne.n	8003236 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2202      	movs	r2, #2
 80031da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	68b9      	ldr	r1, [r7, #8]
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 fa4a 	bl	8003684 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f4:	223f      	movs	r2, #63	; 0x3f
 80031f6:	409a      	lsls	r2, r3
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0216 	orr.w	r2, r2, #22
 800320a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	2b00      	cmp	r3, #0
 8003212:	d007      	beq.n	8003224 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0208 	orr.w	r2, r2, #8
 8003222:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0201 	orr.w	r2, r2, #1
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	e005      	b.n	8003242 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800323e:	2302      	movs	r3, #2
 8003240:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003242:	7dfb      	ldrb	r3, [r7, #23]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003258:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800325a:	f7ff fb61 	bl	8002920 <HAL_GetTick>
 800325e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d008      	beq.n	800327e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2280      	movs	r2, #128	; 0x80
 8003270:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e052      	b.n	8003324 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0216 	bic.w	r2, r2, #22
 800328c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	695a      	ldr	r2, [r3, #20]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800329c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d103      	bne.n	80032ae <HAL_DMA_Abort+0x62>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d007      	beq.n	80032be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 0208 	bic.w	r2, r2, #8
 80032bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0201 	bic.w	r2, r2, #1
 80032cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032ce:	e013      	b.n	80032f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032d0:	f7ff fb26 	bl	8002920 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b05      	cmp	r3, #5
 80032dc:	d90c      	bls.n	80032f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2220      	movs	r2, #32
 80032e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2203      	movs	r2, #3
 80032e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e015      	b.n	8003324 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1e4      	bne.n	80032d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330a:	223f      	movs	r2, #63	; 0x3f
 800330c:	409a      	lsls	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d004      	beq.n	800334a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2280      	movs	r2, #128	; 0x80
 8003344:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e00c      	b.n	8003364 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2205      	movs	r2, #5
 800334e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0201 	bic.w	r2, r2, #1
 8003360:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800337c:	4b8e      	ldr	r3, [pc, #568]	; (80035b8 <HAL_DMA_IRQHandler+0x248>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a8e      	ldr	r2, [pc, #568]	; (80035bc <HAL_DMA_IRQHandler+0x24c>)
 8003382:	fba2 2303 	umull	r2, r3, r2, r3
 8003386:	0a9b      	lsrs	r3, r3, #10
 8003388:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339a:	2208      	movs	r2, #8
 800339c:	409a      	lsls	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4013      	ands	r3, r2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d01a      	beq.n	80033dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d013      	beq.n	80033dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0204 	bic.w	r2, r2, #4
 80033c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c8:	2208      	movs	r2, #8
 80033ca:	409a      	lsls	r2, r3
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d4:	f043 0201 	orr.w	r2, r3, #1
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e0:	2201      	movs	r2, #1
 80033e2:	409a      	lsls	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4013      	ands	r3, r2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d012      	beq.n	8003412 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00b      	beq.n	8003412 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fe:	2201      	movs	r2, #1
 8003400:	409a      	lsls	r2, r3
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800340a:	f043 0202 	orr.w	r2, r3, #2
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003416:	2204      	movs	r2, #4
 8003418:	409a      	lsls	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	4013      	ands	r3, r2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d012      	beq.n	8003448 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00b      	beq.n	8003448 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003434:	2204      	movs	r2, #4
 8003436:	409a      	lsls	r2, r3
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003440:	f043 0204 	orr.w	r2, r3, #4
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344c:	2210      	movs	r2, #16
 800344e:	409a      	lsls	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4013      	ands	r3, r2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d043      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d03c      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346a:	2210      	movs	r2, #16
 800346c:	409a      	lsls	r2, r3
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d018      	beq.n	80034b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d108      	bne.n	80034a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	2b00      	cmp	r3, #0
 8003494:	d024      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	4798      	blx	r3
 800349e:	e01f      	b.n	80034e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d01b      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	4798      	blx	r3
 80034b0:	e016      	b.n	80034e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d107      	bne.n	80034d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0208 	bic.w	r2, r2, #8
 80034ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e4:	2220      	movs	r2, #32
 80034e6:	409a      	lsls	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4013      	ands	r3, r2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 808f 	beq.w	8003610 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0310 	and.w	r3, r3, #16
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 8087 	beq.w	8003610 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003506:	2220      	movs	r2, #32
 8003508:	409a      	lsls	r2, r3
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b05      	cmp	r3, #5
 8003518:	d136      	bne.n	8003588 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0216 	bic.w	r2, r2, #22
 8003528:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	695a      	ldr	r2, [r3, #20]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003538:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	2b00      	cmp	r3, #0
 8003540:	d103      	bne.n	800354a <HAL_DMA_IRQHandler+0x1da>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003546:	2b00      	cmp	r3, #0
 8003548:	d007      	beq.n	800355a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 0208 	bic.w	r2, r2, #8
 8003558:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355e:	223f      	movs	r2, #63	; 0x3f
 8003560:	409a      	lsls	r2, r3
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800357a:	2b00      	cmp	r3, #0
 800357c:	d07e      	beq.n	800367c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	4798      	blx	r3
        }
        return;
 8003586:	e079      	b.n	800367c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d01d      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10d      	bne.n	80035c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d031      	beq.n	8003610 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	4798      	blx	r3
 80035b4:	e02c      	b.n	8003610 <HAL_DMA_IRQHandler+0x2a0>
 80035b6:	bf00      	nop
 80035b8:	20000004 	.word	0x20000004
 80035bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d023      	beq.n	8003610 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	4798      	blx	r3
 80035d0:	e01e      	b.n	8003610 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10f      	bne.n	8003600 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 0210 	bic.w	r2, r2, #16
 80035ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003614:	2b00      	cmp	r3, #0
 8003616:	d032      	beq.n	800367e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b00      	cmp	r3, #0
 8003622:	d022      	beq.n	800366a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2205      	movs	r2, #5
 8003628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 0201 	bic.w	r2, r2, #1
 800363a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	3301      	adds	r3, #1
 8003640:	60bb      	str	r3, [r7, #8]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	429a      	cmp	r2, r3
 8003646:	d307      	bcc.n	8003658 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1f2      	bne.n	800363c <HAL_DMA_IRQHandler+0x2cc>
 8003656:	e000      	b.n	800365a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003658:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800366e:	2b00      	cmp	r3, #0
 8003670:	d005      	beq.n	800367e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	4798      	blx	r3
 800367a:	e000      	b.n	800367e <HAL_DMA_IRQHandler+0x30e>
        return;
 800367c:	bf00      	nop
    }
  }
}
 800367e:	3718      	adds	r7, #24
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
 8003690:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80036a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	2b40      	cmp	r3, #64	; 0x40
 80036b0:	d108      	bne.n	80036c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036c2:	e007      	b.n	80036d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	60da      	str	r2, [r3, #12]
}
 80036d4:	bf00      	nop
 80036d6:	3714      	adds	r7, #20
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	3b10      	subs	r3, #16
 80036f0:	4a14      	ldr	r2, [pc, #80]	; (8003744 <DMA_CalcBaseAndBitshift+0x64>)
 80036f2:	fba2 2303 	umull	r2, r3, r2, r3
 80036f6:	091b      	lsrs	r3, r3, #4
 80036f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036fa:	4a13      	ldr	r2, [pc, #76]	; (8003748 <DMA_CalcBaseAndBitshift+0x68>)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4413      	add	r3, r2
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	461a      	mov	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2b03      	cmp	r3, #3
 800370c:	d909      	bls.n	8003722 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003716:	f023 0303 	bic.w	r3, r3, #3
 800371a:	1d1a      	adds	r2, r3, #4
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	659a      	str	r2, [r3, #88]	; 0x58
 8003720:	e007      	b.n	8003732 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800372a:	f023 0303 	bic.w	r3, r3, #3
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003736:	4618      	mov	r0, r3
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	aaaaaaab 	.word	0xaaaaaaab
 8003748:	08009338 	.word	0x08009338

0800374c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d11f      	bne.n	80037a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2b03      	cmp	r3, #3
 800376a:	d856      	bhi.n	800381a <DMA_CheckFifoParam+0xce>
 800376c:	a201      	add	r2, pc, #4	; (adr r2, 8003774 <DMA_CheckFifoParam+0x28>)
 800376e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003772:	bf00      	nop
 8003774:	08003785 	.word	0x08003785
 8003778:	08003797 	.word	0x08003797
 800377c:	08003785 	.word	0x08003785
 8003780:	0800381b 	.word	0x0800381b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003788:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d046      	beq.n	800381e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003794:	e043      	b.n	800381e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800379e:	d140      	bne.n	8003822 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037a4:	e03d      	b.n	8003822 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ae:	d121      	bne.n	80037f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	2b03      	cmp	r3, #3
 80037b4:	d837      	bhi.n	8003826 <DMA_CheckFifoParam+0xda>
 80037b6:	a201      	add	r2, pc, #4	; (adr r2, 80037bc <DMA_CheckFifoParam+0x70>)
 80037b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037bc:	080037cd 	.word	0x080037cd
 80037c0:	080037d3 	.word	0x080037d3
 80037c4:	080037cd 	.word	0x080037cd
 80037c8:	080037e5 	.word	0x080037e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	73fb      	strb	r3, [r7, #15]
      break;
 80037d0:	e030      	b.n	8003834 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d025      	beq.n	800382a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037e2:	e022      	b.n	800382a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037ec:	d11f      	bne.n	800382e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037f2:	e01c      	b.n	800382e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d903      	bls.n	8003802 <DMA_CheckFifoParam+0xb6>
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	2b03      	cmp	r3, #3
 80037fe:	d003      	beq.n	8003808 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003800:	e018      	b.n	8003834 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	73fb      	strb	r3, [r7, #15]
      break;
 8003806:	e015      	b.n	8003834 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00e      	beq.n	8003832 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	73fb      	strb	r3, [r7, #15]
      break;
 8003818:	e00b      	b.n	8003832 <DMA_CheckFifoParam+0xe6>
      break;
 800381a:	bf00      	nop
 800381c:	e00a      	b.n	8003834 <DMA_CheckFifoParam+0xe8>
      break;
 800381e:	bf00      	nop
 8003820:	e008      	b.n	8003834 <DMA_CheckFifoParam+0xe8>
      break;
 8003822:	bf00      	nop
 8003824:	e006      	b.n	8003834 <DMA_CheckFifoParam+0xe8>
      break;
 8003826:	bf00      	nop
 8003828:	e004      	b.n	8003834 <DMA_CheckFifoParam+0xe8>
      break;
 800382a:	bf00      	nop
 800382c:	e002      	b.n	8003834 <DMA_CheckFifoParam+0xe8>
      break;   
 800382e:	bf00      	nop
 8003830:	e000      	b.n	8003834 <DMA_CheckFifoParam+0xe8>
      break;
 8003832:	bf00      	nop
    }
  } 
  
  return status; 
 8003834:	7bfb      	ldrb	r3, [r7, #15]
}
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop

08003844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003844:	b480      	push	{r7}
 8003846:	b089      	sub	sp, #36	; 0x24
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800384e:	2300      	movs	r3, #0
 8003850:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003852:	2300      	movs	r3, #0
 8003854:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003856:	2300      	movs	r3, #0
 8003858:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800385a:	2300      	movs	r3, #0
 800385c:	61fb      	str	r3, [r7, #28]
 800385e:	e159      	b.n	8003b14 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003860:	2201      	movs	r2, #1
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	4013      	ands	r3, r2
 8003872:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	429a      	cmp	r2, r3
 800387a:	f040 8148 	bne.w	8003b0e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f003 0303 	and.w	r3, r3, #3
 8003886:	2b01      	cmp	r3, #1
 8003888:	d005      	beq.n	8003896 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003892:	2b02      	cmp	r3, #2
 8003894:	d130      	bne.n	80038f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	2203      	movs	r2, #3
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	43db      	mvns	r3, r3
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	4013      	ands	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	68da      	ldr	r2, [r3, #12]
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4313      	orrs	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038cc:	2201      	movs	r2, #1
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	43db      	mvns	r3, r3
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	4013      	ands	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	091b      	lsrs	r3, r3, #4
 80038e2:	f003 0201 	and.w	r2, r3, #1
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f003 0303 	and.w	r3, r3, #3
 8003900:	2b03      	cmp	r3, #3
 8003902:	d017      	beq.n	8003934 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	2203      	movs	r2, #3
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	43db      	mvns	r3, r3
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	4013      	ands	r3, r2
 800391a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	4313      	orrs	r3, r2
 800392c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f003 0303 	and.w	r3, r3, #3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d123      	bne.n	8003988 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	08da      	lsrs	r2, r3, #3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3208      	adds	r2, #8
 8003948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800394c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	220f      	movs	r2, #15
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	43db      	mvns	r3, r3
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	4013      	ands	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	691a      	ldr	r2, [r3, #16]
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	4313      	orrs	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	08da      	lsrs	r2, r3, #3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	3208      	adds	r2, #8
 8003982:	69b9      	ldr	r1, [r7, #24]
 8003984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	2203      	movs	r2, #3
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	43db      	mvns	r3, r3
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	4013      	ands	r3, r2
 800399e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f003 0203 	and.w	r2, r3, #3
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 80a2 	beq.w	8003b0e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039ca:	2300      	movs	r3, #0
 80039cc:	60fb      	str	r3, [r7, #12]
 80039ce:	4b57      	ldr	r3, [pc, #348]	; (8003b2c <HAL_GPIO_Init+0x2e8>)
 80039d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d2:	4a56      	ldr	r2, [pc, #344]	; (8003b2c <HAL_GPIO_Init+0x2e8>)
 80039d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039d8:	6453      	str	r3, [r2, #68]	; 0x44
 80039da:	4b54      	ldr	r3, [pc, #336]	; (8003b2c <HAL_GPIO_Init+0x2e8>)
 80039dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039e6:	4a52      	ldr	r2, [pc, #328]	; (8003b30 <HAL_GPIO_Init+0x2ec>)
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	089b      	lsrs	r3, r3, #2
 80039ec:	3302      	adds	r3, #2
 80039ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	f003 0303 	and.w	r3, r3, #3
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	220f      	movs	r2, #15
 80039fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003a02:	43db      	mvns	r3, r3
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	4013      	ands	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a49      	ldr	r2, [pc, #292]	; (8003b34 <HAL_GPIO_Init+0x2f0>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d019      	beq.n	8003a46 <HAL_GPIO_Init+0x202>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a48      	ldr	r2, [pc, #288]	; (8003b38 <HAL_GPIO_Init+0x2f4>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d013      	beq.n	8003a42 <HAL_GPIO_Init+0x1fe>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a47      	ldr	r2, [pc, #284]	; (8003b3c <HAL_GPIO_Init+0x2f8>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d00d      	beq.n	8003a3e <HAL_GPIO_Init+0x1fa>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a46      	ldr	r2, [pc, #280]	; (8003b40 <HAL_GPIO_Init+0x2fc>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d007      	beq.n	8003a3a <HAL_GPIO_Init+0x1f6>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a45      	ldr	r2, [pc, #276]	; (8003b44 <HAL_GPIO_Init+0x300>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d101      	bne.n	8003a36 <HAL_GPIO_Init+0x1f2>
 8003a32:	2304      	movs	r3, #4
 8003a34:	e008      	b.n	8003a48 <HAL_GPIO_Init+0x204>
 8003a36:	2307      	movs	r3, #7
 8003a38:	e006      	b.n	8003a48 <HAL_GPIO_Init+0x204>
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e004      	b.n	8003a48 <HAL_GPIO_Init+0x204>
 8003a3e:	2302      	movs	r3, #2
 8003a40:	e002      	b.n	8003a48 <HAL_GPIO_Init+0x204>
 8003a42:	2301      	movs	r3, #1
 8003a44:	e000      	b.n	8003a48 <HAL_GPIO_Init+0x204>
 8003a46:	2300      	movs	r3, #0
 8003a48:	69fa      	ldr	r2, [r7, #28]
 8003a4a:	f002 0203 	and.w	r2, r2, #3
 8003a4e:	0092      	lsls	r2, r2, #2
 8003a50:	4093      	lsls	r3, r2
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a58:	4935      	ldr	r1, [pc, #212]	; (8003b30 <HAL_GPIO_Init+0x2ec>)
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	089b      	lsrs	r3, r3, #2
 8003a5e:	3302      	adds	r3, #2
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a66:	4b38      	ldr	r3, [pc, #224]	; (8003b48 <HAL_GPIO_Init+0x304>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	4013      	ands	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a8a:	4a2f      	ldr	r2, [pc, #188]	; (8003b48 <HAL_GPIO_Init+0x304>)
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a90:	4b2d      	ldr	r3, [pc, #180]	; (8003b48 <HAL_GPIO_Init+0x304>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	43db      	mvns	r3, r3
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ab4:	4a24      	ldr	r2, [pc, #144]	; (8003b48 <HAL_GPIO_Init+0x304>)
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003aba:	4b23      	ldr	r3, [pc, #140]	; (8003b48 <HAL_GPIO_Init+0x304>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	43db      	mvns	r3, r3
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ade:	4a1a      	ldr	r2, [pc, #104]	; (8003b48 <HAL_GPIO_Init+0x304>)
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ae4:	4b18      	ldr	r3, [pc, #96]	; (8003b48 <HAL_GPIO_Init+0x304>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	43db      	mvns	r3, r3
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	4013      	ands	r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d003      	beq.n	8003b08 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b08:	4a0f      	ldr	r2, [pc, #60]	; (8003b48 <HAL_GPIO_Init+0x304>)
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	3301      	adds	r3, #1
 8003b12:	61fb      	str	r3, [r7, #28]
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	2b0f      	cmp	r3, #15
 8003b18:	f67f aea2 	bls.w	8003860 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b1c:	bf00      	nop
 8003b1e:	bf00      	nop
 8003b20:	3724      	adds	r7, #36	; 0x24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	40013800 	.word	0x40013800
 8003b34:	40020000 	.word	0x40020000
 8003b38:	40020400 	.word	0x40020400
 8003b3c:	40020800 	.word	0x40020800
 8003b40:	40020c00 	.word	0x40020c00
 8003b44:	40021000 	.word	0x40021000
 8003b48:	40013c00 	.word	0x40013c00

08003b4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	460b      	mov	r3, r1
 8003b56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691a      	ldr	r2, [r3, #16]
 8003b5c:	887b      	ldrh	r3, [r7, #2]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d002      	beq.n	8003b6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b64:	2301      	movs	r3, #1
 8003b66:	73fb      	strb	r3, [r7, #15]
 8003b68:	e001      	b.n	8003b6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	460b      	mov	r3, r1
 8003b86:	807b      	strh	r3, [r7, #2]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b8c:	787b      	ldrb	r3, [r7, #1]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b92:	887a      	ldrh	r2, [r7, #2]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b98:	e003      	b.n	8003ba2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b9a:	887b      	ldrh	r3, [r7, #2]
 8003b9c:	041a      	lsls	r2, r3, #16
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	619a      	str	r2, [r3, #24]
}
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
	...

08003bb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003bba:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bbc:	695a      	ldr	r2, [r3, #20]
 8003bbe:	88fb      	ldrh	r3, [r7, #6]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d006      	beq.n	8003bd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bc6:	4a05      	ldr	r2, [pc, #20]	; (8003bdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bc8:	88fb      	ldrh	r3, [r7, #6]
 8003bca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bcc:	88fb      	ldrh	r3, [r7, #6]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fd fdf6 	bl	80017c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003bd4:	bf00      	nop
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40013c00 	.word	0x40013c00

08003be0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e267      	b.n	80040c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d075      	beq.n	8003cea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bfe:	4b88      	ldr	r3, [pc, #544]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 030c 	and.w	r3, r3, #12
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d00c      	beq.n	8003c24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c0a:	4b85      	ldr	r3, [pc, #532]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c12:	2b08      	cmp	r3, #8
 8003c14:	d112      	bne.n	8003c3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c16:	4b82      	ldr	r3, [pc, #520]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c22:	d10b      	bne.n	8003c3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c24:	4b7e      	ldr	r3, [pc, #504]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d05b      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x108>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d157      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e242      	b.n	80040c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c44:	d106      	bne.n	8003c54 <HAL_RCC_OscConfig+0x74>
 8003c46:	4b76      	ldr	r3, [pc, #472]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a75      	ldr	r2, [pc, #468]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c50:	6013      	str	r3, [r2, #0]
 8003c52:	e01d      	b.n	8003c90 <HAL_RCC_OscConfig+0xb0>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c5c:	d10c      	bne.n	8003c78 <HAL_RCC_OscConfig+0x98>
 8003c5e:	4b70      	ldr	r3, [pc, #448]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a6f      	ldr	r2, [pc, #444]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c68:	6013      	str	r3, [r2, #0]
 8003c6a:	4b6d      	ldr	r3, [pc, #436]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a6c      	ldr	r2, [pc, #432]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c74:	6013      	str	r3, [r2, #0]
 8003c76:	e00b      	b.n	8003c90 <HAL_RCC_OscConfig+0xb0>
 8003c78:	4b69      	ldr	r3, [pc, #420]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a68      	ldr	r2, [pc, #416]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c82:	6013      	str	r3, [r2, #0]
 8003c84:	4b66      	ldr	r3, [pc, #408]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a65      	ldr	r2, [pc, #404]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003c8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d013      	beq.n	8003cc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c98:	f7fe fe42 	bl	8002920 <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ca0:	f7fe fe3e 	bl	8002920 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b64      	cmp	r3, #100	; 0x64
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e207      	b.n	80040c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb2:	4b5b      	ldr	r3, [pc, #364]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0f0      	beq.n	8003ca0 <HAL_RCC_OscConfig+0xc0>
 8003cbe:	e014      	b.n	8003cea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc0:	f7fe fe2e 	bl	8002920 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cc8:	f7fe fe2a 	bl	8002920 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b64      	cmp	r3, #100	; 0x64
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e1f3      	b.n	80040c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cda:	4b51      	ldr	r3, [pc, #324]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1f0      	bne.n	8003cc8 <HAL_RCC_OscConfig+0xe8>
 8003ce6:	e000      	b.n	8003cea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d063      	beq.n	8003dbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cf6:	4b4a      	ldr	r3, [pc, #296]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f003 030c 	and.w	r3, r3, #12
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00b      	beq.n	8003d1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d02:	4b47      	ldr	r3, [pc, #284]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d0a:	2b08      	cmp	r3, #8
 8003d0c:	d11c      	bne.n	8003d48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d0e:	4b44      	ldr	r3, [pc, #272]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d116      	bne.n	8003d48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d1a:	4b41      	ldr	r3, [pc, #260]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d005      	beq.n	8003d32 <HAL_RCC_OscConfig+0x152>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d001      	beq.n	8003d32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e1c7      	b.n	80040c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d32:	4b3b      	ldr	r3, [pc, #236]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	4937      	ldr	r1, [pc, #220]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d46:	e03a      	b.n	8003dbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d020      	beq.n	8003d92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d50:	4b34      	ldr	r3, [pc, #208]	; (8003e24 <HAL_RCC_OscConfig+0x244>)
 8003d52:	2201      	movs	r2, #1
 8003d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d56:	f7fe fde3 	bl	8002920 <HAL_GetTick>
 8003d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d5c:	e008      	b.n	8003d70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d5e:	f7fe fddf 	bl	8002920 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e1a8      	b.n	80040c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d70:	4b2b      	ldr	r3, [pc, #172]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d0f0      	beq.n	8003d5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d7c:	4b28      	ldr	r3, [pc, #160]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	4925      	ldr	r1, [pc, #148]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	600b      	str	r3, [r1, #0]
 8003d90:	e015      	b.n	8003dbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d92:	4b24      	ldr	r3, [pc, #144]	; (8003e24 <HAL_RCC_OscConfig+0x244>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d98:	f7fe fdc2 	bl	8002920 <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d9e:	e008      	b.n	8003db2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003da0:	f7fe fdbe 	bl	8002920 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e187      	b.n	80040c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003db2:	4b1b      	ldr	r3, [pc, #108]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1f0      	bne.n	8003da0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0308 	and.w	r3, r3, #8
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d036      	beq.n	8003e38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d016      	beq.n	8003e00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dd2:	4b15      	ldr	r3, [pc, #84]	; (8003e28 <HAL_RCC_OscConfig+0x248>)
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd8:	f7fe fda2 	bl	8002920 <HAL_GetTick>
 8003ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dde:	e008      	b.n	8003df2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003de0:	f7fe fd9e 	bl	8002920 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e167      	b.n	80040c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003df2:	4b0b      	ldr	r3, [pc, #44]	; (8003e20 <HAL_RCC_OscConfig+0x240>)
 8003df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d0f0      	beq.n	8003de0 <HAL_RCC_OscConfig+0x200>
 8003dfe:	e01b      	b.n	8003e38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e00:	4b09      	ldr	r3, [pc, #36]	; (8003e28 <HAL_RCC_OscConfig+0x248>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e06:	f7fe fd8b 	bl	8002920 <HAL_GetTick>
 8003e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e0c:	e00e      	b.n	8003e2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e0e:	f7fe fd87 	bl	8002920 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d907      	bls.n	8003e2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e150      	b.n	80040c2 <HAL_RCC_OscConfig+0x4e2>
 8003e20:	40023800 	.word	0x40023800
 8003e24:	42470000 	.word	0x42470000
 8003e28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e2c:	4b88      	ldr	r3, [pc, #544]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1ea      	bne.n	8003e0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0304 	and.w	r3, r3, #4
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 8097 	beq.w	8003f74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e46:	2300      	movs	r3, #0
 8003e48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e4a:	4b81      	ldr	r3, [pc, #516]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10f      	bne.n	8003e76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e56:	2300      	movs	r3, #0
 8003e58:	60bb      	str	r3, [r7, #8]
 8003e5a:	4b7d      	ldr	r3, [pc, #500]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	4a7c      	ldr	r2, [pc, #496]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e64:	6413      	str	r3, [r2, #64]	; 0x40
 8003e66:	4b7a      	ldr	r3, [pc, #488]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e6e:	60bb      	str	r3, [r7, #8]
 8003e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e72:	2301      	movs	r3, #1
 8003e74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e76:	4b77      	ldr	r3, [pc, #476]	; (8004054 <HAL_RCC_OscConfig+0x474>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d118      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e82:	4b74      	ldr	r3, [pc, #464]	; (8004054 <HAL_RCC_OscConfig+0x474>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a73      	ldr	r2, [pc, #460]	; (8004054 <HAL_RCC_OscConfig+0x474>)
 8003e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e8e:	f7fe fd47 	bl	8002920 <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e96:	f7fe fd43 	bl	8002920 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e10c      	b.n	80040c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea8:	4b6a      	ldr	r3, [pc, #424]	; (8004054 <HAL_RCC_OscConfig+0x474>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0f0      	beq.n	8003e96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d106      	bne.n	8003eca <HAL_RCC_OscConfig+0x2ea>
 8003ebc:	4b64      	ldr	r3, [pc, #400]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec0:	4a63      	ldr	r2, [pc, #396]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003ec2:	f043 0301 	orr.w	r3, r3, #1
 8003ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec8:	e01c      	b.n	8003f04 <HAL_RCC_OscConfig+0x324>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2b05      	cmp	r3, #5
 8003ed0:	d10c      	bne.n	8003eec <HAL_RCC_OscConfig+0x30c>
 8003ed2:	4b5f      	ldr	r3, [pc, #380]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed6:	4a5e      	ldr	r2, [pc, #376]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003ed8:	f043 0304 	orr.w	r3, r3, #4
 8003edc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ede:	4b5c      	ldr	r3, [pc, #368]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee2:	4a5b      	ldr	r2, [pc, #364]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003ee4:	f043 0301 	orr.w	r3, r3, #1
 8003ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eea:	e00b      	b.n	8003f04 <HAL_RCC_OscConfig+0x324>
 8003eec:	4b58      	ldr	r3, [pc, #352]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef0:	4a57      	ldr	r2, [pc, #348]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003ef2:	f023 0301 	bic.w	r3, r3, #1
 8003ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef8:	4b55      	ldr	r3, [pc, #340]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efc:	4a54      	ldr	r2, [pc, #336]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003efe:	f023 0304 	bic.w	r3, r3, #4
 8003f02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d015      	beq.n	8003f38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f0c:	f7fe fd08 	bl	8002920 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f12:	e00a      	b.n	8003f2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f14:	f7fe fd04 	bl	8002920 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e0cb      	b.n	80040c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f2a:	4b49      	ldr	r3, [pc, #292]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0ee      	beq.n	8003f14 <HAL_RCC_OscConfig+0x334>
 8003f36:	e014      	b.n	8003f62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f38:	f7fe fcf2 	bl	8002920 <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f3e:	e00a      	b.n	8003f56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f40:	f7fe fcee 	bl	8002920 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e0b5      	b.n	80040c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f56:	4b3e      	ldr	r3, [pc, #248]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1ee      	bne.n	8003f40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f62:	7dfb      	ldrb	r3, [r7, #23]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d105      	bne.n	8003f74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f68:	4b39      	ldr	r3, [pc, #228]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	4a38      	ldr	r2, [pc, #224]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003f6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 80a1 	beq.w	80040c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f7e:	4b34      	ldr	r3, [pc, #208]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 030c 	and.w	r3, r3, #12
 8003f86:	2b08      	cmp	r3, #8
 8003f88:	d05c      	beq.n	8004044 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d141      	bne.n	8004016 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f92:	4b31      	ldr	r3, [pc, #196]	; (8004058 <HAL_RCC_OscConfig+0x478>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f98:	f7fe fcc2 	bl	8002920 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fa0:	f7fe fcbe 	bl	8002920 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e087      	b.n	80040c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb2:	4b27      	ldr	r3, [pc, #156]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1f0      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69da      	ldr	r2, [r3, #28]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	019b      	lsls	r3, r3, #6
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd4:	085b      	lsrs	r3, r3, #1
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	041b      	lsls	r3, r3, #16
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe0:	061b      	lsls	r3, r3, #24
 8003fe2:	491b      	ldr	r1, [pc, #108]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fe8:	4b1b      	ldr	r3, [pc, #108]	; (8004058 <HAL_RCC_OscConfig+0x478>)
 8003fea:	2201      	movs	r2, #1
 8003fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fee:	f7fe fc97 	bl	8002920 <HAL_GetTick>
 8003ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff4:	e008      	b.n	8004008 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ff6:	f7fe fc93 	bl	8002920 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b02      	cmp	r3, #2
 8004002:	d901      	bls.n	8004008 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e05c      	b.n	80040c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004008:	4b11      	ldr	r3, [pc, #68]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d0f0      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x416>
 8004014:	e054      	b.n	80040c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004016:	4b10      	ldr	r3, [pc, #64]	; (8004058 <HAL_RCC_OscConfig+0x478>)
 8004018:	2200      	movs	r2, #0
 800401a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401c:	f7fe fc80 	bl	8002920 <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004024:	f7fe fc7c 	bl	8002920 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e045      	b.n	80040c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004036:	4b06      	ldr	r3, [pc, #24]	; (8004050 <HAL_RCC_OscConfig+0x470>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1f0      	bne.n	8004024 <HAL_RCC_OscConfig+0x444>
 8004042:	e03d      	b.n	80040c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d107      	bne.n	800405c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e038      	b.n	80040c2 <HAL_RCC_OscConfig+0x4e2>
 8004050:	40023800 	.word	0x40023800
 8004054:	40007000 	.word	0x40007000
 8004058:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800405c:	4b1b      	ldr	r3, [pc, #108]	; (80040cc <HAL_RCC_OscConfig+0x4ec>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d028      	beq.n	80040bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004074:	429a      	cmp	r2, r3
 8004076:	d121      	bne.n	80040bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004082:	429a      	cmp	r2, r3
 8004084:	d11a      	bne.n	80040bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800408c:	4013      	ands	r3, r2
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004092:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004094:	4293      	cmp	r3, r2
 8004096:	d111      	bne.n	80040bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a2:	085b      	lsrs	r3, r3, #1
 80040a4:	3b01      	subs	r3, #1
 80040a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d107      	bne.n	80040bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d001      	beq.n	80040c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e000      	b.n	80040c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3718      	adds	r7, #24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	40023800 	.word	0x40023800

080040d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e0cc      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040e4:	4b68      	ldr	r3, [pc, #416]	; (8004288 <HAL_RCC_ClockConfig+0x1b8>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d90c      	bls.n	800410c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040f2:	4b65      	ldr	r3, [pc, #404]	; (8004288 <HAL_RCC_ClockConfig+0x1b8>)
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	b2d2      	uxtb	r2, r2
 80040f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040fa:	4b63      	ldr	r3, [pc, #396]	; (8004288 <HAL_RCC_ClockConfig+0x1b8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0307 	and.w	r3, r3, #7
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	429a      	cmp	r2, r3
 8004106:	d001      	beq.n	800410c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e0b8      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d020      	beq.n	800415a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0304 	and.w	r3, r3, #4
 8004120:	2b00      	cmp	r3, #0
 8004122:	d005      	beq.n	8004130 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004124:	4b59      	ldr	r3, [pc, #356]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	4a58      	ldr	r2, [pc, #352]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 800412a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800412e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0308 	and.w	r3, r3, #8
 8004138:	2b00      	cmp	r3, #0
 800413a:	d005      	beq.n	8004148 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800413c:	4b53      	ldr	r3, [pc, #332]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	4a52      	ldr	r2, [pc, #328]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004142:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004146:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004148:	4b50      	ldr	r3, [pc, #320]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	494d      	ldr	r1, [pc, #308]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	4313      	orrs	r3, r2
 8004158:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d044      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d107      	bne.n	800417e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416e:	4b47      	ldr	r3, [pc, #284]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d119      	bne.n	80041ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e07f      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2b02      	cmp	r3, #2
 8004184:	d003      	beq.n	800418e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800418a:	2b03      	cmp	r3, #3
 800418c:	d107      	bne.n	800419e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800418e:	4b3f      	ldr	r3, [pc, #252]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d109      	bne.n	80041ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e06f      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800419e:	4b3b      	ldr	r3, [pc, #236]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e067      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041ae:	4b37      	ldr	r3, [pc, #220]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f023 0203 	bic.w	r2, r3, #3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	4934      	ldr	r1, [pc, #208]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041c0:	f7fe fbae 	bl	8002920 <HAL_GetTick>
 80041c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041c6:	e00a      	b.n	80041de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c8:	f7fe fbaa 	bl	8002920 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e04f      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041de:	4b2b      	ldr	r3, [pc, #172]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 020c 	and.w	r2, r3, #12
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d1eb      	bne.n	80041c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041f0:	4b25      	ldr	r3, [pc, #148]	; (8004288 <HAL_RCC_ClockConfig+0x1b8>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d20c      	bcs.n	8004218 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fe:	4b22      	ldr	r3, [pc, #136]	; (8004288 <HAL_RCC_ClockConfig+0x1b8>)
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004206:	4b20      	ldr	r3, [pc, #128]	; (8004288 <HAL_RCC_ClockConfig+0x1b8>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0307 	and.w	r3, r3, #7
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	429a      	cmp	r2, r3
 8004212:	d001      	beq.n	8004218 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e032      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b00      	cmp	r3, #0
 8004222:	d008      	beq.n	8004236 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004224:	4b19      	ldr	r3, [pc, #100]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	4916      	ldr	r1, [pc, #88]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004232:	4313      	orrs	r3, r2
 8004234:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0308 	and.w	r3, r3, #8
 800423e:	2b00      	cmp	r3, #0
 8004240:	d009      	beq.n	8004256 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004242:	4b12      	ldr	r3, [pc, #72]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	490e      	ldr	r1, [pc, #56]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	4313      	orrs	r3, r2
 8004254:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004256:	f000 f821 	bl	800429c <HAL_RCC_GetSysClockFreq>
 800425a:	4602      	mov	r2, r0
 800425c:	4b0b      	ldr	r3, [pc, #44]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	091b      	lsrs	r3, r3, #4
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	490a      	ldr	r1, [pc, #40]	; (8004290 <HAL_RCC_ClockConfig+0x1c0>)
 8004268:	5ccb      	ldrb	r3, [r1, r3]
 800426a:	fa22 f303 	lsr.w	r3, r2, r3
 800426e:	4a09      	ldr	r2, [pc, #36]	; (8004294 <HAL_RCC_ClockConfig+0x1c4>)
 8004270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004272:	4b09      	ldr	r3, [pc, #36]	; (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4618      	mov	r0, r3
 8004278:	f7fe fb0e 	bl	8002898 <HAL_InitTick>

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	40023c00 	.word	0x40023c00
 800428c:	40023800 	.word	0x40023800
 8004290:	08009320 	.word	0x08009320
 8004294:	20000004 	.word	0x20000004
 8004298:	20000008 	.word	0x20000008

0800429c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800429c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042a0:	b094      	sub	sp, #80	; 0x50
 80042a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	647b      	str	r3, [r7, #68]	; 0x44
 80042a8:	2300      	movs	r3, #0
 80042aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042ac:	2300      	movs	r3, #0
 80042ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80042b0:	2300      	movs	r3, #0
 80042b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042b4:	4b79      	ldr	r3, [pc, #484]	; (800449c <HAL_RCC_GetSysClockFreq+0x200>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f003 030c 	and.w	r3, r3, #12
 80042bc:	2b08      	cmp	r3, #8
 80042be:	d00d      	beq.n	80042dc <HAL_RCC_GetSysClockFreq+0x40>
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	f200 80e1 	bhi.w	8004488 <HAL_RCC_GetSysClockFreq+0x1ec>
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <HAL_RCC_GetSysClockFreq+0x34>
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	d003      	beq.n	80042d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80042ce:	e0db      	b.n	8004488 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042d0:	4b73      	ldr	r3, [pc, #460]	; (80044a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80042d2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80042d4:	e0db      	b.n	800448e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042d6:	4b73      	ldr	r3, [pc, #460]	; (80044a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80042d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042da:	e0d8      	b.n	800448e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042dc:	4b6f      	ldr	r3, [pc, #444]	; (800449c <HAL_RCC_GetSysClockFreq+0x200>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042e4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042e6:	4b6d      	ldr	r3, [pc, #436]	; (800449c <HAL_RCC_GetSysClockFreq+0x200>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d063      	beq.n	80043ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042f2:	4b6a      	ldr	r3, [pc, #424]	; (800449c <HAL_RCC_GetSysClockFreq+0x200>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	099b      	lsrs	r3, r3, #6
 80042f8:	2200      	movs	r2, #0
 80042fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80042fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80042fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004304:	633b      	str	r3, [r7, #48]	; 0x30
 8004306:	2300      	movs	r3, #0
 8004308:	637b      	str	r3, [r7, #52]	; 0x34
 800430a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800430e:	4622      	mov	r2, r4
 8004310:	462b      	mov	r3, r5
 8004312:	f04f 0000 	mov.w	r0, #0
 8004316:	f04f 0100 	mov.w	r1, #0
 800431a:	0159      	lsls	r1, r3, #5
 800431c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004320:	0150      	lsls	r0, r2, #5
 8004322:	4602      	mov	r2, r0
 8004324:	460b      	mov	r3, r1
 8004326:	4621      	mov	r1, r4
 8004328:	1a51      	subs	r1, r2, r1
 800432a:	6139      	str	r1, [r7, #16]
 800432c:	4629      	mov	r1, r5
 800432e:	eb63 0301 	sbc.w	r3, r3, r1
 8004332:	617b      	str	r3, [r7, #20]
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	f04f 0300 	mov.w	r3, #0
 800433c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004340:	4659      	mov	r1, fp
 8004342:	018b      	lsls	r3, r1, #6
 8004344:	4651      	mov	r1, sl
 8004346:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800434a:	4651      	mov	r1, sl
 800434c:	018a      	lsls	r2, r1, #6
 800434e:	4651      	mov	r1, sl
 8004350:	ebb2 0801 	subs.w	r8, r2, r1
 8004354:	4659      	mov	r1, fp
 8004356:	eb63 0901 	sbc.w	r9, r3, r1
 800435a:	f04f 0200 	mov.w	r2, #0
 800435e:	f04f 0300 	mov.w	r3, #0
 8004362:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004366:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800436a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800436e:	4690      	mov	r8, r2
 8004370:	4699      	mov	r9, r3
 8004372:	4623      	mov	r3, r4
 8004374:	eb18 0303 	adds.w	r3, r8, r3
 8004378:	60bb      	str	r3, [r7, #8]
 800437a:	462b      	mov	r3, r5
 800437c:	eb49 0303 	adc.w	r3, r9, r3
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	f04f 0200 	mov.w	r2, #0
 8004386:	f04f 0300 	mov.w	r3, #0
 800438a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800438e:	4629      	mov	r1, r5
 8004390:	024b      	lsls	r3, r1, #9
 8004392:	4621      	mov	r1, r4
 8004394:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004398:	4621      	mov	r1, r4
 800439a:	024a      	lsls	r2, r1, #9
 800439c:	4610      	mov	r0, r2
 800439e:	4619      	mov	r1, r3
 80043a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043a2:	2200      	movs	r2, #0
 80043a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80043a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043ac:	f7fc fc24 	bl	8000bf8 <__aeabi_uldivmod>
 80043b0:	4602      	mov	r2, r0
 80043b2:	460b      	mov	r3, r1
 80043b4:	4613      	mov	r3, r2
 80043b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043b8:	e058      	b.n	800446c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ba:	4b38      	ldr	r3, [pc, #224]	; (800449c <HAL_RCC_GetSysClockFreq+0x200>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	099b      	lsrs	r3, r3, #6
 80043c0:	2200      	movs	r2, #0
 80043c2:	4618      	mov	r0, r3
 80043c4:	4611      	mov	r1, r2
 80043c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043ca:	623b      	str	r3, [r7, #32]
 80043cc:	2300      	movs	r3, #0
 80043ce:	627b      	str	r3, [r7, #36]	; 0x24
 80043d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043d4:	4642      	mov	r2, r8
 80043d6:	464b      	mov	r3, r9
 80043d8:	f04f 0000 	mov.w	r0, #0
 80043dc:	f04f 0100 	mov.w	r1, #0
 80043e0:	0159      	lsls	r1, r3, #5
 80043e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043e6:	0150      	lsls	r0, r2, #5
 80043e8:	4602      	mov	r2, r0
 80043ea:	460b      	mov	r3, r1
 80043ec:	4641      	mov	r1, r8
 80043ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80043f2:	4649      	mov	r1, r9
 80043f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	f04f 0300 	mov.w	r3, #0
 8004400:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004404:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004408:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800440c:	ebb2 040a 	subs.w	r4, r2, sl
 8004410:	eb63 050b 	sbc.w	r5, r3, fp
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	f04f 0300 	mov.w	r3, #0
 800441c:	00eb      	lsls	r3, r5, #3
 800441e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004422:	00e2      	lsls	r2, r4, #3
 8004424:	4614      	mov	r4, r2
 8004426:	461d      	mov	r5, r3
 8004428:	4643      	mov	r3, r8
 800442a:	18e3      	adds	r3, r4, r3
 800442c:	603b      	str	r3, [r7, #0]
 800442e:	464b      	mov	r3, r9
 8004430:	eb45 0303 	adc.w	r3, r5, r3
 8004434:	607b      	str	r3, [r7, #4]
 8004436:	f04f 0200 	mov.w	r2, #0
 800443a:	f04f 0300 	mov.w	r3, #0
 800443e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004442:	4629      	mov	r1, r5
 8004444:	028b      	lsls	r3, r1, #10
 8004446:	4621      	mov	r1, r4
 8004448:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800444c:	4621      	mov	r1, r4
 800444e:	028a      	lsls	r2, r1, #10
 8004450:	4610      	mov	r0, r2
 8004452:	4619      	mov	r1, r3
 8004454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004456:	2200      	movs	r2, #0
 8004458:	61bb      	str	r3, [r7, #24]
 800445a:	61fa      	str	r2, [r7, #28]
 800445c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004460:	f7fc fbca 	bl	8000bf8 <__aeabi_uldivmod>
 8004464:	4602      	mov	r2, r0
 8004466:	460b      	mov	r3, r1
 8004468:	4613      	mov	r3, r2
 800446a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800446c:	4b0b      	ldr	r3, [pc, #44]	; (800449c <HAL_RCC_GetSysClockFreq+0x200>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	0c1b      	lsrs	r3, r3, #16
 8004472:	f003 0303 	and.w	r3, r3, #3
 8004476:	3301      	adds	r3, #1
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800447c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800447e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004480:	fbb2 f3f3 	udiv	r3, r2, r3
 8004484:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004486:	e002      	b.n	800448e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004488:	4b05      	ldr	r3, [pc, #20]	; (80044a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800448a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800448c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800448e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004490:	4618      	mov	r0, r3
 8004492:	3750      	adds	r7, #80	; 0x50
 8004494:	46bd      	mov	sp, r7
 8004496:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800449a:	bf00      	nop
 800449c:	40023800 	.word	0x40023800
 80044a0:	00f42400 	.word	0x00f42400
 80044a4:	007a1200 	.word	0x007a1200

080044a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044a8:	b480      	push	{r7}
 80044aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044ac:	4b03      	ldr	r3, [pc, #12]	; (80044bc <HAL_RCC_GetHCLKFreq+0x14>)
 80044ae:	681b      	ldr	r3, [r3, #0]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	20000004 	.word	0x20000004

080044c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044c4:	f7ff fff0 	bl	80044a8 <HAL_RCC_GetHCLKFreq>
 80044c8:	4602      	mov	r2, r0
 80044ca:	4b05      	ldr	r3, [pc, #20]	; (80044e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	0a9b      	lsrs	r3, r3, #10
 80044d0:	f003 0307 	and.w	r3, r3, #7
 80044d4:	4903      	ldr	r1, [pc, #12]	; (80044e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044d6:	5ccb      	ldrb	r3, [r1, r3]
 80044d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044dc:	4618      	mov	r0, r3
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	40023800 	.word	0x40023800
 80044e4:	08009330 	.word	0x08009330

080044e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044ec:	f7ff ffdc 	bl	80044a8 <HAL_RCC_GetHCLKFreq>
 80044f0:	4602      	mov	r2, r0
 80044f2:	4b05      	ldr	r3, [pc, #20]	; (8004508 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	0b5b      	lsrs	r3, r3, #13
 80044f8:	f003 0307 	and.w	r3, r3, #7
 80044fc:	4903      	ldr	r1, [pc, #12]	; (800450c <HAL_RCC_GetPCLK2Freq+0x24>)
 80044fe:	5ccb      	ldrb	r3, [r1, r3]
 8004500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004504:	4618      	mov	r0, r3
 8004506:	bd80      	pop	{r7, pc}
 8004508:	40023800 	.word	0x40023800
 800450c:	08009330 	.word	0x08009330

08004510 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e041      	b.n	80045a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d106      	bne.n	800453c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7fd ff1c 	bl	8002374 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	3304      	adds	r3, #4
 800454c:	4619      	mov	r1, r3
 800454e:	4610      	mov	r0, r2
 8004550:	f000 fb7e 	bl	8004c50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
	...

080045b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d001      	beq.n	80045c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e03c      	b.n	8004642 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a1e      	ldr	r2, [pc, #120]	; (8004650 <HAL_TIM_Base_Start+0xa0>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d018      	beq.n	800460c <HAL_TIM_Base_Start+0x5c>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e2:	d013      	beq.n	800460c <HAL_TIM_Base_Start+0x5c>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a1a      	ldr	r2, [pc, #104]	; (8004654 <HAL_TIM_Base_Start+0xa4>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d00e      	beq.n	800460c <HAL_TIM_Base_Start+0x5c>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a19      	ldr	r2, [pc, #100]	; (8004658 <HAL_TIM_Base_Start+0xa8>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d009      	beq.n	800460c <HAL_TIM_Base_Start+0x5c>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a17      	ldr	r2, [pc, #92]	; (800465c <HAL_TIM_Base_Start+0xac>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d004      	beq.n	800460c <HAL_TIM_Base_Start+0x5c>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a16      	ldr	r2, [pc, #88]	; (8004660 <HAL_TIM_Base_Start+0xb0>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d111      	bne.n	8004630 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f003 0307 	and.w	r3, r3, #7
 8004616:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2b06      	cmp	r3, #6
 800461c:	d010      	beq.n	8004640 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f042 0201 	orr.w	r2, r2, #1
 800462c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800462e:	e007      	b.n	8004640 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f042 0201 	orr.w	r2, r2, #1
 800463e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3714      	adds	r7, #20
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	40010000 	.word	0x40010000
 8004654:	40000400 	.word	0x40000400
 8004658:	40000800 	.word	0x40000800
 800465c:	40000c00 	.word	0x40000c00
 8004660:	40014000 	.word	0x40014000

08004664 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b01      	cmp	r3, #1
 8004676:	d001      	beq.n	800467c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e044      	b.n	8004706 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68da      	ldr	r2, [r3, #12]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0201 	orr.w	r2, r2, #1
 8004692:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a1e      	ldr	r2, [pc, #120]	; (8004714 <HAL_TIM_Base_Start_IT+0xb0>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d018      	beq.n	80046d0 <HAL_TIM_Base_Start_IT+0x6c>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046a6:	d013      	beq.n	80046d0 <HAL_TIM_Base_Start_IT+0x6c>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a1a      	ldr	r2, [pc, #104]	; (8004718 <HAL_TIM_Base_Start_IT+0xb4>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d00e      	beq.n	80046d0 <HAL_TIM_Base_Start_IT+0x6c>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a19      	ldr	r2, [pc, #100]	; (800471c <HAL_TIM_Base_Start_IT+0xb8>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d009      	beq.n	80046d0 <HAL_TIM_Base_Start_IT+0x6c>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a17      	ldr	r2, [pc, #92]	; (8004720 <HAL_TIM_Base_Start_IT+0xbc>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d004      	beq.n	80046d0 <HAL_TIM_Base_Start_IT+0x6c>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a16      	ldr	r2, [pc, #88]	; (8004724 <HAL_TIM_Base_Start_IT+0xc0>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d111      	bne.n	80046f4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2b06      	cmp	r3, #6
 80046e0:	d010      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f042 0201 	orr.w	r2, r2, #1
 80046f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046f2:	e007      	b.n	8004704 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f042 0201 	orr.w	r2, r2, #1
 8004702:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	40010000 	.word	0x40010000
 8004718:	40000400 	.word	0x40000400
 800471c:	40000800 	.word	0x40000800
 8004720:	40000c00 	.word	0x40000c00
 8004724:	40014000 	.word	0x40014000

08004728 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e041      	b.n	80047be <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d106      	bne.n	8004754 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f839 	bl	80047c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	3304      	adds	r3, #4
 8004764:	4619      	mov	r1, r3
 8004766:	4610      	mov	r0, r2
 8004768:	f000 fa72 	bl	8004c50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b083      	sub	sp, #12
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80047ce:	bf00      	nop
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
	...

080047dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d109      	bne.n	8004800 <HAL_TIM_PWM_Start+0x24>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	bf14      	ite	ne
 80047f8:	2301      	movne	r3, #1
 80047fa:	2300      	moveq	r3, #0
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	e022      	b.n	8004846 <HAL_TIM_PWM_Start+0x6a>
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	2b04      	cmp	r3, #4
 8004804:	d109      	bne.n	800481a <HAL_TIM_PWM_Start+0x3e>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b01      	cmp	r3, #1
 8004810:	bf14      	ite	ne
 8004812:	2301      	movne	r3, #1
 8004814:	2300      	moveq	r3, #0
 8004816:	b2db      	uxtb	r3, r3
 8004818:	e015      	b.n	8004846 <HAL_TIM_PWM_Start+0x6a>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b08      	cmp	r3, #8
 800481e:	d109      	bne.n	8004834 <HAL_TIM_PWM_Start+0x58>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b01      	cmp	r3, #1
 800482a:	bf14      	ite	ne
 800482c:	2301      	movne	r3, #1
 800482e:	2300      	moveq	r3, #0
 8004830:	b2db      	uxtb	r3, r3
 8004832:	e008      	b.n	8004846 <HAL_TIM_PWM_Start+0x6a>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b01      	cmp	r3, #1
 800483e:	bf14      	ite	ne
 8004840:	2301      	movne	r3, #1
 8004842:	2300      	moveq	r3, #0
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e068      	b.n	8004920 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d104      	bne.n	800485e <HAL_TIM_PWM_Start+0x82>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2202      	movs	r2, #2
 8004858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800485c:	e013      	b.n	8004886 <HAL_TIM_PWM_Start+0xaa>
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b04      	cmp	r3, #4
 8004862:	d104      	bne.n	800486e <HAL_TIM_PWM_Start+0x92>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2202      	movs	r2, #2
 8004868:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800486c:	e00b      	b.n	8004886 <HAL_TIM_PWM_Start+0xaa>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b08      	cmp	r3, #8
 8004872:	d104      	bne.n	800487e <HAL_TIM_PWM_Start+0xa2>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800487c:	e003      	b.n	8004886 <HAL_TIM_PWM_Start+0xaa>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2202      	movs	r2, #2
 8004882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2201      	movs	r2, #1
 800488c:	6839      	ldr	r1, [r7, #0]
 800488e:	4618      	mov	r0, r3
 8004890:	f000 fc84 	bl	800519c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a23      	ldr	r2, [pc, #140]	; (8004928 <HAL_TIM_PWM_Start+0x14c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d107      	bne.n	80048ae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a1d      	ldr	r2, [pc, #116]	; (8004928 <HAL_TIM_PWM_Start+0x14c>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d018      	beq.n	80048ea <HAL_TIM_PWM_Start+0x10e>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048c0:	d013      	beq.n	80048ea <HAL_TIM_PWM_Start+0x10e>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a19      	ldr	r2, [pc, #100]	; (800492c <HAL_TIM_PWM_Start+0x150>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d00e      	beq.n	80048ea <HAL_TIM_PWM_Start+0x10e>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a17      	ldr	r2, [pc, #92]	; (8004930 <HAL_TIM_PWM_Start+0x154>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d009      	beq.n	80048ea <HAL_TIM_PWM_Start+0x10e>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a16      	ldr	r2, [pc, #88]	; (8004934 <HAL_TIM_PWM_Start+0x158>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d004      	beq.n	80048ea <HAL_TIM_PWM_Start+0x10e>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a14      	ldr	r2, [pc, #80]	; (8004938 <HAL_TIM_PWM_Start+0x15c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d111      	bne.n	800490e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 0307 	and.w	r3, r3, #7
 80048f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2b06      	cmp	r3, #6
 80048fa:	d010      	beq.n	800491e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0201 	orr.w	r2, r2, #1
 800490a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800490c:	e007      	b.n	800491e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f042 0201 	orr.w	r2, r2, #1
 800491c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	40010000 	.word	0x40010000
 800492c:	40000400 	.word	0x40000400
 8004930:	40000800 	.word	0x40000800
 8004934:	40000c00 	.word	0x40000c00
 8004938:	40014000 	.word	0x40014000

0800493c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004948:	2300      	movs	r3, #0
 800494a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004952:	2b01      	cmp	r3, #1
 8004954:	d101      	bne.n	800495a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004956:	2302      	movs	r3, #2
 8004958:	e0ae      	b.n	8004ab8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2b0c      	cmp	r3, #12
 8004966:	f200 809f 	bhi.w	8004aa8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800496a:	a201      	add	r2, pc, #4	; (adr r2, 8004970 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800496c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004970:	080049a5 	.word	0x080049a5
 8004974:	08004aa9 	.word	0x08004aa9
 8004978:	08004aa9 	.word	0x08004aa9
 800497c:	08004aa9 	.word	0x08004aa9
 8004980:	080049e5 	.word	0x080049e5
 8004984:	08004aa9 	.word	0x08004aa9
 8004988:	08004aa9 	.word	0x08004aa9
 800498c:	08004aa9 	.word	0x08004aa9
 8004990:	08004a27 	.word	0x08004a27
 8004994:	08004aa9 	.word	0x08004aa9
 8004998:	08004aa9 	.word	0x08004aa9
 800499c:	08004aa9 	.word	0x08004aa9
 80049a0:	08004a67 	.word	0x08004a67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68b9      	ldr	r1, [r7, #8]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 f9d0 	bl	8004d50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	699a      	ldr	r2, [r3, #24]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f042 0208 	orr.w	r2, r2, #8
 80049be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	699a      	ldr	r2, [r3, #24]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 0204 	bic.w	r2, r2, #4
 80049ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6999      	ldr	r1, [r3, #24]
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	691a      	ldr	r2, [r3, #16]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	619a      	str	r2, [r3, #24]
      break;
 80049e2:	e064      	b.n	8004aae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68b9      	ldr	r1, [r7, #8]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 fa16 	bl	8004e1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	699a      	ldr	r2, [r3, #24]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	699a      	ldr	r2, [r3, #24]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6999      	ldr	r1, [r3, #24]
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	021a      	lsls	r2, r3, #8
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	619a      	str	r2, [r3, #24]
      break;
 8004a24:	e043      	b.n	8004aae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68b9      	ldr	r1, [r7, #8]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f000 fa61 	bl	8004ef4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	69da      	ldr	r2, [r3, #28]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f042 0208 	orr.w	r2, r2, #8
 8004a40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	69da      	ldr	r2, [r3, #28]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 0204 	bic.w	r2, r2, #4
 8004a50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	69d9      	ldr	r1, [r3, #28]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	691a      	ldr	r2, [r3, #16]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	61da      	str	r2, [r3, #28]
      break;
 8004a64:	e023      	b.n	8004aae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68b9      	ldr	r1, [r7, #8]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f000 faab 	bl	8004fc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	69da      	ldr	r2, [r3, #28]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	69da      	ldr	r2, [r3, #28]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	69d9      	ldr	r1, [r3, #28]
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	021a      	lsls	r2, r3, #8
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	61da      	str	r2, [r3, #28]
      break;
 8004aa6:	e002      	b.n	8004aae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	75fb      	strb	r3, [r7, #23]
      break;
 8004aac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3718      	adds	r7, #24
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aca:	2300      	movs	r3, #0
 8004acc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d101      	bne.n	8004adc <HAL_TIM_ConfigClockSource+0x1c>
 8004ad8:	2302      	movs	r3, #2
 8004ada:	e0b4      	b.n	8004c46 <HAL_TIM_ConfigClockSource+0x186>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004afa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b14:	d03e      	beq.n	8004b94 <HAL_TIM_ConfigClockSource+0xd4>
 8004b16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b1a:	f200 8087 	bhi.w	8004c2c <HAL_TIM_ConfigClockSource+0x16c>
 8004b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b22:	f000 8086 	beq.w	8004c32 <HAL_TIM_ConfigClockSource+0x172>
 8004b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b2a:	d87f      	bhi.n	8004c2c <HAL_TIM_ConfigClockSource+0x16c>
 8004b2c:	2b70      	cmp	r3, #112	; 0x70
 8004b2e:	d01a      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0xa6>
 8004b30:	2b70      	cmp	r3, #112	; 0x70
 8004b32:	d87b      	bhi.n	8004c2c <HAL_TIM_ConfigClockSource+0x16c>
 8004b34:	2b60      	cmp	r3, #96	; 0x60
 8004b36:	d050      	beq.n	8004bda <HAL_TIM_ConfigClockSource+0x11a>
 8004b38:	2b60      	cmp	r3, #96	; 0x60
 8004b3a:	d877      	bhi.n	8004c2c <HAL_TIM_ConfigClockSource+0x16c>
 8004b3c:	2b50      	cmp	r3, #80	; 0x50
 8004b3e:	d03c      	beq.n	8004bba <HAL_TIM_ConfigClockSource+0xfa>
 8004b40:	2b50      	cmp	r3, #80	; 0x50
 8004b42:	d873      	bhi.n	8004c2c <HAL_TIM_ConfigClockSource+0x16c>
 8004b44:	2b40      	cmp	r3, #64	; 0x40
 8004b46:	d058      	beq.n	8004bfa <HAL_TIM_ConfigClockSource+0x13a>
 8004b48:	2b40      	cmp	r3, #64	; 0x40
 8004b4a:	d86f      	bhi.n	8004c2c <HAL_TIM_ConfigClockSource+0x16c>
 8004b4c:	2b30      	cmp	r3, #48	; 0x30
 8004b4e:	d064      	beq.n	8004c1a <HAL_TIM_ConfigClockSource+0x15a>
 8004b50:	2b30      	cmp	r3, #48	; 0x30
 8004b52:	d86b      	bhi.n	8004c2c <HAL_TIM_ConfigClockSource+0x16c>
 8004b54:	2b20      	cmp	r3, #32
 8004b56:	d060      	beq.n	8004c1a <HAL_TIM_ConfigClockSource+0x15a>
 8004b58:	2b20      	cmp	r3, #32
 8004b5a:	d867      	bhi.n	8004c2c <HAL_TIM_ConfigClockSource+0x16c>
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d05c      	beq.n	8004c1a <HAL_TIM_ConfigClockSource+0x15a>
 8004b60:	2b10      	cmp	r3, #16
 8004b62:	d05a      	beq.n	8004c1a <HAL_TIM_ConfigClockSource+0x15a>
 8004b64:	e062      	b.n	8004c2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6818      	ldr	r0, [r3, #0]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	6899      	ldr	r1, [r3, #8]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	685a      	ldr	r2, [r3, #4]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	f000 faf1 	bl	800515c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	609a      	str	r2, [r3, #8]
      break;
 8004b92:	e04f      	b.n	8004c34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6818      	ldr	r0, [r3, #0]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	6899      	ldr	r1, [r3, #8]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f000 fada 	bl	800515c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689a      	ldr	r2, [r3, #8]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bb6:	609a      	str	r2, [r3, #8]
      break;
 8004bb8:	e03c      	b.n	8004c34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6818      	ldr	r0, [r3, #0]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	6859      	ldr	r1, [r3, #4]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	f000 fa4e 	bl	8005068 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2150      	movs	r1, #80	; 0x50
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 faa7 	bl	8005126 <TIM_ITRx_SetConfig>
      break;
 8004bd8:	e02c      	b.n	8004c34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6818      	ldr	r0, [r3, #0]
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	6859      	ldr	r1, [r3, #4]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	461a      	mov	r2, r3
 8004be8:	f000 fa6d 	bl	80050c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2160      	movs	r1, #96	; 0x60
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 fa97 	bl	8005126 <TIM_ITRx_SetConfig>
      break;
 8004bf8:	e01c      	b.n	8004c34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6818      	ldr	r0, [r3, #0]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	6859      	ldr	r1, [r3, #4]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	461a      	mov	r2, r3
 8004c08:	f000 fa2e 	bl	8005068 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2140      	movs	r1, #64	; 0x40
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 fa87 	bl	8005126 <TIM_ITRx_SetConfig>
      break;
 8004c18:	e00c      	b.n	8004c34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4619      	mov	r1, r3
 8004c24:	4610      	mov	r0, r2
 8004c26:	f000 fa7e 	bl	8005126 <TIM_ITRx_SetConfig>
      break;
 8004c2a:	e003      	b.n	8004c34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c30:	e000      	b.n	8004c34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
	...

08004c50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a34      	ldr	r2, [pc, #208]	; (8004d34 <TIM_Base_SetConfig+0xe4>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d00f      	beq.n	8004c88 <TIM_Base_SetConfig+0x38>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c6e:	d00b      	beq.n	8004c88 <TIM_Base_SetConfig+0x38>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a31      	ldr	r2, [pc, #196]	; (8004d38 <TIM_Base_SetConfig+0xe8>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d007      	beq.n	8004c88 <TIM_Base_SetConfig+0x38>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a30      	ldr	r2, [pc, #192]	; (8004d3c <TIM_Base_SetConfig+0xec>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d003      	beq.n	8004c88 <TIM_Base_SetConfig+0x38>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a2f      	ldr	r2, [pc, #188]	; (8004d40 <TIM_Base_SetConfig+0xf0>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d108      	bne.n	8004c9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a25      	ldr	r2, [pc, #148]	; (8004d34 <TIM_Base_SetConfig+0xe4>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d01b      	beq.n	8004cda <TIM_Base_SetConfig+0x8a>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca8:	d017      	beq.n	8004cda <TIM_Base_SetConfig+0x8a>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a22      	ldr	r2, [pc, #136]	; (8004d38 <TIM_Base_SetConfig+0xe8>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d013      	beq.n	8004cda <TIM_Base_SetConfig+0x8a>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a21      	ldr	r2, [pc, #132]	; (8004d3c <TIM_Base_SetConfig+0xec>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00f      	beq.n	8004cda <TIM_Base_SetConfig+0x8a>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a20      	ldr	r2, [pc, #128]	; (8004d40 <TIM_Base_SetConfig+0xf0>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d00b      	beq.n	8004cda <TIM_Base_SetConfig+0x8a>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a1f      	ldr	r2, [pc, #124]	; (8004d44 <TIM_Base_SetConfig+0xf4>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d007      	beq.n	8004cda <TIM_Base_SetConfig+0x8a>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a1e      	ldr	r2, [pc, #120]	; (8004d48 <TIM_Base_SetConfig+0xf8>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d003      	beq.n	8004cda <TIM_Base_SetConfig+0x8a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a1d      	ldr	r2, [pc, #116]	; (8004d4c <TIM_Base_SetConfig+0xfc>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d108      	bne.n	8004cec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	689a      	ldr	r2, [r3, #8]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a08      	ldr	r2, [pc, #32]	; (8004d34 <TIM_Base_SetConfig+0xe4>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d103      	bne.n	8004d20 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	691a      	ldr	r2, [r3, #16]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	615a      	str	r2, [r3, #20]
}
 8004d26:	bf00      	nop
 8004d28:	3714      	adds	r7, #20
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	40010000 	.word	0x40010000
 8004d38:	40000400 	.word	0x40000400
 8004d3c:	40000800 	.word	0x40000800
 8004d40:	40000c00 	.word	0x40000c00
 8004d44:	40014000 	.word	0x40014000
 8004d48:	40014400 	.word	0x40014400
 8004d4c:	40014800 	.word	0x40014800

08004d50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b087      	sub	sp, #28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	f023 0201 	bic.w	r2, r3, #1
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 0303 	bic.w	r3, r3, #3
 8004d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f023 0302 	bic.w	r3, r3, #2
 8004d98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a1c      	ldr	r2, [pc, #112]	; (8004e18 <TIM_OC1_SetConfig+0xc8>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d10c      	bne.n	8004dc6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f023 0308 	bic.w	r3, r3, #8
 8004db2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f023 0304 	bic.w	r3, r3, #4
 8004dc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a13      	ldr	r2, [pc, #76]	; (8004e18 <TIM_OC1_SetConfig+0xc8>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d111      	bne.n	8004df2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	621a      	str	r2, [r3, #32]
}
 8004e0c:	bf00      	nop
 8004e0e:	371c      	adds	r7, #28
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr
 8004e18:	40010000 	.word	0x40010000

08004e1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	f023 0210 	bic.w	r2, r3, #16
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	021b      	lsls	r3, r3, #8
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	f023 0320 	bic.w	r3, r3, #32
 8004e66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	011b      	lsls	r3, r3, #4
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a1e      	ldr	r2, [pc, #120]	; (8004ef0 <TIM_OC2_SetConfig+0xd4>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d10d      	bne.n	8004e98 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	011b      	lsls	r3, r3, #4
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a15      	ldr	r2, [pc, #84]	; (8004ef0 <TIM_OC2_SetConfig+0xd4>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d113      	bne.n	8004ec8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ea6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004eae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	621a      	str	r2, [r3, #32]
}
 8004ee2:	bf00      	nop
 8004ee4:	371c      	adds	r7, #28
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	40010000 	.word	0x40010000

08004ef4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b087      	sub	sp, #28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f023 0303 	bic.w	r3, r3, #3
 8004f2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	021b      	lsls	r3, r3, #8
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a1d      	ldr	r2, [pc, #116]	; (8004fc4 <TIM_OC3_SetConfig+0xd0>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d10d      	bne.n	8004f6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	021b      	lsls	r3, r3, #8
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a14      	ldr	r2, [pc, #80]	; (8004fc4 <TIM_OC3_SetConfig+0xd0>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d113      	bne.n	8004f9e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	011b      	lsls	r3, r3, #4
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	011b      	lsls	r3, r3, #4
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	685a      	ldr	r2, [r3, #4]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	621a      	str	r2, [r3, #32]
}
 8004fb8:	bf00      	nop
 8004fba:	371c      	adds	r7, #28
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	40010000 	.word	0x40010000

08004fc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b087      	sub	sp, #28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	021b      	lsls	r3, r3, #8
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	4313      	orrs	r3, r2
 800500a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005012:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	031b      	lsls	r3, r3, #12
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	4313      	orrs	r3, r2
 800501e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a10      	ldr	r2, [pc, #64]	; (8005064 <TIM_OC4_SetConfig+0x9c>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d109      	bne.n	800503c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800502e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	019b      	lsls	r3, r3, #6
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	4313      	orrs	r3, r2
 800503a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	621a      	str	r2, [r3, #32]
}
 8005056:	bf00      	nop
 8005058:	371c      	adds	r7, #28
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	40010000 	.word	0x40010000

08005068 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005068:	b480      	push	{r7}
 800506a:	b087      	sub	sp, #28
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6a1b      	ldr	r3, [r3, #32]
 8005078:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	f023 0201 	bic.w	r2, r3, #1
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005092:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	011b      	lsls	r3, r3, #4
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	4313      	orrs	r3, r2
 800509c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f023 030a 	bic.w	r3, r3, #10
 80050a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	621a      	str	r2, [r3, #32]
}
 80050ba:	bf00      	nop
 80050bc:	371c      	adds	r7, #28
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b087      	sub	sp, #28
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	60f8      	str	r0, [r7, #12]
 80050ce:	60b9      	str	r1, [r7, #8]
 80050d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	f023 0210 	bic.w	r2, r3, #16
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	031b      	lsls	r3, r3, #12
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005102:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	011b      	lsls	r3, r3, #4
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	4313      	orrs	r3, r2
 800510c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	621a      	str	r2, [r3, #32]
}
 800511a:	bf00      	nop
 800511c:	371c      	adds	r7, #28
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr

08005126 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005126:	b480      	push	{r7}
 8005128:	b085      	sub	sp, #20
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
 800512e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800513c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4313      	orrs	r3, r2
 8005144:	f043 0307 	orr.w	r3, r3, #7
 8005148:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	609a      	str	r2, [r3, #8]
}
 8005150:	bf00      	nop
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800515c:	b480      	push	{r7}
 800515e:	b087      	sub	sp, #28
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
 8005168:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005176:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	021a      	lsls	r2, r3, #8
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	431a      	orrs	r2, r3
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	4313      	orrs	r3, r2
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	4313      	orrs	r3, r2
 8005188:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	609a      	str	r2, [r3, #8]
}
 8005190:	bf00      	nop
 8005192:	371c      	adds	r7, #28
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800519c:	b480      	push	{r7}
 800519e:	b087      	sub	sp, #28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f003 031f 	and.w	r3, r3, #31
 80051ae:	2201      	movs	r2, #1
 80051b0:	fa02 f303 	lsl.w	r3, r2, r3
 80051b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6a1a      	ldr	r2, [r3, #32]
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	43db      	mvns	r3, r3
 80051be:	401a      	ands	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6a1a      	ldr	r2, [r3, #32]
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	f003 031f 	and.w	r3, r3, #31
 80051ce:	6879      	ldr	r1, [r7, #4]
 80051d0:	fa01 f303 	lsl.w	r3, r1, r3
 80051d4:	431a      	orrs	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	621a      	str	r2, [r3, #32]
}
 80051da:	bf00      	nop
 80051dc:	371c      	adds	r7, #28
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
	...

080051e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d101      	bne.n	8005200 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051fc:	2302      	movs	r3, #2
 80051fe:	e050      	b.n	80052a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005226:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	4313      	orrs	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a1c      	ldr	r2, [pc, #112]	; (80052b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d018      	beq.n	8005276 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800524c:	d013      	beq.n	8005276 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a18      	ldr	r2, [pc, #96]	; (80052b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d00e      	beq.n	8005276 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a16      	ldr	r2, [pc, #88]	; (80052b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d009      	beq.n	8005276 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a15      	ldr	r2, [pc, #84]	; (80052bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d004      	beq.n	8005276 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a13      	ldr	r2, [pc, #76]	; (80052c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d10c      	bne.n	8005290 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800527c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	4313      	orrs	r3, r2
 8005286:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3714      	adds	r7, #20
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	40010000 	.word	0x40010000
 80052b4:	40000400 	.word	0x40000400
 80052b8:	40000800 	.word	0x40000800
 80052bc:	40000c00 	.word	0x40000c00
 80052c0:	40014000 	.word	0x40014000

080052c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80052ce:	2300      	movs	r3, #0
 80052d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d101      	bne.n	80052e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80052dc:	2302      	movs	r3, #2
 80052de:	e03d      	b.n	800535c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	4313      	orrs	r3, r2
 8005302:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	4313      	orrs	r3, r2
 8005310:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4313      	orrs	r3, r2
 800531e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	4313      	orrs	r3, r2
 800532c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	4313      	orrs	r3, r2
 800533a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	4313      	orrs	r3, r2
 8005348:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3714      	adds	r7, #20
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e03f      	b.n	80053fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d106      	bne.n	8005394 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f7fd f860 	bl	8002454 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2224      	movs	r2, #36	; 0x24
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68da      	ldr	r2, [r3, #12]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 fea3 	bl	80060f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	691a      	ldr	r2, [r3, #16]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	695a      	ldr	r2, [r3, #20]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68da      	ldr	r2, [r3, #12]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2220      	movs	r2, #32
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2220      	movs	r2, #32
 80053f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005402:	b480      	push	{r7}
 8005404:	b085      	sub	sp, #20
 8005406:	af00      	add	r7, sp, #0
 8005408:	60f8      	str	r0, [r7, #12]
 800540a:	60b9      	str	r1, [r7, #8]
 800540c:	4613      	mov	r3, r2
 800540e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b20      	cmp	r3, #32
 800541a:	d130      	bne.n	800547e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d002      	beq.n	8005428 <HAL_UART_Transmit_IT+0x26>
 8005422:	88fb      	ldrh	r3, [r7, #6]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d101      	bne.n	800542c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e029      	b.n	8005480 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005432:	2b01      	cmp	r3, #1
 8005434:	d101      	bne.n	800543a <HAL_UART_Transmit_IT+0x38>
 8005436:	2302      	movs	r3, #2
 8005438:	e022      	b.n	8005480 <HAL_UART_Transmit_IT+0x7e>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	88fa      	ldrh	r2, [r7, #6]
 800544c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	88fa      	ldrh	r2, [r7, #6]
 8005452:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2221      	movs	r2, #33	; 0x21
 800545e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68da      	ldr	r2, [r3, #12]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005478:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800547a:	2300      	movs	r3, #0
 800547c:	e000      	b.n	8005480 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800547e:	2302      	movs	r3, #2
  }
}
 8005480:	4618      	mov	r0, r3
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	4613      	mov	r3, r2
 8005498:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b20      	cmp	r3, #32
 80054a4:	d11d      	bne.n	80054e2 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d002      	beq.n	80054b2 <HAL_UART_Receive_DMA+0x26>
 80054ac:	88fb      	ldrh	r3, [r7, #6]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e016      	b.n	80054e4 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d101      	bne.n	80054c4 <HAL_UART_Receive_DMA+0x38>
 80054c0:	2302      	movs	r3, #2
 80054c2:	e00f      	b.n	80054e4 <HAL_UART_Receive_DMA+0x58>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80054d2:	88fb      	ldrh	r3, [r7, #6]
 80054d4:	461a      	mov	r2, r3
 80054d6:	68b9      	ldr	r1, [r7, #8]
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f000 fbad 	bl	8005c38 <UART_Start_Receive_DMA>
 80054de:	4603      	mov	r3, r0
 80054e0:	e000      	b.n	80054e4 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80054e2:	2302      	movs	r3, #2
  }
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b0ba      	sub	sp, #232	; 0xe8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005512:	2300      	movs	r3, #0
 8005514:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005518:	2300      	movs	r3, #0
 800551a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800551e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005522:	f003 030f 	and.w	r3, r3, #15
 8005526:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800552a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10f      	bne.n	8005552 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005536:	f003 0320 	and.w	r3, r3, #32
 800553a:	2b00      	cmp	r3, #0
 800553c:	d009      	beq.n	8005552 <HAL_UART_IRQHandler+0x66>
 800553e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005542:	f003 0320 	and.w	r3, r3, #32
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fd19 	bl	8005f82 <UART_Receive_IT>
      return;
 8005550:	e256      	b.n	8005a00 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005552:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005556:	2b00      	cmp	r3, #0
 8005558:	f000 80de 	beq.w	8005718 <HAL_UART_IRQHandler+0x22c>
 800555c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b00      	cmp	r3, #0
 8005566:	d106      	bne.n	8005576 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800556c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 80d1 	beq.w	8005718 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00b      	beq.n	800559a <HAL_UART_IRQHandler+0xae>
 8005582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558a:	2b00      	cmp	r3, #0
 800558c:	d005      	beq.n	800559a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	f043 0201 	orr.w	r2, r3, #1
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800559a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800559e:	f003 0304 	and.w	r3, r3, #4
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00b      	beq.n	80055be <HAL_UART_IRQHandler+0xd2>
 80055a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d005      	beq.n	80055be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b6:	f043 0202 	orr.w	r2, r3, #2
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00b      	beq.n	80055e2 <HAL_UART_IRQHandler+0xf6>
 80055ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d005      	beq.n	80055e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055da:	f043 0204 	orr.w	r2, r3, #4
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80055e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055e6:	f003 0308 	and.w	r3, r3, #8
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d011      	beq.n	8005612 <HAL_UART_IRQHandler+0x126>
 80055ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055f2:	f003 0320 	and.w	r3, r3, #32
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d105      	bne.n	8005606 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80055fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	2b00      	cmp	r3, #0
 8005604:	d005      	beq.n	8005612 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560a:	f043 0208 	orr.w	r2, r3, #8
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 81ed 	beq.w	80059f6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800561c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005620:	f003 0320 	and.w	r3, r3, #32
 8005624:	2b00      	cmp	r3, #0
 8005626:	d008      	beq.n	800563a <HAL_UART_IRQHandler+0x14e>
 8005628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800562c:	f003 0320 	and.w	r3, r3, #32
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 fca4 	bl	8005f82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005644:	2b40      	cmp	r3, #64	; 0x40
 8005646:	bf0c      	ite	eq
 8005648:	2301      	moveq	r3, #1
 800564a:	2300      	movne	r3, #0
 800564c:	b2db      	uxtb	r3, r3
 800564e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005656:	f003 0308 	and.w	r3, r3, #8
 800565a:	2b00      	cmp	r3, #0
 800565c:	d103      	bne.n	8005666 <HAL_UART_IRQHandler+0x17a>
 800565e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005662:	2b00      	cmp	r3, #0
 8005664:	d04f      	beq.n	8005706 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 fbac 	bl	8005dc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005676:	2b40      	cmp	r3, #64	; 0x40
 8005678:	d141      	bne.n	80056fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	3314      	adds	r3, #20
 8005680:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005684:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005688:	e853 3f00 	ldrex	r3, [r3]
 800568c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005690:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005694:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005698:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3314      	adds	r3, #20
 80056a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80056a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80056aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80056b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80056b6:	e841 2300 	strex	r3, r2, [r1]
 80056ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80056be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1d9      	bne.n	800567a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d013      	beq.n	80056f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d2:	4a7d      	ldr	r2, [pc, #500]	; (80058c8 <HAL_UART_IRQHandler+0x3dc>)
 80056d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056da:	4618      	mov	r0, r3
 80056dc:	f7fd fe26 	bl	800332c <HAL_DMA_Abort_IT>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d016      	beq.n	8005714 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056f0:	4610      	mov	r0, r2
 80056f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f4:	e00e      	b.n	8005714 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f990 	bl	8005a1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056fc:	e00a      	b.n	8005714 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f98c 	bl	8005a1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005704:	e006      	b.n	8005714 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f988 	bl	8005a1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005712:	e170      	b.n	80059f6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005714:	bf00      	nop
    return;
 8005716:	e16e      	b.n	80059f6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571c:	2b01      	cmp	r3, #1
 800571e:	f040 814a 	bne.w	80059b6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005726:	f003 0310 	and.w	r3, r3, #16
 800572a:	2b00      	cmp	r3, #0
 800572c:	f000 8143 	beq.w	80059b6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005734:	f003 0310 	and.w	r3, r3, #16
 8005738:	2b00      	cmp	r3, #0
 800573a:	f000 813c 	beq.w	80059b6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800573e:	2300      	movs	r3, #0
 8005740:	60bb      	str	r3, [r7, #8]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	60bb      	str	r3, [r7, #8]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	60bb      	str	r3, [r7, #8]
 8005752:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800575e:	2b40      	cmp	r3, #64	; 0x40
 8005760:	f040 80b4 	bne.w	80058cc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005770:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 8140 	beq.w	80059fa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800577e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005782:	429a      	cmp	r2, r3
 8005784:	f080 8139 	bcs.w	80059fa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800578e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800579a:	f000 8088 	beq.w	80058ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	330c      	adds	r3, #12
 80057a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057ac:	e853 3f00 	ldrex	r3, [r3]
 80057b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80057b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	330c      	adds	r3, #12
 80057c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80057ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80057ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80057d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80057da:	e841 2300 	strex	r3, r2, [r1]
 80057de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80057e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1d9      	bne.n	800579e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	3314      	adds	r3, #20
 80057f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057f4:	e853 3f00 	ldrex	r3, [r3]
 80057f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80057fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057fc:	f023 0301 	bic.w	r3, r3, #1
 8005800:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	3314      	adds	r3, #20
 800580a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800580e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005812:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005814:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005816:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800581a:	e841 2300 	strex	r3, r2, [r1]
 800581e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005820:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1e1      	bne.n	80057ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	3314      	adds	r3, #20
 800582c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005830:	e853 3f00 	ldrex	r3, [r3]
 8005834:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005836:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005838:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800583c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	3314      	adds	r3, #20
 8005846:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800584a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800584c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005850:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005852:	e841 2300 	strex	r3, r2, [r1]
 8005856:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005858:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1e3      	bne.n	8005826 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2220      	movs	r2, #32
 8005862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	330c      	adds	r3, #12
 8005872:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005876:	e853 3f00 	ldrex	r3, [r3]
 800587a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800587c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800587e:	f023 0310 	bic.w	r3, r3, #16
 8005882:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	330c      	adds	r3, #12
 800588c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005890:	65ba      	str	r2, [r7, #88]	; 0x58
 8005892:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005894:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005896:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005898:	e841 2300 	strex	r3, r2, [r1]
 800589c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800589e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1e3      	bne.n	800586c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7fd fccf 	bl	800324c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	4619      	mov	r1, r3
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f8b6 	bl	8005a30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058c4:	e099      	b.n	80059fa <HAL_UART_IRQHandler+0x50e>
 80058c6:	bf00      	nop
 80058c8:	08005e8b 	.word	0x08005e8b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f000 808b 	beq.w	80059fe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80058e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 8086 	beq.w	80059fe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	330c      	adds	r3, #12
 80058f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fc:	e853 3f00 	ldrex	r3, [r3]
 8005900:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005904:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005908:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	330c      	adds	r3, #12
 8005912:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005916:	647a      	str	r2, [r7, #68]	; 0x44
 8005918:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800591c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800591e:	e841 2300 	strex	r3, r2, [r1]
 8005922:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1e3      	bne.n	80058f2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	3314      	adds	r3, #20
 8005930:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005934:	e853 3f00 	ldrex	r3, [r3]
 8005938:	623b      	str	r3, [r7, #32]
   return(result);
 800593a:	6a3b      	ldr	r3, [r7, #32]
 800593c:	f023 0301 	bic.w	r3, r3, #1
 8005940:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	3314      	adds	r3, #20
 800594a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800594e:	633a      	str	r2, [r7, #48]	; 0x30
 8005950:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005952:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005956:	e841 2300 	strex	r3, r2, [r1]
 800595a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800595c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1e3      	bne.n	800592a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2220      	movs	r2, #32
 8005966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	330c      	adds	r3, #12
 8005976:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	e853 3f00 	ldrex	r3, [r3]
 800597e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f023 0310 	bic.w	r3, r3, #16
 8005986:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	330c      	adds	r3, #12
 8005990:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005994:	61fa      	str	r2, [r7, #28]
 8005996:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005998:	69b9      	ldr	r1, [r7, #24]
 800599a:	69fa      	ldr	r2, [r7, #28]
 800599c:	e841 2300 	strex	r3, r2, [r1]
 80059a0:	617b      	str	r3, [r7, #20]
   return(result);
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1e3      	bne.n	8005970 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059ac:	4619      	mov	r1, r3
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f83e 	bl	8005a30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059b4:	e023      	b.n	80059fe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d009      	beq.n	80059d6 <HAL_UART_IRQHandler+0x4ea>
 80059c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fa6f 	bl	8005eb2 <UART_Transmit_IT>
    return;
 80059d4:	e014      	b.n	8005a00 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80059d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00e      	beq.n	8005a00 <HAL_UART_IRQHandler+0x514>
 80059e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d008      	beq.n	8005a00 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 faaf 	bl	8005f52 <UART_EndTransmit_IT>
    return;
 80059f4:	e004      	b.n	8005a00 <HAL_UART_IRQHandler+0x514>
    return;
 80059f6:	bf00      	nop
 80059f8:	e002      	b.n	8005a00 <HAL_UART_IRQHandler+0x514>
      return;
 80059fa:	bf00      	nop
 80059fc:	e000      	b.n	8005a00 <HAL_UART_IRQHandler+0x514>
      return;
 80059fe:	bf00      	nop
  }
}
 8005a00:	37e8      	adds	r7, #232	; 0xe8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop

08005a08 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	460b      	mov	r3, r1
 8005a3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b09c      	sub	sp, #112	; 0x70
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a54:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d172      	bne.n	8005b4a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005a64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a66:	2200      	movs	r2, #0
 8005a68:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	330c      	adds	r3, #12
 8005a70:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a74:	e853 3f00 	ldrex	r3, [r3]
 8005a78:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a80:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	330c      	adds	r3, #12
 8005a88:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005a8a:	65ba      	str	r2, [r7, #88]	; 0x58
 8005a8c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a92:	e841 2300 	strex	r3, r2, [r1]
 8005a96:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1e5      	bne.n	8005a6a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	3314      	adds	r3, #20
 8005aa4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa8:	e853 3f00 	ldrex	r3, [r3]
 8005aac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab0:	f023 0301 	bic.w	r3, r3, #1
 8005ab4:	667b      	str	r3, [r7, #100]	; 0x64
 8005ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	3314      	adds	r3, #20
 8005abc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005abe:	647a      	str	r2, [r7, #68]	; 0x44
 8005ac0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ac4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ac6:	e841 2300 	strex	r3, r2, [r1]
 8005aca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1e5      	bne.n	8005a9e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	3314      	adds	r3, #20
 8005ad8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	e853 3f00 	ldrex	r3, [r3]
 8005ae0:	623b      	str	r3, [r7, #32]
   return(result);
 8005ae2:	6a3b      	ldr	r3, [r7, #32]
 8005ae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ae8:	663b      	str	r3, [r7, #96]	; 0x60
 8005aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	3314      	adds	r3, #20
 8005af0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005af2:	633a      	str	r2, [r7, #48]	; 0x30
 8005af4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005af8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005afa:	e841 2300 	strex	r3, r2, [r1]
 8005afe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1e5      	bne.n	8005ad2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b08:	2220      	movs	r2, #32
 8005b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d119      	bne.n	8005b4a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	330c      	adds	r3, #12
 8005b1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	e853 3f00 	ldrex	r3, [r3]
 8005b24:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f023 0310 	bic.w	r3, r3, #16
 8005b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	330c      	adds	r3, #12
 8005b34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b36:	61fa      	str	r2, [r7, #28]
 8005b38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3a:	69b9      	ldr	r1, [r7, #24]
 8005b3c:	69fa      	ldr	r2, [r7, #28]
 8005b3e:	e841 2300 	strex	r3, r2, [r1]
 8005b42:	617b      	str	r3, [r7, #20]
   return(result);
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1e5      	bne.n	8005b16 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d106      	bne.n	8005b60 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b56:	4619      	mov	r1, r3
 8005b58:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005b5a:	f7ff ff69 	bl	8005a30 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b5e:	e002      	b.n	8005b66 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005b60:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005b62:	f7fb fe51 	bl	8001808 <HAL_UART_RxCpltCallback>
}
 8005b66:	bf00      	nop
 8005b68:	3770      	adds	r7, #112	; 0x70
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b084      	sub	sp, #16
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d108      	bne.n	8005b96 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b88:	085b      	lsrs	r3, r3, #1
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f7ff ff4e 	bl	8005a30 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b94:	e002      	b.n	8005b9c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f7ff ff36 	bl	8005a08 <HAL_UART_RxHalfCpltCallback>
}
 8005b9c:	bf00      	nop
 8005b9e:	3710      	adds	r7, #16
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005bac:	2300      	movs	r3, #0
 8005bae:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	695b      	ldr	r3, [r3, #20]
 8005bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc0:	2b80      	cmp	r3, #128	; 0x80
 8005bc2:	bf0c      	ite	eq
 8005bc4:	2301      	moveq	r3, #1
 8005bc6:	2300      	movne	r3, #0
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b21      	cmp	r3, #33	; 0x21
 8005bd6:	d108      	bne.n	8005bea <UART_DMAError+0x46>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d005      	beq.n	8005bea <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	2200      	movs	r2, #0
 8005be2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005be4:	68b8      	ldr	r0, [r7, #8]
 8005be6:	f000 f8c5 	bl	8005d74 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	695b      	ldr	r3, [r3, #20]
 8005bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf4:	2b40      	cmp	r3, #64	; 0x40
 8005bf6:	bf0c      	ite	eq
 8005bf8:	2301      	moveq	r3, #1
 8005bfa:	2300      	movne	r3, #0
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	2b22      	cmp	r3, #34	; 0x22
 8005c0a:	d108      	bne.n	8005c1e <UART_DMAError+0x7a>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d005      	beq.n	8005c1e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	2200      	movs	r2, #0
 8005c16:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005c18:	68b8      	ldr	r0, [r7, #8]
 8005c1a:	f000 f8d3 	bl	8005dc4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c22:	f043 0210 	orr.w	r2, r3, #16
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c2a:	68b8      	ldr	r0, [r7, #8]
 8005c2c:	f7ff fef6 	bl	8005a1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c30:	bf00      	nop
 8005c32:	3710      	adds	r7, #16
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b098      	sub	sp, #96	; 0x60
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	4613      	mov	r3, r2
 8005c44:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005c46:	68ba      	ldr	r2, [r7, #8]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	88fa      	ldrh	r2, [r7, #6]
 8005c50:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2222      	movs	r2, #34	; 0x22
 8005c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c64:	4a40      	ldr	r2, [pc, #256]	; (8005d68 <UART_Start_Receive_DMA+0x130>)
 8005c66:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6c:	4a3f      	ldr	r2, [pc, #252]	; (8005d6c <UART_Start_Receive_DMA+0x134>)
 8005c6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c74:	4a3e      	ldr	r2, [pc, #248]	; (8005d70 <UART_Start_Receive_DMA+0x138>)
 8005c76:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005c80:	f107 0308 	add.w	r3, r7, #8
 8005c84:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	3304      	adds	r3, #4
 8005c90:	4619      	mov	r1, r3
 8005c92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	88fb      	ldrh	r3, [r7, #6]
 8005c98:	f7fd fa80 	bl	800319c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	613b      	str	r3, [r7, #16]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	613b      	str	r3, [r7, #16]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	613b      	str	r3, [r7, #16]
 8005cb0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d019      	beq.n	8005cf6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	330c      	adds	r3, #12
 8005cc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ccc:	e853 3f00 	ldrex	r3, [r3]
 8005cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cd8:	65bb      	str	r3, [r7, #88]	; 0x58
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	330c      	adds	r3, #12
 8005ce0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ce2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005ce4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005ce8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005cea:	e841 2300 	strex	r3, r2, [r1]
 8005cee:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1e5      	bne.n	8005cc2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	3314      	adds	r3, #20
 8005cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d00:	e853 3f00 	ldrex	r3, [r3]
 8005d04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d08:	f043 0301 	orr.w	r3, r3, #1
 8005d0c:	657b      	str	r3, [r7, #84]	; 0x54
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	3314      	adds	r3, #20
 8005d14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005d16:	63ba      	str	r2, [r7, #56]	; 0x38
 8005d18:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005d1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d1e:	e841 2300 	strex	r3, r2, [r1]
 8005d22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1e5      	bne.n	8005cf6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	3314      	adds	r3, #20
 8005d30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	e853 3f00 	ldrex	r3, [r3]
 8005d38:	617b      	str	r3, [r7, #20]
   return(result);
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d40:	653b      	str	r3, [r7, #80]	; 0x50
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	3314      	adds	r3, #20
 8005d48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005d4a:	627a      	str	r2, [r7, #36]	; 0x24
 8005d4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4e:	6a39      	ldr	r1, [r7, #32]
 8005d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d52:	e841 2300 	strex	r3, r2, [r1]
 8005d56:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1e5      	bne.n	8005d2a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3760      	adds	r7, #96	; 0x60
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	08005a49 	.word	0x08005a49
 8005d6c:	08005b6f 	.word	0x08005b6f
 8005d70:	08005ba5 	.word	0x08005ba5

08005d74 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b089      	sub	sp, #36	; 0x24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	330c      	adds	r3, #12
 8005d82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	e853 3f00 	ldrex	r3, [r3]
 8005d8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005d92:	61fb      	str	r3, [r7, #28]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	330c      	adds	r3, #12
 8005d9a:	69fa      	ldr	r2, [r7, #28]
 8005d9c:	61ba      	str	r2, [r7, #24]
 8005d9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da0:	6979      	ldr	r1, [r7, #20]
 8005da2:	69ba      	ldr	r2, [r7, #24]
 8005da4:	e841 2300 	strex	r3, r2, [r1]
 8005da8:	613b      	str	r3, [r7, #16]
   return(result);
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d1e5      	bne.n	8005d7c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2220      	movs	r2, #32
 8005db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005db8:	bf00      	nop
 8005dba:	3724      	adds	r7, #36	; 0x24
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b095      	sub	sp, #84	; 0x54
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	330c      	adds	r3, #12
 8005dd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd6:	e853 3f00 	ldrex	r3, [r3]
 8005dda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	330c      	adds	r3, #12
 8005dea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005dec:	643a      	str	r2, [r7, #64]	; 0x40
 8005dee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005df2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005df4:	e841 2300 	strex	r3, r2, [r1]
 8005df8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1e5      	bne.n	8005dcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	3314      	adds	r3, #20
 8005e06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e08:	6a3b      	ldr	r3, [r7, #32]
 8005e0a:	e853 3f00 	ldrex	r3, [r3]
 8005e0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	f023 0301 	bic.w	r3, r3, #1
 8005e16:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	3314      	adds	r3, #20
 8005e1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e28:	e841 2300 	strex	r3, r2, [r1]
 8005e2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1e5      	bne.n	8005e00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d119      	bne.n	8005e70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	330c      	adds	r3, #12
 8005e42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	e853 3f00 	ldrex	r3, [r3]
 8005e4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	f023 0310 	bic.w	r3, r3, #16
 8005e52:	647b      	str	r3, [r7, #68]	; 0x44
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	330c      	adds	r3, #12
 8005e5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e5c:	61ba      	str	r2, [r7, #24]
 8005e5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e60:	6979      	ldr	r1, [r7, #20]
 8005e62:	69ba      	ldr	r2, [r7, #24]
 8005e64:	e841 2300 	strex	r3, r2, [r1]
 8005e68:	613b      	str	r3, [r7, #16]
   return(result);
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1e5      	bne.n	8005e3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2220      	movs	r2, #32
 8005e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005e7e:	bf00      	nop
 8005e80:	3754      	adds	r7, #84	; 0x54
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b084      	sub	sp, #16
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f7ff fdb9 	bl	8005a1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005eaa:	bf00      	nop
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b085      	sub	sp, #20
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	2b21      	cmp	r3, #33	; 0x21
 8005ec4:	d13e      	bne.n	8005f44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ece:	d114      	bne.n	8005efa <UART_Transmit_IT+0x48>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d110      	bne.n	8005efa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a1b      	ldr	r3, [r3, #32]
 8005edc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	881b      	ldrh	r3, [r3, #0]
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005eec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	1c9a      	adds	r2, r3, #2
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	621a      	str	r2, [r3, #32]
 8005ef8:	e008      	b.n	8005f0c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	1c59      	adds	r1, r3, #1
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	6211      	str	r1, [r2, #32]
 8005f04:	781a      	ldrb	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	3b01      	subs	r3, #1
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	4619      	mov	r1, r3
 8005f1a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10f      	bne.n	8005f40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68da      	ldr	r2, [r3, #12]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f40:	2300      	movs	r3, #0
 8005f42:	e000      	b.n	8005f46 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f44:	2302      	movs	r3, #2
  }
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b082      	sub	sp, #8
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68da      	ldr	r2, [r3, #12]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f7fb fc5c 	bl	8001830 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b08c      	sub	sp, #48	; 0x30
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b22      	cmp	r3, #34	; 0x22
 8005f94:	f040 80ab 	bne.w	80060ee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fa0:	d117      	bne.n	8005fd2 <UART_Receive_IT+0x50>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d113      	bne.n	8005fd2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005faa:	2300      	movs	r3, #0
 8005fac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fca:	1c9a      	adds	r2, r3, #2
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	629a      	str	r2, [r3, #40]	; 0x28
 8005fd0:	e026      	b.n	8006020 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fe4:	d007      	beq.n	8005ff6 <UART_Receive_IT+0x74>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10a      	bne.n	8006004 <UART_Receive_IT+0x82>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d106      	bne.n	8006004 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	b2da      	uxtb	r2, r3
 8005ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006000:	701a      	strb	r2, [r3, #0]
 8006002:	e008      	b.n	8006016 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	b2db      	uxtb	r3, r3
 800600c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006010:	b2da      	uxtb	r2, r3
 8006012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006014:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601a:	1c5a      	adds	r2, r3, #1
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006024:	b29b      	uxth	r3, r3
 8006026:	3b01      	subs	r3, #1
 8006028:	b29b      	uxth	r3, r3
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	4619      	mov	r1, r3
 800602e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006030:	2b00      	cmp	r3, #0
 8006032:	d15a      	bne.n	80060ea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68da      	ldr	r2, [r3, #12]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f022 0220 	bic.w	r2, r2, #32
 8006042:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68da      	ldr	r2, [r3, #12]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006052:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	695a      	ldr	r2, [r3, #20]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f022 0201 	bic.w	r2, r2, #1
 8006062:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2220      	movs	r2, #32
 8006068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006070:	2b01      	cmp	r3, #1
 8006072:	d135      	bne.n	80060e0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	330c      	adds	r3, #12
 8006080:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	e853 3f00 	ldrex	r3, [r3]
 8006088:	613b      	str	r3, [r7, #16]
   return(result);
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	f023 0310 	bic.w	r3, r3, #16
 8006090:	627b      	str	r3, [r7, #36]	; 0x24
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	330c      	adds	r3, #12
 8006098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800609a:	623a      	str	r2, [r7, #32]
 800609c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609e:	69f9      	ldr	r1, [r7, #28]
 80060a0:	6a3a      	ldr	r2, [r7, #32]
 80060a2:	e841 2300 	strex	r3, r2, [r1]
 80060a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1e5      	bne.n	800607a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0310 	and.w	r3, r3, #16
 80060b8:	2b10      	cmp	r3, #16
 80060ba:	d10a      	bne.n	80060d2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060bc:	2300      	movs	r3, #0
 80060be:	60fb      	str	r3, [r7, #12]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	60fb      	str	r3, [r7, #12]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060d6:	4619      	mov	r1, r3
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f7ff fca9 	bl	8005a30 <HAL_UARTEx_RxEventCallback>
 80060de:	e002      	b.n	80060e6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f7fb fb91 	bl	8001808 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80060e6:	2300      	movs	r3, #0
 80060e8:	e002      	b.n	80060f0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80060ea:	2300      	movs	r3, #0
 80060ec:	e000      	b.n	80060f0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80060ee:	2302      	movs	r3, #2
  }
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3730      	adds	r7, #48	; 0x30
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060fc:	b0c0      	sub	sp, #256	; 0x100
 80060fe:	af00      	add	r7, sp, #0
 8006100:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006114:	68d9      	ldr	r1, [r3, #12]
 8006116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	ea40 0301 	orr.w	r3, r0, r1
 8006120:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006126:	689a      	ldr	r2, [r3, #8]
 8006128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	431a      	orrs	r2, r3
 8006130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	431a      	orrs	r2, r3
 8006138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	4313      	orrs	r3, r2
 8006140:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006150:	f021 010c 	bic.w	r1, r1, #12
 8006154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800615e:	430b      	orrs	r3, r1
 8006160:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800616e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006172:	6999      	ldr	r1, [r3, #24]
 8006174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	ea40 0301 	orr.w	r3, r0, r1
 800617e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	4b8f      	ldr	r3, [pc, #572]	; (80063c4 <UART_SetConfig+0x2cc>)
 8006188:	429a      	cmp	r2, r3
 800618a:	d005      	beq.n	8006198 <UART_SetConfig+0xa0>
 800618c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	4b8d      	ldr	r3, [pc, #564]	; (80063c8 <UART_SetConfig+0x2d0>)
 8006194:	429a      	cmp	r2, r3
 8006196:	d104      	bne.n	80061a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006198:	f7fe f9a6 	bl	80044e8 <HAL_RCC_GetPCLK2Freq>
 800619c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80061a0:	e003      	b.n	80061aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061a2:	f7fe f98d 	bl	80044c0 <HAL_RCC_GetPCLK1Freq>
 80061a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ae:	69db      	ldr	r3, [r3, #28]
 80061b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061b4:	f040 810c 	bne.w	80063d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061bc:	2200      	movs	r2, #0
 80061be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80061c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80061c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80061ca:	4622      	mov	r2, r4
 80061cc:	462b      	mov	r3, r5
 80061ce:	1891      	adds	r1, r2, r2
 80061d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80061d2:	415b      	adcs	r3, r3
 80061d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80061da:	4621      	mov	r1, r4
 80061dc:	eb12 0801 	adds.w	r8, r2, r1
 80061e0:	4629      	mov	r1, r5
 80061e2:	eb43 0901 	adc.w	r9, r3, r1
 80061e6:	f04f 0200 	mov.w	r2, #0
 80061ea:	f04f 0300 	mov.w	r3, #0
 80061ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061fa:	4690      	mov	r8, r2
 80061fc:	4699      	mov	r9, r3
 80061fe:	4623      	mov	r3, r4
 8006200:	eb18 0303 	adds.w	r3, r8, r3
 8006204:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006208:	462b      	mov	r3, r5
 800620a:	eb49 0303 	adc.w	r3, r9, r3
 800620e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800621e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006222:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006226:	460b      	mov	r3, r1
 8006228:	18db      	adds	r3, r3, r3
 800622a:	653b      	str	r3, [r7, #80]	; 0x50
 800622c:	4613      	mov	r3, r2
 800622e:	eb42 0303 	adc.w	r3, r2, r3
 8006232:	657b      	str	r3, [r7, #84]	; 0x54
 8006234:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006238:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800623c:	f7fa fcdc 	bl	8000bf8 <__aeabi_uldivmod>
 8006240:	4602      	mov	r2, r0
 8006242:	460b      	mov	r3, r1
 8006244:	4b61      	ldr	r3, [pc, #388]	; (80063cc <UART_SetConfig+0x2d4>)
 8006246:	fba3 2302 	umull	r2, r3, r3, r2
 800624a:	095b      	lsrs	r3, r3, #5
 800624c:	011c      	lsls	r4, r3, #4
 800624e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006252:	2200      	movs	r2, #0
 8006254:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006258:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800625c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006260:	4642      	mov	r2, r8
 8006262:	464b      	mov	r3, r9
 8006264:	1891      	adds	r1, r2, r2
 8006266:	64b9      	str	r1, [r7, #72]	; 0x48
 8006268:	415b      	adcs	r3, r3
 800626a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800626c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006270:	4641      	mov	r1, r8
 8006272:	eb12 0a01 	adds.w	sl, r2, r1
 8006276:	4649      	mov	r1, r9
 8006278:	eb43 0b01 	adc.w	fp, r3, r1
 800627c:	f04f 0200 	mov.w	r2, #0
 8006280:	f04f 0300 	mov.w	r3, #0
 8006284:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006288:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800628c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006290:	4692      	mov	sl, r2
 8006292:	469b      	mov	fp, r3
 8006294:	4643      	mov	r3, r8
 8006296:	eb1a 0303 	adds.w	r3, sl, r3
 800629a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800629e:	464b      	mov	r3, r9
 80062a0:	eb4b 0303 	adc.w	r3, fp, r3
 80062a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80062a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80062b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80062bc:	460b      	mov	r3, r1
 80062be:	18db      	adds	r3, r3, r3
 80062c0:	643b      	str	r3, [r7, #64]	; 0x40
 80062c2:	4613      	mov	r3, r2
 80062c4:	eb42 0303 	adc.w	r3, r2, r3
 80062c8:	647b      	str	r3, [r7, #68]	; 0x44
 80062ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80062ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80062d2:	f7fa fc91 	bl	8000bf8 <__aeabi_uldivmod>
 80062d6:	4602      	mov	r2, r0
 80062d8:	460b      	mov	r3, r1
 80062da:	4611      	mov	r1, r2
 80062dc:	4b3b      	ldr	r3, [pc, #236]	; (80063cc <UART_SetConfig+0x2d4>)
 80062de:	fba3 2301 	umull	r2, r3, r3, r1
 80062e2:	095b      	lsrs	r3, r3, #5
 80062e4:	2264      	movs	r2, #100	; 0x64
 80062e6:	fb02 f303 	mul.w	r3, r2, r3
 80062ea:	1acb      	subs	r3, r1, r3
 80062ec:	00db      	lsls	r3, r3, #3
 80062ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80062f2:	4b36      	ldr	r3, [pc, #216]	; (80063cc <UART_SetConfig+0x2d4>)
 80062f4:	fba3 2302 	umull	r2, r3, r3, r2
 80062f8:	095b      	lsrs	r3, r3, #5
 80062fa:	005b      	lsls	r3, r3, #1
 80062fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006300:	441c      	add	r4, r3
 8006302:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006306:	2200      	movs	r2, #0
 8006308:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800630c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006310:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006314:	4642      	mov	r2, r8
 8006316:	464b      	mov	r3, r9
 8006318:	1891      	adds	r1, r2, r2
 800631a:	63b9      	str	r1, [r7, #56]	; 0x38
 800631c:	415b      	adcs	r3, r3
 800631e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006320:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006324:	4641      	mov	r1, r8
 8006326:	1851      	adds	r1, r2, r1
 8006328:	6339      	str	r1, [r7, #48]	; 0x30
 800632a:	4649      	mov	r1, r9
 800632c:	414b      	adcs	r3, r1
 800632e:	637b      	str	r3, [r7, #52]	; 0x34
 8006330:	f04f 0200 	mov.w	r2, #0
 8006334:	f04f 0300 	mov.w	r3, #0
 8006338:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800633c:	4659      	mov	r1, fp
 800633e:	00cb      	lsls	r3, r1, #3
 8006340:	4651      	mov	r1, sl
 8006342:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006346:	4651      	mov	r1, sl
 8006348:	00ca      	lsls	r2, r1, #3
 800634a:	4610      	mov	r0, r2
 800634c:	4619      	mov	r1, r3
 800634e:	4603      	mov	r3, r0
 8006350:	4642      	mov	r2, r8
 8006352:	189b      	adds	r3, r3, r2
 8006354:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006358:	464b      	mov	r3, r9
 800635a:	460a      	mov	r2, r1
 800635c:	eb42 0303 	adc.w	r3, r2, r3
 8006360:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006370:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006374:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006378:	460b      	mov	r3, r1
 800637a:	18db      	adds	r3, r3, r3
 800637c:	62bb      	str	r3, [r7, #40]	; 0x28
 800637e:	4613      	mov	r3, r2
 8006380:	eb42 0303 	adc.w	r3, r2, r3
 8006384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006386:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800638a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800638e:	f7fa fc33 	bl	8000bf8 <__aeabi_uldivmod>
 8006392:	4602      	mov	r2, r0
 8006394:	460b      	mov	r3, r1
 8006396:	4b0d      	ldr	r3, [pc, #52]	; (80063cc <UART_SetConfig+0x2d4>)
 8006398:	fba3 1302 	umull	r1, r3, r3, r2
 800639c:	095b      	lsrs	r3, r3, #5
 800639e:	2164      	movs	r1, #100	; 0x64
 80063a0:	fb01 f303 	mul.w	r3, r1, r3
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	3332      	adds	r3, #50	; 0x32
 80063aa:	4a08      	ldr	r2, [pc, #32]	; (80063cc <UART_SetConfig+0x2d4>)
 80063ac:	fba2 2303 	umull	r2, r3, r2, r3
 80063b0:	095b      	lsrs	r3, r3, #5
 80063b2:	f003 0207 	and.w	r2, r3, #7
 80063b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4422      	add	r2, r4
 80063be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80063c0:	e106      	b.n	80065d0 <UART_SetConfig+0x4d8>
 80063c2:	bf00      	nop
 80063c4:	40011000 	.word	0x40011000
 80063c8:	40011400 	.word	0x40011400
 80063cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063d4:	2200      	movs	r2, #0
 80063d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80063da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80063de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80063e2:	4642      	mov	r2, r8
 80063e4:	464b      	mov	r3, r9
 80063e6:	1891      	adds	r1, r2, r2
 80063e8:	6239      	str	r1, [r7, #32]
 80063ea:	415b      	adcs	r3, r3
 80063ec:	627b      	str	r3, [r7, #36]	; 0x24
 80063ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063f2:	4641      	mov	r1, r8
 80063f4:	1854      	adds	r4, r2, r1
 80063f6:	4649      	mov	r1, r9
 80063f8:	eb43 0501 	adc.w	r5, r3, r1
 80063fc:	f04f 0200 	mov.w	r2, #0
 8006400:	f04f 0300 	mov.w	r3, #0
 8006404:	00eb      	lsls	r3, r5, #3
 8006406:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800640a:	00e2      	lsls	r2, r4, #3
 800640c:	4614      	mov	r4, r2
 800640e:	461d      	mov	r5, r3
 8006410:	4643      	mov	r3, r8
 8006412:	18e3      	adds	r3, r4, r3
 8006414:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006418:	464b      	mov	r3, r9
 800641a:	eb45 0303 	adc.w	r3, r5, r3
 800641e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800642e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006432:	f04f 0200 	mov.w	r2, #0
 8006436:	f04f 0300 	mov.w	r3, #0
 800643a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800643e:	4629      	mov	r1, r5
 8006440:	008b      	lsls	r3, r1, #2
 8006442:	4621      	mov	r1, r4
 8006444:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006448:	4621      	mov	r1, r4
 800644a:	008a      	lsls	r2, r1, #2
 800644c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006450:	f7fa fbd2 	bl	8000bf8 <__aeabi_uldivmod>
 8006454:	4602      	mov	r2, r0
 8006456:	460b      	mov	r3, r1
 8006458:	4b60      	ldr	r3, [pc, #384]	; (80065dc <UART_SetConfig+0x4e4>)
 800645a:	fba3 2302 	umull	r2, r3, r3, r2
 800645e:	095b      	lsrs	r3, r3, #5
 8006460:	011c      	lsls	r4, r3, #4
 8006462:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006466:	2200      	movs	r2, #0
 8006468:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800646c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006470:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006474:	4642      	mov	r2, r8
 8006476:	464b      	mov	r3, r9
 8006478:	1891      	adds	r1, r2, r2
 800647a:	61b9      	str	r1, [r7, #24]
 800647c:	415b      	adcs	r3, r3
 800647e:	61fb      	str	r3, [r7, #28]
 8006480:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006484:	4641      	mov	r1, r8
 8006486:	1851      	adds	r1, r2, r1
 8006488:	6139      	str	r1, [r7, #16]
 800648a:	4649      	mov	r1, r9
 800648c:	414b      	adcs	r3, r1
 800648e:	617b      	str	r3, [r7, #20]
 8006490:	f04f 0200 	mov.w	r2, #0
 8006494:	f04f 0300 	mov.w	r3, #0
 8006498:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800649c:	4659      	mov	r1, fp
 800649e:	00cb      	lsls	r3, r1, #3
 80064a0:	4651      	mov	r1, sl
 80064a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064a6:	4651      	mov	r1, sl
 80064a8:	00ca      	lsls	r2, r1, #3
 80064aa:	4610      	mov	r0, r2
 80064ac:	4619      	mov	r1, r3
 80064ae:	4603      	mov	r3, r0
 80064b0:	4642      	mov	r2, r8
 80064b2:	189b      	adds	r3, r3, r2
 80064b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80064b8:	464b      	mov	r3, r9
 80064ba:	460a      	mov	r2, r1
 80064bc:	eb42 0303 	adc.w	r3, r2, r3
 80064c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80064c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80064ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80064d0:	f04f 0200 	mov.w	r2, #0
 80064d4:	f04f 0300 	mov.w	r3, #0
 80064d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80064dc:	4649      	mov	r1, r9
 80064de:	008b      	lsls	r3, r1, #2
 80064e0:	4641      	mov	r1, r8
 80064e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064e6:	4641      	mov	r1, r8
 80064e8:	008a      	lsls	r2, r1, #2
 80064ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80064ee:	f7fa fb83 	bl	8000bf8 <__aeabi_uldivmod>
 80064f2:	4602      	mov	r2, r0
 80064f4:	460b      	mov	r3, r1
 80064f6:	4611      	mov	r1, r2
 80064f8:	4b38      	ldr	r3, [pc, #224]	; (80065dc <UART_SetConfig+0x4e4>)
 80064fa:	fba3 2301 	umull	r2, r3, r3, r1
 80064fe:	095b      	lsrs	r3, r3, #5
 8006500:	2264      	movs	r2, #100	; 0x64
 8006502:	fb02 f303 	mul.w	r3, r2, r3
 8006506:	1acb      	subs	r3, r1, r3
 8006508:	011b      	lsls	r3, r3, #4
 800650a:	3332      	adds	r3, #50	; 0x32
 800650c:	4a33      	ldr	r2, [pc, #204]	; (80065dc <UART_SetConfig+0x4e4>)
 800650e:	fba2 2303 	umull	r2, r3, r2, r3
 8006512:	095b      	lsrs	r3, r3, #5
 8006514:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006518:	441c      	add	r4, r3
 800651a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800651e:	2200      	movs	r2, #0
 8006520:	673b      	str	r3, [r7, #112]	; 0x70
 8006522:	677a      	str	r2, [r7, #116]	; 0x74
 8006524:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006528:	4642      	mov	r2, r8
 800652a:	464b      	mov	r3, r9
 800652c:	1891      	adds	r1, r2, r2
 800652e:	60b9      	str	r1, [r7, #8]
 8006530:	415b      	adcs	r3, r3
 8006532:	60fb      	str	r3, [r7, #12]
 8006534:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006538:	4641      	mov	r1, r8
 800653a:	1851      	adds	r1, r2, r1
 800653c:	6039      	str	r1, [r7, #0]
 800653e:	4649      	mov	r1, r9
 8006540:	414b      	adcs	r3, r1
 8006542:	607b      	str	r3, [r7, #4]
 8006544:	f04f 0200 	mov.w	r2, #0
 8006548:	f04f 0300 	mov.w	r3, #0
 800654c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006550:	4659      	mov	r1, fp
 8006552:	00cb      	lsls	r3, r1, #3
 8006554:	4651      	mov	r1, sl
 8006556:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800655a:	4651      	mov	r1, sl
 800655c:	00ca      	lsls	r2, r1, #3
 800655e:	4610      	mov	r0, r2
 8006560:	4619      	mov	r1, r3
 8006562:	4603      	mov	r3, r0
 8006564:	4642      	mov	r2, r8
 8006566:	189b      	adds	r3, r3, r2
 8006568:	66bb      	str	r3, [r7, #104]	; 0x68
 800656a:	464b      	mov	r3, r9
 800656c:	460a      	mov	r2, r1
 800656e:	eb42 0303 	adc.w	r3, r2, r3
 8006572:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	663b      	str	r3, [r7, #96]	; 0x60
 800657e:	667a      	str	r2, [r7, #100]	; 0x64
 8006580:	f04f 0200 	mov.w	r2, #0
 8006584:	f04f 0300 	mov.w	r3, #0
 8006588:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800658c:	4649      	mov	r1, r9
 800658e:	008b      	lsls	r3, r1, #2
 8006590:	4641      	mov	r1, r8
 8006592:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006596:	4641      	mov	r1, r8
 8006598:	008a      	lsls	r2, r1, #2
 800659a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800659e:	f7fa fb2b 	bl	8000bf8 <__aeabi_uldivmod>
 80065a2:	4602      	mov	r2, r0
 80065a4:	460b      	mov	r3, r1
 80065a6:	4b0d      	ldr	r3, [pc, #52]	; (80065dc <UART_SetConfig+0x4e4>)
 80065a8:	fba3 1302 	umull	r1, r3, r3, r2
 80065ac:	095b      	lsrs	r3, r3, #5
 80065ae:	2164      	movs	r1, #100	; 0x64
 80065b0:	fb01 f303 	mul.w	r3, r1, r3
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	011b      	lsls	r3, r3, #4
 80065b8:	3332      	adds	r3, #50	; 0x32
 80065ba:	4a08      	ldr	r2, [pc, #32]	; (80065dc <UART_SetConfig+0x4e4>)
 80065bc:	fba2 2303 	umull	r2, r3, r2, r3
 80065c0:	095b      	lsrs	r3, r3, #5
 80065c2:	f003 020f 	and.w	r2, r3, #15
 80065c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4422      	add	r2, r4
 80065ce:	609a      	str	r2, [r3, #8]
}
 80065d0:	bf00      	nop
 80065d2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80065d6:	46bd      	mov	sp, r7
 80065d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065dc:	51eb851f 	.word	0x51eb851f

080065e0 <__cvt>:
 80065e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065e4:	ec55 4b10 	vmov	r4, r5, d0
 80065e8:	2d00      	cmp	r5, #0
 80065ea:	460e      	mov	r6, r1
 80065ec:	4619      	mov	r1, r3
 80065ee:	462b      	mov	r3, r5
 80065f0:	bfbb      	ittet	lt
 80065f2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80065f6:	461d      	movlt	r5, r3
 80065f8:	2300      	movge	r3, #0
 80065fa:	232d      	movlt	r3, #45	; 0x2d
 80065fc:	700b      	strb	r3, [r1, #0]
 80065fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006600:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006604:	4691      	mov	r9, r2
 8006606:	f023 0820 	bic.w	r8, r3, #32
 800660a:	bfbc      	itt	lt
 800660c:	4622      	movlt	r2, r4
 800660e:	4614      	movlt	r4, r2
 8006610:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006614:	d005      	beq.n	8006622 <__cvt+0x42>
 8006616:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800661a:	d100      	bne.n	800661e <__cvt+0x3e>
 800661c:	3601      	adds	r6, #1
 800661e:	2102      	movs	r1, #2
 8006620:	e000      	b.n	8006624 <__cvt+0x44>
 8006622:	2103      	movs	r1, #3
 8006624:	ab03      	add	r3, sp, #12
 8006626:	9301      	str	r3, [sp, #4]
 8006628:	ab02      	add	r3, sp, #8
 800662a:	9300      	str	r3, [sp, #0]
 800662c:	ec45 4b10 	vmov	d0, r4, r5
 8006630:	4653      	mov	r3, sl
 8006632:	4632      	mov	r2, r6
 8006634:	f000 fe68 	bl	8007308 <_dtoa_r>
 8006638:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800663c:	4607      	mov	r7, r0
 800663e:	d102      	bne.n	8006646 <__cvt+0x66>
 8006640:	f019 0f01 	tst.w	r9, #1
 8006644:	d022      	beq.n	800668c <__cvt+0xac>
 8006646:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800664a:	eb07 0906 	add.w	r9, r7, r6
 800664e:	d110      	bne.n	8006672 <__cvt+0x92>
 8006650:	783b      	ldrb	r3, [r7, #0]
 8006652:	2b30      	cmp	r3, #48	; 0x30
 8006654:	d10a      	bne.n	800666c <__cvt+0x8c>
 8006656:	2200      	movs	r2, #0
 8006658:	2300      	movs	r3, #0
 800665a:	4620      	mov	r0, r4
 800665c:	4629      	mov	r1, r5
 800665e:	f7fa fa3b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006662:	b918      	cbnz	r0, 800666c <__cvt+0x8c>
 8006664:	f1c6 0601 	rsb	r6, r6, #1
 8006668:	f8ca 6000 	str.w	r6, [sl]
 800666c:	f8da 3000 	ldr.w	r3, [sl]
 8006670:	4499      	add	r9, r3
 8006672:	2200      	movs	r2, #0
 8006674:	2300      	movs	r3, #0
 8006676:	4620      	mov	r0, r4
 8006678:	4629      	mov	r1, r5
 800667a:	f7fa fa2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800667e:	b108      	cbz	r0, 8006684 <__cvt+0xa4>
 8006680:	f8cd 900c 	str.w	r9, [sp, #12]
 8006684:	2230      	movs	r2, #48	; 0x30
 8006686:	9b03      	ldr	r3, [sp, #12]
 8006688:	454b      	cmp	r3, r9
 800668a:	d307      	bcc.n	800669c <__cvt+0xbc>
 800668c:	9b03      	ldr	r3, [sp, #12]
 800668e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006690:	1bdb      	subs	r3, r3, r7
 8006692:	4638      	mov	r0, r7
 8006694:	6013      	str	r3, [r2, #0]
 8006696:	b004      	add	sp, #16
 8006698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800669c:	1c59      	adds	r1, r3, #1
 800669e:	9103      	str	r1, [sp, #12]
 80066a0:	701a      	strb	r2, [r3, #0]
 80066a2:	e7f0      	b.n	8006686 <__cvt+0xa6>

080066a4 <__exponent>:
 80066a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066a6:	4603      	mov	r3, r0
 80066a8:	2900      	cmp	r1, #0
 80066aa:	bfb8      	it	lt
 80066ac:	4249      	neglt	r1, r1
 80066ae:	f803 2b02 	strb.w	r2, [r3], #2
 80066b2:	bfb4      	ite	lt
 80066b4:	222d      	movlt	r2, #45	; 0x2d
 80066b6:	222b      	movge	r2, #43	; 0x2b
 80066b8:	2909      	cmp	r1, #9
 80066ba:	7042      	strb	r2, [r0, #1]
 80066bc:	dd2a      	ble.n	8006714 <__exponent+0x70>
 80066be:	f10d 0207 	add.w	r2, sp, #7
 80066c2:	4617      	mov	r7, r2
 80066c4:	260a      	movs	r6, #10
 80066c6:	4694      	mov	ip, r2
 80066c8:	fb91 f5f6 	sdiv	r5, r1, r6
 80066cc:	fb06 1415 	mls	r4, r6, r5, r1
 80066d0:	3430      	adds	r4, #48	; 0x30
 80066d2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80066d6:	460c      	mov	r4, r1
 80066d8:	2c63      	cmp	r4, #99	; 0x63
 80066da:	f102 32ff 	add.w	r2, r2, #4294967295
 80066de:	4629      	mov	r1, r5
 80066e0:	dcf1      	bgt.n	80066c6 <__exponent+0x22>
 80066e2:	3130      	adds	r1, #48	; 0x30
 80066e4:	f1ac 0402 	sub.w	r4, ip, #2
 80066e8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80066ec:	1c41      	adds	r1, r0, #1
 80066ee:	4622      	mov	r2, r4
 80066f0:	42ba      	cmp	r2, r7
 80066f2:	d30a      	bcc.n	800670a <__exponent+0x66>
 80066f4:	f10d 0209 	add.w	r2, sp, #9
 80066f8:	eba2 020c 	sub.w	r2, r2, ip
 80066fc:	42bc      	cmp	r4, r7
 80066fe:	bf88      	it	hi
 8006700:	2200      	movhi	r2, #0
 8006702:	4413      	add	r3, r2
 8006704:	1a18      	subs	r0, r3, r0
 8006706:	b003      	add	sp, #12
 8006708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800670a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800670e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006712:	e7ed      	b.n	80066f0 <__exponent+0x4c>
 8006714:	2330      	movs	r3, #48	; 0x30
 8006716:	3130      	adds	r1, #48	; 0x30
 8006718:	7083      	strb	r3, [r0, #2]
 800671a:	70c1      	strb	r1, [r0, #3]
 800671c:	1d03      	adds	r3, r0, #4
 800671e:	e7f1      	b.n	8006704 <__exponent+0x60>

08006720 <_printf_float>:
 8006720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006724:	ed2d 8b02 	vpush	{d8}
 8006728:	b08d      	sub	sp, #52	; 0x34
 800672a:	460c      	mov	r4, r1
 800672c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006730:	4616      	mov	r6, r2
 8006732:	461f      	mov	r7, r3
 8006734:	4605      	mov	r5, r0
 8006736:	f000 fce7 	bl	8007108 <_localeconv_r>
 800673a:	f8d0 a000 	ldr.w	sl, [r0]
 800673e:	4650      	mov	r0, sl
 8006740:	f7f9 fd9e 	bl	8000280 <strlen>
 8006744:	2300      	movs	r3, #0
 8006746:	930a      	str	r3, [sp, #40]	; 0x28
 8006748:	6823      	ldr	r3, [r4, #0]
 800674a:	9305      	str	r3, [sp, #20]
 800674c:	f8d8 3000 	ldr.w	r3, [r8]
 8006750:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006754:	3307      	adds	r3, #7
 8006756:	f023 0307 	bic.w	r3, r3, #7
 800675a:	f103 0208 	add.w	r2, r3, #8
 800675e:	f8c8 2000 	str.w	r2, [r8]
 8006762:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006766:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800676a:	9307      	str	r3, [sp, #28]
 800676c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006770:	ee08 0a10 	vmov	s16, r0
 8006774:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006778:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800677c:	4b9e      	ldr	r3, [pc, #632]	; (80069f8 <_printf_float+0x2d8>)
 800677e:	f04f 32ff 	mov.w	r2, #4294967295
 8006782:	f7fa f9db 	bl	8000b3c <__aeabi_dcmpun>
 8006786:	bb88      	cbnz	r0, 80067ec <_printf_float+0xcc>
 8006788:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800678c:	4b9a      	ldr	r3, [pc, #616]	; (80069f8 <_printf_float+0x2d8>)
 800678e:	f04f 32ff 	mov.w	r2, #4294967295
 8006792:	f7fa f9b5 	bl	8000b00 <__aeabi_dcmple>
 8006796:	bb48      	cbnz	r0, 80067ec <_printf_float+0xcc>
 8006798:	2200      	movs	r2, #0
 800679a:	2300      	movs	r3, #0
 800679c:	4640      	mov	r0, r8
 800679e:	4649      	mov	r1, r9
 80067a0:	f7fa f9a4 	bl	8000aec <__aeabi_dcmplt>
 80067a4:	b110      	cbz	r0, 80067ac <_printf_float+0x8c>
 80067a6:	232d      	movs	r3, #45	; 0x2d
 80067a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067ac:	4a93      	ldr	r2, [pc, #588]	; (80069fc <_printf_float+0x2dc>)
 80067ae:	4b94      	ldr	r3, [pc, #592]	; (8006a00 <_printf_float+0x2e0>)
 80067b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80067b4:	bf94      	ite	ls
 80067b6:	4690      	movls	r8, r2
 80067b8:	4698      	movhi	r8, r3
 80067ba:	2303      	movs	r3, #3
 80067bc:	6123      	str	r3, [r4, #16]
 80067be:	9b05      	ldr	r3, [sp, #20]
 80067c0:	f023 0304 	bic.w	r3, r3, #4
 80067c4:	6023      	str	r3, [r4, #0]
 80067c6:	f04f 0900 	mov.w	r9, #0
 80067ca:	9700      	str	r7, [sp, #0]
 80067cc:	4633      	mov	r3, r6
 80067ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80067d0:	4621      	mov	r1, r4
 80067d2:	4628      	mov	r0, r5
 80067d4:	f000 f9da 	bl	8006b8c <_printf_common>
 80067d8:	3001      	adds	r0, #1
 80067da:	f040 8090 	bne.w	80068fe <_printf_float+0x1de>
 80067de:	f04f 30ff 	mov.w	r0, #4294967295
 80067e2:	b00d      	add	sp, #52	; 0x34
 80067e4:	ecbd 8b02 	vpop	{d8}
 80067e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ec:	4642      	mov	r2, r8
 80067ee:	464b      	mov	r3, r9
 80067f0:	4640      	mov	r0, r8
 80067f2:	4649      	mov	r1, r9
 80067f4:	f7fa f9a2 	bl	8000b3c <__aeabi_dcmpun>
 80067f8:	b140      	cbz	r0, 800680c <_printf_float+0xec>
 80067fa:	464b      	mov	r3, r9
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	bfbc      	itt	lt
 8006800:	232d      	movlt	r3, #45	; 0x2d
 8006802:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006806:	4a7f      	ldr	r2, [pc, #508]	; (8006a04 <_printf_float+0x2e4>)
 8006808:	4b7f      	ldr	r3, [pc, #508]	; (8006a08 <_printf_float+0x2e8>)
 800680a:	e7d1      	b.n	80067b0 <_printf_float+0x90>
 800680c:	6863      	ldr	r3, [r4, #4]
 800680e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006812:	9206      	str	r2, [sp, #24]
 8006814:	1c5a      	adds	r2, r3, #1
 8006816:	d13f      	bne.n	8006898 <_printf_float+0x178>
 8006818:	2306      	movs	r3, #6
 800681a:	6063      	str	r3, [r4, #4]
 800681c:	9b05      	ldr	r3, [sp, #20]
 800681e:	6861      	ldr	r1, [r4, #4]
 8006820:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006824:	2300      	movs	r3, #0
 8006826:	9303      	str	r3, [sp, #12]
 8006828:	ab0a      	add	r3, sp, #40	; 0x28
 800682a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800682e:	ab09      	add	r3, sp, #36	; 0x24
 8006830:	ec49 8b10 	vmov	d0, r8, r9
 8006834:	9300      	str	r3, [sp, #0]
 8006836:	6022      	str	r2, [r4, #0]
 8006838:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800683c:	4628      	mov	r0, r5
 800683e:	f7ff fecf 	bl	80065e0 <__cvt>
 8006842:	9b06      	ldr	r3, [sp, #24]
 8006844:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006846:	2b47      	cmp	r3, #71	; 0x47
 8006848:	4680      	mov	r8, r0
 800684a:	d108      	bne.n	800685e <_printf_float+0x13e>
 800684c:	1cc8      	adds	r0, r1, #3
 800684e:	db02      	blt.n	8006856 <_printf_float+0x136>
 8006850:	6863      	ldr	r3, [r4, #4]
 8006852:	4299      	cmp	r1, r3
 8006854:	dd41      	ble.n	80068da <_printf_float+0x1ba>
 8006856:	f1ab 0302 	sub.w	r3, fp, #2
 800685a:	fa5f fb83 	uxtb.w	fp, r3
 800685e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006862:	d820      	bhi.n	80068a6 <_printf_float+0x186>
 8006864:	3901      	subs	r1, #1
 8006866:	465a      	mov	r2, fp
 8006868:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800686c:	9109      	str	r1, [sp, #36]	; 0x24
 800686e:	f7ff ff19 	bl	80066a4 <__exponent>
 8006872:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006874:	1813      	adds	r3, r2, r0
 8006876:	2a01      	cmp	r2, #1
 8006878:	4681      	mov	r9, r0
 800687a:	6123      	str	r3, [r4, #16]
 800687c:	dc02      	bgt.n	8006884 <_printf_float+0x164>
 800687e:	6822      	ldr	r2, [r4, #0]
 8006880:	07d2      	lsls	r2, r2, #31
 8006882:	d501      	bpl.n	8006888 <_printf_float+0x168>
 8006884:	3301      	adds	r3, #1
 8006886:	6123      	str	r3, [r4, #16]
 8006888:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800688c:	2b00      	cmp	r3, #0
 800688e:	d09c      	beq.n	80067ca <_printf_float+0xaa>
 8006890:	232d      	movs	r3, #45	; 0x2d
 8006892:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006896:	e798      	b.n	80067ca <_printf_float+0xaa>
 8006898:	9a06      	ldr	r2, [sp, #24]
 800689a:	2a47      	cmp	r2, #71	; 0x47
 800689c:	d1be      	bne.n	800681c <_printf_float+0xfc>
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1bc      	bne.n	800681c <_printf_float+0xfc>
 80068a2:	2301      	movs	r3, #1
 80068a4:	e7b9      	b.n	800681a <_printf_float+0xfa>
 80068a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80068aa:	d118      	bne.n	80068de <_printf_float+0x1be>
 80068ac:	2900      	cmp	r1, #0
 80068ae:	6863      	ldr	r3, [r4, #4]
 80068b0:	dd0b      	ble.n	80068ca <_printf_float+0x1aa>
 80068b2:	6121      	str	r1, [r4, #16]
 80068b4:	b913      	cbnz	r3, 80068bc <_printf_float+0x19c>
 80068b6:	6822      	ldr	r2, [r4, #0]
 80068b8:	07d0      	lsls	r0, r2, #31
 80068ba:	d502      	bpl.n	80068c2 <_printf_float+0x1a2>
 80068bc:	3301      	adds	r3, #1
 80068be:	440b      	add	r3, r1
 80068c0:	6123      	str	r3, [r4, #16]
 80068c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80068c4:	f04f 0900 	mov.w	r9, #0
 80068c8:	e7de      	b.n	8006888 <_printf_float+0x168>
 80068ca:	b913      	cbnz	r3, 80068d2 <_printf_float+0x1b2>
 80068cc:	6822      	ldr	r2, [r4, #0]
 80068ce:	07d2      	lsls	r2, r2, #31
 80068d0:	d501      	bpl.n	80068d6 <_printf_float+0x1b6>
 80068d2:	3302      	adds	r3, #2
 80068d4:	e7f4      	b.n	80068c0 <_printf_float+0x1a0>
 80068d6:	2301      	movs	r3, #1
 80068d8:	e7f2      	b.n	80068c0 <_printf_float+0x1a0>
 80068da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80068de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068e0:	4299      	cmp	r1, r3
 80068e2:	db05      	blt.n	80068f0 <_printf_float+0x1d0>
 80068e4:	6823      	ldr	r3, [r4, #0]
 80068e6:	6121      	str	r1, [r4, #16]
 80068e8:	07d8      	lsls	r0, r3, #31
 80068ea:	d5ea      	bpl.n	80068c2 <_printf_float+0x1a2>
 80068ec:	1c4b      	adds	r3, r1, #1
 80068ee:	e7e7      	b.n	80068c0 <_printf_float+0x1a0>
 80068f0:	2900      	cmp	r1, #0
 80068f2:	bfd4      	ite	le
 80068f4:	f1c1 0202 	rsble	r2, r1, #2
 80068f8:	2201      	movgt	r2, #1
 80068fa:	4413      	add	r3, r2
 80068fc:	e7e0      	b.n	80068c0 <_printf_float+0x1a0>
 80068fe:	6823      	ldr	r3, [r4, #0]
 8006900:	055a      	lsls	r2, r3, #21
 8006902:	d407      	bmi.n	8006914 <_printf_float+0x1f4>
 8006904:	6923      	ldr	r3, [r4, #16]
 8006906:	4642      	mov	r2, r8
 8006908:	4631      	mov	r1, r6
 800690a:	4628      	mov	r0, r5
 800690c:	47b8      	blx	r7
 800690e:	3001      	adds	r0, #1
 8006910:	d12c      	bne.n	800696c <_printf_float+0x24c>
 8006912:	e764      	b.n	80067de <_printf_float+0xbe>
 8006914:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006918:	f240 80e0 	bls.w	8006adc <_printf_float+0x3bc>
 800691c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006920:	2200      	movs	r2, #0
 8006922:	2300      	movs	r3, #0
 8006924:	f7fa f8d8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006928:	2800      	cmp	r0, #0
 800692a:	d034      	beq.n	8006996 <_printf_float+0x276>
 800692c:	4a37      	ldr	r2, [pc, #220]	; (8006a0c <_printf_float+0x2ec>)
 800692e:	2301      	movs	r3, #1
 8006930:	4631      	mov	r1, r6
 8006932:	4628      	mov	r0, r5
 8006934:	47b8      	blx	r7
 8006936:	3001      	adds	r0, #1
 8006938:	f43f af51 	beq.w	80067de <_printf_float+0xbe>
 800693c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006940:	429a      	cmp	r2, r3
 8006942:	db02      	blt.n	800694a <_printf_float+0x22a>
 8006944:	6823      	ldr	r3, [r4, #0]
 8006946:	07d8      	lsls	r0, r3, #31
 8006948:	d510      	bpl.n	800696c <_printf_float+0x24c>
 800694a:	ee18 3a10 	vmov	r3, s16
 800694e:	4652      	mov	r2, sl
 8006950:	4631      	mov	r1, r6
 8006952:	4628      	mov	r0, r5
 8006954:	47b8      	blx	r7
 8006956:	3001      	adds	r0, #1
 8006958:	f43f af41 	beq.w	80067de <_printf_float+0xbe>
 800695c:	f04f 0800 	mov.w	r8, #0
 8006960:	f104 091a 	add.w	r9, r4, #26
 8006964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006966:	3b01      	subs	r3, #1
 8006968:	4543      	cmp	r3, r8
 800696a:	dc09      	bgt.n	8006980 <_printf_float+0x260>
 800696c:	6823      	ldr	r3, [r4, #0]
 800696e:	079b      	lsls	r3, r3, #30
 8006970:	f100 8107 	bmi.w	8006b82 <_printf_float+0x462>
 8006974:	68e0      	ldr	r0, [r4, #12]
 8006976:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006978:	4298      	cmp	r0, r3
 800697a:	bfb8      	it	lt
 800697c:	4618      	movlt	r0, r3
 800697e:	e730      	b.n	80067e2 <_printf_float+0xc2>
 8006980:	2301      	movs	r3, #1
 8006982:	464a      	mov	r2, r9
 8006984:	4631      	mov	r1, r6
 8006986:	4628      	mov	r0, r5
 8006988:	47b8      	blx	r7
 800698a:	3001      	adds	r0, #1
 800698c:	f43f af27 	beq.w	80067de <_printf_float+0xbe>
 8006990:	f108 0801 	add.w	r8, r8, #1
 8006994:	e7e6      	b.n	8006964 <_printf_float+0x244>
 8006996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006998:	2b00      	cmp	r3, #0
 800699a:	dc39      	bgt.n	8006a10 <_printf_float+0x2f0>
 800699c:	4a1b      	ldr	r2, [pc, #108]	; (8006a0c <_printf_float+0x2ec>)
 800699e:	2301      	movs	r3, #1
 80069a0:	4631      	mov	r1, r6
 80069a2:	4628      	mov	r0, r5
 80069a4:	47b8      	blx	r7
 80069a6:	3001      	adds	r0, #1
 80069a8:	f43f af19 	beq.w	80067de <_printf_float+0xbe>
 80069ac:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80069b0:	4313      	orrs	r3, r2
 80069b2:	d102      	bne.n	80069ba <_printf_float+0x29a>
 80069b4:	6823      	ldr	r3, [r4, #0]
 80069b6:	07d9      	lsls	r1, r3, #31
 80069b8:	d5d8      	bpl.n	800696c <_printf_float+0x24c>
 80069ba:	ee18 3a10 	vmov	r3, s16
 80069be:	4652      	mov	r2, sl
 80069c0:	4631      	mov	r1, r6
 80069c2:	4628      	mov	r0, r5
 80069c4:	47b8      	blx	r7
 80069c6:	3001      	adds	r0, #1
 80069c8:	f43f af09 	beq.w	80067de <_printf_float+0xbe>
 80069cc:	f04f 0900 	mov.w	r9, #0
 80069d0:	f104 0a1a 	add.w	sl, r4, #26
 80069d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069d6:	425b      	negs	r3, r3
 80069d8:	454b      	cmp	r3, r9
 80069da:	dc01      	bgt.n	80069e0 <_printf_float+0x2c0>
 80069dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069de:	e792      	b.n	8006906 <_printf_float+0x1e6>
 80069e0:	2301      	movs	r3, #1
 80069e2:	4652      	mov	r2, sl
 80069e4:	4631      	mov	r1, r6
 80069e6:	4628      	mov	r0, r5
 80069e8:	47b8      	blx	r7
 80069ea:	3001      	adds	r0, #1
 80069ec:	f43f aef7 	beq.w	80067de <_printf_float+0xbe>
 80069f0:	f109 0901 	add.w	r9, r9, #1
 80069f4:	e7ee      	b.n	80069d4 <_printf_float+0x2b4>
 80069f6:	bf00      	nop
 80069f8:	7fefffff 	.word	0x7fefffff
 80069fc:	08009340 	.word	0x08009340
 8006a00:	08009344 	.word	0x08009344
 8006a04:	08009348 	.word	0x08009348
 8006a08:	0800934c 	.word	0x0800934c
 8006a0c:	08009350 	.word	0x08009350
 8006a10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a14:	429a      	cmp	r2, r3
 8006a16:	bfa8      	it	ge
 8006a18:	461a      	movge	r2, r3
 8006a1a:	2a00      	cmp	r2, #0
 8006a1c:	4691      	mov	r9, r2
 8006a1e:	dc37      	bgt.n	8006a90 <_printf_float+0x370>
 8006a20:	f04f 0b00 	mov.w	fp, #0
 8006a24:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a28:	f104 021a 	add.w	r2, r4, #26
 8006a2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a2e:	9305      	str	r3, [sp, #20]
 8006a30:	eba3 0309 	sub.w	r3, r3, r9
 8006a34:	455b      	cmp	r3, fp
 8006a36:	dc33      	bgt.n	8006aa0 <_printf_float+0x380>
 8006a38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	db3b      	blt.n	8006ab8 <_printf_float+0x398>
 8006a40:	6823      	ldr	r3, [r4, #0]
 8006a42:	07da      	lsls	r2, r3, #31
 8006a44:	d438      	bmi.n	8006ab8 <_printf_float+0x398>
 8006a46:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006a4a:	eba2 0903 	sub.w	r9, r2, r3
 8006a4e:	9b05      	ldr	r3, [sp, #20]
 8006a50:	1ad2      	subs	r2, r2, r3
 8006a52:	4591      	cmp	r9, r2
 8006a54:	bfa8      	it	ge
 8006a56:	4691      	movge	r9, r2
 8006a58:	f1b9 0f00 	cmp.w	r9, #0
 8006a5c:	dc35      	bgt.n	8006aca <_printf_float+0x3aa>
 8006a5e:	f04f 0800 	mov.w	r8, #0
 8006a62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a66:	f104 0a1a 	add.w	sl, r4, #26
 8006a6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a6e:	1a9b      	subs	r3, r3, r2
 8006a70:	eba3 0309 	sub.w	r3, r3, r9
 8006a74:	4543      	cmp	r3, r8
 8006a76:	f77f af79 	ble.w	800696c <_printf_float+0x24c>
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	4652      	mov	r2, sl
 8006a7e:	4631      	mov	r1, r6
 8006a80:	4628      	mov	r0, r5
 8006a82:	47b8      	blx	r7
 8006a84:	3001      	adds	r0, #1
 8006a86:	f43f aeaa 	beq.w	80067de <_printf_float+0xbe>
 8006a8a:	f108 0801 	add.w	r8, r8, #1
 8006a8e:	e7ec      	b.n	8006a6a <_printf_float+0x34a>
 8006a90:	4613      	mov	r3, r2
 8006a92:	4631      	mov	r1, r6
 8006a94:	4642      	mov	r2, r8
 8006a96:	4628      	mov	r0, r5
 8006a98:	47b8      	blx	r7
 8006a9a:	3001      	adds	r0, #1
 8006a9c:	d1c0      	bne.n	8006a20 <_printf_float+0x300>
 8006a9e:	e69e      	b.n	80067de <_printf_float+0xbe>
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	4631      	mov	r1, r6
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	9205      	str	r2, [sp, #20]
 8006aa8:	47b8      	blx	r7
 8006aaa:	3001      	adds	r0, #1
 8006aac:	f43f ae97 	beq.w	80067de <_printf_float+0xbe>
 8006ab0:	9a05      	ldr	r2, [sp, #20]
 8006ab2:	f10b 0b01 	add.w	fp, fp, #1
 8006ab6:	e7b9      	b.n	8006a2c <_printf_float+0x30c>
 8006ab8:	ee18 3a10 	vmov	r3, s16
 8006abc:	4652      	mov	r2, sl
 8006abe:	4631      	mov	r1, r6
 8006ac0:	4628      	mov	r0, r5
 8006ac2:	47b8      	blx	r7
 8006ac4:	3001      	adds	r0, #1
 8006ac6:	d1be      	bne.n	8006a46 <_printf_float+0x326>
 8006ac8:	e689      	b.n	80067de <_printf_float+0xbe>
 8006aca:	9a05      	ldr	r2, [sp, #20]
 8006acc:	464b      	mov	r3, r9
 8006ace:	4442      	add	r2, r8
 8006ad0:	4631      	mov	r1, r6
 8006ad2:	4628      	mov	r0, r5
 8006ad4:	47b8      	blx	r7
 8006ad6:	3001      	adds	r0, #1
 8006ad8:	d1c1      	bne.n	8006a5e <_printf_float+0x33e>
 8006ada:	e680      	b.n	80067de <_printf_float+0xbe>
 8006adc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ade:	2a01      	cmp	r2, #1
 8006ae0:	dc01      	bgt.n	8006ae6 <_printf_float+0x3c6>
 8006ae2:	07db      	lsls	r3, r3, #31
 8006ae4:	d53a      	bpl.n	8006b5c <_printf_float+0x43c>
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	4642      	mov	r2, r8
 8006aea:	4631      	mov	r1, r6
 8006aec:	4628      	mov	r0, r5
 8006aee:	47b8      	blx	r7
 8006af0:	3001      	adds	r0, #1
 8006af2:	f43f ae74 	beq.w	80067de <_printf_float+0xbe>
 8006af6:	ee18 3a10 	vmov	r3, s16
 8006afa:	4652      	mov	r2, sl
 8006afc:	4631      	mov	r1, r6
 8006afe:	4628      	mov	r0, r5
 8006b00:	47b8      	blx	r7
 8006b02:	3001      	adds	r0, #1
 8006b04:	f43f ae6b 	beq.w	80067de <_printf_float+0xbe>
 8006b08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	2300      	movs	r3, #0
 8006b10:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006b14:	f7f9 ffe0 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b18:	b9d8      	cbnz	r0, 8006b52 <_printf_float+0x432>
 8006b1a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006b1e:	f108 0201 	add.w	r2, r8, #1
 8006b22:	4631      	mov	r1, r6
 8006b24:	4628      	mov	r0, r5
 8006b26:	47b8      	blx	r7
 8006b28:	3001      	adds	r0, #1
 8006b2a:	d10e      	bne.n	8006b4a <_printf_float+0x42a>
 8006b2c:	e657      	b.n	80067de <_printf_float+0xbe>
 8006b2e:	2301      	movs	r3, #1
 8006b30:	4652      	mov	r2, sl
 8006b32:	4631      	mov	r1, r6
 8006b34:	4628      	mov	r0, r5
 8006b36:	47b8      	blx	r7
 8006b38:	3001      	adds	r0, #1
 8006b3a:	f43f ae50 	beq.w	80067de <_printf_float+0xbe>
 8006b3e:	f108 0801 	add.w	r8, r8, #1
 8006b42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b44:	3b01      	subs	r3, #1
 8006b46:	4543      	cmp	r3, r8
 8006b48:	dcf1      	bgt.n	8006b2e <_printf_float+0x40e>
 8006b4a:	464b      	mov	r3, r9
 8006b4c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006b50:	e6da      	b.n	8006908 <_printf_float+0x1e8>
 8006b52:	f04f 0800 	mov.w	r8, #0
 8006b56:	f104 0a1a 	add.w	sl, r4, #26
 8006b5a:	e7f2      	b.n	8006b42 <_printf_float+0x422>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	4642      	mov	r2, r8
 8006b60:	e7df      	b.n	8006b22 <_printf_float+0x402>
 8006b62:	2301      	movs	r3, #1
 8006b64:	464a      	mov	r2, r9
 8006b66:	4631      	mov	r1, r6
 8006b68:	4628      	mov	r0, r5
 8006b6a:	47b8      	blx	r7
 8006b6c:	3001      	adds	r0, #1
 8006b6e:	f43f ae36 	beq.w	80067de <_printf_float+0xbe>
 8006b72:	f108 0801 	add.w	r8, r8, #1
 8006b76:	68e3      	ldr	r3, [r4, #12]
 8006b78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b7a:	1a5b      	subs	r3, r3, r1
 8006b7c:	4543      	cmp	r3, r8
 8006b7e:	dcf0      	bgt.n	8006b62 <_printf_float+0x442>
 8006b80:	e6f8      	b.n	8006974 <_printf_float+0x254>
 8006b82:	f04f 0800 	mov.w	r8, #0
 8006b86:	f104 0919 	add.w	r9, r4, #25
 8006b8a:	e7f4      	b.n	8006b76 <_printf_float+0x456>

08006b8c <_printf_common>:
 8006b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b90:	4616      	mov	r6, r2
 8006b92:	4699      	mov	r9, r3
 8006b94:	688a      	ldr	r2, [r1, #8]
 8006b96:	690b      	ldr	r3, [r1, #16]
 8006b98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	bfb8      	it	lt
 8006ba0:	4613      	movlt	r3, r2
 8006ba2:	6033      	str	r3, [r6, #0]
 8006ba4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ba8:	4607      	mov	r7, r0
 8006baa:	460c      	mov	r4, r1
 8006bac:	b10a      	cbz	r2, 8006bb2 <_printf_common+0x26>
 8006bae:	3301      	adds	r3, #1
 8006bb0:	6033      	str	r3, [r6, #0]
 8006bb2:	6823      	ldr	r3, [r4, #0]
 8006bb4:	0699      	lsls	r1, r3, #26
 8006bb6:	bf42      	ittt	mi
 8006bb8:	6833      	ldrmi	r3, [r6, #0]
 8006bba:	3302      	addmi	r3, #2
 8006bbc:	6033      	strmi	r3, [r6, #0]
 8006bbe:	6825      	ldr	r5, [r4, #0]
 8006bc0:	f015 0506 	ands.w	r5, r5, #6
 8006bc4:	d106      	bne.n	8006bd4 <_printf_common+0x48>
 8006bc6:	f104 0a19 	add.w	sl, r4, #25
 8006bca:	68e3      	ldr	r3, [r4, #12]
 8006bcc:	6832      	ldr	r2, [r6, #0]
 8006bce:	1a9b      	subs	r3, r3, r2
 8006bd0:	42ab      	cmp	r3, r5
 8006bd2:	dc26      	bgt.n	8006c22 <_printf_common+0x96>
 8006bd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006bd8:	1e13      	subs	r3, r2, #0
 8006bda:	6822      	ldr	r2, [r4, #0]
 8006bdc:	bf18      	it	ne
 8006bde:	2301      	movne	r3, #1
 8006be0:	0692      	lsls	r2, r2, #26
 8006be2:	d42b      	bmi.n	8006c3c <_printf_common+0xb0>
 8006be4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006be8:	4649      	mov	r1, r9
 8006bea:	4638      	mov	r0, r7
 8006bec:	47c0      	blx	r8
 8006bee:	3001      	adds	r0, #1
 8006bf0:	d01e      	beq.n	8006c30 <_printf_common+0xa4>
 8006bf2:	6823      	ldr	r3, [r4, #0]
 8006bf4:	6922      	ldr	r2, [r4, #16]
 8006bf6:	f003 0306 	and.w	r3, r3, #6
 8006bfa:	2b04      	cmp	r3, #4
 8006bfc:	bf02      	ittt	eq
 8006bfe:	68e5      	ldreq	r5, [r4, #12]
 8006c00:	6833      	ldreq	r3, [r6, #0]
 8006c02:	1aed      	subeq	r5, r5, r3
 8006c04:	68a3      	ldr	r3, [r4, #8]
 8006c06:	bf0c      	ite	eq
 8006c08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c0c:	2500      	movne	r5, #0
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	bfc4      	itt	gt
 8006c12:	1a9b      	subgt	r3, r3, r2
 8006c14:	18ed      	addgt	r5, r5, r3
 8006c16:	2600      	movs	r6, #0
 8006c18:	341a      	adds	r4, #26
 8006c1a:	42b5      	cmp	r5, r6
 8006c1c:	d11a      	bne.n	8006c54 <_printf_common+0xc8>
 8006c1e:	2000      	movs	r0, #0
 8006c20:	e008      	b.n	8006c34 <_printf_common+0xa8>
 8006c22:	2301      	movs	r3, #1
 8006c24:	4652      	mov	r2, sl
 8006c26:	4649      	mov	r1, r9
 8006c28:	4638      	mov	r0, r7
 8006c2a:	47c0      	blx	r8
 8006c2c:	3001      	adds	r0, #1
 8006c2e:	d103      	bne.n	8006c38 <_printf_common+0xac>
 8006c30:	f04f 30ff 	mov.w	r0, #4294967295
 8006c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c38:	3501      	adds	r5, #1
 8006c3a:	e7c6      	b.n	8006bca <_printf_common+0x3e>
 8006c3c:	18e1      	adds	r1, r4, r3
 8006c3e:	1c5a      	adds	r2, r3, #1
 8006c40:	2030      	movs	r0, #48	; 0x30
 8006c42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c46:	4422      	add	r2, r4
 8006c48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c50:	3302      	adds	r3, #2
 8006c52:	e7c7      	b.n	8006be4 <_printf_common+0x58>
 8006c54:	2301      	movs	r3, #1
 8006c56:	4622      	mov	r2, r4
 8006c58:	4649      	mov	r1, r9
 8006c5a:	4638      	mov	r0, r7
 8006c5c:	47c0      	blx	r8
 8006c5e:	3001      	adds	r0, #1
 8006c60:	d0e6      	beq.n	8006c30 <_printf_common+0xa4>
 8006c62:	3601      	adds	r6, #1
 8006c64:	e7d9      	b.n	8006c1a <_printf_common+0x8e>
	...

08006c68 <_printf_i>:
 8006c68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c6c:	7e0f      	ldrb	r7, [r1, #24]
 8006c6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c70:	2f78      	cmp	r7, #120	; 0x78
 8006c72:	4691      	mov	r9, r2
 8006c74:	4680      	mov	r8, r0
 8006c76:	460c      	mov	r4, r1
 8006c78:	469a      	mov	sl, r3
 8006c7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c7e:	d807      	bhi.n	8006c90 <_printf_i+0x28>
 8006c80:	2f62      	cmp	r7, #98	; 0x62
 8006c82:	d80a      	bhi.n	8006c9a <_printf_i+0x32>
 8006c84:	2f00      	cmp	r7, #0
 8006c86:	f000 80d4 	beq.w	8006e32 <_printf_i+0x1ca>
 8006c8a:	2f58      	cmp	r7, #88	; 0x58
 8006c8c:	f000 80c0 	beq.w	8006e10 <_printf_i+0x1a8>
 8006c90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c98:	e03a      	b.n	8006d10 <_printf_i+0xa8>
 8006c9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c9e:	2b15      	cmp	r3, #21
 8006ca0:	d8f6      	bhi.n	8006c90 <_printf_i+0x28>
 8006ca2:	a101      	add	r1, pc, #4	; (adr r1, 8006ca8 <_printf_i+0x40>)
 8006ca4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ca8:	08006d01 	.word	0x08006d01
 8006cac:	08006d15 	.word	0x08006d15
 8006cb0:	08006c91 	.word	0x08006c91
 8006cb4:	08006c91 	.word	0x08006c91
 8006cb8:	08006c91 	.word	0x08006c91
 8006cbc:	08006c91 	.word	0x08006c91
 8006cc0:	08006d15 	.word	0x08006d15
 8006cc4:	08006c91 	.word	0x08006c91
 8006cc8:	08006c91 	.word	0x08006c91
 8006ccc:	08006c91 	.word	0x08006c91
 8006cd0:	08006c91 	.word	0x08006c91
 8006cd4:	08006e19 	.word	0x08006e19
 8006cd8:	08006d41 	.word	0x08006d41
 8006cdc:	08006dd3 	.word	0x08006dd3
 8006ce0:	08006c91 	.word	0x08006c91
 8006ce4:	08006c91 	.word	0x08006c91
 8006ce8:	08006e3b 	.word	0x08006e3b
 8006cec:	08006c91 	.word	0x08006c91
 8006cf0:	08006d41 	.word	0x08006d41
 8006cf4:	08006c91 	.word	0x08006c91
 8006cf8:	08006c91 	.word	0x08006c91
 8006cfc:	08006ddb 	.word	0x08006ddb
 8006d00:	682b      	ldr	r3, [r5, #0]
 8006d02:	1d1a      	adds	r2, r3, #4
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	602a      	str	r2, [r5, #0]
 8006d08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d10:	2301      	movs	r3, #1
 8006d12:	e09f      	b.n	8006e54 <_printf_i+0x1ec>
 8006d14:	6820      	ldr	r0, [r4, #0]
 8006d16:	682b      	ldr	r3, [r5, #0]
 8006d18:	0607      	lsls	r7, r0, #24
 8006d1a:	f103 0104 	add.w	r1, r3, #4
 8006d1e:	6029      	str	r1, [r5, #0]
 8006d20:	d501      	bpl.n	8006d26 <_printf_i+0xbe>
 8006d22:	681e      	ldr	r6, [r3, #0]
 8006d24:	e003      	b.n	8006d2e <_printf_i+0xc6>
 8006d26:	0646      	lsls	r6, r0, #25
 8006d28:	d5fb      	bpl.n	8006d22 <_printf_i+0xba>
 8006d2a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006d2e:	2e00      	cmp	r6, #0
 8006d30:	da03      	bge.n	8006d3a <_printf_i+0xd2>
 8006d32:	232d      	movs	r3, #45	; 0x2d
 8006d34:	4276      	negs	r6, r6
 8006d36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d3a:	485a      	ldr	r0, [pc, #360]	; (8006ea4 <_printf_i+0x23c>)
 8006d3c:	230a      	movs	r3, #10
 8006d3e:	e012      	b.n	8006d66 <_printf_i+0xfe>
 8006d40:	682b      	ldr	r3, [r5, #0]
 8006d42:	6820      	ldr	r0, [r4, #0]
 8006d44:	1d19      	adds	r1, r3, #4
 8006d46:	6029      	str	r1, [r5, #0]
 8006d48:	0605      	lsls	r5, r0, #24
 8006d4a:	d501      	bpl.n	8006d50 <_printf_i+0xe8>
 8006d4c:	681e      	ldr	r6, [r3, #0]
 8006d4e:	e002      	b.n	8006d56 <_printf_i+0xee>
 8006d50:	0641      	lsls	r1, r0, #25
 8006d52:	d5fb      	bpl.n	8006d4c <_printf_i+0xe4>
 8006d54:	881e      	ldrh	r6, [r3, #0]
 8006d56:	4853      	ldr	r0, [pc, #332]	; (8006ea4 <_printf_i+0x23c>)
 8006d58:	2f6f      	cmp	r7, #111	; 0x6f
 8006d5a:	bf0c      	ite	eq
 8006d5c:	2308      	moveq	r3, #8
 8006d5e:	230a      	movne	r3, #10
 8006d60:	2100      	movs	r1, #0
 8006d62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d66:	6865      	ldr	r5, [r4, #4]
 8006d68:	60a5      	str	r5, [r4, #8]
 8006d6a:	2d00      	cmp	r5, #0
 8006d6c:	bfa2      	ittt	ge
 8006d6e:	6821      	ldrge	r1, [r4, #0]
 8006d70:	f021 0104 	bicge.w	r1, r1, #4
 8006d74:	6021      	strge	r1, [r4, #0]
 8006d76:	b90e      	cbnz	r6, 8006d7c <_printf_i+0x114>
 8006d78:	2d00      	cmp	r5, #0
 8006d7a:	d04b      	beq.n	8006e14 <_printf_i+0x1ac>
 8006d7c:	4615      	mov	r5, r2
 8006d7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d82:	fb03 6711 	mls	r7, r3, r1, r6
 8006d86:	5dc7      	ldrb	r7, [r0, r7]
 8006d88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d8c:	4637      	mov	r7, r6
 8006d8e:	42bb      	cmp	r3, r7
 8006d90:	460e      	mov	r6, r1
 8006d92:	d9f4      	bls.n	8006d7e <_printf_i+0x116>
 8006d94:	2b08      	cmp	r3, #8
 8006d96:	d10b      	bne.n	8006db0 <_printf_i+0x148>
 8006d98:	6823      	ldr	r3, [r4, #0]
 8006d9a:	07de      	lsls	r6, r3, #31
 8006d9c:	d508      	bpl.n	8006db0 <_printf_i+0x148>
 8006d9e:	6923      	ldr	r3, [r4, #16]
 8006da0:	6861      	ldr	r1, [r4, #4]
 8006da2:	4299      	cmp	r1, r3
 8006da4:	bfde      	ittt	le
 8006da6:	2330      	movle	r3, #48	; 0x30
 8006da8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006dac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006db0:	1b52      	subs	r2, r2, r5
 8006db2:	6122      	str	r2, [r4, #16]
 8006db4:	f8cd a000 	str.w	sl, [sp]
 8006db8:	464b      	mov	r3, r9
 8006dba:	aa03      	add	r2, sp, #12
 8006dbc:	4621      	mov	r1, r4
 8006dbe:	4640      	mov	r0, r8
 8006dc0:	f7ff fee4 	bl	8006b8c <_printf_common>
 8006dc4:	3001      	adds	r0, #1
 8006dc6:	d14a      	bne.n	8006e5e <_printf_i+0x1f6>
 8006dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dcc:	b004      	add	sp, #16
 8006dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dd2:	6823      	ldr	r3, [r4, #0]
 8006dd4:	f043 0320 	orr.w	r3, r3, #32
 8006dd8:	6023      	str	r3, [r4, #0]
 8006dda:	4833      	ldr	r0, [pc, #204]	; (8006ea8 <_printf_i+0x240>)
 8006ddc:	2778      	movs	r7, #120	; 0x78
 8006dde:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006de2:	6823      	ldr	r3, [r4, #0]
 8006de4:	6829      	ldr	r1, [r5, #0]
 8006de6:	061f      	lsls	r7, r3, #24
 8006de8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006dec:	d402      	bmi.n	8006df4 <_printf_i+0x18c>
 8006dee:	065f      	lsls	r7, r3, #25
 8006df0:	bf48      	it	mi
 8006df2:	b2b6      	uxthmi	r6, r6
 8006df4:	07df      	lsls	r7, r3, #31
 8006df6:	bf48      	it	mi
 8006df8:	f043 0320 	orrmi.w	r3, r3, #32
 8006dfc:	6029      	str	r1, [r5, #0]
 8006dfe:	bf48      	it	mi
 8006e00:	6023      	strmi	r3, [r4, #0]
 8006e02:	b91e      	cbnz	r6, 8006e0c <_printf_i+0x1a4>
 8006e04:	6823      	ldr	r3, [r4, #0]
 8006e06:	f023 0320 	bic.w	r3, r3, #32
 8006e0a:	6023      	str	r3, [r4, #0]
 8006e0c:	2310      	movs	r3, #16
 8006e0e:	e7a7      	b.n	8006d60 <_printf_i+0xf8>
 8006e10:	4824      	ldr	r0, [pc, #144]	; (8006ea4 <_printf_i+0x23c>)
 8006e12:	e7e4      	b.n	8006dde <_printf_i+0x176>
 8006e14:	4615      	mov	r5, r2
 8006e16:	e7bd      	b.n	8006d94 <_printf_i+0x12c>
 8006e18:	682b      	ldr	r3, [r5, #0]
 8006e1a:	6826      	ldr	r6, [r4, #0]
 8006e1c:	6961      	ldr	r1, [r4, #20]
 8006e1e:	1d18      	adds	r0, r3, #4
 8006e20:	6028      	str	r0, [r5, #0]
 8006e22:	0635      	lsls	r5, r6, #24
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	d501      	bpl.n	8006e2c <_printf_i+0x1c4>
 8006e28:	6019      	str	r1, [r3, #0]
 8006e2a:	e002      	b.n	8006e32 <_printf_i+0x1ca>
 8006e2c:	0670      	lsls	r0, r6, #25
 8006e2e:	d5fb      	bpl.n	8006e28 <_printf_i+0x1c0>
 8006e30:	8019      	strh	r1, [r3, #0]
 8006e32:	2300      	movs	r3, #0
 8006e34:	6123      	str	r3, [r4, #16]
 8006e36:	4615      	mov	r5, r2
 8006e38:	e7bc      	b.n	8006db4 <_printf_i+0x14c>
 8006e3a:	682b      	ldr	r3, [r5, #0]
 8006e3c:	1d1a      	adds	r2, r3, #4
 8006e3e:	602a      	str	r2, [r5, #0]
 8006e40:	681d      	ldr	r5, [r3, #0]
 8006e42:	6862      	ldr	r2, [r4, #4]
 8006e44:	2100      	movs	r1, #0
 8006e46:	4628      	mov	r0, r5
 8006e48:	f7f9 f9ca 	bl	80001e0 <memchr>
 8006e4c:	b108      	cbz	r0, 8006e52 <_printf_i+0x1ea>
 8006e4e:	1b40      	subs	r0, r0, r5
 8006e50:	6060      	str	r0, [r4, #4]
 8006e52:	6863      	ldr	r3, [r4, #4]
 8006e54:	6123      	str	r3, [r4, #16]
 8006e56:	2300      	movs	r3, #0
 8006e58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e5c:	e7aa      	b.n	8006db4 <_printf_i+0x14c>
 8006e5e:	6923      	ldr	r3, [r4, #16]
 8006e60:	462a      	mov	r2, r5
 8006e62:	4649      	mov	r1, r9
 8006e64:	4640      	mov	r0, r8
 8006e66:	47d0      	blx	sl
 8006e68:	3001      	adds	r0, #1
 8006e6a:	d0ad      	beq.n	8006dc8 <_printf_i+0x160>
 8006e6c:	6823      	ldr	r3, [r4, #0]
 8006e6e:	079b      	lsls	r3, r3, #30
 8006e70:	d413      	bmi.n	8006e9a <_printf_i+0x232>
 8006e72:	68e0      	ldr	r0, [r4, #12]
 8006e74:	9b03      	ldr	r3, [sp, #12]
 8006e76:	4298      	cmp	r0, r3
 8006e78:	bfb8      	it	lt
 8006e7a:	4618      	movlt	r0, r3
 8006e7c:	e7a6      	b.n	8006dcc <_printf_i+0x164>
 8006e7e:	2301      	movs	r3, #1
 8006e80:	4632      	mov	r2, r6
 8006e82:	4649      	mov	r1, r9
 8006e84:	4640      	mov	r0, r8
 8006e86:	47d0      	blx	sl
 8006e88:	3001      	adds	r0, #1
 8006e8a:	d09d      	beq.n	8006dc8 <_printf_i+0x160>
 8006e8c:	3501      	adds	r5, #1
 8006e8e:	68e3      	ldr	r3, [r4, #12]
 8006e90:	9903      	ldr	r1, [sp, #12]
 8006e92:	1a5b      	subs	r3, r3, r1
 8006e94:	42ab      	cmp	r3, r5
 8006e96:	dcf2      	bgt.n	8006e7e <_printf_i+0x216>
 8006e98:	e7eb      	b.n	8006e72 <_printf_i+0x20a>
 8006e9a:	2500      	movs	r5, #0
 8006e9c:	f104 0619 	add.w	r6, r4, #25
 8006ea0:	e7f5      	b.n	8006e8e <_printf_i+0x226>
 8006ea2:	bf00      	nop
 8006ea4:	08009352 	.word	0x08009352
 8006ea8:	08009363 	.word	0x08009363

08006eac <std>:
 8006eac:	2300      	movs	r3, #0
 8006eae:	b510      	push	{r4, lr}
 8006eb0:	4604      	mov	r4, r0
 8006eb2:	e9c0 3300 	strd	r3, r3, [r0]
 8006eb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006eba:	6083      	str	r3, [r0, #8]
 8006ebc:	8181      	strh	r1, [r0, #12]
 8006ebe:	6643      	str	r3, [r0, #100]	; 0x64
 8006ec0:	81c2      	strh	r2, [r0, #14]
 8006ec2:	6183      	str	r3, [r0, #24]
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	2208      	movs	r2, #8
 8006ec8:	305c      	adds	r0, #92	; 0x5c
 8006eca:	f000 f914 	bl	80070f6 <memset>
 8006ece:	4b0d      	ldr	r3, [pc, #52]	; (8006f04 <std+0x58>)
 8006ed0:	6263      	str	r3, [r4, #36]	; 0x24
 8006ed2:	4b0d      	ldr	r3, [pc, #52]	; (8006f08 <std+0x5c>)
 8006ed4:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ed6:	4b0d      	ldr	r3, [pc, #52]	; (8006f0c <std+0x60>)
 8006ed8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006eda:	4b0d      	ldr	r3, [pc, #52]	; (8006f10 <std+0x64>)
 8006edc:	6323      	str	r3, [r4, #48]	; 0x30
 8006ede:	4b0d      	ldr	r3, [pc, #52]	; (8006f14 <std+0x68>)
 8006ee0:	6224      	str	r4, [r4, #32]
 8006ee2:	429c      	cmp	r4, r3
 8006ee4:	d006      	beq.n	8006ef4 <std+0x48>
 8006ee6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006eea:	4294      	cmp	r4, r2
 8006eec:	d002      	beq.n	8006ef4 <std+0x48>
 8006eee:	33d0      	adds	r3, #208	; 0xd0
 8006ef0:	429c      	cmp	r4, r3
 8006ef2:	d105      	bne.n	8006f00 <std+0x54>
 8006ef4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006efc:	f000 b978 	b.w	80071f0 <__retarget_lock_init_recursive>
 8006f00:	bd10      	pop	{r4, pc}
 8006f02:	bf00      	nop
 8006f04:	08007071 	.word	0x08007071
 8006f08:	08007093 	.word	0x08007093
 8006f0c:	080070cb 	.word	0x080070cb
 8006f10:	080070ef 	.word	0x080070ef
 8006f14:	200004ac 	.word	0x200004ac

08006f18 <stdio_exit_handler>:
 8006f18:	4a02      	ldr	r2, [pc, #8]	; (8006f24 <stdio_exit_handler+0xc>)
 8006f1a:	4903      	ldr	r1, [pc, #12]	; (8006f28 <stdio_exit_handler+0x10>)
 8006f1c:	4803      	ldr	r0, [pc, #12]	; (8006f2c <stdio_exit_handler+0x14>)
 8006f1e:	f000 b869 	b.w	8006ff4 <_fwalk_sglue>
 8006f22:	bf00      	nop
 8006f24:	20000010 	.word	0x20000010
 8006f28:	08008ba1 	.word	0x08008ba1
 8006f2c:	2000001c 	.word	0x2000001c

08006f30 <cleanup_stdio>:
 8006f30:	6841      	ldr	r1, [r0, #4]
 8006f32:	4b0c      	ldr	r3, [pc, #48]	; (8006f64 <cleanup_stdio+0x34>)
 8006f34:	4299      	cmp	r1, r3
 8006f36:	b510      	push	{r4, lr}
 8006f38:	4604      	mov	r4, r0
 8006f3a:	d001      	beq.n	8006f40 <cleanup_stdio+0x10>
 8006f3c:	f001 fe30 	bl	8008ba0 <_fflush_r>
 8006f40:	68a1      	ldr	r1, [r4, #8]
 8006f42:	4b09      	ldr	r3, [pc, #36]	; (8006f68 <cleanup_stdio+0x38>)
 8006f44:	4299      	cmp	r1, r3
 8006f46:	d002      	beq.n	8006f4e <cleanup_stdio+0x1e>
 8006f48:	4620      	mov	r0, r4
 8006f4a:	f001 fe29 	bl	8008ba0 <_fflush_r>
 8006f4e:	68e1      	ldr	r1, [r4, #12]
 8006f50:	4b06      	ldr	r3, [pc, #24]	; (8006f6c <cleanup_stdio+0x3c>)
 8006f52:	4299      	cmp	r1, r3
 8006f54:	d004      	beq.n	8006f60 <cleanup_stdio+0x30>
 8006f56:	4620      	mov	r0, r4
 8006f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f5c:	f001 be20 	b.w	8008ba0 <_fflush_r>
 8006f60:	bd10      	pop	{r4, pc}
 8006f62:	bf00      	nop
 8006f64:	200004ac 	.word	0x200004ac
 8006f68:	20000514 	.word	0x20000514
 8006f6c:	2000057c 	.word	0x2000057c

08006f70 <global_stdio_init.part.0>:
 8006f70:	b510      	push	{r4, lr}
 8006f72:	4b0b      	ldr	r3, [pc, #44]	; (8006fa0 <global_stdio_init.part.0+0x30>)
 8006f74:	4c0b      	ldr	r4, [pc, #44]	; (8006fa4 <global_stdio_init.part.0+0x34>)
 8006f76:	4a0c      	ldr	r2, [pc, #48]	; (8006fa8 <global_stdio_init.part.0+0x38>)
 8006f78:	601a      	str	r2, [r3, #0]
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	2104      	movs	r1, #4
 8006f80:	f7ff ff94 	bl	8006eac <std>
 8006f84:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006f88:	2201      	movs	r2, #1
 8006f8a:	2109      	movs	r1, #9
 8006f8c:	f7ff ff8e 	bl	8006eac <std>
 8006f90:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006f94:	2202      	movs	r2, #2
 8006f96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f9a:	2112      	movs	r1, #18
 8006f9c:	f7ff bf86 	b.w	8006eac <std>
 8006fa0:	200005e4 	.word	0x200005e4
 8006fa4:	200004ac 	.word	0x200004ac
 8006fa8:	08006f19 	.word	0x08006f19

08006fac <__sfp_lock_acquire>:
 8006fac:	4801      	ldr	r0, [pc, #4]	; (8006fb4 <__sfp_lock_acquire+0x8>)
 8006fae:	f000 b920 	b.w	80071f2 <__retarget_lock_acquire_recursive>
 8006fb2:	bf00      	nop
 8006fb4:	200005ed 	.word	0x200005ed

08006fb8 <__sfp_lock_release>:
 8006fb8:	4801      	ldr	r0, [pc, #4]	; (8006fc0 <__sfp_lock_release+0x8>)
 8006fba:	f000 b91b 	b.w	80071f4 <__retarget_lock_release_recursive>
 8006fbe:	bf00      	nop
 8006fc0:	200005ed 	.word	0x200005ed

08006fc4 <__sinit>:
 8006fc4:	b510      	push	{r4, lr}
 8006fc6:	4604      	mov	r4, r0
 8006fc8:	f7ff fff0 	bl	8006fac <__sfp_lock_acquire>
 8006fcc:	6a23      	ldr	r3, [r4, #32]
 8006fce:	b11b      	cbz	r3, 8006fd8 <__sinit+0x14>
 8006fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fd4:	f7ff bff0 	b.w	8006fb8 <__sfp_lock_release>
 8006fd8:	4b04      	ldr	r3, [pc, #16]	; (8006fec <__sinit+0x28>)
 8006fda:	6223      	str	r3, [r4, #32]
 8006fdc:	4b04      	ldr	r3, [pc, #16]	; (8006ff0 <__sinit+0x2c>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1f5      	bne.n	8006fd0 <__sinit+0xc>
 8006fe4:	f7ff ffc4 	bl	8006f70 <global_stdio_init.part.0>
 8006fe8:	e7f2      	b.n	8006fd0 <__sinit+0xc>
 8006fea:	bf00      	nop
 8006fec:	08006f31 	.word	0x08006f31
 8006ff0:	200005e4 	.word	0x200005e4

08006ff4 <_fwalk_sglue>:
 8006ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ff8:	4607      	mov	r7, r0
 8006ffa:	4688      	mov	r8, r1
 8006ffc:	4614      	mov	r4, r2
 8006ffe:	2600      	movs	r6, #0
 8007000:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007004:	f1b9 0901 	subs.w	r9, r9, #1
 8007008:	d505      	bpl.n	8007016 <_fwalk_sglue+0x22>
 800700a:	6824      	ldr	r4, [r4, #0]
 800700c:	2c00      	cmp	r4, #0
 800700e:	d1f7      	bne.n	8007000 <_fwalk_sglue+0xc>
 8007010:	4630      	mov	r0, r6
 8007012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007016:	89ab      	ldrh	r3, [r5, #12]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d907      	bls.n	800702c <_fwalk_sglue+0x38>
 800701c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007020:	3301      	adds	r3, #1
 8007022:	d003      	beq.n	800702c <_fwalk_sglue+0x38>
 8007024:	4629      	mov	r1, r5
 8007026:	4638      	mov	r0, r7
 8007028:	47c0      	blx	r8
 800702a:	4306      	orrs	r6, r0
 800702c:	3568      	adds	r5, #104	; 0x68
 800702e:	e7e9      	b.n	8007004 <_fwalk_sglue+0x10>

08007030 <siprintf>:
 8007030:	b40e      	push	{r1, r2, r3}
 8007032:	b500      	push	{lr}
 8007034:	b09c      	sub	sp, #112	; 0x70
 8007036:	ab1d      	add	r3, sp, #116	; 0x74
 8007038:	9002      	str	r0, [sp, #8]
 800703a:	9006      	str	r0, [sp, #24]
 800703c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007040:	4809      	ldr	r0, [pc, #36]	; (8007068 <siprintf+0x38>)
 8007042:	9107      	str	r1, [sp, #28]
 8007044:	9104      	str	r1, [sp, #16]
 8007046:	4909      	ldr	r1, [pc, #36]	; (800706c <siprintf+0x3c>)
 8007048:	f853 2b04 	ldr.w	r2, [r3], #4
 800704c:	9105      	str	r1, [sp, #20]
 800704e:	6800      	ldr	r0, [r0, #0]
 8007050:	9301      	str	r3, [sp, #4]
 8007052:	a902      	add	r1, sp, #8
 8007054:	f001 fc20 	bl	8008898 <_svfiprintf_r>
 8007058:	9b02      	ldr	r3, [sp, #8]
 800705a:	2200      	movs	r2, #0
 800705c:	701a      	strb	r2, [r3, #0]
 800705e:	b01c      	add	sp, #112	; 0x70
 8007060:	f85d eb04 	ldr.w	lr, [sp], #4
 8007064:	b003      	add	sp, #12
 8007066:	4770      	bx	lr
 8007068:	20000068 	.word	0x20000068
 800706c:	ffff0208 	.word	0xffff0208

08007070 <__sread>:
 8007070:	b510      	push	{r4, lr}
 8007072:	460c      	mov	r4, r1
 8007074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007078:	f000 f86c 	bl	8007154 <_read_r>
 800707c:	2800      	cmp	r0, #0
 800707e:	bfab      	itete	ge
 8007080:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007082:	89a3      	ldrhlt	r3, [r4, #12]
 8007084:	181b      	addge	r3, r3, r0
 8007086:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800708a:	bfac      	ite	ge
 800708c:	6563      	strge	r3, [r4, #84]	; 0x54
 800708e:	81a3      	strhlt	r3, [r4, #12]
 8007090:	bd10      	pop	{r4, pc}

08007092 <__swrite>:
 8007092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007096:	461f      	mov	r7, r3
 8007098:	898b      	ldrh	r3, [r1, #12]
 800709a:	05db      	lsls	r3, r3, #23
 800709c:	4605      	mov	r5, r0
 800709e:	460c      	mov	r4, r1
 80070a0:	4616      	mov	r6, r2
 80070a2:	d505      	bpl.n	80070b0 <__swrite+0x1e>
 80070a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070a8:	2302      	movs	r3, #2
 80070aa:	2200      	movs	r2, #0
 80070ac:	f000 f840 	bl	8007130 <_lseek_r>
 80070b0:	89a3      	ldrh	r3, [r4, #12]
 80070b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070ba:	81a3      	strh	r3, [r4, #12]
 80070bc:	4632      	mov	r2, r6
 80070be:	463b      	mov	r3, r7
 80070c0:	4628      	mov	r0, r5
 80070c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070c6:	f000 b857 	b.w	8007178 <_write_r>

080070ca <__sseek>:
 80070ca:	b510      	push	{r4, lr}
 80070cc:	460c      	mov	r4, r1
 80070ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070d2:	f000 f82d 	bl	8007130 <_lseek_r>
 80070d6:	1c43      	adds	r3, r0, #1
 80070d8:	89a3      	ldrh	r3, [r4, #12]
 80070da:	bf15      	itete	ne
 80070dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80070de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80070e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80070e6:	81a3      	strheq	r3, [r4, #12]
 80070e8:	bf18      	it	ne
 80070ea:	81a3      	strhne	r3, [r4, #12]
 80070ec:	bd10      	pop	{r4, pc}

080070ee <__sclose>:
 80070ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070f2:	f000 b80d 	b.w	8007110 <_close_r>

080070f6 <memset>:
 80070f6:	4402      	add	r2, r0
 80070f8:	4603      	mov	r3, r0
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d100      	bne.n	8007100 <memset+0xa>
 80070fe:	4770      	bx	lr
 8007100:	f803 1b01 	strb.w	r1, [r3], #1
 8007104:	e7f9      	b.n	80070fa <memset+0x4>
	...

08007108 <_localeconv_r>:
 8007108:	4800      	ldr	r0, [pc, #0]	; (800710c <_localeconv_r+0x4>)
 800710a:	4770      	bx	lr
 800710c:	2000015c 	.word	0x2000015c

08007110 <_close_r>:
 8007110:	b538      	push	{r3, r4, r5, lr}
 8007112:	4d06      	ldr	r5, [pc, #24]	; (800712c <_close_r+0x1c>)
 8007114:	2300      	movs	r3, #0
 8007116:	4604      	mov	r4, r0
 8007118:	4608      	mov	r0, r1
 800711a:	602b      	str	r3, [r5, #0]
 800711c:	f7fb faf3 	bl	8002706 <_close>
 8007120:	1c43      	adds	r3, r0, #1
 8007122:	d102      	bne.n	800712a <_close_r+0x1a>
 8007124:	682b      	ldr	r3, [r5, #0]
 8007126:	b103      	cbz	r3, 800712a <_close_r+0x1a>
 8007128:	6023      	str	r3, [r4, #0]
 800712a:	bd38      	pop	{r3, r4, r5, pc}
 800712c:	200005e8 	.word	0x200005e8

08007130 <_lseek_r>:
 8007130:	b538      	push	{r3, r4, r5, lr}
 8007132:	4d07      	ldr	r5, [pc, #28]	; (8007150 <_lseek_r+0x20>)
 8007134:	4604      	mov	r4, r0
 8007136:	4608      	mov	r0, r1
 8007138:	4611      	mov	r1, r2
 800713a:	2200      	movs	r2, #0
 800713c:	602a      	str	r2, [r5, #0]
 800713e:	461a      	mov	r2, r3
 8007140:	f7fb fb08 	bl	8002754 <_lseek>
 8007144:	1c43      	adds	r3, r0, #1
 8007146:	d102      	bne.n	800714e <_lseek_r+0x1e>
 8007148:	682b      	ldr	r3, [r5, #0]
 800714a:	b103      	cbz	r3, 800714e <_lseek_r+0x1e>
 800714c:	6023      	str	r3, [r4, #0]
 800714e:	bd38      	pop	{r3, r4, r5, pc}
 8007150:	200005e8 	.word	0x200005e8

08007154 <_read_r>:
 8007154:	b538      	push	{r3, r4, r5, lr}
 8007156:	4d07      	ldr	r5, [pc, #28]	; (8007174 <_read_r+0x20>)
 8007158:	4604      	mov	r4, r0
 800715a:	4608      	mov	r0, r1
 800715c:	4611      	mov	r1, r2
 800715e:	2200      	movs	r2, #0
 8007160:	602a      	str	r2, [r5, #0]
 8007162:	461a      	mov	r2, r3
 8007164:	f7fb fa96 	bl	8002694 <_read>
 8007168:	1c43      	adds	r3, r0, #1
 800716a:	d102      	bne.n	8007172 <_read_r+0x1e>
 800716c:	682b      	ldr	r3, [r5, #0]
 800716e:	b103      	cbz	r3, 8007172 <_read_r+0x1e>
 8007170:	6023      	str	r3, [r4, #0]
 8007172:	bd38      	pop	{r3, r4, r5, pc}
 8007174:	200005e8 	.word	0x200005e8

08007178 <_write_r>:
 8007178:	b538      	push	{r3, r4, r5, lr}
 800717a:	4d07      	ldr	r5, [pc, #28]	; (8007198 <_write_r+0x20>)
 800717c:	4604      	mov	r4, r0
 800717e:	4608      	mov	r0, r1
 8007180:	4611      	mov	r1, r2
 8007182:	2200      	movs	r2, #0
 8007184:	602a      	str	r2, [r5, #0]
 8007186:	461a      	mov	r2, r3
 8007188:	f7fb faa1 	bl	80026ce <_write>
 800718c:	1c43      	adds	r3, r0, #1
 800718e:	d102      	bne.n	8007196 <_write_r+0x1e>
 8007190:	682b      	ldr	r3, [r5, #0]
 8007192:	b103      	cbz	r3, 8007196 <_write_r+0x1e>
 8007194:	6023      	str	r3, [r4, #0]
 8007196:	bd38      	pop	{r3, r4, r5, pc}
 8007198:	200005e8 	.word	0x200005e8

0800719c <__errno>:
 800719c:	4b01      	ldr	r3, [pc, #4]	; (80071a4 <__errno+0x8>)
 800719e:	6818      	ldr	r0, [r3, #0]
 80071a0:	4770      	bx	lr
 80071a2:	bf00      	nop
 80071a4:	20000068 	.word	0x20000068

080071a8 <__libc_init_array>:
 80071a8:	b570      	push	{r4, r5, r6, lr}
 80071aa:	4d0d      	ldr	r5, [pc, #52]	; (80071e0 <__libc_init_array+0x38>)
 80071ac:	4c0d      	ldr	r4, [pc, #52]	; (80071e4 <__libc_init_array+0x3c>)
 80071ae:	1b64      	subs	r4, r4, r5
 80071b0:	10a4      	asrs	r4, r4, #2
 80071b2:	2600      	movs	r6, #0
 80071b4:	42a6      	cmp	r6, r4
 80071b6:	d109      	bne.n	80071cc <__libc_init_array+0x24>
 80071b8:	4d0b      	ldr	r5, [pc, #44]	; (80071e8 <__libc_init_array+0x40>)
 80071ba:	4c0c      	ldr	r4, [pc, #48]	; (80071ec <__libc_init_array+0x44>)
 80071bc:	f002 f894 	bl	80092e8 <_init>
 80071c0:	1b64      	subs	r4, r4, r5
 80071c2:	10a4      	asrs	r4, r4, #2
 80071c4:	2600      	movs	r6, #0
 80071c6:	42a6      	cmp	r6, r4
 80071c8:	d105      	bne.n	80071d6 <__libc_init_array+0x2e>
 80071ca:	bd70      	pop	{r4, r5, r6, pc}
 80071cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80071d0:	4798      	blx	r3
 80071d2:	3601      	adds	r6, #1
 80071d4:	e7ee      	b.n	80071b4 <__libc_init_array+0xc>
 80071d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80071da:	4798      	blx	r3
 80071dc:	3601      	adds	r6, #1
 80071de:	e7f2      	b.n	80071c6 <__libc_init_array+0x1e>
 80071e0:	080096bc 	.word	0x080096bc
 80071e4:	080096bc 	.word	0x080096bc
 80071e8:	080096bc 	.word	0x080096bc
 80071ec:	080096c0 	.word	0x080096c0

080071f0 <__retarget_lock_init_recursive>:
 80071f0:	4770      	bx	lr

080071f2 <__retarget_lock_acquire_recursive>:
 80071f2:	4770      	bx	lr

080071f4 <__retarget_lock_release_recursive>:
 80071f4:	4770      	bx	lr

080071f6 <quorem>:
 80071f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071fa:	6903      	ldr	r3, [r0, #16]
 80071fc:	690c      	ldr	r4, [r1, #16]
 80071fe:	42a3      	cmp	r3, r4
 8007200:	4607      	mov	r7, r0
 8007202:	db7e      	blt.n	8007302 <quorem+0x10c>
 8007204:	3c01      	subs	r4, #1
 8007206:	f101 0814 	add.w	r8, r1, #20
 800720a:	f100 0514 	add.w	r5, r0, #20
 800720e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007212:	9301      	str	r3, [sp, #4]
 8007214:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007218:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800721c:	3301      	adds	r3, #1
 800721e:	429a      	cmp	r2, r3
 8007220:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007224:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007228:	fbb2 f6f3 	udiv	r6, r2, r3
 800722c:	d331      	bcc.n	8007292 <quorem+0x9c>
 800722e:	f04f 0e00 	mov.w	lr, #0
 8007232:	4640      	mov	r0, r8
 8007234:	46ac      	mov	ip, r5
 8007236:	46f2      	mov	sl, lr
 8007238:	f850 2b04 	ldr.w	r2, [r0], #4
 800723c:	b293      	uxth	r3, r2
 800723e:	fb06 e303 	mla	r3, r6, r3, lr
 8007242:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007246:	0c1a      	lsrs	r2, r3, #16
 8007248:	b29b      	uxth	r3, r3
 800724a:	ebaa 0303 	sub.w	r3, sl, r3
 800724e:	f8dc a000 	ldr.w	sl, [ip]
 8007252:	fa13 f38a 	uxtah	r3, r3, sl
 8007256:	fb06 220e 	mla	r2, r6, lr, r2
 800725a:	9300      	str	r3, [sp, #0]
 800725c:	9b00      	ldr	r3, [sp, #0]
 800725e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007262:	b292      	uxth	r2, r2
 8007264:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007268:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800726c:	f8bd 3000 	ldrh.w	r3, [sp]
 8007270:	4581      	cmp	r9, r0
 8007272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007276:	f84c 3b04 	str.w	r3, [ip], #4
 800727a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800727e:	d2db      	bcs.n	8007238 <quorem+0x42>
 8007280:	f855 300b 	ldr.w	r3, [r5, fp]
 8007284:	b92b      	cbnz	r3, 8007292 <quorem+0x9c>
 8007286:	9b01      	ldr	r3, [sp, #4]
 8007288:	3b04      	subs	r3, #4
 800728a:	429d      	cmp	r5, r3
 800728c:	461a      	mov	r2, r3
 800728e:	d32c      	bcc.n	80072ea <quorem+0xf4>
 8007290:	613c      	str	r4, [r7, #16]
 8007292:	4638      	mov	r0, r7
 8007294:	f001 f9a6 	bl	80085e4 <__mcmp>
 8007298:	2800      	cmp	r0, #0
 800729a:	db22      	blt.n	80072e2 <quorem+0xec>
 800729c:	3601      	adds	r6, #1
 800729e:	4629      	mov	r1, r5
 80072a0:	2000      	movs	r0, #0
 80072a2:	f858 2b04 	ldr.w	r2, [r8], #4
 80072a6:	f8d1 c000 	ldr.w	ip, [r1]
 80072aa:	b293      	uxth	r3, r2
 80072ac:	1ac3      	subs	r3, r0, r3
 80072ae:	0c12      	lsrs	r2, r2, #16
 80072b0:	fa13 f38c 	uxtah	r3, r3, ip
 80072b4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80072b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80072bc:	b29b      	uxth	r3, r3
 80072be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072c2:	45c1      	cmp	r9, r8
 80072c4:	f841 3b04 	str.w	r3, [r1], #4
 80072c8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80072cc:	d2e9      	bcs.n	80072a2 <quorem+0xac>
 80072ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072d6:	b922      	cbnz	r2, 80072e2 <quorem+0xec>
 80072d8:	3b04      	subs	r3, #4
 80072da:	429d      	cmp	r5, r3
 80072dc:	461a      	mov	r2, r3
 80072de:	d30a      	bcc.n	80072f6 <quorem+0x100>
 80072e0:	613c      	str	r4, [r7, #16]
 80072e2:	4630      	mov	r0, r6
 80072e4:	b003      	add	sp, #12
 80072e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ea:	6812      	ldr	r2, [r2, #0]
 80072ec:	3b04      	subs	r3, #4
 80072ee:	2a00      	cmp	r2, #0
 80072f0:	d1ce      	bne.n	8007290 <quorem+0x9a>
 80072f2:	3c01      	subs	r4, #1
 80072f4:	e7c9      	b.n	800728a <quorem+0x94>
 80072f6:	6812      	ldr	r2, [r2, #0]
 80072f8:	3b04      	subs	r3, #4
 80072fa:	2a00      	cmp	r2, #0
 80072fc:	d1f0      	bne.n	80072e0 <quorem+0xea>
 80072fe:	3c01      	subs	r4, #1
 8007300:	e7eb      	b.n	80072da <quorem+0xe4>
 8007302:	2000      	movs	r0, #0
 8007304:	e7ee      	b.n	80072e4 <quorem+0xee>
	...

08007308 <_dtoa_r>:
 8007308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800730c:	ed2d 8b04 	vpush	{d8-d9}
 8007310:	69c5      	ldr	r5, [r0, #28]
 8007312:	b093      	sub	sp, #76	; 0x4c
 8007314:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007318:	ec57 6b10 	vmov	r6, r7, d0
 800731c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007320:	9107      	str	r1, [sp, #28]
 8007322:	4604      	mov	r4, r0
 8007324:	920a      	str	r2, [sp, #40]	; 0x28
 8007326:	930d      	str	r3, [sp, #52]	; 0x34
 8007328:	b975      	cbnz	r5, 8007348 <_dtoa_r+0x40>
 800732a:	2010      	movs	r0, #16
 800732c:	f000 fe2a 	bl	8007f84 <malloc>
 8007330:	4602      	mov	r2, r0
 8007332:	61e0      	str	r0, [r4, #28]
 8007334:	b920      	cbnz	r0, 8007340 <_dtoa_r+0x38>
 8007336:	4bae      	ldr	r3, [pc, #696]	; (80075f0 <_dtoa_r+0x2e8>)
 8007338:	21ef      	movs	r1, #239	; 0xef
 800733a:	48ae      	ldr	r0, [pc, #696]	; (80075f4 <_dtoa_r+0x2ec>)
 800733c:	f001 fc90 	bl	8008c60 <__assert_func>
 8007340:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007344:	6005      	str	r5, [r0, #0]
 8007346:	60c5      	str	r5, [r0, #12]
 8007348:	69e3      	ldr	r3, [r4, #28]
 800734a:	6819      	ldr	r1, [r3, #0]
 800734c:	b151      	cbz	r1, 8007364 <_dtoa_r+0x5c>
 800734e:	685a      	ldr	r2, [r3, #4]
 8007350:	604a      	str	r2, [r1, #4]
 8007352:	2301      	movs	r3, #1
 8007354:	4093      	lsls	r3, r2
 8007356:	608b      	str	r3, [r1, #8]
 8007358:	4620      	mov	r0, r4
 800735a:	f000 ff07 	bl	800816c <_Bfree>
 800735e:	69e3      	ldr	r3, [r4, #28]
 8007360:	2200      	movs	r2, #0
 8007362:	601a      	str	r2, [r3, #0]
 8007364:	1e3b      	subs	r3, r7, #0
 8007366:	bfbb      	ittet	lt
 8007368:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800736c:	9303      	strlt	r3, [sp, #12]
 800736e:	2300      	movge	r3, #0
 8007370:	2201      	movlt	r2, #1
 8007372:	bfac      	ite	ge
 8007374:	f8c8 3000 	strge.w	r3, [r8]
 8007378:	f8c8 2000 	strlt.w	r2, [r8]
 800737c:	4b9e      	ldr	r3, [pc, #632]	; (80075f8 <_dtoa_r+0x2f0>)
 800737e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007382:	ea33 0308 	bics.w	r3, r3, r8
 8007386:	d11b      	bne.n	80073c0 <_dtoa_r+0xb8>
 8007388:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800738a:	f242 730f 	movw	r3, #9999	; 0x270f
 800738e:	6013      	str	r3, [r2, #0]
 8007390:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007394:	4333      	orrs	r3, r6
 8007396:	f000 8593 	beq.w	8007ec0 <_dtoa_r+0xbb8>
 800739a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800739c:	b963      	cbnz	r3, 80073b8 <_dtoa_r+0xb0>
 800739e:	4b97      	ldr	r3, [pc, #604]	; (80075fc <_dtoa_r+0x2f4>)
 80073a0:	e027      	b.n	80073f2 <_dtoa_r+0xea>
 80073a2:	4b97      	ldr	r3, [pc, #604]	; (8007600 <_dtoa_r+0x2f8>)
 80073a4:	9300      	str	r3, [sp, #0]
 80073a6:	3308      	adds	r3, #8
 80073a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80073aa:	6013      	str	r3, [r2, #0]
 80073ac:	9800      	ldr	r0, [sp, #0]
 80073ae:	b013      	add	sp, #76	; 0x4c
 80073b0:	ecbd 8b04 	vpop	{d8-d9}
 80073b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073b8:	4b90      	ldr	r3, [pc, #576]	; (80075fc <_dtoa_r+0x2f4>)
 80073ba:	9300      	str	r3, [sp, #0]
 80073bc:	3303      	adds	r3, #3
 80073be:	e7f3      	b.n	80073a8 <_dtoa_r+0xa0>
 80073c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80073c4:	2200      	movs	r2, #0
 80073c6:	ec51 0b17 	vmov	r0, r1, d7
 80073ca:	eeb0 8a47 	vmov.f32	s16, s14
 80073ce:	eef0 8a67 	vmov.f32	s17, s15
 80073d2:	2300      	movs	r3, #0
 80073d4:	f7f9 fb80 	bl	8000ad8 <__aeabi_dcmpeq>
 80073d8:	4681      	mov	r9, r0
 80073da:	b160      	cbz	r0, 80073f6 <_dtoa_r+0xee>
 80073dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073de:	2301      	movs	r3, #1
 80073e0:	6013      	str	r3, [r2, #0]
 80073e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	f000 8568 	beq.w	8007eba <_dtoa_r+0xbb2>
 80073ea:	4b86      	ldr	r3, [pc, #536]	; (8007604 <_dtoa_r+0x2fc>)
 80073ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80073ee:	6013      	str	r3, [r2, #0]
 80073f0:	3b01      	subs	r3, #1
 80073f2:	9300      	str	r3, [sp, #0]
 80073f4:	e7da      	b.n	80073ac <_dtoa_r+0xa4>
 80073f6:	aa10      	add	r2, sp, #64	; 0x40
 80073f8:	a911      	add	r1, sp, #68	; 0x44
 80073fa:	4620      	mov	r0, r4
 80073fc:	eeb0 0a48 	vmov.f32	s0, s16
 8007400:	eef0 0a68 	vmov.f32	s1, s17
 8007404:	f001 f994 	bl	8008730 <__d2b>
 8007408:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800740c:	4682      	mov	sl, r0
 800740e:	2d00      	cmp	r5, #0
 8007410:	d07f      	beq.n	8007512 <_dtoa_r+0x20a>
 8007412:	ee18 3a90 	vmov	r3, s17
 8007416:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800741a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800741e:	ec51 0b18 	vmov	r0, r1, d8
 8007422:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007426:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800742a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800742e:	4619      	mov	r1, r3
 8007430:	2200      	movs	r2, #0
 8007432:	4b75      	ldr	r3, [pc, #468]	; (8007608 <_dtoa_r+0x300>)
 8007434:	f7f8 ff30 	bl	8000298 <__aeabi_dsub>
 8007438:	a367      	add	r3, pc, #412	; (adr r3, 80075d8 <_dtoa_r+0x2d0>)
 800743a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743e:	f7f9 f8e3 	bl	8000608 <__aeabi_dmul>
 8007442:	a367      	add	r3, pc, #412	; (adr r3, 80075e0 <_dtoa_r+0x2d8>)
 8007444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007448:	f7f8 ff28 	bl	800029c <__adddf3>
 800744c:	4606      	mov	r6, r0
 800744e:	4628      	mov	r0, r5
 8007450:	460f      	mov	r7, r1
 8007452:	f7f9 f86f 	bl	8000534 <__aeabi_i2d>
 8007456:	a364      	add	r3, pc, #400	; (adr r3, 80075e8 <_dtoa_r+0x2e0>)
 8007458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745c:	f7f9 f8d4 	bl	8000608 <__aeabi_dmul>
 8007460:	4602      	mov	r2, r0
 8007462:	460b      	mov	r3, r1
 8007464:	4630      	mov	r0, r6
 8007466:	4639      	mov	r1, r7
 8007468:	f7f8 ff18 	bl	800029c <__adddf3>
 800746c:	4606      	mov	r6, r0
 800746e:	460f      	mov	r7, r1
 8007470:	f7f9 fb7a 	bl	8000b68 <__aeabi_d2iz>
 8007474:	2200      	movs	r2, #0
 8007476:	4683      	mov	fp, r0
 8007478:	2300      	movs	r3, #0
 800747a:	4630      	mov	r0, r6
 800747c:	4639      	mov	r1, r7
 800747e:	f7f9 fb35 	bl	8000aec <__aeabi_dcmplt>
 8007482:	b148      	cbz	r0, 8007498 <_dtoa_r+0x190>
 8007484:	4658      	mov	r0, fp
 8007486:	f7f9 f855 	bl	8000534 <__aeabi_i2d>
 800748a:	4632      	mov	r2, r6
 800748c:	463b      	mov	r3, r7
 800748e:	f7f9 fb23 	bl	8000ad8 <__aeabi_dcmpeq>
 8007492:	b908      	cbnz	r0, 8007498 <_dtoa_r+0x190>
 8007494:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007498:	f1bb 0f16 	cmp.w	fp, #22
 800749c:	d857      	bhi.n	800754e <_dtoa_r+0x246>
 800749e:	4b5b      	ldr	r3, [pc, #364]	; (800760c <_dtoa_r+0x304>)
 80074a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80074a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a8:	ec51 0b18 	vmov	r0, r1, d8
 80074ac:	f7f9 fb1e 	bl	8000aec <__aeabi_dcmplt>
 80074b0:	2800      	cmp	r0, #0
 80074b2:	d04e      	beq.n	8007552 <_dtoa_r+0x24a>
 80074b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80074b8:	2300      	movs	r3, #0
 80074ba:	930c      	str	r3, [sp, #48]	; 0x30
 80074bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80074be:	1b5b      	subs	r3, r3, r5
 80074c0:	1e5a      	subs	r2, r3, #1
 80074c2:	bf45      	ittet	mi
 80074c4:	f1c3 0301 	rsbmi	r3, r3, #1
 80074c8:	9305      	strmi	r3, [sp, #20]
 80074ca:	2300      	movpl	r3, #0
 80074cc:	2300      	movmi	r3, #0
 80074ce:	9206      	str	r2, [sp, #24]
 80074d0:	bf54      	ite	pl
 80074d2:	9305      	strpl	r3, [sp, #20]
 80074d4:	9306      	strmi	r3, [sp, #24]
 80074d6:	f1bb 0f00 	cmp.w	fp, #0
 80074da:	db3c      	blt.n	8007556 <_dtoa_r+0x24e>
 80074dc:	9b06      	ldr	r3, [sp, #24]
 80074de:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80074e2:	445b      	add	r3, fp
 80074e4:	9306      	str	r3, [sp, #24]
 80074e6:	2300      	movs	r3, #0
 80074e8:	9308      	str	r3, [sp, #32]
 80074ea:	9b07      	ldr	r3, [sp, #28]
 80074ec:	2b09      	cmp	r3, #9
 80074ee:	d868      	bhi.n	80075c2 <_dtoa_r+0x2ba>
 80074f0:	2b05      	cmp	r3, #5
 80074f2:	bfc4      	itt	gt
 80074f4:	3b04      	subgt	r3, #4
 80074f6:	9307      	strgt	r3, [sp, #28]
 80074f8:	9b07      	ldr	r3, [sp, #28]
 80074fa:	f1a3 0302 	sub.w	r3, r3, #2
 80074fe:	bfcc      	ite	gt
 8007500:	2500      	movgt	r5, #0
 8007502:	2501      	movle	r5, #1
 8007504:	2b03      	cmp	r3, #3
 8007506:	f200 8085 	bhi.w	8007614 <_dtoa_r+0x30c>
 800750a:	e8df f003 	tbb	[pc, r3]
 800750e:	3b2e      	.short	0x3b2e
 8007510:	5839      	.short	0x5839
 8007512:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007516:	441d      	add	r5, r3
 8007518:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800751c:	2b20      	cmp	r3, #32
 800751e:	bfc1      	itttt	gt
 8007520:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007524:	fa08 f803 	lslgt.w	r8, r8, r3
 8007528:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800752c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007530:	bfd6      	itet	le
 8007532:	f1c3 0320 	rsble	r3, r3, #32
 8007536:	ea48 0003 	orrgt.w	r0, r8, r3
 800753a:	fa06 f003 	lslle.w	r0, r6, r3
 800753e:	f7f8 ffe9 	bl	8000514 <__aeabi_ui2d>
 8007542:	2201      	movs	r2, #1
 8007544:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007548:	3d01      	subs	r5, #1
 800754a:	920e      	str	r2, [sp, #56]	; 0x38
 800754c:	e76f      	b.n	800742e <_dtoa_r+0x126>
 800754e:	2301      	movs	r3, #1
 8007550:	e7b3      	b.n	80074ba <_dtoa_r+0x1b2>
 8007552:	900c      	str	r0, [sp, #48]	; 0x30
 8007554:	e7b2      	b.n	80074bc <_dtoa_r+0x1b4>
 8007556:	9b05      	ldr	r3, [sp, #20]
 8007558:	eba3 030b 	sub.w	r3, r3, fp
 800755c:	9305      	str	r3, [sp, #20]
 800755e:	f1cb 0300 	rsb	r3, fp, #0
 8007562:	9308      	str	r3, [sp, #32]
 8007564:	2300      	movs	r3, #0
 8007566:	930b      	str	r3, [sp, #44]	; 0x2c
 8007568:	e7bf      	b.n	80074ea <_dtoa_r+0x1e2>
 800756a:	2300      	movs	r3, #0
 800756c:	9309      	str	r3, [sp, #36]	; 0x24
 800756e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007570:	2b00      	cmp	r3, #0
 8007572:	dc52      	bgt.n	800761a <_dtoa_r+0x312>
 8007574:	2301      	movs	r3, #1
 8007576:	9301      	str	r3, [sp, #4]
 8007578:	9304      	str	r3, [sp, #16]
 800757a:	461a      	mov	r2, r3
 800757c:	920a      	str	r2, [sp, #40]	; 0x28
 800757e:	e00b      	b.n	8007598 <_dtoa_r+0x290>
 8007580:	2301      	movs	r3, #1
 8007582:	e7f3      	b.n	800756c <_dtoa_r+0x264>
 8007584:	2300      	movs	r3, #0
 8007586:	9309      	str	r3, [sp, #36]	; 0x24
 8007588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800758a:	445b      	add	r3, fp
 800758c:	9301      	str	r3, [sp, #4]
 800758e:	3301      	adds	r3, #1
 8007590:	2b01      	cmp	r3, #1
 8007592:	9304      	str	r3, [sp, #16]
 8007594:	bfb8      	it	lt
 8007596:	2301      	movlt	r3, #1
 8007598:	69e0      	ldr	r0, [r4, #28]
 800759a:	2100      	movs	r1, #0
 800759c:	2204      	movs	r2, #4
 800759e:	f102 0614 	add.w	r6, r2, #20
 80075a2:	429e      	cmp	r6, r3
 80075a4:	d93d      	bls.n	8007622 <_dtoa_r+0x31a>
 80075a6:	6041      	str	r1, [r0, #4]
 80075a8:	4620      	mov	r0, r4
 80075aa:	f000 fd9f 	bl	80080ec <_Balloc>
 80075ae:	9000      	str	r0, [sp, #0]
 80075b0:	2800      	cmp	r0, #0
 80075b2:	d139      	bne.n	8007628 <_dtoa_r+0x320>
 80075b4:	4b16      	ldr	r3, [pc, #88]	; (8007610 <_dtoa_r+0x308>)
 80075b6:	4602      	mov	r2, r0
 80075b8:	f240 11af 	movw	r1, #431	; 0x1af
 80075bc:	e6bd      	b.n	800733a <_dtoa_r+0x32>
 80075be:	2301      	movs	r3, #1
 80075c0:	e7e1      	b.n	8007586 <_dtoa_r+0x27e>
 80075c2:	2501      	movs	r5, #1
 80075c4:	2300      	movs	r3, #0
 80075c6:	9307      	str	r3, [sp, #28]
 80075c8:	9509      	str	r5, [sp, #36]	; 0x24
 80075ca:	f04f 33ff 	mov.w	r3, #4294967295
 80075ce:	9301      	str	r3, [sp, #4]
 80075d0:	9304      	str	r3, [sp, #16]
 80075d2:	2200      	movs	r2, #0
 80075d4:	2312      	movs	r3, #18
 80075d6:	e7d1      	b.n	800757c <_dtoa_r+0x274>
 80075d8:	636f4361 	.word	0x636f4361
 80075dc:	3fd287a7 	.word	0x3fd287a7
 80075e0:	8b60c8b3 	.word	0x8b60c8b3
 80075e4:	3fc68a28 	.word	0x3fc68a28
 80075e8:	509f79fb 	.word	0x509f79fb
 80075ec:	3fd34413 	.word	0x3fd34413
 80075f0:	08009381 	.word	0x08009381
 80075f4:	08009398 	.word	0x08009398
 80075f8:	7ff00000 	.word	0x7ff00000
 80075fc:	0800937d 	.word	0x0800937d
 8007600:	08009374 	.word	0x08009374
 8007604:	08009351 	.word	0x08009351
 8007608:	3ff80000 	.word	0x3ff80000
 800760c:	08009488 	.word	0x08009488
 8007610:	080093f0 	.word	0x080093f0
 8007614:	2301      	movs	r3, #1
 8007616:	9309      	str	r3, [sp, #36]	; 0x24
 8007618:	e7d7      	b.n	80075ca <_dtoa_r+0x2c2>
 800761a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800761c:	9301      	str	r3, [sp, #4]
 800761e:	9304      	str	r3, [sp, #16]
 8007620:	e7ba      	b.n	8007598 <_dtoa_r+0x290>
 8007622:	3101      	adds	r1, #1
 8007624:	0052      	lsls	r2, r2, #1
 8007626:	e7ba      	b.n	800759e <_dtoa_r+0x296>
 8007628:	69e3      	ldr	r3, [r4, #28]
 800762a:	9a00      	ldr	r2, [sp, #0]
 800762c:	601a      	str	r2, [r3, #0]
 800762e:	9b04      	ldr	r3, [sp, #16]
 8007630:	2b0e      	cmp	r3, #14
 8007632:	f200 80a8 	bhi.w	8007786 <_dtoa_r+0x47e>
 8007636:	2d00      	cmp	r5, #0
 8007638:	f000 80a5 	beq.w	8007786 <_dtoa_r+0x47e>
 800763c:	f1bb 0f00 	cmp.w	fp, #0
 8007640:	dd38      	ble.n	80076b4 <_dtoa_r+0x3ac>
 8007642:	4bc0      	ldr	r3, [pc, #768]	; (8007944 <_dtoa_r+0x63c>)
 8007644:	f00b 020f 	and.w	r2, fp, #15
 8007648:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800764c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007650:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007654:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007658:	d019      	beq.n	800768e <_dtoa_r+0x386>
 800765a:	4bbb      	ldr	r3, [pc, #748]	; (8007948 <_dtoa_r+0x640>)
 800765c:	ec51 0b18 	vmov	r0, r1, d8
 8007660:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007664:	f7f9 f8fa 	bl	800085c <__aeabi_ddiv>
 8007668:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800766c:	f008 080f 	and.w	r8, r8, #15
 8007670:	2503      	movs	r5, #3
 8007672:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007948 <_dtoa_r+0x640>
 8007676:	f1b8 0f00 	cmp.w	r8, #0
 800767a:	d10a      	bne.n	8007692 <_dtoa_r+0x38a>
 800767c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007680:	4632      	mov	r2, r6
 8007682:	463b      	mov	r3, r7
 8007684:	f7f9 f8ea 	bl	800085c <__aeabi_ddiv>
 8007688:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800768c:	e02b      	b.n	80076e6 <_dtoa_r+0x3de>
 800768e:	2502      	movs	r5, #2
 8007690:	e7ef      	b.n	8007672 <_dtoa_r+0x36a>
 8007692:	f018 0f01 	tst.w	r8, #1
 8007696:	d008      	beq.n	80076aa <_dtoa_r+0x3a2>
 8007698:	4630      	mov	r0, r6
 800769a:	4639      	mov	r1, r7
 800769c:	e9d9 2300 	ldrd	r2, r3, [r9]
 80076a0:	f7f8 ffb2 	bl	8000608 <__aeabi_dmul>
 80076a4:	3501      	adds	r5, #1
 80076a6:	4606      	mov	r6, r0
 80076a8:	460f      	mov	r7, r1
 80076aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80076ae:	f109 0908 	add.w	r9, r9, #8
 80076b2:	e7e0      	b.n	8007676 <_dtoa_r+0x36e>
 80076b4:	f000 809f 	beq.w	80077f6 <_dtoa_r+0x4ee>
 80076b8:	f1cb 0600 	rsb	r6, fp, #0
 80076bc:	4ba1      	ldr	r3, [pc, #644]	; (8007944 <_dtoa_r+0x63c>)
 80076be:	4fa2      	ldr	r7, [pc, #648]	; (8007948 <_dtoa_r+0x640>)
 80076c0:	f006 020f 	and.w	r2, r6, #15
 80076c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076cc:	ec51 0b18 	vmov	r0, r1, d8
 80076d0:	f7f8 ff9a 	bl	8000608 <__aeabi_dmul>
 80076d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076d8:	1136      	asrs	r6, r6, #4
 80076da:	2300      	movs	r3, #0
 80076dc:	2502      	movs	r5, #2
 80076de:	2e00      	cmp	r6, #0
 80076e0:	d17e      	bne.n	80077e0 <_dtoa_r+0x4d8>
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1d0      	bne.n	8007688 <_dtoa_r+0x380>
 80076e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076e8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f000 8084 	beq.w	80077fa <_dtoa_r+0x4f2>
 80076f2:	4b96      	ldr	r3, [pc, #600]	; (800794c <_dtoa_r+0x644>)
 80076f4:	2200      	movs	r2, #0
 80076f6:	4640      	mov	r0, r8
 80076f8:	4649      	mov	r1, r9
 80076fa:	f7f9 f9f7 	bl	8000aec <__aeabi_dcmplt>
 80076fe:	2800      	cmp	r0, #0
 8007700:	d07b      	beq.n	80077fa <_dtoa_r+0x4f2>
 8007702:	9b04      	ldr	r3, [sp, #16]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d078      	beq.n	80077fa <_dtoa_r+0x4f2>
 8007708:	9b01      	ldr	r3, [sp, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	dd39      	ble.n	8007782 <_dtoa_r+0x47a>
 800770e:	4b90      	ldr	r3, [pc, #576]	; (8007950 <_dtoa_r+0x648>)
 8007710:	2200      	movs	r2, #0
 8007712:	4640      	mov	r0, r8
 8007714:	4649      	mov	r1, r9
 8007716:	f7f8 ff77 	bl	8000608 <__aeabi_dmul>
 800771a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800771e:	9e01      	ldr	r6, [sp, #4]
 8007720:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007724:	3501      	adds	r5, #1
 8007726:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800772a:	4628      	mov	r0, r5
 800772c:	f7f8 ff02 	bl	8000534 <__aeabi_i2d>
 8007730:	4642      	mov	r2, r8
 8007732:	464b      	mov	r3, r9
 8007734:	f7f8 ff68 	bl	8000608 <__aeabi_dmul>
 8007738:	4b86      	ldr	r3, [pc, #536]	; (8007954 <_dtoa_r+0x64c>)
 800773a:	2200      	movs	r2, #0
 800773c:	f7f8 fdae 	bl	800029c <__adddf3>
 8007740:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007744:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007748:	9303      	str	r3, [sp, #12]
 800774a:	2e00      	cmp	r6, #0
 800774c:	d158      	bne.n	8007800 <_dtoa_r+0x4f8>
 800774e:	4b82      	ldr	r3, [pc, #520]	; (8007958 <_dtoa_r+0x650>)
 8007750:	2200      	movs	r2, #0
 8007752:	4640      	mov	r0, r8
 8007754:	4649      	mov	r1, r9
 8007756:	f7f8 fd9f 	bl	8000298 <__aeabi_dsub>
 800775a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800775e:	4680      	mov	r8, r0
 8007760:	4689      	mov	r9, r1
 8007762:	f7f9 f9e1 	bl	8000b28 <__aeabi_dcmpgt>
 8007766:	2800      	cmp	r0, #0
 8007768:	f040 8296 	bne.w	8007c98 <_dtoa_r+0x990>
 800776c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007770:	4640      	mov	r0, r8
 8007772:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007776:	4649      	mov	r1, r9
 8007778:	f7f9 f9b8 	bl	8000aec <__aeabi_dcmplt>
 800777c:	2800      	cmp	r0, #0
 800777e:	f040 8289 	bne.w	8007c94 <_dtoa_r+0x98c>
 8007782:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007786:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007788:	2b00      	cmp	r3, #0
 800778a:	f2c0 814e 	blt.w	8007a2a <_dtoa_r+0x722>
 800778e:	f1bb 0f0e 	cmp.w	fp, #14
 8007792:	f300 814a 	bgt.w	8007a2a <_dtoa_r+0x722>
 8007796:	4b6b      	ldr	r3, [pc, #428]	; (8007944 <_dtoa_r+0x63c>)
 8007798:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800779c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80077a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	f280 80dc 	bge.w	8007960 <_dtoa_r+0x658>
 80077a8:	9b04      	ldr	r3, [sp, #16]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	f300 80d8 	bgt.w	8007960 <_dtoa_r+0x658>
 80077b0:	f040 826f 	bne.w	8007c92 <_dtoa_r+0x98a>
 80077b4:	4b68      	ldr	r3, [pc, #416]	; (8007958 <_dtoa_r+0x650>)
 80077b6:	2200      	movs	r2, #0
 80077b8:	4640      	mov	r0, r8
 80077ba:	4649      	mov	r1, r9
 80077bc:	f7f8 ff24 	bl	8000608 <__aeabi_dmul>
 80077c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077c4:	f7f9 f9a6 	bl	8000b14 <__aeabi_dcmpge>
 80077c8:	9e04      	ldr	r6, [sp, #16]
 80077ca:	4637      	mov	r7, r6
 80077cc:	2800      	cmp	r0, #0
 80077ce:	f040 8245 	bne.w	8007c5c <_dtoa_r+0x954>
 80077d2:	9d00      	ldr	r5, [sp, #0]
 80077d4:	2331      	movs	r3, #49	; 0x31
 80077d6:	f805 3b01 	strb.w	r3, [r5], #1
 80077da:	f10b 0b01 	add.w	fp, fp, #1
 80077de:	e241      	b.n	8007c64 <_dtoa_r+0x95c>
 80077e0:	07f2      	lsls	r2, r6, #31
 80077e2:	d505      	bpl.n	80077f0 <_dtoa_r+0x4e8>
 80077e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077e8:	f7f8 ff0e 	bl	8000608 <__aeabi_dmul>
 80077ec:	3501      	adds	r5, #1
 80077ee:	2301      	movs	r3, #1
 80077f0:	1076      	asrs	r6, r6, #1
 80077f2:	3708      	adds	r7, #8
 80077f4:	e773      	b.n	80076de <_dtoa_r+0x3d6>
 80077f6:	2502      	movs	r5, #2
 80077f8:	e775      	b.n	80076e6 <_dtoa_r+0x3de>
 80077fa:	9e04      	ldr	r6, [sp, #16]
 80077fc:	465f      	mov	r7, fp
 80077fe:	e792      	b.n	8007726 <_dtoa_r+0x41e>
 8007800:	9900      	ldr	r1, [sp, #0]
 8007802:	4b50      	ldr	r3, [pc, #320]	; (8007944 <_dtoa_r+0x63c>)
 8007804:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007808:	4431      	add	r1, r6
 800780a:	9102      	str	r1, [sp, #8]
 800780c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800780e:	eeb0 9a47 	vmov.f32	s18, s14
 8007812:	eef0 9a67 	vmov.f32	s19, s15
 8007816:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800781a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800781e:	2900      	cmp	r1, #0
 8007820:	d044      	beq.n	80078ac <_dtoa_r+0x5a4>
 8007822:	494e      	ldr	r1, [pc, #312]	; (800795c <_dtoa_r+0x654>)
 8007824:	2000      	movs	r0, #0
 8007826:	f7f9 f819 	bl	800085c <__aeabi_ddiv>
 800782a:	ec53 2b19 	vmov	r2, r3, d9
 800782e:	f7f8 fd33 	bl	8000298 <__aeabi_dsub>
 8007832:	9d00      	ldr	r5, [sp, #0]
 8007834:	ec41 0b19 	vmov	d9, r0, r1
 8007838:	4649      	mov	r1, r9
 800783a:	4640      	mov	r0, r8
 800783c:	f7f9 f994 	bl	8000b68 <__aeabi_d2iz>
 8007840:	4606      	mov	r6, r0
 8007842:	f7f8 fe77 	bl	8000534 <__aeabi_i2d>
 8007846:	4602      	mov	r2, r0
 8007848:	460b      	mov	r3, r1
 800784a:	4640      	mov	r0, r8
 800784c:	4649      	mov	r1, r9
 800784e:	f7f8 fd23 	bl	8000298 <__aeabi_dsub>
 8007852:	3630      	adds	r6, #48	; 0x30
 8007854:	f805 6b01 	strb.w	r6, [r5], #1
 8007858:	ec53 2b19 	vmov	r2, r3, d9
 800785c:	4680      	mov	r8, r0
 800785e:	4689      	mov	r9, r1
 8007860:	f7f9 f944 	bl	8000aec <__aeabi_dcmplt>
 8007864:	2800      	cmp	r0, #0
 8007866:	d164      	bne.n	8007932 <_dtoa_r+0x62a>
 8007868:	4642      	mov	r2, r8
 800786a:	464b      	mov	r3, r9
 800786c:	4937      	ldr	r1, [pc, #220]	; (800794c <_dtoa_r+0x644>)
 800786e:	2000      	movs	r0, #0
 8007870:	f7f8 fd12 	bl	8000298 <__aeabi_dsub>
 8007874:	ec53 2b19 	vmov	r2, r3, d9
 8007878:	f7f9 f938 	bl	8000aec <__aeabi_dcmplt>
 800787c:	2800      	cmp	r0, #0
 800787e:	f040 80b6 	bne.w	80079ee <_dtoa_r+0x6e6>
 8007882:	9b02      	ldr	r3, [sp, #8]
 8007884:	429d      	cmp	r5, r3
 8007886:	f43f af7c 	beq.w	8007782 <_dtoa_r+0x47a>
 800788a:	4b31      	ldr	r3, [pc, #196]	; (8007950 <_dtoa_r+0x648>)
 800788c:	ec51 0b19 	vmov	r0, r1, d9
 8007890:	2200      	movs	r2, #0
 8007892:	f7f8 feb9 	bl	8000608 <__aeabi_dmul>
 8007896:	4b2e      	ldr	r3, [pc, #184]	; (8007950 <_dtoa_r+0x648>)
 8007898:	ec41 0b19 	vmov	d9, r0, r1
 800789c:	2200      	movs	r2, #0
 800789e:	4640      	mov	r0, r8
 80078a0:	4649      	mov	r1, r9
 80078a2:	f7f8 feb1 	bl	8000608 <__aeabi_dmul>
 80078a6:	4680      	mov	r8, r0
 80078a8:	4689      	mov	r9, r1
 80078aa:	e7c5      	b.n	8007838 <_dtoa_r+0x530>
 80078ac:	ec51 0b17 	vmov	r0, r1, d7
 80078b0:	f7f8 feaa 	bl	8000608 <__aeabi_dmul>
 80078b4:	9b02      	ldr	r3, [sp, #8]
 80078b6:	9d00      	ldr	r5, [sp, #0]
 80078b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80078ba:	ec41 0b19 	vmov	d9, r0, r1
 80078be:	4649      	mov	r1, r9
 80078c0:	4640      	mov	r0, r8
 80078c2:	f7f9 f951 	bl	8000b68 <__aeabi_d2iz>
 80078c6:	4606      	mov	r6, r0
 80078c8:	f7f8 fe34 	bl	8000534 <__aeabi_i2d>
 80078cc:	3630      	adds	r6, #48	; 0x30
 80078ce:	4602      	mov	r2, r0
 80078d0:	460b      	mov	r3, r1
 80078d2:	4640      	mov	r0, r8
 80078d4:	4649      	mov	r1, r9
 80078d6:	f7f8 fcdf 	bl	8000298 <__aeabi_dsub>
 80078da:	f805 6b01 	strb.w	r6, [r5], #1
 80078de:	9b02      	ldr	r3, [sp, #8]
 80078e0:	429d      	cmp	r5, r3
 80078e2:	4680      	mov	r8, r0
 80078e4:	4689      	mov	r9, r1
 80078e6:	f04f 0200 	mov.w	r2, #0
 80078ea:	d124      	bne.n	8007936 <_dtoa_r+0x62e>
 80078ec:	4b1b      	ldr	r3, [pc, #108]	; (800795c <_dtoa_r+0x654>)
 80078ee:	ec51 0b19 	vmov	r0, r1, d9
 80078f2:	f7f8 fcd3 	bl	800029c <__adddf3>
 80078f6:	4602      	mov	r2, r0
 80078f8:	460b      	mov	r3, r1
 80078fa:	4640      	mov	r0, r8
 80078fc:	4649      	mov	r1, r9
 80078fe:	f7f9 f913 	bl	8000b28 <__aeabi_dcmpgt>
 8007902:	2800      	cmp	r0, #0
 8007904:	d173      	bne.n	80079ee <_dtoa_r+0x6e6>
 8007906:	ec53 2b19 	vmov	r2, r3, d9
 800790a:	4914      	ldr	r1, [pc, #80]	; (800795c <_dtoa_r+0x654>)
 800790c:	2000      	movs	r0, #0
 800790e:	f7f8 fcc3 	bl	8000298 <__aeabi_dsub>
 8007912:	4602      	mov	r2, r0
 8007914:	460b      	mov	r3, r1
 8007916:	4640      	mov	r0, r8
 8007918:	4649      	mov	r1, r9
 800791a:	f7f9 f8e7 	bl	8000aec <__aeabi_dcmplt>
 800791e:	2800      	cmp	r0, #0
 8007920:	f43f af2f 	beq.w	8007782 <_dtoa_r+0x47a>
 8007924:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007926:	1e6b      	subs	r3, r5, #1
 8007928:	930f      	str	r3, [sp, #60]	; 0x3c
 800792a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800792e:	2b30      	cmp	r3, #48	; 0x30
 8007930:	d0f8      	beq.n	8007924 <_dtoa_r+0x61c>
 8007932:	46bb      	mov	fp, r7
 8007934:	e04a      	b.n	80079cc <_dtoa_r+0x6c4>
 8007936:	4b06      	ldr	r3, [pc, #24]	; (8007950 <_dtoa_r+0x648>)
 8007938:	f7f8 fe66 	bl	8000608 <__aeabi_dmul>
 800793c:	4680      	mov	r8, r0
 800793e:	4689      	mov	r9, r1
 8007940:	e7bd      	b.n	80078be <_dtoa_r+0x5b6>
 8007942:	bf00      	nop
 8007944:	08009488 	.word	0x08009488
 8007948:	08009460 	.word	0x08009460
 800794c:	3ff00000 	.word	0x3ff00000
 8007950:	40240000 	.word	0x40240000
 8007954:	401c0000 	.word	0x401c0000
 8007958:	40140000 	.word	0x40140000
 800795c:	3fe00000 	.word	0x3fe00000
 8007960:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007964:	9d00      	ldr	r5, [sp, #0]
 8007966:	4642      	mov	r2, r8
 8007968:	464b      	mov	r3, r9
 800796a:	4630      	mov	r0, r6
 800796c:	4639      	mov	r1, r7
 800796e:	f7f8 ff75 	bl	800085c <__aeabi_ddiv>
 8007972:	f7f9 f8f9 	bl	8000b68 <__aeabi_d2iz>
 8007976:	9001      	str	r0, [sp, #4]
 8007978:	f7f8 fddc 	bl	8000534 <__aeabi_i2d>
 800797c:	4642      	mov	r2, r8
 800797e:	464b      	mov	r3, r9
 8007980:	f7f8 fe42 	bl	8000608 <__aeabi_dmul>
 8007984:	4602      	mov	r2, r0
 8007986:	460b      	mov	r3, r1
 8007988:	4630      	mov	r0, r6
 800798a:	4639      	mov	r1, r7
 800798c:	f7f8 fc84 	bl	8000298 <__aeabi_dsub>
 8007990:	9e01      	ldr	r6, [sp, #4]
 8007992:	9f04      	ldr	r7, [sp, #16]
 8007994:	3630      	adds	r6, #48	; 0x30
 8007996:	f805 6b01 	strb.w	r6, [r5], #1
 800799a:	9e00      	ldr	r6, [sp, #0]
 800799c:	1bae      	subs	r6, r5, r6
 800799e:	42b7      	cmp	r7, r6
 80079a0:	4602      	mov	r2, r0
 80079a2:	460b      	mov	r3, r1
 80079a4:	d134      	bne.n	8007a10 <_dtoa_r+0x708>
 80079a6:	f7f8 fc79 	bl	800029c <__adddf3>
 80079aa:	4642      	mov	r2, r8
 80079ac:	464b      	mov	r3, r9
 80079ae:	4606      	mov	r6, r0
 80079b0:	460f      	mov	r7, r1
 80079b2:	f7f9 f8b9 	bl	8000b28 <__aeabi_dcmpgt>
 80079b6:	b9c8      	cbnz	r0, 80079ec <_dtoa_r+0x6e4>
 80079b8:	4642      	mov	r2, r8
 80079ba:	464b      	mov	r3, r9
 80079bc:	4630      	mov	r0, r6
 80079be:	4639      	mov	r1, r7
 80079c0:	f7f9 f88a 	bl	8000ad8 <__aeabi_dcmpeq>
 80079c4:	b110      	cbz	r0, 80079cc <_dtoa_r+0x6c4>
 80079c6:	9b01      	ldr	r3, [sp, #4]
 80079c8:	07db      	lsls	r3, r3, #31
 80079ca:	d40f      	bmi.n	80079ec <_dtoa_r+0x6e4>
 80079cc:	4651      	mov	r1, sl
 80079ce:	4620      	mov	r0, r4
 80079d0:	f000 fbcc 	bl	800816c <_Bfree>
 80079d4:	2300      	movs	r3, #0
 80079d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80079d8:	702b      	strb	r3, [r5, #0]
 80079da:	f10b 0301 	add.w	r3, fp, #1
 80079de:	6013      	str	r3, [r2, #0]
 80079e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	f43f ace2 	beq.w	80073ac <_dtoa_r+0xa4>
 80079e8:	601d      	str	r5, [r3, #0]
 80079ea:	e4df      	b.n	80073ac <_dtoa_r+0xa4>
 80079ec:	465f      	mov	r7, fp
 80079ee:	462b      	mov	r3, r5
 80079f0:	461d      	mov	r5, r3
 80079f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079f6:	2a39      	cmp	r2, #57	; 0x39
 80079f8:	d106      	bne.n	8007a08 <_dtoa_r+0x700>
 80079fa:	9a00      	ldr	r2, [sp, #0]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d1f7      	bne.n	80079f0 <_dtoa_r+0x6e8>
 8007a00:	9900      	ldr	r1, [sp, #0]
 8007a02:	2230      	movs	r2, #48	; 0x30
 8007a04:	3701      	adds	r7, #1
 8007a06:	700a      	strb	r2, [r1, #0]
 8007a08:	781a      	ldrb	r2, [r3, #0]
 8007a0a:	3201      	adds	r2, #1
 8007a0c:	701a      	strb	r2, [r3, #0]
 8007a0e:	e790      	b.n	8007932 <_dtoa_r+0x62a>
 8007a10:	4ba3      	ldr	r3, [pc, #652]	; (8007ca0 <_dtoa_r+0x998>)
 8007a12:	2200      	movs	r2, #0
 8007a14:	f7f8 fdf8 	bl	8000608 <__aeabi_dmul>
 8007a18:	2200      	movs	r2, #0
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	4606      	mov	r6, r0
 8007a1e:	460f      	mov	r7, r1
 8007a20:	f7f9 f85a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a24:	2800      	cmp	r0, #0
 8007a26:	d09e      	beq.n	8007966 <_dtoa_r+0x65e>
 8007a28:	e7d0      	b.n	80079cc <_dtoa_r+0x6c4>
 8007a2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a2c:	2a00      	cmp	r2, #0
 8007a2e:	f000 80ca 	beq.w	8007bc6 <_dtoa_r+0x8be>
 8007a32:	9a07      	ldr	r2, [sp, #28]
 8007a34:	2a01      	cmp	r2, #1
 8007a36:	f300 80ad 	bgt.w	8007b94 <_dtoa_r+0x88c>
 8007a3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a3c:	2a00      	cmp	r2, #0
 8007a3e:	f000 80a5 	beq.w	8007b8c <_dtoa_r+0x884>
 8007a42:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007a46:	9e08      	ldr	r6, [sp, #32]
 8007a48:	9d05      	ldr	r5, [sp, #20]
 8007a4a:	9a05      	ldr	r2, [sp, #20]
 8007a4c:	441a      	add	r2, r3
 8007a4e:	9205      	str	r2, [sp, #20]
 8007a50:	9a06      	ldr	r2, [sp, #24]
 8007a52:	2101      	movs	r1, #1
 8007a54:	441a      	add	r2, r3
 8007a56:	4620      	mov	r0, r4
 8007a58:	9206      	str	r2, [sp, #24]
 8007a5a:	f000 fc3d 	bl	80082d8 <__i2b>
 8007a5e:	4607      	mov	r7, r0
 8007a60:	b165      	cbz	r5, 8007a7c <_dtoa_r+0x774>
 8007a62:	9b06      	ldr	r3, [sp, #24]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	dd09      	ble.n	8007a7c <_dtoa_r+0x774>
 8007a68:	42ab      	cmp	r3, r5
 8007a6a:	9a05      	ldr	r2, [sp, #20]
 8007a6c:	bfa8      	it	ge
 8007a6e:	462b      	movge	r3, r5
 8007a70:	1ad2      	subs	r2, r2, r3
 8007a72:	9205      	str	r2, [sp, #20]
 8007a74:	9a06      	ldr	r2, [sp, #24]
 8007a76:	1aed      	subs	r5, r5, r3
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	9306      	str	r3, [sp, #24]
 8007a7c:	9b08      	ldr	r3, [sp, #32]
 8007a7e:	b1f3      	cbz	r3, 8007abe <_dtoa_r+0x7b6>
 8007a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	f000 80a3 	beq.w	8007bce <_dtoa_r+0x8c6>
 8007a88:	2e00      	cmp	r6, #0
 8007a8a:	dd10      	ble.n	8007aae <_dtoa_r+0x7a6>
 8007a8c:	4639      	mov	r1, r7
 8007a8e:	4632      	mov	r2, r6
 8007a90:	4620      	mov	r0, r4
 8007a92:	f000 fce1 	bl	8008458 <__pow5mult>
 8007a96:	4652      	mov	r2, sl
 8007a98:	4601      	mov	r1, r0
 8007a9a:	4607      	mov	r7, r0
 8007a9c:	4620      	mov	r0, r4
 8007a9e:	f000 fc31 	bl	8008304 <__multiply>
 8007aa2:	4651      	mov	r1, sl
 8007aa4:	4680      	mov	r8, r0
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	f000 fb60 	bl	800816c <_Bfree>
 8007aac:	46c2      	mov	sl, r8
 8007aae:	9b08      	ldr	r3, [sp, #32]
 8007ab0:	1b9a      	subs	r2, r3, r6
 8007ab2:	d004      	beq.n	8007abe <_dtoa_r+0x7b6>
 8007ab4:	4651      	mov	r1, sl
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	f000 fcce 	bl	8008458 <__pow5mult>
 8007abc:	4682      	mov	sl, r0
 8007abe:	2101      	movs	r1, #1
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	f000 fc09 	bl	80082d8 <__i2b>
 8007ac6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	4606      	mov	r6, r0
 8007acc:	f340 8081 	ble.w	8007bd2 <_dtoa_r+0x8ca>
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	4601      	mov	r1, r0
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	f000 fcbf 	bl	8008458 <__pow5mult>
 8007ada:	9b07      	ldr	r3, [sp, #28]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	4606      	mov	r6, r0
 8007ae0:	dd7a      	ble.n	8007bd8 <_dtoa_r+0x8d0>
 8007ae2:	f04f 0800 	mov.w	r8, #0
 8007ae6:	6933      	ldr	r3, [r6, #16]
 8007ae8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007aec:	6918      	ldr	r0, [r3, #16]
 8007aee:	f000 fba5 	bl	800823c <__hi0bits>
 8007af2:	f1c0 0020 	rsb	r0, r0, #32
 8007af6:	9b06      	ldr	r3, [sp, #24]
 8007af8:	4418      	add	r0, r3
 8007afa:	f010 001f 	ands.w	r0, r0, #31
 8007afe:	f000 8094 	beq.w	8007c2a <_dtoa_r+0x922>
 8007b02:	f1c0 0320 	rsb	r3, r0, #32
 8007b06:	2b04      	cmp	r3, #4
 8007b08:	f340 8085 	ble.w	8007c16 <_dtoa_r+0x90e>
 8007b0c:	9b05      	ldr	r3, [sp, #20]
 8007b0e:	f1c0 001c 	rsb	r0, r0, #28
 8007b12:	4403      	add	r3, r0
 8007b14:	9305      	str	r3, [sp, #20]
 8007b16:	9b06      	ldr	r3, [sp, #24]
 8007b18:	4403      	add	r3, r0
 8007b1a:	4405      	add	r5, r0
 8007b1c:	9306      	str	r3, [sp, #24]
 8007b1e:	9b05      	ldr	r3, [sp, #20]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	dd05      	ble.n	8007b30 <_dtoa_r+0x828>
 8007b24:	4651      	mov	r1, sl
 8007b26:	461a      	mov	r2, r3
 8007b28:	4620      	mov	r0, r4
 8007b2a:	f000 fcef 	bl	800850c <__lshift>
 8007b2e:	4682      	mov	sl, r0
 8007b30:	9b06      	ldr	r3, [sp, #24]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	dd05      	ble.n	8007b42 <_dtoa_r+0x83a>
 8007b36:	4631      	mov	r1, r6
 8007b38:	461a      	mov	r2, r3
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	f000 fce6 	bl	800850c <__lshift>
 8007b40:	4606      	mov	r6, r0
 8007b42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d072      	beq.n	8007c2e <_dtoa_r+0x926>
 8007b48:	4631      	mov	r1, r6
 8007b4a:	4650      	mov	r0, sl
 8007b4c:	f000 fd4a 	bl	80085e4 <__mcmp>
 8007b50:	2800      	cmp	r0, #0
 8007b52:	da6c      	bge.n	8007c2e <_dtoa_r+0x926>
 8007b54:	2300      	movs	r3, #0
 8007b56:	4651      	mov	r1, sl
 8007b58:	220a      	movs	r2, #10
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	f000 fb28 	bl	80081b0 <__multadd>
 8007b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b62:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007b66:	4682      	mov	sl, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f000 81b0 	beq.w	8007ece <_dtoa_r+0xbc6>
 8007b6e:	2300      	movs	r3, #0
 8007b70:	4639      	mov	r1, r7
 8007b72:	220a      	movs	r2, #10
 8007b74:	4620      	mov	r0, r4
 8007b76:	f000 fb1b 	bl	80081b0 <__multadd>
 8007b7a:	9b01      	ldr	r3, [sp, #4]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	4607      	mov	r7, r0
 8007b80:	f300 8096 	bgt.w	8007cb0 <_dtoa_r+0x9a8>
 8007b84:	9b07      	ldr	r3, [sp, #28]
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	dc59      	bgt.n	8007c3e <_dtoa_r+0x936>
 8007b8a:	e091      	b.n	8007cb0 <_dtoa_r+0x9a8>
 8007b8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007b92:	e758      	b.n	8007a46 <_dtoa_r+0x73e>
 8007b94:	9b04      	ldr	r3, [sp, #16]
 8007b96:	1e5e      	subs	r6, r3, #1
 8007b98:	9b08      	ldr	r3, [sp, #32]
 8007b9a:	42b3      	cmp	r3, r6
 8007b9c:	bfbf      	itttt	lt
 8007b9e:	9b08      	ldrlt	r3, [sp, #32]
 8007ba0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007ba2:	9608      	strlt	r6, [sp, #32]
 8007ba4:	1af3      	sublt	r3, r6, r3
 8007ba6:	bfb4      	ite	lt
 8007ba8:	18d2      	addlt	r2, r2, r3
 8007baa:	1b9e      	subge	r6, r3, r6
 8007bac:	9b04      	ldr	r3, [sp, #16]
 8007bae:	bfbc      	itt	lt
 8007bb0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007bb2:	2600      	movlt	r6, #0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	bfb7      	itett	lt
 8007bb8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007bbc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007bc0:	1a9d      	sublt	r5, r3, r2
 8007bc2:	2300      	movlt	r3, #0
 8007bc4:	e741      	b.n	8007a4a <_dtoa_r+0x742>
 8007bc6:	9e08      	ldr	r6, [sp, #32]
 8007bc8:	9d05      	ldr	r5, [sp, #20]
 8007bca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007bcc:	e748      	b.n	8007a60 <_dtoa_r+0x758>
 8007bce:	9a08      	ldr	r2, [sp, #32]
 8007bd0:	e770      	b.n	8007ab4 <_dtoa_r+0x7ac>
 8007bd2:	9b07      	ldr	r3, [sp, #28]
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	dc19      	bgt.n	8007c0c <_dtoa_r+0x904>
 8007bd8:	9b02      	ldr	r3, [sp, #8]
 8007bda:	b9bb      	cbnz	r3, 8007c0c <_dtoa_r+0x904>
 8007bdc:	9b03      	ldr	r3, [sp, #12]
 8007bde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007be2:	b99b      	cbnz	r3, 8007c0c <_dtoa_r+0x904>
 8007be4:	9b03      	ldr	r3, [sp, #12]
 8007be6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007bea:	0d1b      	lsrs	r3, r3, #20
 8007bec:	051b      	lsls	r3, r3, #20
 8007bee:	b183      	cbz	r3, 8007c12 <_dtoa_r+0x90a>
 8007bf0:	9b05      	ldr	r3, [sp, #20]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	9305      	str	r3, [sp, #20]
 8007bf6:	9b06      	ldr	r3, [sp, #24]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	9306      	str	r3, [sp, #24]
 8007bfc:	f04f 0801 	mov.w	r8, #1
 8007c00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f47f af6f 	bne.w	8007ae6 <_dtoa_r+0x7de>
 8007c08:	2001      	movs	r0, #1
 8007c0a:	e774      	b.n	8007af6 <_dtoa_r+0x7ee>
 8007c0c:	f04f 0800 	mov.w	r8, #0
 8007c10:	e7f6      	b.n	8007c00 <_dtoa_r+0x8f8>
 8007c12:	4698      	mov	r8, r3
 8007c14:	e7f4      	b.n	8007c00 <_dtoa_r+0x8f8>
 8007c16:	d082      	beq.n	8007b1e <_dtoa_r+0x816>
 8007c18:	9a05      	ldr	r2, [sp, #20]
 8007c1a:	331c      	adds	r3, #28
 8007c1c:	441a      	add	r2, r3
 8007c1e:	9205      	str	r2, [sp, #20]
 8007c20:	9a06      	ldr	r2, [sp, #24]
 8007c22:	441a      	add	r2, r3
 8007c24:	441d      	add	r5, r3
 8007c26:	9206      	str	r2, [sp, #24]
 8007c28:	e779      	b.n	8007b1e <_dtoa_r+0x816>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	e7f4      	b.n	8007c18 <_dtoa_r+0x910>
 8007c2e:	9b04      	ldr	r3, [sp, #16]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	dc37      	bgt.n	8007ca4 <_dtoa_r+0x99c>
 8007c34:	9b07      	ldr	r3, [sp, #28]
 8007c36:	2b02      	cmp	r3, #2
 8007c38:	dd34      	ble.n	8007ca4 <_dtoa_r+0x99c>
 8007c3a:	9b04      	ldr	r3, [sp, #16]
 8007c3c:	9301      	str	r3, [sp, #4]
 8007c3e:	9b01      	ldr	r3, [sp, #4]
 8007c40:	b963      	cbnz	r3, 8007c5c <_dtoa_r+0x954>
 8007c42:	4631      	mov	r1, r6
 8007c44:	2205      	movs	r2, #5
 8007c46:	4620      	mov	r0, r4
 8007c48:	f000 fab2 	bl	80081b0 <__multadd>
 8007c4c:	4601      	mov	r1, r0
 8007c4e:	4606      	mov	r6, r0
 8007c50:	4650      	mov	r0, sl
 8007c52:	f000 fcc7 	bl	80085e4 <__mcmp>
 8007c56:	2800      	cmp	r0, #0
 8007c58:	f73f adbb 	bgt.w	80077d2 <_dtoa_r+0x4ca>
 8007c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c5e:	9d00      	ldr	r5, [sp, #0]
 8007c60:	ea6f 0b03 	mvn.w	fp, r3
 8007c64:	f04f 0800 	mov.w	r8, #0
 8007c68:	4631      	mov	r1, r6
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	f000 fa7e 	bl	800816c <_Bfree>
 8007c70:	2f00      	cmp	r7, #0
 8007c72:	f43f aeab 	beq.w	80079cc <_dtoa_r+0x6c4>
 8007c76:	f1b8 0f00 	cmp.w	r8, #0
 8007c7a:	d005      	beq.n	8007c88 <_dtoa_r+0x980>
 8007c7c:	45b8      	cmp	r8, r7
 8007c7e:	d003      	beq.n	8007c88 <_dtoa_r+0x980>
 8007c80:	4641      	mov	r1, r8
 8007c82:	4620      	mov	r0, r4
 8007c84:	f000 fa72 	bl	800816c <_Bfree>
 8007c88:	4639      	mov	r1, r7
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	f000 fa6e 	bl	800816c <_Bfree>
 8007c90:	e69c      	b.n	80079cc <_dtoa_r+0x6c4>
 8007c92:	2600      	movs	r6, #0
 8007c94:	4637      	mov	r7, r6
 8007c96:	e7e1      	b.n	8007c5c <_dtoa_r+0x954>
 8007c98:	46bb      	mov	fp, r7
 8007c9a:	4637      	mov	r7, r6
 8007c9c:	e599      	b.n	80077d2 <_dtoa_r+0x4ca>
 8007c9e:	bf00      	nop
 8007ca0:	40240000 	.word	0x40240000
 8007ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	f000 80c8 	beq.w	8007e3c <_dtoa_r+0xb34>
 8007cac:	9b04      	ldr	r3, [sp, #16]
 8007cae:	9301      	str	r3, [sp, #4]
 8007cb0:	2d00      	cmp	r5, #0
 8007cb2:	dd05      	ble.n	8007cc0 <_dtoa_r+0x9b8>
 8007cb4:	4639      	mov	r1, r7
 8007cb6:	462a      	mov	r2, r5
 8007cb8:	4620      	mov	r0, r4
 8007cba:	f000 fc27 	bl	800850c <__lshift>
 8007cbe:	4607      	mov	r7, r0
 8007cc0:	f1b8 0f00 	cmp.w	r8, #0
 8007cc4:	d05b      	beq.n	8007d7e <_dtoa_r+0xa76>
 8007cc6:	6879      	ldr	r1, [r7, #4]
 8007cc8:	4620      	mov	r0, r4
 8007cca:	f000 fa0f 	bl	80080ec <_Balloc>
 8007cce:	4605      	mov	r5, r0
 8007cd0:	b928      	cbnz	r0, 8007cde <_dtoa_r+0x9d6>
 8007cd2:	4b83      	ldr	r3, [pc, #524]	; (8007ee0 <_dtoa_r+0xbd8>)
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007cda:	f7ff bb2e 	b.w	800733a <_dtoa_r+0x32>
 8007cde:	693a      	ldr	r2, [r7, #16]
 8007ce0:	3202      	adds	r2, #2
 8007ce2:	0092      	lsls	r2, r2, #2
 8007ce4:	f107 010c 	add.w	r1, r7, #12
 8007ce8:	300c      	adds	r0, #12
 8007cea:	f000 ffab 	bl	8008c44 <memcpy>
 8007cee:	2201      	movs	r2, #1
 8007cf0:	4629      	mov	r1, r5
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	f000 fc0a 	bl	800850c <__lshift>
 8007cf8:	9b00      	ldr	r3, [sp, #0]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	9304      	str	r3, [sp, #16]
 8007cfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d02:	4413      	add	r3, r2
 8007d04:	9308      	str	r3, [sp, #32]
 8007d06:	9b02      	ldr	r3, [sp, #8]
 8007d08:	f003 0301 	and.w	r3, r3, #1
 8007d0c:	46b8      	mov	r8, r7
 8007d0e:	9306      	str	r3, [sp, #24]
 8007d10:	4607      	mov	r7, r0
 8007d12:	9b04      	ldr	r3, [sp, #16]
 8007d14:	4631      	mov	r1, r6
 8007d16:	3b01      	subs	r3, #1
 8007d18:	4650      	mov	r0, sl
 8007d1a:	9301      	str	r3, [sp, #4]
 8007d1c:	f7ff fa6b 	bl	80071f6 <quorem>
 8007d20:	4641      	mov	r1, r8
 8007d22:	9002      	str	r0, [sp, #8]
 8007d24:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007d28:	4650      	mov	r0, sl
 8007d2a:	f000 fc5b 	bl	80085e4 <__mcmp>
 8007d2e:	463a      	mov	r2, r7
 8007d30:	9005      	str	r0, [sp, #20]
 8007d32:	4631      	mov	r1, r6
 8007d34:	4620      	mov	r0, r4
 8007d36:	f000 fc71 	bl	800861c <__mdiff>
 8007d3a:	68c2      	ldr	r2, [r0, #12]
 8007d3c:	4605      	mov	r5, r0
 8007d3e:	bb02      	cbnz	r2, 8007d82 <_dtoa_r+0xa7a>
 8007d40:	4601      	mov	r1, r0
 8007d42:	4650      	mov	r0, sl
 8007d44:	f000 fc4e 	bl	80085e4 <__mcmp>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	4629      	mov	r1, r5
 8007d4c:	4620      	mov	r0, r4
 8007d4e:	9209      	str	r2, [sp, #36]	; 0x24
 8007d50:	f000 fa0c 	bl	800816c <_Bfree>
 8007d54:	9b07      	ldr	r3, [sp, #28]
 8007d56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d58:	9d04      	ldr	r5, [sp, #16]
 8007d5a:	ea43 0102 	orr.w	r1, r3, r2
 8007d5e:	9b06      	ldr	r3, [sp, #24]
 8007d60:	4319      	orrs	r1, r3
 8007d62:	d110      	bne.n	8007d86 <_dtoa_r+0xa7e>
 8007d64:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007d68:	d029      	beq.n	8007dbe <_dtoa_r+0xab6>
 8007d6a:	9b05      	ldr	r3, [sp, #20]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	dd02      	ble.n	8007d76 <_dtoa_r+0xa6e>
 8007d70:	9b02      	ldr	r3, [sp, #8]
 8007d72:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007d76:	9b01      	ldr	r3, [sp, #4]
 8007d78:	f883 9000 	strb.w	r9, [r3]
 8007d7c:	e774      	b.n	8007c68 <_dtoa_r+0x960>
 8007d7e:	4638      	mov	r0, r7
 8007d80:	e7ba      	b.n	8007cf8 <_dtoa_r+0x9f0>
 8007d82:	2201      	movs	r2, #1
 8007d84:	e7e1      	b.n	8007d4a <_dtoa_r+0xa42>
 8007d86:	9b05      	ldr	r3, [sp, #20]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	db04      	blt.n	8007d96 <_dtoa_r+0xa8e>
 8007d8c:	9907      	ldr	r1, [sp, #28]
 8007d8e:	430b      	orrs	r3, r1
 8007d90:	9906      	ldr	r1, [sp, #24]
 8007d92:	430b      	orrs	r3, r1
 8007d94:	d120      	bne.n	8007dd8 <_dtoa_r+0xad0>
 8007d96:	2a00      	cmp	r2, #0
 8007d98:	dded      	ble.n	8007d76 <_dtoa_r+0xa6e>
 8007d9a:	4651      	mov	r1, sl
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	4620      	mov	r0, r4
 8007da0:	f000 fbb4 	bl	800850c <__lshift>
 8007da4:	4631      	mov	r1, r6
 8007da6:	4682      	mov	sl, r0
 8007da8:	f000 fc1c 	bl	80085e4 <__mcmp>
 8007dac:	2800      	cmp	r0, #0
 8007dae:	dc03      	bgt.n	8007db8 <_dtoa_r+0xab0>
 8007db0:	d1e1      	bne.n	8007d76 <_dtoa_r+0xa6e>
 8007db2:	f019 0f01 	tst.w	r9, #1
 8007db6:	d0de      	beq.n	8007d76 <_dtoa_r+0xa6e>
 8007db8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007dbc:	d1d8      	bne.n	8007d70 <_dtoa_r+0xa68>
 8007dbe:	9a01      	ldr	r2, [sp, #4]
 8007dc0:	2339      	movs	r3, #57	; 0x39
 8007dc2:	7013      	strb	r3, [r2, #0]
 8007dc4:	462b      	mov	r3, r5
 8007dc6:	461d      	mov	r5, r3
 8007dc8:	3b01      	subs	r3, #1
 8007dca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007dce:	2a39      	cmp	r2, #57	; 0x39
 8007dd0:	d06c      	beq.n	8007eac <_dtoa_r+0xba4>
 8007dd2:	3201      	adds	r2, #1
 8007dd4:	701a      	strb	r2, [r3, #0]
 8007dd6:	e747      	b.n	8007c68 <_dtoa_r+0x960>
 8007dd8:	2a00      	cmp	r2, #0
 8007dda:	dd07      	ble.n	8007dec <_dtoa_r+0xae4>
 8007ddc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007de0:	d0ed      	beq.n	8007dbe <_dtoa_r+0xab6>
 8007de2:	9a01      	ldr	r2, [sp, #4]
 8007de4:	f109 0301 	add.w	r3, r9, #1
 8007de8:	7013      	strb	r3, [r2, #0]
 8007dea:	e73d      	b.n	8007c68 <_dtoa_r+0x960>
 8007dec:	9b04      	ldr	r3, [sp, #16]
 8007dee:	9a08      	ldr	r2, [sp, #32]
 8007df0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d043      	beq.n	8007e80 <_dtoa_r+0xb78>
 8007df8:	4651      	mov	r1, sl
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	220a      	movs	r2, #10
 8007dfe:	4620      	mov	r0, r4
 8007e00:	f000 f9d6 	bl	80081b0 <__multadd>
 8007e04:	45b8      	cmp	r8, r7
 8007e06:	4682      	mov	sl, r0
 8007e08:	f04f 0300 	mov.w	r3, #0
 8007e0c:	f04f 020a 	mov.w	r2, #10
 8007e10:	4641      	mov	r1, r8
 8007e12:	4620      	mov	r0, r4
 8007e14:	d107      	bne.n	8007e26 <_dtoa_r+0xb1e>
 8007e16:	f000 f9cb 	bl	80081b0 <__multadd>
 8007e1a:	4680      	mov	r8, r0
 8007e1c:	4607      	mov	r7, r0
 8007e1e:	9b04      	ldr	r3, [sp, #16]
 8007e20:	3301      	adds	r3, #1
 8007e22:	9304      	str	r3, [sp, #16]
 8007e24:	e775      	b.n	8007d12 <_dtoa_r+0xa0a>
 8007e26:	f000 f9c3 	bl	80081b0 <__multadd>
 8007e2a:	4639      	mov	r1, r7
 8007e2c:	4680      	mov	r8, r0
 8007e2e:	2300      	movs	r3, #0
 8007e30:	220a      	movs	r2, #10
 8007e32:	4620      	mov	r0, r4
 8007e34:	f000 f9bc 	bl	80081b0 <__multadd>
 8007e38:	4607      	mov	r7, r0
 8007e3a:	e7f0      	b.n	8007e1e <_dtoa_r+0xb16>
 8007e3c:	9b04      	ldr	r3, [sp, #16]
 8007e3e:	9301      	str	r3, [sp, #4]
 8007e40:	9d00      	ldr	r5, [sp, #0]
 8007e42:	4631      	mov	r1, r6
 8007e44:	4650      	mov	r0, sl
 8007e46:	f7ff f9d6 	bl	80071f6 <quorem>
 8007e4a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007e4e:	9b00      	ldr	r3, [sp, #0]
 8007e50:	f805 9b01 	strb.w	r9, [r5], #1
 8007e54:	1aea      	subs	r2, r5, r3
 8007e56:	9b01      	ldr	r3, [sp, #4]
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	dd07      	ble.n	8007e6c <_dtoa_r+0xb64>
 8007e5c:	4651      	mov	r1, sl
 8007e5e:	2300      	movs	r3, #0
 8007e60:	220a      	movs	r2, #10
 8007e62:	4620      	mov	r0, r4
 8007e64:	f000 f9a4 	bl	80081b0 <__multadd>
 8007e68:	4682      	mov	sl, r0
 8007e6a:	e7ea      	b.n	8007e42 <_dtoa_r+0xb3a>
 8007e6c:	9b01      	ldr	r3, [sp, #4]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	bfc8      	it	gt
 8007e72:	461d      	movgt	r5, r3
 8007e74:	9b00      	ldr	r3, [sp, #0]
 8007e76:	bfd8      	it	le
 8007e78:	2501      	movle	r5, #1
 8007e7a:	441d      	add	r5, r3
 8007e7c:	f04f 0800 	mov.w	r8, #0
 8007e80:	4651      	mov	r1, sl
 8007e82:	2201      	movs	r2, #1
 8007e84:	4620      	mov	r0, r4
 8007e86:	f000 fb41 	bl	800850c <__lshift>
 8007e8a:	4631      	mov	r1, r6
 8007e8c:	4682      	mov	sl, r0
 8007e8e:	f000 fba9 	bl	80085e4 <__mcmp>
 8007e92:	2800      	cmp	r0, #0
 8007e94:	dc96      	bgt.n	8007dc4 <_dtoa_r+0xabc>
 8007e96:	d102      	bne.n	8007e9e <_dtoa_r+0xb96>
 8007e98:	f019 0f01 	tst.w	r9, #1
 8007e9c:	d192      	bne.n	8007dc4 <_dtoa_r+0xabc>
 8007e9e:	462b      	mov	r3, r5
 8007ea0:	461d      	mov	r5, r3
 8007ea2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ea6:	2a30      	cmp	r2, #48	; 0x30
 8007ea8:	d0fa      	beq.n	8007ea0 <_dtoa_r+0xb98>
 8007eaa:	e6dd      	b.n	8007c68 <_dtoa_r+0x960>
 8007eac:	9a00      	ldr	r2, [sp, #0]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d189      	bne.n	8007dc6 <_dtoa_r+0xabe>
 8007eb2:	f10b 0b01 	add.w	fp, fp, #1
 8007eb6:	2331      	movs	r3, #49	; 0x31
 8007eb8:	e796      	b.n	8007de8 <_dtoa_r+0xae0>
 8007eba:	4b0a      	ldr	r3, [pc, #40]	; (8007ee4 <_dtoa_r+0xbdc>)
 8007ebc:	f7ff ba99 	b.w	80073f2 <_dtoa_r+0xea>
 8007ec0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f47f aa6d 	bne.w	80073a2 <_dtoa_r+0x9a>
 8007ec8:	4b07      	ldr	r3, [pc, #28]	; (8007ee8 <_dtoa_r+0xbe0>)
 8007eca:	f7ff ba92 	b.w	80073f2 <_dtoa_r+0xea>
 8007ece:	9b01      	ldr	r3, [sp, #4]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	dcb5      	bgt.n	8007e40 <_dtoa_r+0xb38>
 8007ed4:	9b07      	ldr	r3, [sp, #28]
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	f73f aeb1 	bgt.w	8007c3e <_dtoa_r+0x936>
 8007edc:	e7b0      	b.n	8007e40 <_dtoa_r+0xb38>
 8007ede:	bf00      	nop
 8007ee0:	080093f0 	.word	0x080093f0
 8007ee4:	08009350 	.word	0x08009350
 8007ee8:	08009374 	.word	0x08009374

08007eec <_free_r>:
 8007eec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007eee:	2900      	cmp	r1, #0
 8007ef0:	d044      	beq.n	8007f7c <_free_r+0x90>
 8007ef2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ef6:	9001      	str	r0, [sp, #4]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f1a1 0404 	sub.w	r4, r1, #4
 8007efe:	bfb8      	it	lt
 8007f00:	18e4      	addlt	r4, r4, r3
 8007f02:	f000 f8e7 	bl	80080d4 <__malloc_lock>
 8007f06:	4a1e      	ldr	r2, [pc, #120]	; (8007f80 <_free_r+0x94>)
 8007f08:	9801      	ldr	r0, [sp, #4]
 8007f0a:	6813      	ldr	r3, [r2, #0]
 8007f0c:	b933      	cbnz	r3, 8007f1c <_free_r+0x30>
 8007f0e:	6063      	str	r3, [r4, #4]
 8007f10:	6014      	str	r4, [r2, #0]
 8007f12:	b003      	add	sp, #12
 8007f14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f18:	f000 b8e2 	b.w	80080e0 <__malloc_unlock>
 8007f1c:	42a3      	cmp	r3, r4
 8007f1e:	d908      	bls.n	8007f32 <_free_r+0x46>
 8007f20:	6825      	ldr	r5, [r4, #0]
 8007f22:	1961      	adds	r1, r4, r5
 8007f24:	428b      	cmp	r3, r1
 8007f26:	bf01      	itttt	eq
 8007f28:	6819      	ldreq	r1, [r3, #0]
 8007f2a:	685b      	ldreq	r3, [r3, #4]
 8007f2c:	1949      	addeq	r1, r1, r5
 8007f2e:	6021      	streq	r1, [r4, #0]
 8007f30:	e7ed      	b.n	8007f0e <_free_r+0x22>
 8007f32:	461a      	mov	r2, r3
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	b10b      	cbz	r3, 8007f3c <_free_r+0x50>
 8007f38:	42a3      	cmp	r3, r4
 8007f3a:	d9fa      	bls.n	8007f32 <_free_r+0x46>
 8007f3c:	6811      	ldr	r1, [r2, #0]
 8007f3e:	1855      	adds	r5, r2, r1
 8007f40:	42a5      	cmp	r5, r4
 8007f42:	d10b      	bne.n	8007f5c <_free_r+0x70>
 8007f44:	6824      	ldr	r4, [r4, #0]
 8007f46:	4421      	add	r1, r4
 8007f48:	1854      	adds	r4, r2, r1
 8007f4a:	42a3      	cmp	r3, r4
 8007f4c:	6011      	str	r1, [r2, #0]
 8007f4e:	d1e0      	bne.n	8007f12 <_free_r+0x26>
 8007f50:	681c      	ldr	r4, [r3, #0]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	6053      	str	r3, [r2, #4]
 8007f56:	440c      	add	r4, r1
 8007f58:	6014      	str	r4, [r2, #0]
 8007f5a:	e7da      	b.n	8007f12 <_free_r+0x26>
 8007f5c:	d902      	bls.n	8007f64 <_free_r+0x78>
 8007f5e:	230c      	movs	r3, #12
 8007f60:	6003      	str	r3, [r0, #0]
 8007f62:	e7d6      	b.n	8007f12 <_free_r+0x26>
 8007f64:	6825      	ldr	r5, [r4, #0]
 8007f66:	1961      	adds	r1, r4, r5
 8007f68:	428b      	cmp	r3, r1
 8007f6a:	bf04      	itt	eq
 8007f6c:	6819      	ldreq	r1, [r3, #0]
 8007f6e:	685b      	ldreq	r3, [r3, #4]
 8007f70:	6063      	str	r3, [r4, #4]
 8007f72:	bf04      	itt	eq
 8007f74:	1949      	addeq	r1, r1, r5
 8007f76:	6021      	streq	r1, [r4, #0]
 8007f78:	6054      	str	r4, [r2, #4]
 8007f7a:	e7ca      	b.n	8007f12 <_free_r+0x26>
 8007f7c:	b003      	add	sp, #12
 8007f7e:	bd30      	pop	{r4, r5, pc}
 8007f80:	200005f0 	.word	0x200005f0

08007f84 <malloc>:
 8007f84:	4b02      	ldr	r3, [pc, #8]	; (8007f90 <malloc+0xc>)
 8007f86:	4601      	mov	r1, r0
 8007f88:	6818      	ldr	r0, [r3, #0]
 8007f8a:	f000 b823 	b.w	8007fd4 <_malloc_r>
 8007f8e:	bf00      	nop
 8007f90:	20000068 	.word	0x20000068

08007f94 <sbrk_aligned>:
 8007f94:	b570      	push	{r4, r5, r6, lr}
 8007f96:	4e0e      	ldr	r6, [pc, #56]	; (8007fd0 <sbrk_aligned+0x3c>)
 8007f98:	460c      	mov	r4, r1
 8007f9a:	6831      	ldr	r1, [r6, #0]
 8007f9c:	4605      	mov	r5, r0
 8007f9e:	b911      	cbnz	r1, 8007fa6 <sbrk_aligned+0x12>
 8007fa0:	f000 fe40 	bl	8008c24 <_sbrk_r>
 8007fa4:	6030      	str	r0, [r6, #0]
 8007fa6:	4621      	mov	r1, r4
 8007fa8:	4628      	mov	r0, r5
 8007faa:	f000 fe3b 	bl	8008c24 <_sbrk_r>
 8007fae:	1c43      	adds	r3, r0, #1
 8007fb0:	d00a      	beq.n	8007fc8 <sbrk_aligned+0x34>
 8007fb2:	1cc4      	adds	r4, r0, #3
 8007fb4:	f024 0403 	bic.w	r4, r4, #3
 8007fb8:	42a0      	cmp	r0, r4
 8007fba:	d007      	beq.n	8007fcc <sbrk_aligned+0x38>
 8007fbc:	1a21      	subs	r1, r4, r0
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	f000 fe30 	bl	8008c24 <_sbrk_r>
 8007fc4:	3001      	adds	r0, #1
 8007fc6:	d101      	bne.n	8007fcc <sbrk_aligned+0x38>
 8007fc8:	f04f 34ff 	mov.w	r4, #4294967295
 8007fcc:	4620      	mov	r0, r4
 8007fce:	bd70      	pop	{r4, r5, r6, pc}
 8007fd0:	200005f4 	.word	0x200005f4

08007fd4 <_malloc_r>:
 8007fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fd8:	1ccd      	adds	r5, r1, #3
 8007fda:	f025 0503 	bic.w	r5, r5, #3
 8007fde:	3508      	adds	r5, #8
 8007fe0:	2d0c      	cmp	r5, #12
 8007fe2:	bf38      	it	cc
 8007fe4:	250c      	movcc	r5, #12
 8007fe6:	2d00      	cmp	r5, #0
 8007fe8:	4607      	mov	r7, r0
 8007fea:	db01      	blt.n	8007ff0 <_malloc_r+0x1c>
 8007fec:	42a9      	cmp	r1, r5
 8007fee:	d905      	bls.n	8007ffc <_malloc_r+0x28>
 8007ff0:	230c      	movs	r3, #12
 8007ff2:	603b      	str	r3, [r7, #0]
 8007ff4:	2600      	movs	r6, #0
 8007ff6:	4630      	mov	r0, r6
 8007ff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ffc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80080d0 <_malloc_r+0xfc>
 8008000:	f000 f868 	bl	80080d4 <__malloc_lock>
 8008004:	f8d8 3000 	ldr.w	r3, [r8]
 8008008:	461c      	mov	r4, r3
 800800a:	bb5c      	cbnz	r4, 8008064 <_malloc_r+0x90>
 800800c:	4629      	mov	r1, r5
 800800e:	4638      	mov	r0, r7
 8008010:	f7ff ffc0 	bl	8007f94 <sbrk_aligned>
 8008014:	1c43      	adds	r3, r0, #1
 8008016:	4604      	mov	r4, r0
 8008018:	d155      	bne.n	80080c6 <_malloc_r+0xf2>
 800801a:	f8d8 4000 	ldr.w	r4, [r8]
 800801e:	4626      	mov	r6, r4
 8008020:	2e00      	cmp	r6, #0
 8008022:	d145      	bne.n	80080b0 <_malloc_r+0xdc>
 8008024:	2c00      	cmp	r4, #0
 8008026:	d048      	beq.n	80080ba <_malloc_r+0xe6>
 8008028:	6823      	ldr	r3, [r4, #0]
 800802a:	4631      	mov	r1, r6
 800802c:	4638      	mov	r0, r7
 800802e:	eb04 0903 	add.w	r9, r4, r3
 8008032:	f000 fdf7 	bl	8008c24 <_sbrk_r>
 8008036:	4581      	cmp	r9, r0
 8008038:	d13f      	bne.n	80080ba <_malloc_r+0xe6>
 800803a:	6821      	ldr	r1, [r4, #0]
 800803c:	1a6d      	subs	r5, r5, r1
 800803e:	4629      	mov	r1, r5
 8008040:	4638      	mov	r0, r7
 8008042:	f7ff ffa7 	bl	8007f94 <sbrk_aligned>
 8008046:	3001      	adds	r0, #1
 8008048:	d037      	beq.n	80080ba <_malloc_r+0xe6>
 800804a:	6823      	ldr	r3, [r4, #0]
 800804c:	442b      	add	r3, r5
 800804e:	6023      	str	r3, [r4, #0]
 8008050:	f8d8 3000 	ldr.w	r3, [r8]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d038      	beq.n	80080ca <_malloc_r+0xf6>
 8008058:	685a      	ldr	r2, [r3, #4]
 800805a:	42a2      	cmp	r2, r4
 800805c:	d12b      	bne.n	80080b6 <_malloc_r+0xe2>
 800805e:	2200      	movs	r2, #0
 8008060:	605a      	str	r2, [r3, #4]
 8008062:	e00f      	b.n	8008084 <_malloc_r+0xb0>
 8008064:	6822      	ldr	r2, [r4, #0]
 8008066:	1b52      	subs	r2, r2, r5
 8008068:	d41f      	bmi.n	80080aa <_malloc_r+0xd6>
 800806a:	2a0b      	cmp	r2, #11
 800806c:	d917      	bls.n	800809e <_malloc_r+0xca>
 800806e:	1961      	adds	r1, r4, r5
 8008070:	42a3      	cmp	r3, r4
 8008072:	6025      	str	r5, [r4, #0]
 8008074:	bf18      	it	ne
 8008076:	6059      	strne	r1, [r3, #4]
 8008078:	6863      	ldr	r3, [r4, #4]
 800807a:	bf08      	it	eq
 800807c:	f8c8 1000 	streq.w	r1, [r8]
 8008080:	5162      	str	r2, [r4, r5]
 8008082:	604b      	str	r3, [r1, #4]
 8008084:	4638      	mov	r0, r7
 8008086:	f104 060b 	add.w	r6, r4, #11
 800808a:	f000 f829 	bl	80080e0 <__malloc_unlock>
 800808e:	f026 0607 	bic.w	r6, r6, #7
 8008092:	1d23      	adds	r3, r4, #4
 8008094:	1af2      	subs	r2, r6, r3
 8008096:	d0ae      	beq.n	8007ff6 <_malloc_r+0x22>
 8008098:	1b9b      	subs	r3, r3, r6
 800809a:	50a3      	str	r3, [r4, r2]
 800809c:	e7ab      	b.n	8007ff6 <_malloc_r+0x22>
 800809e:	42a3      	cmp	r3, r4
 80080a0:	6862      	ldr	r2, [r4, #4]
 80080a2:	d1dd      	bne.n	8008060 <_malloc_r+0x8c>
 80080a4:	f8c8 2000 	str.w	r2, [r8]
 80080a8:	e7ec      	b.n	8008084 <_malloc_r+0xb0>
 80080aa:	4623      	mov	r3, r4
 80080ac:	6864      	ldr	r4, [r4, #4]
 80080ae:	e7ac      	b.n	800800a <_malloc_r+0x36>
 80080b0:	4634      	mov	r4, r6
 80080b2:	6876      	ldr	r6, [r6, #4]
 80080b4:	e7b4      	b.n	8008020 <_malloc_r+0x4c>
 80080b6:	4613      	mov	r3, r2
 80080b8:	e7cc      	b.n	8008054 <_malloc_r+0x80>
 80080ba:	230c      	movs	r3, #12
 80080bc:	603b      	str	r3, [r7, #0]
 80080be:	4638      	mov	r0, r7
 80080c0:	f000 f80e 	bl	80080e0 <__malloc_unlock>
 80080c4:	e797      	b.n	8007ff6 <_malloc_r+0x22>
 80080c6:	6025      	str	r5, [r4, #0]
 80080c8:	e7dc      	b.n	8008084 <_malloc_r+0xb0>
 80080ca:	605b      	str	r3, [r3, #4]
 80080cc:	deff      	udf	#255	; 0xff
 80080ce:	bf00      	nop
 80080d0:	200005f0 	.word	0x200005f0

080080d4 <__malloc_lock>:
 80080d4:	4801      	ldr	r0, [pc, #4]	; (80080dc <__malloc_lock+0x8>)
 80080d6:	f7ff b88c 	b.w	80071f2 <__retarget_lock_acquire_recursive>
 80080da:	bf00      	nop
 80080dc:	200005ec 	.word	0x200005ec

080080e0 <__malloc_unlock>:
 80080e0:	4801      	ldr	r0, [pc, #4]	; (80080e8 <__malloc_unlock+0x8>)
 80080e2:	f7ff b887 	b.w	80071f4 <__retarget_lock_release_recursive>
 80080e6:	bf00      	nop
 80080e8:	200005ec 	.word	0x200005ec

080080ec <_Balloc>:
 80080ec:	b570      	push	{r4, r5, r6, lr}
 80080ee:	69c6      	ldr	r6, [r0, #28]
 80080f0:	4604      	mov	r4, r0
 80080f2:	460d      	mov	r5, r1
 80080f4:	b976      	cbnz	r6, 8008114 <_Balloc+0x28>
 80080f6:	2010      	movs	r0, #16
 80080f8:	f7ff ff44 	bl	8007f84 <malloc>
 80080fc:	4602      	mov	r2, r0
 80080fe:	61e0      	str	r0, [r4, #28]
 8008100:	b920      	cbnz	r0, 800810c <_Balloc+0x20>
 8008102:	4b18      	ldr	r3, [pc, #96]	; (8008164 <_Balloc+0x78>)
 8008104:	4818      	ldr	r0, [pc, #96]	; (8008168 <_Balloc+0x7c>)
 8008106:	216b      	movs	r1, #107	; 0x6b
 8008108:	f000 fdaa 	bl	8008c60 <__assert_func>
 800810c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008110:	6006      	str	r6, [r0, #0]
 8008112:	60c6      	str	r6, [r0, #12]
 8008114:	69e6      	ldr	r6, [r4, #28]
 8008116:	68f3      	ldr	r3, [r6, #12]
 8008118:	b183      	cbz	r3, 800813c <_Balloc+0x50>
 800811a:	69e3      	ldr	r3, [r4, #28]
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008122:	b9b8      	cbnz	r0, 8008154 <_Balloc+0x68>
 8008124:	2101      	movs	r1, #1
 8008126:	fa01 f605 	lsl.w	r6, r1, r5
 800812a:	1d72      	adds	r2, r6, #5
 800812c:	0092      	lsls	r2, r2, #2
 800812e:	4620      	mov	r0, r4
 8008130:	f000 fdb4 	bl	8008c9c <_calloc_r>
 8008134:	b160      	cbz	r0, 8008150 <_Balloc+0x64>
 8008136:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800813a:	e00e      	b.n	800815a <_Balloc+0x6e>
 800813c:	2221      	movs	r2, #33	; 0x21
 800813e:	2104      	movs	r1, #4
 8008140:	4620      	mov	r0, r4
 8008142:	f000 fdab 	bl	8008c9c <_calloc_r>
 8008146:	69e3      	ldr	r3, [r4, #28]
 8008148:	60f0      	str	r0, [r6, #12]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1e4      	bne.n	800811a <_Balloc+0x2e>
 8008150:	2000      	movs	r0, #0
 8008152:	bd70      	pop	{r4, r5, r6, pc}
 8008154:	6802      	ldr	r2, [r0, #0]
 8008156:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800815a:	2300      	movs	r3, #0
 800815c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008160:	e7f7      	b.n	8008152 <_Balloc+0x66>
 8008162:	bf00      	nop
 8008164:	08009381 	.word	0x08009381
 8008168:	08009401 	.word	0x08009401

0800816c <_Bfree>:
 800816c:	b570      	push	{r4, r5, r6, lr}
 800816e:	69c6      	ldr	r6, [r0, #28]
 8008170:	4605      	mov	r5, r0
 8008172:	460c      	mov	r4, r1
 8008174:	b976      	cbnz	r6, 8008194 <_Bfree+0x28>
 8008176:	2010      	movs	r0, #16
 8008178:	f7ff ff04 	bl	8007f84 <malloc>
 800817c:	4602      	mov	r2, r0
 800817e:	61e8      	str	r0, [r5, #28]
 8008180:	b920      	cbnz	r0, 800818c <_Bfree+0x20>
 8008182:	4b09      	ldr	r3, [pc, #36]	; (80081a8 <_Bfree+0x3c>)
 8008184:	4809      	ldr	r0, [pc, #36]	; (80081ac <_Bfree+0x40>)
 8008186:	218f      	movs	r1, #143	; 0x8f
 8008188:	f000 fd6a 	bl	8008c60 <__assert_func>
 800818c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008190:	6006      	str	r6, [r0, #0]
 8008192:	60c6      	str	r6, [r0, #12]
 8008194:	b13c      	cbz	r4, 80081a6 <_Bfree+0x3a>
 8008196:	69eb      	ldr	r3, [r5, #28]
 8008198:	6862      	ldr	r2, [r4, #4]
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80081a0:	6021      	str	r1, [r4, #0]
 80081a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80081a6:	bd70      	pop	{r4, r5, r6, pc}
 80081a8:	08009381 	.word	0x08009381
 80081ac:	08009401 	.word	0x08009401

080081b0 <__multadd>:
 80081b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081b4:	690d      	ldr	r5, [r1, #16]
 80081b6:	4607      	mov	r7, r0
 80081b8:	460c      	mov	r4, r1
 80081ba:	461e      	mov	r6, r3
 80081bc:	f101 0c14 	add.w	ip, r1, #20
 80081c0:	2000      	movs	r0, #0
 80081c2:	f8dc 3000 	ldr.w	r3, [ip]
 80081c6:	b299      	uxth	r1, r3
 80081c8:	fb02 6101 	mla	r1, r2, r1, r6
 80081cc:	0c1e      	lsrs	r6, r3, #16
 80081ce:	0c0b      	lsrs	r3, r1, #16
 80081d0:	fb02 3306 	mla	r3, r2, r6, r3
 80081d4:	b289      	uxth	r1, r1
 80081d6:	3001      	adds	r0, #1
 80081d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80081dc:	4285      	cmp	r5, r0
 80081de:	f84c 1b04 	str.w	r1, [ip], #4
 80081e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80081e6:	dcec      	bgt.n	80081c2 <__multadd+0x12>
 80081e8:	b30e      	cbz	r6, 800822e <__multadd+0x7e>
 80081ea:	68a3      	ldr	r3, [r4, #8]
 80081ec:	42ab      	cmp	r3, r5
 80081ee:	dc19      	bgt.n	8008224 <__multadd+0x74>
 80081f0:	6861      	ldr	r1, [r4, #4]
 80081f2:	4638      	mov	r0, r7
 80081f4:	3101      	adds	r1, #1
 80081f6:	f7ff ff79 	bl	80080ec <_Balloc>
 80081fa:	4680      	mov	r8, r0
 80081fc:	b928      	cbnz	r0, 800820a <__multadd+0x5a>
 80081fe:	4602      	mov	r2, r0
 8008200:	4b0c      	ldr	r3, [pc, #48]	; (8008234 <__multadd+0x84>)
 8008202:	480d      	ldr	r0, [pc, #52]	; (8008238 <__multadd+0x88>)
 8008204:	21ba      	movs	r1, #186	; 0xba
 8008206:	f000 fd2b 	bl	8008c60 <__assert_func>
 800820a:	6922      	ldr	r2, [r4, #16]
 800820c:	3202      	adds	r2, #2
 800820e:	f104 010c 	add.w	r1, r4, #12
 8008212:	0092      	lsls	r2, r2, #2
 8008214:	300c      	adds	r0, #12
 8008216:	f000 fd15 	bl	8008c44 <memcpy>
 800821a:	4621      	mov	r1, r4
 800821c:	4638      	mov	r0, r7
 800821e:	f7ff ffa5 	bl	800816c <_Bfree>
 8008222:	4644      	mov	r4, r8
 8008224:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008228:	3501      	adds	r5, #1
 800822a:	615e      	str	r6, [r3, #20]
 800822c:	6125      	str	r5, [r4, #16]
 800822e:	4620      	mov	r0, r4
 8008230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008234:	080093f0 	.word	0x080093f0
 8008238:	08009401 	.word	0x08009401

0800823c <__hi0bits>:
 800823c:	0c03      	lsrs	r3, r0, #16
 800823e:	041b      	lsls	r3, r3, #16
 8008240:	b9d3      	cbnz	r3, 8008278 <__hi0bits+0x3c>
 8008242:	0400      	lsls	r0, r0, #16
 8008244:	2310      	movs	r3, #16
 8008246:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800824a:	bf04      	itt	eq
 800824c:	0200      	lsleq	r0, r0, #8
 800824e:	3308      	addeq	r3, #8
 8008250:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008254:	bf04      	itt	eq
 8008256:	0100      	lsleq	r0, r0, #4
 8008258:	3304      	addeq	r3, #4
 800825a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800825e:	bf04      	itt	eq
 8008260:	0080      	lsleq	r0, r0, #2
 8008262:	3302      	addeq	r3, #2
 8008264:	2800      	cmp	r0, #0
 8008266:	db05      	blt.n	8008274 <__hi0bits+0x38>
 8008268:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800826c:	f103 0301 	add.w	r3, r3, #1
 8008270:	bf08      	it	eq
 8008272:	2320      	moveq	r3, #32
 8008274:	4618      	mov	r0, r3
 8008276:	4770      	bx	lr
 8008278:	2300      	movs	r3, #0
 800827a:	e7e4      	b.n	8008246 <__hi0bits+0xa>

0800827c <__lo0bits>:
 800827c:	6803      	ldr	r3, [r0, #0]
 800827e:	f013 0207 	ands.w	r2, r3, #7
 8008282:	d00c      	beq.n	800829e <__lo0bits+0x22>
 8008284:	07d9      	lsls	r1, r3, #31
 8008286:	d422      	bmi.n	80082ce <__lo0bits+0x52>
 8008288:	079a      	lsls	r2, r3, #30
 800828a:	bf49      	itett	mi
 800828c:	085b      	lsrmi	r3, r3, #1
 800828e:	089b      	lsrpl	r3, r3, #2
 8008290:	6003      	strmi	r3, [r0, #0]
 8008292:	2201      	movmi	r2, #1
 8008294:	bf5c      	itt	pl
 8008296:	6003      	strpl	r3, [r0, #0]
 8008298:	2202      	movpl	r2, #2
 800829a:	4610      	mov	r0, r2
 800829c:	4770      	bx	lr
 800829e:	b299      	uxth	r1, r3
 80082a0:	b909      	cbnz	r1, 80082a6 <__lo0bits+0x2a>
 80082a2:	0c1b      	lsrs	r3, r3, #16
 80082a4:	2210      	movs	r2, #16
 80082a6:	b2d9      	uxtb	r1, r3
 80082a8:	b909      	cbnz	r1, 80082ae <__lo0bits+0x32>
 80082aa:	3208      	adds	r2, #8
 80082ac:	0a1b      	lsrs	r3, r3, #8
 80082ae:	0719      	lsls	r1, r3, #28
 80082b0:	bf04      	itt	eq
 80082b2:	091b      	lsreq	r3, r3, #4
 80082b4:	3204      	addeq	r2, #4
 80082b6:	0799      	lsls	r1, r3, #30
 80082b8:	bf04      	itt	eq
 80082ba:	089b      	lsreq	r3, r3, #2
 80082bc:	3202      	addeq	r2, #2
 80082be:	07d9      	lsls	r1, r3, #31
 80082c0:	d403      	bmi.n	80082ca <__lo0bits+0x4e>
 80082c2:	085b      	lsrs	r3, r3, #1
 80082c4:	f102 0201 	add.w	r2, r2, #1
 80082c8:	d003      	beq.n	80082d2 <__lo0bits+0x56>
 80082ca:	6003      	str	r3, [r0, #0]
 80082cc:	e7e5      	b.n	800829a <__lo0bits+0x1e>
 80082ce:	2200      	movs	r2, #0
 80082d0:	e7e3      	b.n	800829a <__lo0bits+0x1e>
 80082d2:	2220      	movs	r2, #32
 80082d4:	e7e1      	b.n	800829a <__lo0bits+0x1e>
	...

080082d8 <__i2b>:
 80082d8:	b510      	push	{r4, lr}
 80082da:	460c      	mov	r4, r1
 80082dc:	2101      	movs	r1, #1
 80082de:	f7ff ff05 	bl	80080ec <_Balloc>
 80082e2:	4602      	mov	r2, r0
 80082e4:	b928      	cbnz	r0, 80082f2 <__i2b+0x1a>
 80082e6:	4b05      	ldr	r3, [pc, #20]	; (80082fc <__i2b+0x24>)
 80082e8:	4805      	ldr	r0, [pc, #20]	; (8008300 <__i2b+0x28>)
 80082ea:	f240 1145 	movw	r1, #325	; 0x145
 80082ee:	f000 fcb7 	bl	8008c60 <__assert_func>
 80082f2:	2301      	movs	r3, #1
 80082f4:	6144      	str	r4, [r0, #20]
 80082f6:	6103      	str	r3, [r0, #16]
 80082f8:	bd10      	pop	{r4, pc}
 80082fa:	bf00      	nop
 80082fc:	080093f0 	.word	0x080093f0
 8008300:	08009401 	.word	0x08009401

08008304 <__multiply>:
 8008304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008308:	4691      	mov	r9, r2
 800830a:	690a      	ldr	r2, [r1, #16]
 800830c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008310:	429a      	cmp	r2, r3
 8008312:	bfb8      	it	lt
 8008314:	460b      	movlt	r3, r1
 8008316:	460c      	mov	r4, r1
 8008318:	bfbc      	itt	lt
 800831a:	464c      	movlt	r4, r9
 800831c:	4699      	movlt	r9, r3
 800831e:	6927      	ldr	r7, [r4, #16]
 8008320:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008324:	68a3      	ldr	r3, [r4, #8]
 8008326:	6861      	ldr	r1, [r4, #4]
 8008328:	eb07 060a 	add.w	r6, r7, sl
 800832c:	42b3      	cmp	r3, r6
 800832e:	b085      	sub	sp, #20
 8008330:	bfb8      	it	lt
 8008332:	3101      	addlt	r1, #1
 8008334:	f7ff feda 	bl	80080ec <_Balloc>
 8008338:	b930      	cbnz	r0, 8008348 <__multiply+0x44>
 800833a:	4602      	mov	r2, r0
 800833c:	4b44      	ldr	r3, [pc, #272]	; (8008450 <__multiply+0x14c>)
 800833e:	4845      	ldr	r0, [pc, #276]	; (8008454 <__multiply+0x150>)
 8008340:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008344:	f000 fc8c 	bl	8008c60 <__assert_func>
 8008348:	f100 0514 	add.w	r5, r0, #20
 800834c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008350:	462b      	mov	r3, r5
 8008352:	2200      	movs	r2, #0
 8008354:	4543      	cmp	r3, r8
 8008356:	d321      	bcc.n	800839c <__multiply+0x98>
 8008358:	f104 0314 	add.w	r3, r4, #20
 800835c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008360:	f109 0314 	add.w	r3, r9, #20
 8008364:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008368:	9202      	str	r2, [sp, #8]
 800836a:	1b3a      	subs	r2, r7, r4
 800836c:	3a15      	subs	r2, #21
 800836e:	f022 0203 	bic.w	r2, r2, #3
 8008372:	3204      	adds	r2, #4
 8008374:	f104 0115 	add.w	r1, r4, #21
 8008378:	428f      	cmp	r7, r1
 800837a:	bf38      	it	cc
 800837c:	2204      	movcc	r2, #4
 800837e:	9201      	str	r2, [sp, #4]
 8008380:	9a02      	ldr	r2, [sp, #8]
 8008382:	9303      	str	r3, [sp, #12]
 8008384:	429a      	cmp	r2, r3
 8008386:	d80c      	bhi.n	80083a2 <__multiply+0x9e>
 8008388:	2e00      	cmp	r6, #0
 800838a:	dd03      	ble.n	8008394 <__multiply+0x90>
 800838c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008390:	2b00      	cmp	r3, #0
 8008392:	d05b      	beq.n	800844c <__multiply+0x148>
 8008394:	6106      	str	r6, [r0, #16]
 8008396:	b005      	add	sp, #20
 8008398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800839c:	f843 2b04 	str.w	r2, [r3], #4
 80083a0:	e7d8      	b.n	8008354 <__multiply+0x50>
 80083a2:	f8b3 a000 	ldrh.w	sl, [r3]
 80083a6:	f1ba 0f00 	cmp.w	sl, #0
 80083aa:	d024      	beq.n	80083f6 <__multiply+0xf2>
 80083ac:	f104 0e14 	add.w	lr, r4, #20
 80083b0:	46a9      	mov	r9, r5
 80083b2:	f04f 0c00 	mov.w	ip, #0
 80083b6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80083ba:	f8d9 1000 	ldr.w	r1, [r9]
 80083be:	fa1f fb82 	uxth.w	fp, r2
 80083c2:	b289      	uxth	r1, r1
 80083c4:	fb0a 110b 	mla	r1, sl, fp, r1
 80083c8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80083cc:	f8d9 2000 	ldr.w	r2, [r9]
 80083d0:	4461      	add	r1, ip
 80083d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80083d6:	fb0a c20b 	mla	r2, sl, fp, ip
 80083da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80083de:	b289      	uxth	r1, r1
 80083e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80083e4:	4577      	cmp	r7, lr
 80083e6:	f849 1b04 	str.w	r1, [r9], #4
 80083ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80083ee:	d8e2      	bhi.n	80083b6 <__multiply+0xb2>
 80083f0:	9a01      	ldr	r2, [sp, #4]
 80083f2:	f845 c002 	str.w	ip, [r5, r2]
 80083f6:	9a03      	ldr	r2, [sp, #12]
 80083f8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80083fc:	3304      	adds	r3, #4
 80083fe:	f1b9 0f00 	cmp.w	r9, #0
 8008402:	d021      	beq.n	8008448 <__multiply+0x144>
 8008404:	6829      	ldr	r1, [r5, #0]
 8008406:	f104 0c14 	add.w	ip, r4, #20
 800840a:	46ae      	mov	lr, r5
 800840c:	f04f 0a00 	mov.w	sl, #0
 8008410:	f8bc b000 	ldrh.w	fp, [ip]
 8008414:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008418:	fb09 220b 	mla	r2, r9, fp, r2
 800841c:	4452      	add	r2, sl
 800841e:	b289      	uxth	r1, r1
 8008420:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008424:	f84e 1b04 	str.w	r1, [lr], #4
 8008428:	f85c 1b04 	ldr.w	r1, [ip], #4
 800842c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008430:	f8be 1000 	ldrh.w	r1, [lr]
 8008434:	fb09 110a 	mla	r1, r9, sl, r1
 8008438:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800843c:	4567      	cmp	r7, ip
 800843e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008442:	d8e5      	bhi.n	8008410 <__multiply+0x10c>
 8008444:	9a01      	ldr	r2, [sp, #4]
 8008446:	50a9      	str	r1, [r5, r2]
 8008448:	3504      	adds	r5, #4
 800844a:	e799      	b.n	8008380 <__multiply+0x7c>
 800844c:	3e01      	subs	r6, #1
 800844e:	e79b      	b.n	8008388 <__multiply+0x84>
 8008450:	080093f0 	.word	0x080093f0
 8008454:	08009401 	.word	0x08009401

08008458 <__pow5mult>:
 8008458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800845c:	4615      	mov	r5, r2
 800845e:	f012 0203 	ands.w	r2, r2, #3
 8008462:	4606      	mov	r6, r0
 8008464:	460f      	mov	r7, r1
 8008466:	d007      	beq.n	8008478 <__pow5mult+0x20>
 8008468:	4c25      	ldr	r4, [pc, #148]	; (8008500 <__pow5mult+0xa8>)
 800846a:	3a01      	subs	r2, #1
 800846c:	2300      	movs	r3, #0
 800846e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008472:	f7ff fe9d 	bl	80081b0 <__multadd>
 8008476:	4607      	mov	r7, r0
 8008478:	10ad      	asrs	r5, r5, #2
 800847a:	d03d      	beq.n	80084f8 <__pow5mult+0xa0>
 800847c:	69f4      	ldr	r4, [r6, #28]
 800847e:	b97c      	cbnz	r4, 80084a0 <__pow5mult+0x48>
 8008480:	2010      	movs	r0, #16
 8008482:	f7ff fd7f 	bl	8007f84 <malloc>
 8008486:	4602      	mov	r2, r0
 8008488:	61f0      	str	r0, [r6, #28]
 800848a:	b928      	cbnz	r0, 8008498 <__pow5mult+0x40>
 800848c:	4b1d      	ldr	r3, [pc, #116]	; (8008504 <__pow5mult+0xac>)
 800848e:	481e      	ldr	r0, [pc, #120]	; (8008508 <__pow5mult+0xb0>)
 8008490:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008494:	f000 fbe4 	bl	8008c60 <__assert_func>
 8008498:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800849c:	6004      	str	r4, [r0, #0]
 800849e:	60c4      	str	r4, [r0, #12]
 80084a0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80084a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80084a8:	b94c      	cbnz	r4, 80084be <__pow5mult+0x66>
 80084aa:	f240 2171 	movw	r1, #625	; 0x271
 80084ae:	4630      	mov	r0, r6
 80084b0:	f7ff ff12 	bl	80082d8 <__i2b>
 80084b4:	2300      	movs	r3, #0
 80084b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80084ba:	4604      	mov	r4, r0
 80084bc:	6003      	str	r3, [r0, #0]
 80084be:	f04f 0900 	mov.w	r9, #0
 80084c2:	07eb      	lsls	r3, r5, #31
 80084c4:	d50a      	bpl.n	80084dc <__pow5mult+0x84>
 80084c6:	4639      	mov	r1, r7
 80084c8:	4622      	mov	r2, r4
 80084ca:	4630      	mov	r0, r6
 80084cc:	f7ff ff1a 	bl	8008304 <__multiply>
 80084d0:	4639      	mov	r1, r7
 80084d2:	4680      	mov	r8, r0
 80084d4:	4630      	mov	r0, r6
 80084d6:	f7ff fe49 	bl	800816c <_Bfree>
 80084da:	4647      	mov	r7, r8
 80084dc:	106d      	asrs	r5, r5, #1
 80084de:	d00b      	beq.n	80084f8 <__pow5mult+0xa0>
 80084e0:	6820      	ldr	r0, [r4, #0]
 80084e2:	b938      	cbnz	r0, 80084f4 <__pow5mult+0x9c>
 80084e4:	4622      	mov	r2, r4
 80084e6:	4621      	mov	r1, r4
 80084e8:	4630      	mov	r0, r6
 80084ea:	f7ff ff0b 	bl	8008304 <__multiply>
 80084ee:	6020      	str	r0, [r4, #0]
 80084f0:	f8c0 9000 	str.w	r9, [r0]
 80084f4:	4604      	mov	r4, r0
 80084f6:	e7e4      	b.n	80084c2 <__pow5mult+0x6a>
 80084f8:	4638      	mov	r0, r7
 80084fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084fe:	bf00      	nop
 8008500:	08009550 	.word	0x08009550
 8008504:	08009381 	.word	0x08009381
 8008508:	08009401 	.word	0x08009401

0800850c <__lshift>:
 800850c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008510:	460c      	mov	r4, r1
 8008512:	6849      	ldr	r1, [r1, #4]
 8008514:	6923      	ldr	r3, [r4, #16]
 8008516:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800851a:	68a3      	ldr	r3, [r4, #8]
 800851c:	4607      	mov	r7, r0
 800851e:	4691      	mov	r9, r2
 8008520:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008524:	f108 0601 	add.w	r6, r8, #1
 8008528:	42b3      	cmp	r3, r6
 800852a:	db0b      	blt.n	8008544 <__lshift+0x38>
 800852c:	4638      	mov	r0, r7
 800852e:	f7ff fddd 	bl	80080ec <_Balloc>
 8008532:	4605      	mov	r5, r0
 8008534:	b948      	cbnz	r0, 800854a <__lshift+0x3e>
 8008536:	4602      	mov	r2, r0
 8008538:	4b28      	ldr	r3, [pc, #160]	; (80085dc <__lshift+0xd0>)
 800853a:	4829      	ldr	r0, [pc, #164]	; (80085e0 <__lshift+0xd4>)
 800853c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008540:	f000 fb8e 	bl	8008c60 <__assert_func>
 8008544:	3101      	adds	r1, #1
 8008546:	005b      	lsls	r3, r3, #1
 8008548:	e7ee      	b.n	8008528 <__lshift+0x1c>
 800854a:	2300      	movs	r3, #0
 800854c:	f100 0114 	add.w	r1, r0, #20
 8008550:	f100 0210 	add.w	r2, r0, #16
 8008554:	4618      	mov	r0, r3
 8008556:	4553      	cmp	r3, sl
 8008558:	db33      	blt.n	80085c2 <__lshift+0xb6>
 800855a:	6920      	ldr	r0, [r4, #16]
 800855c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008560:	f104 0314 	add.w	r3, r4, #20
 8008564:	f019 091f 	ands.w	r9, r9, #31
 8008568:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800856c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008570:	d02b      	beq.n	80085ca <__lshift+0xbe>
 8008572:	f1c9 0e20 	rsb	lr, r9, #32
 8008576:	468a      	mov	sl, r1
 8008578:	2200      	movs	r2, #0
 800857a:	6818      	ldr	r0, [r3, #0]
 800857c:	fa00 f009 	lsl.w	r0, r0, r9
 8008580:	4310      	orrs	r0, r2
 8008582:	f84a 0b04 	str.w	r0, [sl], #4
 8008586:	f853 2b04 	ldr.w	r2, [r3], #4
 800858a:	459c      	cmp	ip, r3
 800858c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008590:	d8f3      	bhi.n	800857a <__lshift+0x6e>
 8008592:	ebac 0304 	sub.w	r3, ip, r4
 8008596:	3b15      	subs	r3, #21
 8008598:	f023 0303 	bic.w	r3, r3, #3
 800859c:	3304      	adds	r3, #4
 800859e:	f104 0015 	add.w	r0, r4, #21
 80085a2:	4584      	cmp	ip, r0
 80085a4:	bf38      	it	cc
 80085a6:	2304      	movcc	r3, #4
 80085a8:	50ca      	str	r2, [r1, r3]
 80085aa:	b10a      	cbz	r2, 80085b0 <__lshift+0xa4>
 80085ac:	f108 0602 	add.w	r6, r8, #2
 80085b0:	3e01      	subs	r6, #1
 80085b2:	4638      	mov	r0, r7
 80085b4:	612e      	str	r6, [r5, #16]
 80085b6:	4621      	mov	r1, r4
 80085b8:	f7ff fdd8 	bl	800816c <_Bfree>
 80085bc:	4628      	mov	r0, r5
 80085be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80085c6:	3301      	adds	r3, #1
 80085c8:	e7c5      	b.n	8008556 <__lshift+0x4a>
 80085ca:	3904      	subs	r1, #4
 80085cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80085d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80085d4:	459c      	cmp	ip, r3
 80085d6:	d8f9      	bhi.n	80085cc <__lshift+0xc0>
 80085d8:	e7ea      	b.n	80085b0 <__lshift+0xa4>
 80085da:	bf00      	nop
 80085dc:	080093f0 	.word	0x080093f0
 80085e0:	08009401 	.word	0x08009401

080085e4 <__mcmp>:
 80085e4:	b530      	push	{r4, r5, lr}
 80085e6:	6902      	ldr	r2, [r0, #16]
 80085e8:	690c      	ldr	r4, [r1, #16]
 80085ea:	1b12      	subs	r2, r2, r4
 80085ec:	d10e      	bne.n	800860c <__mcmp+0x28>
 80085ee:	f100 0314 	add.w	r3, r0, #20
 80085f2:	3114      	adds	r1, #20
 80085f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80085f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80085fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008600:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008604:	42a5      	cmp	r5, r4
 8008606:	d003      	beq.n	8008610 <__mcmp+0x2c>
 8008608:	d305      	bcc.n	8008616 <__mcmp+0x32>
 800860a:	2201      	movs	r2, #1
 800860c:	4610      	mov	r0, r2
 800860e:	bd30      	pop	{r4, r5, pc}
 8008610:	4283      	cmp	r3, r0
 8008612:	d3f3      	bcc.n	80085fc <__mcmp+0x18>
 8008614:	e7fa      	b.n	800860c <__mcmp+0x28>
 8008616:	f04f 32ff 	mov.w	r2, #4294967295
 800861a:	e7f7      	b.n	800860c <__mcmp+0x28>

0800861c <__mdiff>:
 800861c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008620:	460c      	mov	r4, r1
 8008622:	4606      	mov	r6, r0
 8008624:	4611      	mov	r1, r2
 8008626:	4620      	mov	r0, r4
 8008628:	4690      	mov	r8, r2
 800862a:	f7ff ffdb 	bl	80085e4 <__mcmp>
 800862e:	1e05      	subs	r5, r0, #0
 8008630:	d110      	bne.n	8008654 <__mdiff+0x38>
 8008632:	4629      	mov	r1, r5
 8008634:	4630      	mov	r0, r6
 8008636:	f7ff fd59 	bl	80080ec <_Balloc>
 800863a:	b930      	cbnz	r0, 800864a <__mdiff+0x2e>
 800863c:	4b3a      	ldr	r3, [pc, #232]	; (8008728 <__mdiff+0x10c>)
 800863e:	4602      	mov	r2, r0
 8008640:	f240 2137 	movw	r1, #567	; 0x237
 8008644:	4839      	ldr	r0, [pc, #228]	; (800872c <__mdiff+0x110>)
 8008646:	f000 fb0b 	bl	8008c60 <__assert_func>
 800864a:	2301      	movs	r3, #1
 800864c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008650:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008654:	bfa4      	itt	ge
 8008656:	4643      	movge	r3, r8
 8008658:	46a0      	movge	r8, r4
 800865a:	4630      	mov	r0, r6
 800865c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008660:	bfa6      	itte	ge
 8008662:	461c      	movge	r4, r3
 8008664:	2500      	movge	r5, #0
 8008666:	2501      	movlt	r5, #1
 8008668:	f7ff fd40 	bl	80080ec <_Balloc>
 800866c:	b920      	cbnz	r0, 8008678 <__mdiff+0x5c>
 800866e:	4b2e      	ldr	r3, [pc, #184]	; (8008728 <__mdiff+0x10c>)
 8008670:	4602      	mov	r2, r0
 8008672:	f240 2145 	movw	r1, #581	; 0x245
 8008676:	e7e5      	b.n	8008644 <__mdiff+0x28>
 8008678:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800867c:	6926      	ldr	r6, [r4, #16]
 800867e:	60c5      	str	r5, [r0, #12]
 8008680:	f104 0914 	add.w	r9, r4, #20
 8008684:	f108 0514 	add.w	r5, r8, #20
 8008688:	f100 0e14 	add.w	lr, r0, #20
 800868c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008690:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008694:	f108 0210 	add.w	r2, r8, #16
 8008698:	46f2      	mov	sl, lr
 800869a:	2100      	movs	r1, #0
 800869c:	f859 3b04 	ldr.w	r3, [r9], #4
 80086a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80086a4:	fa11 f88b 	uxtah	r8, r1, fp
 80086a8:	b299      	uxth	r1, r3
 80086aa:	0c1b      	lsrs	r3, r3, #16
 80086ac:	eba8 0801 	sub.w	r8, r8, r1
 80086b0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80086b4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80086b8:	fa1f f888 	uxth.w	r8, r8
 80086bc:	1419      	asrs	r1, r3, #16
 80086be:	454e      	cmp	r6, r9
 80086c0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80086c4:	f84a 3b04 	str.w	r3, [sl], #4
 80086c8:	d8e8      	bhi.n	800869c <__mdiff+0x80>
 80086ca:	1b33      	subs	r3, r6, r4
 80086cc:	3b15      	subs	r3, #21
 80086ce:	f023 0303 	bic.w	r3, r3, #3
 80086d2:	3304      	adds	r3, #4
 80086d4:	3415      	adds	r4, #21
 80086d6:	42a6      	cmp	r6, r4
 80086d8:	bf38      	it	cc
 80086da:	2304      	movcc	r3, #4
 80086dc:	441d      	add	r5, r3
 80086de:	4473      	add	r3, lr
 80086e0:	469e      	mov	lr, r3
 80086e2:	462e      	mov	r6, r5
 80086e4:	4566      	cmp	r6, ip
 80086e6:	d30e      	bcc.n	8008706 <__mdiff+0xea>
 80086e8:	f10c 0203 	add.w	r2, ip, #3
 80086ec:	1b52      	subs	r2, r2, r5
 80086ee:	f022 0203 	bic.w	r2, r2, #3
 80086f2:	3d03      	subs	r5, #3
 80086f4:	45ac      	cmp	ip, r5
 80086f6:	bf38      	it	cc
 80086f8:	2200      	movcc	r2, #0
 80086fa:	4413      	add	r3, r2
 80086fc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008700:	b17a      	cbz	r2, 8008722 <__mdiff+0x106>
 8008702:	6107      	str	r7, [r0, #16]
 8008704:	e7a4      	b.n	8008650 <__mdiff+0x34>
 8008706:	f856 8b04 	ldr.w	r8, [r6], #4
 800870a:	fa11 f288 	uxtah	r2, r1, r8
 800870e:	1414      	asrs	r4, r2, #16
 8008710:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008714:	b292      	uxth	r2, r2
 8008716:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800871a:	f84e 2b04 	str.w	r2, [lr], #4
 800871e:	1421      	asrs	r1, r4, #16
 8008720:	e7e0      	b.n	80086e4 <__mdiff+0xc8>
 8008722:	3f01      	subs	r7, #1
 8008724:	e7ea      	b.n	80086fc <__mdiff+0xe0>
 8008726:	bf00      	nop
 8008728:	080093f0 	.word	0x080093f0
 800872c:	08009401 	.word	0x08009401

08008730 <__d2b>:
 8008730:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008734:	460f      	mov	r7, r1
 8008736:	2101      	movs	r1, #1
 8008738:	ec59 8b10 	vmov	r8, r9, d0
 800873c:	4616      	mov	r6, r2
 800873e:	f7ff fcd5 	bl	80080ec <_Balloc>
 8008742:	4604      	mov	r4, r0
 8008744:	b930      	cbnz	r0, 8008754 <__d2b+0x24>
 8008746:	4602      	mov	r2, r0
 8008748:	4b24      	ldr	r3, [pc, #144]	; (80087dc <__d2b+0xac>)
 800874a:	4825      	ldr	r0, [pc, #148]	; (80087e0 <__d2b+0xb0>)
 800874c:	f240 310f 	movw	r1, #783	; 0x30f
 8008750:	f000 fa86 	bl	8008c60 <__assert_func>
 8008754:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008758:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800875c:	bb2d      	cbnz	r5, 80087aa <__d2b+0x7a>
 800875e:	9301      	str	r3, [sp, #4]
 8008760:	f1b8 0300 	subs.w	r3, r8, #0
 8008764:	d026      	beq.n	80087b4 <__d2b+0x84>
 8008766:	4668      	mov	r0, sp
 8008768:	9300      	str	r3, [sp, #0]
 800876a:	f7ff fd87 	bl	800827c <__lo0bits>
 800876e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008772:	b1e8      	cbz	r0, 80087b0 <__d2b+0x80>
 8008774:	f1c0 0320 	rsb	r3, r0, #32
 8008778:	fa02 f303 	lsl.w	r3, r2, r3
 800877c:	430b      	orrs	r3, r1
 800877e:	40c2      	lsrs	r2, r0
 8008780:	6163      	str	r3, [r4, #20]
 8008782:	9201      	str	r2, [sp, #4]
 8008784:	9b01      	ldr	r3, [sp, #4]
 8008786:	61a3      	str	r3, [r4, #24]
 8008788:	2b00      	cmp	r3, #0
 800878a:	bf14      	ite	ne
 800878c:	2202      	movne	r2, #2
 800878e:	2201      	moveq	r2, #1
 8008790:	6122      	str	r2, [r4, #16]
 8008792:	b1bd      	cbz	r5, 80087c4 <__d2b+0x94>
 8008794:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008798:	4405      	add	r5, r0
 800879a:	603d      	str	r5, [r7, #0]
 800879c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80087a0:	6030      	str	r0, [r6, #0]
 80087a2:	4620      	mov	r0, r4
 80087a4:	b003      	add	sp, #12
 80087a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087ae:	e7d6      	b.n	800875e <__d2b+0x2e>
 80087b0:	6161      	str	r1, [r4, #20]
 80087b2:	e7e7      	b.n	8008784 <__d2b+0x54>
 80087b4:	a801      	add	r0, sp, #4
 80087b6:	f7ff fd61 	bl	800827c <__lo0bits>
 80087ba:	9b01      	ldr	r3, [sp, #4]
 80087bc:	6163      	str	r3, [r4, #20]
 80087be:	3020      	adds	r0, #32
 80087c0:	2201      	movs	r2, #1
 80087c2:	e7e5      	b.n	8008790 <__d2b+0x60>
 80087c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80087c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80087cc:	6038      	str	r0, [r7, #0]
 80087ce:	6918      	ldr	r0, [r3, #16]
 80087d0:	f7ff fd34 	bl	800823c <__hi0bits>
 80087d4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80087d8:	e7e2      	b.n	80087a0 <__d2b+0x70>
 80087da:	bf00      	nop
 80087dc:	080093f0 	.word	0x080093f0
 80087e0:	08009401 	.word	0x08009401

080087e4 <__ssputs_r>:
 80087e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087e8:	688e      	ldr	r6, [r1, #8]
 80087ea:	461f      	mov	r7, r3
 80087ec:	42be      	cmp	r6, r7
 80087ee:	680b      	ldr	r3, [r1, #0]
 80087f0:	4682      	mov	sl, r0
 80087f2:	460c      	mov	r4, r1
 80087f4:	4690      	mov	r8, r2
 80087f6:	d82c      	bhi.n	8008852 <__ssputs_r+0x6e>
 80087f8:	898a      	ldrh	r2, [r1, #12]
 80087fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80087fe:	d026      	beq.n	800884e <__ssputs_r+0x6a>
 8008800:	6965      	ldr	r5, [r4, #20]
 8008802:	6909      	ldr	r1, [r1, #16]
 8008804:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008808:	eba3 0901 	sub.w	r9, r3, r1
 800880c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008810:	1c7b      	adds	r3, r7, #1
 8008812:	444b      	add	r3, r9
 8008814:	106d      	asrs	r5, r5, #1
 8008816:	429d      	cmp	r5, r3
 8008818:	bf38      	it	cc
 800881a:	461d      	movcc	r5, r3
 800881c:	0553      	lsls	r3, r2, #21
 800881e:	d527      	bpl.n	8008870 <__ssputs_r+0x8c>
 8008820:	4629      	mov	r1, r5
 8008822:	f7ff fbd7 	bl	8007fd4 <_malloc_r>
 8008826:	4606      	mov	r6, r0
 8008828:	b360      	cbz	r0, 8008884 <__ssputs_r+0xa0>
 800882a:	6921      	ldr	r1, [r4, #16]
 800882c:	464a      	mov	r2, r9
 800882e:	f000 fa09 	bl	8008c44 <memcpy>
 8008832:	89a3      	ldrh	r3, [r4, #12]
 8008834:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800883c:	81a3      	strh	r3, [r4, #12]
 800883e:	6126      	str	r6, [r4, #16]
 8008840:	6165      	str	r5, [r4, #20]
 8008842:	444e      	add	r6, r9
 8008844:	eba5 0509 	sub.w	r5, r5, r9
 8008848:	6026      	str	r6, [r4, #0]
 800884a:	60a5      	str	r5, [r4, #8]
 800884c:	463e      	mov	r6, r7
 800884e:	42be      	cmp	r6, r7
 8008850:	d900      	bls.n	8008854 <__ssputs_r+0x70>
 8008852:	463e      	mov	r6, r7
 8008854:	6820      	ldr	r0, [r4, #0]
 8008856:	4632      	mov	r2, r6
 8008858:	4641      	mov	r1, r8
 800885a:	f000 f9c9 	bl	8008bf0 <memmove>
 800885e:	68a3      	ldr	r3, [r4, #8]
 8008860:	1b9b      	subs	r3, r3, r6
 8008862:	60a3      	str	r3, [r4, #8]
 8008864:	6823      	ldr	r3, [r4, #0]
 8008866:	4433      	add	r3, r6
 8008868:	6023      	str	r3, [r4, #0]
 800886a:	2000      	movs	r0, #0
 800886c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008870:	462a      	mov	r2, r5
 8008872:	f000 fa3b 	bl	8008cec <_realloc_r>
 8008876:	4606      	mov	r6, r0
 8008878:	2800      	cmp	r0, #0
 800887a:	d1e0      	bne.n	800883e <__ssputs_r+0x5a>
 800887c:	6921      	ldr	r1, [r4, #16]
 800887e:	4650      	mov	r0, sl
 8008880:	f7ff fb34 	bl	8007eec <_free_r>
 8008884:	230c      	movs	r3, #12
 8008886:	f8ca 3000 	str.w	r3, [sl]
 800888a:	89a3      	ldrh	r3, [r4, #12]
 800888c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008890:	81a3      	strh	r3, [r4, #12]
 8008892:	f04f 30ff 	mov.w	r0, #4294967295
 8008896:	e7e9      	b.n	800886c <__ssputs_r+0x88>

08008898 <_svfiprintf_r>:
 8008898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800889c:	4698      	mov	r8, r3
 800889e:	898b      	ldrh	r3, [r1, #12]
 80088a0:	061b      	lsls	r3, r3, #24
 80088a2:	b09d      	sub	sp, #116	; 0x74
 80088a4:	4607      	mov	r7, r0
 80088a6:	460d      	mov	r5, r1
 80088a8:	4614      	mov	r4, r2
 80088aa:	d50e      	bpl.n	80088ca <_svfiprintf_r+0x32>
 80088ac:	690b      	ldr	r3, [r1, #16]
 80088ae:	b963      	cbnz	r3, 80088ca <_svfiprintf_r+0x32>
 80088b0:	2140      	movs	r1, #64	; 0x40
 80088b2:	f7ff fb8f 	bl	8007fd4 <_malloc_r>
 80088b6:	6028      	str	r0, [r5, #0]
 80088b8:	6128      	str	r0, [r5, #16]
 80088ba:	b920      	cbnz	r0, 80088c6 <_svfiprintf_r+0x2e>
 80088bc:	230c      	movs	r3, #12
 80088be:	603b      	str	r3, [r7, #0]
 80088c0:	f04f 30ff 	mov.w	r0, #4294967295
 80088c4:	e0d0      	b.n	8008a68 <_svfiprintf_r+0x1d0>
 80088c6:	2340      	movs	r3, #64	; 0x40
 80088c8:	616b      	str	r3, [r5, #20]
 80088ca:	2300      	movs	r3, #0
 80088cc:	9309      	str	r3, [sp, #36]	; 0x24
 80088ce:	2320      	movs	r3, #32
 80088d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80088d8:	2330      	movs	r3, #48	; 0x30
 80088da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008a80 <_svfiprintf_r+0x1e8>
 80088de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088e2:	f04f 0901 	mov.w	r9, #1
 80088e6:	4623      	mov	r3, r4
 80088e8:	469a      	mov	sl, r3
 80088ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088ee:	b10a      	cbz	r2, 80088f4 <_svfiprintf_r+0x5c>
 80088f0:	2a25      	cmp	r2, #37	; 0x25
 80088f2:	d1f9      	bne.n	80088e8 <_svfiprintf_r+0x50>
 80088f4:	ebba 0b04 	subs.w	fp, sl, r4
 80088f8:	d00b      	beq.n	8008912 <_svfiprintf_r+0x7a>
 80088fa:	465b      	mov	r3, fp
 80088fc:	4622      	mov	r2, r4
 80088fe:	4629      	mov	r1, r5
 8008900:	4638      	mov	r0, r7
 8008902:	f7ff ff6f 	bl	80087e4 <__ssputs_r>
 8008906:	3001      	adds	r0, #1
 8008908:	f000 80a9 	beq.w	8008a5e <_svfiprintf_r+0x1c6>
 800890c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800890e:	445a      	add	r2, fp
 8008910:	9209      	str	r2, [sp, #36]	; 0x24
 8008912:	f89a 3000 	ldrb.w	r3, [sl]
 8008916:	2b00      	cmp	r3, #0
 8008918:	f000 80a1 	beq.w	8008a5e <_svfiprintf_r+0x1c6>
 800891c:	2300      	movs	r3, #0
 800891e:	f04f 32ff 	mov.w	r2, #4294967295
 8008922:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008926:	f10a 0a01 	add.w	sl, sl, #1
 800892a:	9304      	str	r3, [sp, #16]
 800892c:	9307      	str	r3, [sp, #28]
 800892e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008932:	931a      	str	r3, [sp, #104]	; 0x68
 8008934:	4654      	mov	r4, sl
 8008936:	2205      	movs	r2, #5
 8008938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800893c:	4850      	ldr	r0, [pc, #320]	; (8008a80 <_svfiprintf_r+0x1e8>)
 800893e:	f7f7 fc4f 	bl	80001e0 <memchr>
 8008942:	9a04      	ldr	r2, [sp, #16]
 8008944:	b9d8      	cbnz	r0, 800897e <_svfiprintf_r+0xe6>
 8008946:	06d0      	lsls	r0, r2, #27
 8008948:	bf44      	itt	mi
 800894a:	2320      	movmi	r3, #32
 800894c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008950:	0711      	lsls	r1, r2, #28
 8008952:	bf44      	itt	mi
 8008954:	232b      	movmi	r3, #43	; 0x2b
 8008956:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800895a:	f89a 3000 	ldrb.w	r3, [sl]
 800895e:	2b2a      	cmp	r3, #42	; 0x2a
 8008960:	d015      	beq.n	800898e <_svfiprintf_r+0xf6>
 8008962:	9a07      	ldr	r2, [sp, #28]
 8008964:	4654      	mov	r4, sl
 8008966:	2000      	movs	r0, #0
 8008968:	f04f 0c0a 	mov.w	ip, #10
 800896c:	4621      	mov	r1, r4
 800896e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008972:	3b30      	subs	r3, #48	; 0x30
 8008974:	2b09      	cmp	r3, #9
 8008976:	d94d      	bls.n	8008a14 <_svfiprintf_r+0x17c>
 8008978:	b1b0      	cbz	r0, 80089a8 <_svfiprintf_r+0x110>
 800897a:	9207      	str	r2, [sp, #28]
 800897c:	e014      	b.n	80089a8 <_svfiprintf_r+0x110>
 800897e:	eba0 0308 	sub.w	r3, r0, r8
 8008982:	fa09 f303 	lsl.w	r3, r9, r3
 8008986:	4313      	orrs	r3, r2
 8008988:	9304      	str	r3, [sp, #16]
 800898a:	46a2      	mov	sl, r4
 800898c:	e7d2      	b.n	8008934 <_svfiprintf_r+0x9c>
 800898e:	9b03      	ldr	r3, [sp, #12]
 8008990:	1d19      	adds	r1, r3, #4
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	9103      	str	r1, [sp, #12]
 8008996:	2b00      	cmp	r3, #0
 8008998:	bfbb      	ittet	lt
 800899a:	425b      	neglt	r3, r3
 800899c:	f042 0202 	orrlt.w	r2, r2, #2
 80089a0:	9307      	strge	r3, [sp, #28]
 80089a2:	9307      	strlt	r3, [sp, #28]
 80089a4:	bfb8      	it	lt
 80089a6:	9204      	strlt	r2, [sp, #16]
 80089a8:	7823      	ldrb	r3, [r4, #0]
 80089aa:	2b2e      	cmp	r3, #46	; 0x2e
 80089ac:	d10c      	bne.n	80089c8 <_svfiprintf_r+0x130>
 80089ae:	7863      	ldrb	r3, [r4, #1]
 80089b0:	2b2a      	cmp	r3, #42	; 0x2a
 80089b2:	d134      	bne.n	8008a1e <_svfiprintf_r+0x186>
 80089b4:	9b03      	ldr	r3, [sp, #12]
 80089b6:	1d1a      	adds	r2, r3, #4
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	9203      	str	r2, [sp, #12]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	bfb8      	it	lt
 80089c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80089c4:	3402      	adds	r4, #2
 80089c6:	9305      	str	r3, [sp, #20]
 80089c8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008a90 <_svfiprintf_r+0x1f8>
 80089cc:	7821      	ldrb	r1, [r4, #0]
 80089ce:	2203      	movs	r2, #3
 80089d0:	4650      	mov	r0, sl
 80089d2:	f7f7 fc05 	bl	80001e0 <memchr>
 80089d6:	b138      	cbz	r0, 80089e8 <_svfiprintf_r+0x150>
 80089d8:	9b04      	ldr	r3, [sp, #16]
 80089da:	eba0 000a 	sub.w	r0, r0, sl
 80089de:	2240      	movs	r2, #64	; 0x40
 80089e0:	4082      	lsls	r2, r0
 80089e2:	4313      	orrs	r3, r2
 80089e4:	3401      	adds	r4, #1
 80089e6:	9304      	str	r3, [sp, #16]
 80089e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089ec:	4825      	ldr	r0, [pc, #148]	; (8008a84 <_svfiprintf_r+0x1ec>)
 80089ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089f2:	2206      	movs	r2, #6
 80089f4:	f7f7 fbf4 	bl	80001e0 <memchr>
 80089f8:	2800      	cmp	r0, #0
 80089fa:	d038      	beq.n	8008a6e <_svfiprintf_r+0x1d6>
 80089fc:	4b22      	ldr	r3, [pc, #136]	; (8008a88 <_svfiprintf_r+0x1f0>)
 80089fe:	bb1b      	cbnz	r3, 8008a48 <_svfiprintf_r+0x1b0>
 8008a00:	9b03      	ldr	r3, [sp, #12]
 8008a02:	3307      	adds	r3, #7
 8008a04:	f023 0307 	bic.w	r3, r3, #7
 8008a08:	3308      	adds	r3, #8
 8008a0a:	9303      	str	r3, [sp, #12]
 8008a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a0e:	4433      	add	r3, r6
 8008a10:	9309      	str	r3, [sp, #36]	; 0x24
 8008a12:	e768      	b.n	80088e6 <_svfiprintf_r+0x4e>
 8008a14:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a18:	460c      	mov	r4, r1
 8008a1a:	2001      	movs	r0, #1
 8008a1c:	e7a6      	b.n	800896c <_svfiprintf_r+0xd4>
 8008a1e:	2300      	movs	r3, #0
 8008a20:	3401      	adds	r4, #1
 8008a22:	9305      	str	r3, [sp, #20]
 8008a24:	4619      	mov	r1, r3
 8008a26:	f04f 0c0a 	mov.w	ip, #10
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a30:	3a30      	subs	r2, #48	; 0x30
 8008a32:	2a09      	cmp	r2, #9
 8008a34:	d903      	bls.n	8008a3e <_svfiprintf_r+0x1a6>
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d0c6      	beq.n	80089c8 <_svfiprintf_r+0x130>
 8008a3a:	9105      	str	r1, [sp, #20]
 8008a3c:	e7c4      	b.n	80089c8 <_svfiprintf_r+0x130>
 8008a3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a42:	4604      	mov	r4, r0
 8008a44:	2301      	movs	r3, #1
 8008a46:	e7f0      	b.n	8008a2a <_svfiprintf_r+0x192>
 8008a48:	ab03      	add	r3, sp, #12
 8008a4a:	9300      	str	r3, [sp, #0]
 8008a4c:	462a      	mov	r2, r5
 8008a4e:	4b0f      	ldr	r3, [pc, #60]	; (8008a8c <_svfiprintf_r+0x1f4>)
 8008a50:	a904      	add	r1, sp, #16
 8008a52:	4638      	mov	r0, r7
 8008a54:	f7fd fe64 	bl	8006720 <_printf_float>
 8008a58:	1c42      	adds	r2, r0, #1
 8008a5a:	4606      	mov	r6, r0
 8008a5c:	d1d6      	bne.n	8008a0c <_svfiprintf_r+0x174>
 8008a5e:	89ab      	ldrh	r3, [r5, #12]
 8008a60:	065b      	lsls	r3, r3, #25
 8008a62:	f53f af2d 	bmi.w	80088c0 <_svfiprintf_r+0x28>
 8008a66:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a68:	b01d      	add	sp, #116	; 0x74
 8008a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a6e:	ab03      	add	r3, sp, #12
 8008a70:	9300      	str	r3, [sp, #0]
 8008a72:	462a      	mov	r2, r5
 8008a74:	4b05      	ldr	r3, [pc, #20]	; (8008a8c <_svfiprintf_r+0x1f4>)
 8008a76:	a904      	add	r1, sp, #16
 8008a78:	4638      	mov	r0, r7
 8008a7a:	f7fe f8f5 	bl	8006c68 <_printf_i>
 8008a7e:	e7eb      	b.n	8008a58 <_svfiprintf_r+0x1c0>
 8008a80:	0800955c 	.word	0x0800955c
 8008a84:	08009566 	.word	0x08009566
 8008a88:	08006721 	.word	0x08006721
 8008a8c:	080087e5 	.word	0x080087e5
 8008a90:	08009562 	.word	0x08009562

08008a94 <__sflush_r>:
 8008a94:	898a      	ldrh	r2, [r1, #12]
 8008a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a9a:	4605      	mov	r5, r0
 8008a9c:	0710      	lsls	r0, r2, #28
 8008a9e:	460c      	mov	r4, r1
 8008aa0:	d458      	bmi.n	8008b54 <__sflush_r+0xc0>
 8008aa2:	684b      	ldr	r3, [r1, #4]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	dc05      	bgt.n	8008ab4 <__sflush_r+0x20>
 8008aa8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	dc02      	bgt.n	8008ab4 <__sflush_r+0x20>
 8008aae:	2000      	movs	r0, #0
 8008ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ab4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ab6:	2e00      	cmp	r6, #0
 8008ab8:	d0f9      	beq.n	8008aae <__sflush_r+0x1a>
 8008aba:	2300      	movs	r3, #0
 8008abc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ac0:	682f      	ldr	r7, [r5, #0]
 8008ac2:	6a21      	ldr	r1, [r4, #32]
 8008ac4:	602b      	str	r3, [r5, #0]
 8008ac6:	d032      	beq.n	8008b2e <__sflush_r+0x9a>
 8008ac8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008aca:	89a3      	ldrh	r3, [r4, #12]
 8008acc:	075a      	lsls	r2, r3, #29
 8008ace:	d505      	bpl.n	8008adc <__sflush_r+0x48>
 8008ad0:	6863      	ldr	r3, [r4, #4]
 8008ad2:	1ac0      	subs	r0, r0, r3
 8008ad4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ad6:	b10b      	cbz	r3, 8008adc <__sflush_r+0x48>
 8008ad8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ada:	1ac0      	subs	r0, r0, r3
 8008adc:	2300      	movs	r3, #0
 8008ade:	4602      	mov	r2, r0
 8008ae0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ae2:	6a21      	ldr	r1, [r4, #32]
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	47b0      	blx	r6
 8008ae8:	1c43      	adds	r3, r0, #1
 8008aea:	89a3      	ldrh	r3, [r4, #12]
 8008aec:	d106      	bne.n	8008afc <__sflush_r+0x68>
 8008aee:	6829      	ldr	r1, [r5, #0]
 8008af0:	291d      	cmp	r1, #29
 8008af2:	d82b      	bhi.n	8008b4c <__sflush_r+0xb8>
 8008af4:	4a29      	ldr	r2, [pc, #164]	; (8008b9c <__sflush_r+0x108>)
 8008af6:	410a      	asrs	r2, r1
 8008af8:	07d6      	lsls	r6, r2, #31
 8008afa:	d427      	bmi.n	8008b4c <__sflush_r+0xb8>
 8008afc:	2200      	movs	r2, #0
 8008afe:	6062      	str	r2, [r4, #4]
 8008b00:	04d9      	lsls	r1, r3, #19
 8008b02:	6922      	ldr	r2, [r4, #16]
 8008b04:	6022      	str	r2, [r4, #0]
 8008b06:	d504      	bpl.n	8008b12 <__sflush_r+0x7e>
 8008b08:	1c42      	adds	r2, r0, #1
 8008b0a:	d101      	bne.n	8008b10 <__sflush_r+0x7c>
 8008b0c:	682b      	ldr	r3, [r5, #0]
 8008b0e:	b903      	cbnz	r3, 8008b12 <__sflush_r+0x7e>
 8008b10:	6560      	str	r0, [r4, #84]	; 0x54
 8008b12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b14:	602f      	str	r7, [r5, #0]
 8008b16:	2900      	cmp	r1, #0
 8008b18:	d0c9      	beq.n	8008aae <__sflush_r+0x1a>
 8008b1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b1e:	4299      	cmp	r1, r3
 8008b20:	d002      	beq.n	8008b28 <__sflush_r+0x94>
 8008b22:	4628      	mov	r0, r5
 8008b24:	f7ff f9e2 	bl	8007eec <_free_r>
 8008b28:	2000      	movs	r0, #0
 8008b2a:	6360      	str	r0, [r4, #52]	; 0x34
 8008b2c:	e7c0      	b.n	8008ab0 <__sflush_r+0x1c>
 8008b2e:	2301      	movs	r3, #1
 8008b30:	4628      	mov	r0, r5
 8008b32:	47b0      	blx	r6
 8008b34:	1c41      	adds	r1, r0, #1
 8008b36:	d1c8      	bne.n	8008aca <__sflush_r+0x36>
 8008b38:	682b      	ldr	r3, [r5, #0]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d0c5      	beq.n	8008aca <__sflush_r+0x36>
 8008b3e:	2b1d      	cmp	r3, #29
 8008b40:	d001      	beq.n	8008b46 <__sflush_r+0xb2>
 8008b42:	2b16      	cmp	r3, #22
 8008b44:	d101      	bne.n	8008b4a <__sflush_r+0xb6>
 8008b46:	602f      	str	r7, [r5, #0]
 8008b48:	e7b1      	b.n	8008aae <__sflush_r+0x1a>
 8008b4a:	89a3      	ldrh	r3, [r4, #12]
 8008b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b50:	81a3      	strh	r3, [r4, #12]
 8008b52:	e7ad      	b.n	8008ab0 <__sflush_r+0x1c>
 8008b54:	690f      	ldr	r7, [r1, #16]
 8008b56:	2f00      	cmp	r7, #0
 8008b58:	d0a9      	beq.n	8008aae <__sflush_r+0x1a>
 8008b5a:	0793      	lsls	r3, r2, #30
 8008b5c:	680e      	ldr	r6, [r1, #0]
 8008b5e:	bf08      	it	eq
 8008b60:	694b      	ldreq	r3, [r1, #20]
 8008b62:	600f      	str	r7, [r1, #0]
 8008b64:	bf18      	it	ne
 8008b66:	2300      	movne	r3, #0
 8008b68:	eba6 0807 	sub.w	r8, r6, r7
 8008b6c:	608b      	str	r3, [r1, #8]
 8008b6e:	f1b8 0f00 	cmp.w	r8, #0
 8008b72:	dd9c      	ble.n	8008aae <__sflush_r+0x1a>
 8008b74:	6a21      	ldr	r1, [r4, #32]
 8008b76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b78:	4643      	mov	r3, r8
 8008b7a:	463a      	mov	r2, r7
 8008b7c:	4628      	mov	r0, r5
 8008b7e:	47b0      	blx	r6
 8008b80:	2800      	cmp	r0, #0
 8008b82:	dc06      	bgt.n	8008b92 <__sflush_r+0xfe>
 8008b84:	89a3      	ldrh	r3, [r4, #12]
 8008b86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b8a:	81a3      	strh	r3, [r4, #12]
 8008b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b90:	e78e      	b.n	8008ab0 <__sflush_r+0x1c>
 8008b92:	4407      	add	r7, r0
 8008b94:	eba8 0800 	sub.w	r8, r8, r0
 8008b98:	e7e9      	b.n	8008b6e <__sflush_r+0xda>
 8008b9a:	bf00      	nop
 8008b9c:	dfbffffe 	.word	0xdfbffffe

08008ba0 <_fflush_r>:
 8008ba0:	b538      	push	{r3, r4, r5, lr}
 8008ba2:	690b      	ldr	r3, [r1, #16]
 8008ba4:	4605      	mov	r5, r0
 8008ba6:	460c      	mov	r4, r1
 8008ba8:	b913      	cbnz	r3, 8008bb0 <_fflush_r+0x10>
 8008baa:	2500      	movs	r5, #0
 8008bac:	4628      	mov	r0, r5
 8008bae:	bd38      	pop	{r3, r4, r5, pc}
 8008bb0:	b118      	cbz	r0, 8008bba <_fflush_r+0x1a>
 8008bb2:	6a03      	ldr	r3, [r0, #32]
 8008bb4:	b90b      	cbnz	r3, 8008bba <_fflush_r+0x1a>
 8008bb6:	f7fe fa05 	bl	8006fc4 <__sinit>
 8008bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d0f3      	beq.n	8008baa <_fflush_r+0xa>
 8008bc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008bc4:	07d0      	lsls	r0, r2, #31
 8008bc6:	d404      	bmi.n	8008bd2 <_fflush_r+0x32>
 8008bc8:	0599      	lsls	r1, r3, #22
 8008bca:	d402      	bmi.n	8008bd2 <_fflush_r+0x32>
 8008bcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bce:	f7fe fb10 	bl	80071f2 <__retarget_lock_acquire_recursive>
 8008bd2:	4628      	mov	r0, r5
 8008bd4:	4621      	mov	r1, r4
 8008bd6:	f7ff ff5d 	bl	8008a94 <__sflush_r>
 8008bda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bdc:	07da      	lsls	r2, r3, #31
 8008bde:	4605      	mov	r5, r0
 8008be0:	d4e4      	bmi.n	8008bac <_fflush_r+0xc>
 8008be2:	89a3      	ldrh	r3, [r4, #12]
 8008be4:	059b      	lsls	r3, r3, #22
 8008be6:	d4e1      	bmi.n	8008bac <_fflush_r+0xc>
 8008be8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bea:	f7fe fb03 	bl	80071f4 <__retarget_lock_release_recursive>
 8008bee:	e7dd      	b.n	8008bac <_fflush_r+0xc>

08008bf0 <memmove>:
 8008bf0:	4288      	cmp	r0, r1
 8008bf2:	b510      	push	{r4, lr}
 8008bf4:	eb01 0402 	add.w	r4, r1, r2
 8008bf8:	d902      	bls.n	8008c00 <memmove+0x10>
 8008bfa:	4284      	cmp	r4, r0
 8008bfc:	4623      	mov	r3, r4
 8008bfe:	d807      	bhi.n	8008c10 <memmove+0x20>
 8008c00:	1e43      	subs	r3, r0, #1
 8008c02:	42a1      	cmp	r1, r4
 8008c04:	d008      	beq.n	8008c18 <memmove+0x28>
 8008c06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c0e:	e7f8      	b.n	8008c02 <memmove+0x12>
 8008c10:	4402      	add	r2, r0
 8008c12:	4601      	mov	r1, r0
 8008c14:	428a      	cmp	r2, r1
 8008c16:	d100      	bne.n	8008c1a <memmove+0x2a>
 8008c18:	bd10      	pop	{r4, pc}
 8008c1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c22:	e7f7      	b.n	8008c14 <memmove+0x24>

08008c24 <_sbrk_r>:
 8008c24:	b538      	push	{r3, r4, r5, lr}
 8008c26:	4d06      	ldr	r5, [pc, #24]	; (8008c40 <_sbrk_r+0x1c>)
 8008c28:	2300      	movs	r3, #0
 8008c2a:	4604      	mov	r4, r0
 8008c2c:	4608      	mov	r0, r1
 8008c2e:	602b      	str	r3, [r5, #0]
 8008c30:	f7f9 fd9e 	bl	8002770 <_sbrk>
 8008c34:	1c43      	adds	r3, r0, #1
 8008c36:	d102      	bne.n	8008c3e <_sbrk_r+0x1a>
 8008c38:	682b      	ldr	r3, [r5, #0]
 8008c3a:	b103      	cbz	r3, 8008c3e <_sbrk_r+0x1a>
 8008c3c:	6023      	str	r3, [r4, #0]
 8008c3e:	bd38      	pop	{r3, r4, r5, pc}
 8008c40:	200005e8 	.word	0x200005e8

08008c44 <memcpy>:
 8008c44:	440a      	add	r2, r1
 8008c46:	4291      	cmp	r1, r2
 8008c48:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c4c:	d100      	bne.n	8008c50 <memcpy+0xc>
 8008c4e:	4770      	bx	lr
 8008c50:	b510      	push	{r4, lr}
 8008c52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c5a:	4291      	cmp	r1, r2
 8008c5c:	d1f9      	bne.n	8008c52 <memcpy+0xe>
 8008c5e:	bd10      	pop	{r4, pc}

08008c60 <__assert_func>:
 8008c60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c62:	4614      	mov	r4, r2
 8008c64:	461a      	mov	r2, r3
 8008c66:	4b09      	ldr	r3, [pc, #36]	; (8008c8c <__assert_func+0x2c>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4605      	mov	r5, r0
 8008c6c:	68d8      	ldr	r0, [r3, #12]
 8008c6e:	b14c      	cbz	r4, 8008c84 <__assert_func+0x24>
 8008c70:	4b07      	ldr	r3, [pc, #28]	; (8008c90 <__assert_func+0x30>)
 8008c72:	9100      	str	r1, [sp, #0]
 8008c74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c78:	4906      	ldr	r1, [pc, #24]	; (8008c94 <__assert_func+0x34>)
 8008c7a:	462b      	mov	r3, r5
 8008c7c:	f000 f872 	bl	8008d64 <fiprintf>
 8008c80:	f000 f882 	bl	8008d88 <abort>
 8008c84:	4b04      	ldr	r3, [pc, #16]	; (8008c98 <__assert_func+0x38>)
 8008c86:	461c      	mov	r4, r3
 8008c88:	e7f3      	b.n	8008c72 <__assert_func+0x12>
 8008c8a:	bf00      	nop
 8008c8c:	20000068 	.word	0x20000068
 8008c90:	08009577 	.word	0x08009577
 8008c94:	08009584 	.word	0x08009584
 8008c98:	080095b2 	.word	0x080095b2

08008c9c <_calloc_r>:
 8008c9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c9e:	fba1 2402 	umull	r2, r4, r1, r2
 8008ca2:	b94c      	cbnz	r4, 8008cb8 <_calloc_r+0x1c>
 8008ca4:	4611      	mov	r1, r2
 8008ca6:	9201      	str	r2, [sp, #4]
 8008ca8:	f7ff f994 	bl	8007fd4 <_malloc_r>
 8008cac:	9a01      	ldr	r2, [sp, #4]
 8008cae:	4605      	mov	r5, r0
 8008cb0:	b930      	cbnz	r0, 8008cc0 <_calloc_r+0x24>
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	b003      	add	sp, #12
 8008cb6:	bd30      	pop	{r4, r5, pc}
 8008cb8:	220c      	movs	r2, #12
 8008cba:	6002      	str	r2, [r0, #0]
 8008cbc:	2500      	movs	r5, #0
 8008cbe:	e7f8      	b.n	8008cb2 <_calloc_r+0x16>
 8008cc0:	4621      	mov	r1, r4
 8008cc2:	f7fe fa18 	bl	80070f6 <memset>
 8008cc6:	e7f4      	b.n	8008cb2 <_calloc_r+0x16>

08008cc8 <__ascii_mbtowc>:
 8008cc8:	b082      	sub	sp, #8
 8008cca:	b901      	cbnz	r1, 8008cce <__ascii_mbtowc+0x6>
 8008ccc:	a901      	add	r1, sp, #4
 8008cce:	b142      	cbz	r2, 8008ce2 <__ascii_mbtowc+0x1a>
 8008cd0:	b14b      	cbz	r3, 8008ce6 <__ascii_mbtowc+0x1e>
 8008cd2:	7813      	ldrb	r3, [r2, #0]
 8008cd4:	600b      	str	r3, [r1, #0]
 8008cd6:	7812      	ldrb	r2, [r2, #0]
 8008cd8:	1e10      	subs	r0, r2, #0
 8008cda:	bf18      	it	ne
 8008cdc:	2001      	movne	r0, #1
 8008cde:	b002      	add	sp, #8
 8008ce0:	4770      	bx	lr
 8008ce2:	4610      	mov	r0, r2
 8008ce4:	e7fb      	b.n	8008cde <__ascii_mbtowc+0x16>
 8008ce6:	f06f 0001 	mvn.w	r0, #1
 8008cea:	e7f8      	b.n	8008cde <__ascii_mbtowc+0x16>

08008cec <_realloc_r>:
 8008cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cf0:	4680      	mov	r8, r0
 8008cf2:	4614      	mov	r4, r2
 8008cf4:	460e      	mov	r6, r1
 8008cf6:	b921      	cbnz	r1, 8008d02 <_realloc_r+0x16>
 8008cf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cfc:	4611      	mov	r1, r2
 8008cfe:	f7ff b969 	b.w	8007fd4 <_malloc_r>
 8008d02:	b92a      	cbnz	r2, 8008d10 <_realloc_r+0x24>
 8008d04:	f7ff f8f2 	bl	8007eec <_free_r>
 8008d08:	4625      	mov	r5, r4
 8008d0a:	4628      	mov	r0, r5
 8008d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d10:	f000 f841 	bl	8008d96 <_malloc_usable_size_r>
 8008d14:	4284      	cmp	r4, r0
 8008d16:	4607      	mov	r7, r0
 8008d18:	d802      	bhi.n	8008d20 <_realloc_r+0x34>
 8008d1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008d1e:	d812      	bhi.n	8008d46 <_realloc_r+0x5a>
 8008d20:	4621      	mov	r1, r4
 8008d22:	4640      	mov	r0, r8
 8008d24:	f7ff f956 	bl	8007fd4 <_malloc_r>
 8008d28:	4605      	mov	r5, r0
 8008d2a:	2800      	cmp	r0, #0
 8008d2c:	d0ed      	beq.n	8008d0a <_realloc_r+0x1e>
 8008d2e:	42bc      	cmp	r4, r7
 8008d30:	4622      	mov	r2, r4
 8008d32:	4631      	mov	r1, r6
 8008d34:	bf28      	it	cs
 8008d36:	463a      	movcs	r2, r7
 8008d38:	f7ff ff84 	bl	8008c44 <memcpy>
 8008d3c:	4631      	mov	r1, r6
 8008d3e:	4640      	mov	r0, r8
 8008d40:	f7ff f8d4 	bl	8007eec <_free_r>
 8008d44:	e7e1      	b.n	8008d0a <_realloc_r+0x1e>
 8008d46:	4635      	mov	r5, r6
 8008d48:	e7df      	b.n	8008d0a <_realloc_r+0x1e>

08008d4a <__ascii_wctomb>:
 8008d4a:	b149      	cbz	r1, 8008d60 <__ascii_wctomb+0x16>
 8008d4c:	2aff      	cmp	r2, #255	; 0xff
 8008d4e:	bf85      	ittet	hi
 8008d50:	238a      	movhi	r3, #138	; 0x8a
 8008d52:	6003      	strhi	r3, [r0, #0]
 8008d54:	700a      	strbls	r2, [r1, #0]
 8008d56:	f04f 30ff 	movhi.w	r0, #4294967295
 8008d5a:	bf98      	it	ls
 8008d5c:	2001      	movls	r0, #1
 8008d5e:	4770      	bx	lr
 8008d60:	4608      	mov	r0, r1
 8008d62:	4770      	bx	lr

08008d64 <fiprintf>:
 8008d64:	b40e      	push	{r1, r2, r3}
 8008d66:	b503      	push	{r0, r1, lr}
 8008d68:	4601      	mov	r1, r0
 8008d6a:	ab03      	add	r3, sp, #12
 8008d6c:	4805      	ldr	r0, [pc, #20]	; (8008d84 <fiprintf+0x20>)
 8008d6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d72:	6800      	ldr	r0, [r0, #0]
 8008d74:	9301      	str	r3, [sp, #4]
 8008d76:	f000 f83f 	bl	8008df8 <_vfiprintf_r>
 8008d7a:	b002      	add	sp, #8
 8008d7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d80:	b003      	add	sp, #12
 8008d82:	4770      	bx	lr
 8008d84:	20000068 	.word	0x20000068

08008d88 <abort>:
 8008d88:	b508      	push	{r3, lr}
 8008d8a:	2006      	movs	r0, #6
 8008d8c:	f000 fa0c 	bl	80091a8 <raise>
 8008d90:	2001      	movs	r0, #1
 8008d92:	f7f9 fc75 	bl	8002680 <_exit>

08008d96 <_malloc_usable_size_r>:
 8008d96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d9a:	1f18      	subs	r0, r3, #4
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	bfbc      	itt	lt
 8008da0:	580b      	ldrlt	r3, [r1, r0]
 8008da2:	18c0      	addlt	r0, r0, r3
 8008da4:	4770      	bx	lr

08008da6 <__sfputc_r>:
 8008da6:	6893      	ldr	r3, [r2, #8]
 8008da8:	3b01      	subs	r3, #1
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	b410      	push	{r4}
 8008dae:	6093      	str	r3, [r2, #8]
 8008db0:	da08      	bge.n	8008dc4 <__sfputc_r+0x1e>
 8008db2:	6994      	ldr	r4, [r2, #24]
 8008db4:	42a3      	cmp	r3, r4
 8008db6:	db01      	blt.n	8008dbc <__sfputc_r+0x16>
 8008db8:	290a      	cmp	r1, #10
 8008dba:	d103      	bne.n	8008dc4 <__sfputc_r+0x1e>
 8008dbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dc0:	f000 b934 	b.w	800902c <__swbuf_r>
 8008dc4:	6813      	ldr	r3, [r2, #0]
 8008dc6:	1c58      	adds	r0, r3, #1
 8008dc8:	6010      	str	r0, [r2, #0]
 8008dca:	7019      	strb	r1, [r3, #0]
 8008dcc:	4608      	mov	r0, r1
 8008dce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <__sfputs_r>:
 8008dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dd6:	4606      	mov	r6, r0
 8008dd8:	460f      	mov	r7, r1
 8008dda:	4614      	mov	r4, r2
 8008ddc:	18d5      	adds	r5, r2, r3
 8008dde:	42ac      	cmp	r4, r5
 8008de0:	d101      	bne.n	8008de6 <__sfputs_r+0x12>
 8008de2:	2000      	movs	r0, #0
 8008de4:	e007      	b.n	8008df6 <__sfputs_r+0x22>
 8008de6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dea:	463a      	mov	r2, r7
 8008dec:	4630      	mov	r0, r6
 8008dee:	f7ff ffda 	bl	8008da6 <__sfputc_r>
 8008df2:	1c43      	adds	r3, r0, #1
 8008df4:	d1f3      	bne.n	8008dde <__sfputs_r+0xa>
 8008df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008df8 <_vfiprintf_r>:
 8008df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dfc:	460d      	mov	r5, r1
 8008dfe:	b09d      	sub	sp, #116	; 0x74
 8008e00:	4614      	mov	r4, r2
 8008e02:	4698      	mov	r8, r3
 8008e04:	4606      	mov	r6, r0
 8008e06:	b118      	cbz	r0, 8008e10 <_vfiprintf_r+0x18>
 8008e08:	6a03      	ldr	r3, [r0, #32]
 8008e0a:	b90b      	cbnz	r3, 8008e10 <_vfiprintf_r+0x18>
 8008e0c:	f7fe f8da 	bl	8006fc4 <__sinit>
 8008e10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e12:	07d9      	lsls	r1, r3, #31
 8008e14:	d405      	bmi.n	8008e22 <_vfiprintf_r+0x2a>
 8008e16:	89ab      	ldrh	r3, [r5, #12]
 8008e18:	059a      	lsls	r2, r3, #22
 8008e1a:	d402      	bmi.n	8008e22 <_vfiprintf_r+0x2a>
 8008e1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e1e:	f7fe f9e8 	bl	80071f2 <__retarget_lock_acquire_recursive>
 8008e22:	89ab      	ldrh	r3, [r5, #12]
 8008e24:	071b      	lsls	r3, r3, #28
 8008e26:	d501      	bpl.n	8008e2c <_vfiprintf_r+0x34>
 8008e28:	692b      	ldr	r3, [r5, #16]
 8008e2a:	b99b      	cbnz	r3, 8008e54 <_vfiprintf_r+0x5c>
 8008e2c:	4629      	mov	r1, r5
 8008e2e:	4630      	mov	r0, r6
 8008e30:	f000 f93a 	bl	80090a8 <__swsetup_r>
 8008e34:	b170      	cbz	r0, 8008e54 <_vfiprintf_r+0x5c>
 8008e36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e38:	07dc      	lsls	r4, r3, #31
 8008e3a:	d504      	bpl.n	8008e46 <_vfiprintf_r+0x4e>
 8008e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e40:	b01d      	add	sp, #116	; 0x74
 8008e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e46:	89ab      	ldrh	r3, [r5, #12]
 8008e48:	0598      	lsls	r0, r3, #22
 8008e4a:	d4f7      	bmi.n	8008e3c <_vfiprintf_r+0x44>
 8008e4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e4e:	f7fe f9d1 	bl	80071f4 <__retarget_lock_release_recursive>
 8008e52:	e7f3      	b.n	8008e3c <_vfiprintf_r+0x44>
 8008e54:	2300      	movs	r3, #0
 8008e56:	9309      	str	r3, [sp, #36]	; 0x24
 8008e58:	2320      	movs	r3, #32
 8008e5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e62:	2330      	movs	r3, #48	; 0x30
 8008e64:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009018 <_vfiprintf_r+0x220>
 8008e68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e6c:	f04f 0901 	mov.w	r9, #1
 8008e70:	4623      	mov	r3, r4
 8008e72:	469a      	mov	sl, r3
 8008e74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e78:	b10a      	cbz	r2, 8008e7e <_vfiprintf_r+0x86>
 8008e7a:	2a25      	cmp	r2, #37	; 0x25
 8008e7c:	d1f9      	bne.n	8008e72 <_vfiprintf_r+0x7a>
 8008e7e:	ebba 0b04 	subs.w	fp, sl, r4
 8008e82:	d00b      	beq.n	8008e9c <_vfiprintf_r+0xa4>
 8008e84:	465b      	mov	r3, fp
 8008e86:	4622      	mov	r2, r4
 8008e88:	4629      	mov	r1, r5
 8008e8a:	4630      	mov	r0, r6
 8008e8c:	f7ff ffa2 	bl	8008dd4 <__sfputs_r>
 8008e90:	3001      	adds	r0, #1
 8008e92:	f000 80a9 	beq.w	8008fe8 <_vfiprintf_r+0x1f0>
 8008e96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e98:	445a      	add	r2, fp
 8008e9a:	9209      	str	r2, [sp, #36]	; 0x24
 8008e9c:	f89a 3000 	ldrb.w	r3, [sl]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	f000 80a1 	beq.w	8008fe8 <_vfiprintf_r+0x1f0>
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8008eac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008eb0:	f10a 0a01 	add.w	sl, sl, #1
 8008eb4:	9304      	str	r3, [sp, #16]
 8008eb6:	9307      	str	r3, [sp, #28]
 8008eb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ebc:	931a      	str	r3, [sp, #104]	; 0x68
 8008ebe:	4654      	mov	r4, sl
 8008ec0:	2205      	movs	r2, #5
 8008ec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ec6:	4854      	ldr	r0, [pc, #336]	; (8009018 <_vfiprintf_r+0x220>)
 8008ec8:	f7f7 f98a 	bl	80001e0 <memchr>
 8008ecc:	9a04      	ldr	r2, [sp, #16]
 8008ece:	b9d8      	cbnz	r0, 8008f08 <_vfiprintf_r+0x110>
 8008ed0:	06d1      	lsls	r1, r2, #27
 8008ed2:	bf44      	itt	mi
 8008ed4:	2320      	movmi	r3, #32
 8008ed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008eda:	0713      	lsls	r3, r2, #28
 8008edc:	bf44      	itt	mi
 8008ede:	232b      	movmi	r3, #43	; 0x2b
 8008ee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ee4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ee8:	2b2a      	cmp	r3, #42	; 0x2a
 8008eea:	d015      	beq.n	8008f18 <_vfiprintf_r+0x120>
 8008eec:	9a07      	ldr	r2, [sp, #28]
 8008eee:	4654      	mov	r4, sl
 8008ef0:	2000      	movs	r0, #0
 8008ef2:	f04f 0c0a 	mov.w	ip, #10
 8008ef6:	4621      	mov	r1, r4
 8008ef8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008efc:	3b30      	subs	r3, #48	; 0x30
 8008efe:	2b09      	cmp	r3, #9
 8008f00:	d94d      	bls.n	8008f9e <_vfiprintf_r+0x1a6>
 8008f02:	b1b0      	cbz	r0, 8008f32 <_vfiprintf_r+0x13a>
 8008f04:	9207      	str	r2, [sp, #28]
 8008f06:	e014      	b.n	8008f32 <_vfiprintf_r+0x13a>
 8008f08:	eba0 0308 	sub.w	r3, r0, r8
 8008f0c:	fa09 f303 	lsl.w	r3, r9, r3
 8008f10:	4313      	orrs	r3, r2
 8008f12:	9304      	str	r3, [sp, #16]
 8008f14:	46a2      	mov	sl, r4
 8008f16:	e7d2      	b.n	8008ebe <_vfiprintf_r+0xc6>
 8008f18:	9b03      	ldr	r3, [sp, #12]
 8008f1a:	1d19      	adds	r1, r3, #4
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	9103      	str	r1, [sp, #12]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	bfbb      	ittet	lt
 8008f24:	425b      	neglt	r3, r3
 8008f26:	f042 0202 	orrlt.w	r2, r2, #2
 8008f2a:	9307      	strge	r3, [sp, #28]
 8008f2c:	9307      	strlt	r3, [sp, #28]
 8008f2e:	bfb8      	it	lt
 8008f30:	9204      	strlt	r2, [sp, #16]
 8008f32:	7823      	ldrb	r3, [r4, #0]
 8008f34:	2b2e      	cmp	r3, #46	; 0x2e
 8008f36:	d10c      	bne.n	8008f52 <_vfiprintf_r+0x15a>
 8008f38:	7863      	ldrb	r3, [r4, #1]
 8008f3a:	2b2a      	cmp	r3, #42	; 0x2a
 8008f3c:	d134      	bne.n	8008fa8 <_vfiprintf_r+0x1b0>
 8008f3e:	9b03      	ldr	r3, [sp, #12]
 8008f40:	1d1a      	adds	r2, r3, #4
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	9203      	str	r2, [sp, #12]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	bfb8      	it	lt
 8008f4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f4e:	3402      	adds	r4, #2
 8008f50:	9305      	str	r3, [sp, #20]
 8008f52:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009028 <_vfiprintf_r+0x230>
 8008f56:	7821      	ldrb	r1, [r4, #0]
 8008f58:	2203      	movs	r2, #3
 8008f5a:	4650      	mov	r0, sl
 8008f5c:	f7f7 f940 	bl	80001e0 <memchr>
 8008f60:	b138      	cbz	r0, 8008f72 <_vfiprintf_r+0x17a>
 8008f62:	9b04      	ldr	r3, [sp, #16]
 8008f64:	eba0 000a 	sub.w	r0, r0, sl
 8008f68:	2240      	movs	r2, #64	; 0x40
 8008f6a:	4082      	lsls	r2, r0
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	3401      	adds	r4, #1
 8008f70:	9304      	str	r3, [sp, #16]
 8008f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f76:	4829      	ldr	r0, [pc, #164]	; (800901c <_vfiprintf_r+0x224>)
 8008f78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f7c:	2206      	movs	r2, #6
 8008f7e:	f7f7 f92f 	bl	80001e0 <memchr>
 8008f82:	2800      	cmp	r0, #0
 8008f84:	d03f      	beq.n	8009006 <_vfiprintf_r+0x20e>
 8008f86:	4b26      	ldr	r3, [pc, #152]	; (8009020 <_vfiprintf_r+0x228>)
 8008f88:	bb1b      	cbnz	r3, 8008fd2 <_vfiprintf_r+0x1da>
 8008f8a:	9b03      	ldr	r3, [sp, #12]
 8008f8c:	3307      	adds	r3, #7
 8008f8e:	f023 0307 	bic.w	r3, r3, #7
 8008f92:	3308      	adds	r3, #8
 8008f94:	9303      	str	r3, [sp, #12]
 8008f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f98:	443b      	add	r3, r7
 8008f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8008f9c:	e768      	b.n	8008e70 <_vfiprintf_r+0x78>
 8008f9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fa2:	460c      	mov	r4, r1
 8008fa4:	2001      	movs	r0, #1
 8008fa6:	e7a6      	b.n	8008ef6 <_vfiprintf_r+0xfe>
 8008fa8:	2300      	movs	r3, #0
 8008faa:	3401      	adds	r4, #1
 8008fac:	9305      	str	r3, [sp, #20]
 8008fae:	4619      	mov	r1, r3
 8008fb0:	f04f 0c0a 	mov.w	ip, #10
 8008fb4:	4620      	mov	r0, r4
 8008fb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fba:	3a30      	subs	r2, #48	; 0x30
 8008fbc:	2a09      	cmp	r2, #9
 8008fbe:	d903      	bls.n	8008fc8 <_vfiprintf_r+0x1d0>
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d0c6      	beq.n	8008f52 <_vfiprintf_r+0x15a>
 8008fc4:	9105      	str	r1, [sp, #20]
 8008fc6:	e7c4      	b.n	8008f52 <_vfiprintf_r+0x15a>
 8008fc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fcc:	4604      	mov	r4, r0
 8008fce:	2301      	movs	r3, #1
 8008fd0:	e7f0      	b.n	8008fb4 <_vfiprintf_r+0x1bc>
 8008fd2:	ab03      	add	r3, sp, #12
 8008fd4:	9300      	str	r3, [sp, #0]
 8008fd6:	462a      	mov	r2, r5
 8008fd8:	4b12      	ldr	r3, [pc, #72]	; (8009024 <_vfiprintf_r+0x22c>)
 8008fda:	a904      	add	r1, sp, #16
 8008fdc:	4630      	mov	r0, r6
 8008fde:	f7fd fb9f 	bl	8006720 <_printf_float>
 8008fe2:	4607      	mov	r7, r0
 8008fe4:	1c78      	adds	r0, r7, #1
 8008fe6:	d1d6      	bne.n	8008f96 <_vfiprintf_r+0x19e>
 8008fe8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fea:	07d9      	lsls	r1, r3, #31
 8008fec:	d405      	bmi.n	8008ffa <_vfiprintf_r+0x202>
 8008fee:	89ab      	ldrh	r3, [r5, #12]
 8008ff0:	059a      	lsls	r2, r3, #22
 8008ff2:	d402      	bmi.n	8008ffa <_vfiprintf_r+0x202>
 8008ff4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ff6:	f7fe f8fd 	bl	80071f4 <__retarget_lock_release_recursive>
 8008ffa:	89ab      	ldrh	r3, [r5, #12]
 8008ffc:	065b      	lsls	r3, r3, #25
 8008ffe:	f53f af1d 	bmi.w	8008e3c <_vfiprintf_r+0x44>
 8009002:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009004:	e71c      	b.n	8008e40 <_vfiprintf_r+0x48>
 8009006:	ab03      	add	r3, sp, #12
 8009008:	9300      	str	r3, [sp, #0]
 800900a:	462a      	mov	r2, r5
 800900c:	4b05      	ldr	r3, [pc, #20]	; (8009024 <_vfiprintf_r+0x22c>)
 800900e:	a904      	add	r1, sp, #16
 8009010:	4630      	mov	r0, r6
 8009012:	f7fd fe29 	bl	8006c68 <_printf_i>
 8009016:	e7e4      	b.n	8008fe2 <_vfiprintf_r+0x1ea>
 8009018:	0800955c 	.word	0x0800955c
 800901c:	08009566 	.word	0x08009566
 8009020:	08006721 	.word	0x08006721
 8009024:	08008dd5 	.word	0x08008dd5
 8009028:	08009562 	.word	0x08009562

0800902c <__swbuf_r>:
 800902c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800902e:	460e      	mov	r6, r1
 8009030:	4614      	mov	r4, r2
 8009032:	4605      	mov	r5, r0
 8009034:	b118      	cbz	r0, 800903e <__swbuf_r+0x12>
 8009036:	6a03      	ldr	r3, [r0, #32]
 8009038:	b90b      	cbnz	r3, 800903e <__swbuf_r+0x12>
 800903a:	f7fd ffc3 	bl	8006fc4 <__sinit>
 800903e:	69a3      	ldr	r3, [r4, #24]
 8009040:	60a3      	str	r3, [r4, #8]
 8009042:	89a3      	ldrh	r3, [r4, #12]
 8009044:	071a      	lsls	r2, r3, #28
 8009046:	d525      	bpl.n	8009094 <__swbuf_r+0x68>
 8009048:	6923      	ldr	r3, [r4, #16]
 800904a:	b31b      	cbz	r3, 8009094 <__swbuf_r+0x68>
 800904c:	6823      	ldr	r3, [r4, #0]
 800904e:	6922      	ldr	r2, [r4, #16]
 8009050:	1a98      	subs	r0, r3, r2
 8009052:	6963      	ldr	r3, [r4, #20]
 8009054:	b2f6      	uxtb	r6, r6
 8009056:	4283      	cmp	r3, r0
 8009058:	4637      	mov	r7, r6
 800905a:	dc04      	bgt.n	8009066 <__swbuf_r+0x3a>
 800905c:	4621      	mov	r1, r4
 800905e:	4628      	mov	r0, r5
 8009060:	f7ff fd9e 	bl	8008ba0 <_fflush_r>
 8009064:	b9e0      	cbnz	r0, 80090a0 <__swbuf_r+0x74>
 8009066:	68a3      	ldr	r3, [r4, #8]
 8009068:	3b01      	subs	r3, #1
 800906a:	60a3      	str	r3, [r4, #8]
 800906c:	6823      	ldr	r3, [r4, #0]
 800906e:	1c5a      	adds	r2, r3, #1
 8009070:	6022      	str	r2, [r4, #0]
 8009072:	701e      	strb	r6, [r3, #0]
 8009074:	6962      	ldr	r2, [r4, #20]
 8009076:	1c43      	adds	r3, r0, #1
 8009078:	429a      	cmp	r2, r3
 800907a:	d004      	beq.n	8009086 <__swbuf_r+0x5a>
 800907c:	89a3      	ldrh	r3, [r4, #12]
 800907e:	07db      	lsls	r3, r3, #31
 8009080:	d506      	bpl.n	8009090 <__swbuf_r+0x64>
 8009082:	2e0a      	cmp	r6, #10
 8009084:	d104      	bne.n	8009090 <__swbuf_r+0x64>
 8009086:	4621      	mov	r1, r4
 8009088:	4628      	mov	r0, r5
 800908a:	f7ff fd89 	bl	8008ba0 <_fflush_r>
 800908e:	b938      	cbnz	r0, 80090a0 <__swbuf_r+0x74>
 8009090:	4638      	mov	r0, r7
 8009092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009094:	4621      	mov	r1, r4
 8009096:	4628      	mov	r0, r5
 8009098:	f000 f806 	bl	80090a8 <__swsetup_r>
 800909c:	2800      	cmp	r0, #0
 800909e:	d0d5      	beq.n	800904c <__swbuf_r+0x20>
 80090a0:	f04f 37ff 	mov.w	r7, #4294967295
 80090a4:	e7f4      	b.n	8009090 <__swbuf_r+0x64>
	...

080090a8 <__swsetup_r>:
 80090a8:	b538      	push	{r3, r4, r5, lr}
 80090aa:	4b2a      	ldr	r3, [pc, #168]	; (8009154 <__swsetup_r+0xac>)
 80090ac:	4605      	mov	r5, r0
 80090ae:	6818      	ldr	r0, [r3, #0]
 80090b0:	460c      	mov	r4, r1
 80090b2:	b118      	cbz	r0, 80090bc <__swsetup_r+0x14>
 80090b4:	6a03      	ldr	r3, [r0, #32]
 80090b6:	b90b      	cbnz	r3, 80090bc <__swsetup_r+0x14>
 80090b8:	f7fd ff84 	bl	8006fc4 <__sinit>
 80090bc:	89a3      	ldrh	r3, [r4, #12]
 80090be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090c2:	0718      	lsls	r0, r3, #28
 80090c4:	d422      	bmi.n	800910c <__swsetup_r+0x64>
 80090c6:	06d9      	lsls	r1, r3, #27
 80090c8:	d407      	bmi.n	80090da <__swsetup_r+0x32>
 80090ca:	2309      	movs	r3, #9
 80090cc:	602b      	str	r3, [r5, #0]
 80090ce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80090d2:	81a3      	strh	r3, [r4, #12]
 80090d4:	f04f 30ff 	mov.w	r0, #4294967295
 80090d8:	e034      	b.n	8009144 <__swsetup_r+0x9c>
 80090da:	0758      	lsls	r0, r3, #29
 80090dc:	d512      	bpl.n	8009104 <__swsetup_r+0x5c>
 80090de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090e0:	b141      	cbz	r1, 80090f4 <__swsetup_r+0x4c>
 80090e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090e6:	4299      	cmp	r1, r3
 80090e8:	d002      	beq.n	80090f0 <__swsetup_r+0x48>
 80090ea:	4628      	mov	r0, r5
 80090ec:	f7fe fefe 	bl	8007eec <_free_r>
 80090f0:	2300      	movs	r3, #0
 80090f2:	6363      	str	r3, [r4, #52]	; 0x34
 80090f4:	89a3      	ldrh	r3, [r4, #12]
 80090f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80090fa:	81a3      	strh	r3, [r4, #12]
 80090fc:	2300      	movs	r3, #0
 80090fe:	6063      	str	r3, [r4, #4]
 8009100:	6923      	ldr	r3, [r4, #16]
 8009102:	6023      	str	r3, [r4, #0]
 8009104:	89a3      	ldrh	r3, [r4, #12]
 8009106:	f043 0308 	orr.w	r3, r3, #8
 800910a:	81a3      	strh	r3, [r4, #12]
 800910c:	6923      	ldr	r3, [r4, #16]
 800910e:	b94b      	cbnz	r3, 8009124 <__swsetup_r+0x7c>
 8009110:	89a3      	ldrh	r3, [r4, #12]
 8009112:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009116:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800911a:	d003      	beq.n	8009124 <__swsetup_r+0x7c>
 800911c:	4621      	mov	r1, r4
 800911e:	4628      	mov	r0, r5
 8009120:	f000 f884 	bl	800922c <__smakebuf_r>
 8009124:	89a0      	ldrh	r0, [r4, #12]
 8009126:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800912a:	f010 0301 	ands.w	r3, r0, #1
 800912e:	d00a      	beq.n	8009146 <__swsetup_r+0x9e>
 8009130:	2300      	movs	r3, #0
 8009132:	60a3      	str	r3, [r4, #8]
 8009134:	6963      	ldr	r3, [r4, #20]
 8009136:	425b      	negs	r3, r3
 8009138:	61a3      	str	r3, [r4, #24]
 800913a:	6923      	ldr	r3, [r4, #16]
 800913c:	b943      	cbnz	r3, 8009150 <__swsetup_r+0xa8>
 800913e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009142:	d1c4      	bne.n	80090ce <__swsetup_r+0x26>
 8009144:	bd38      	pop	{r3, r4, r5, pc}
 8009146:	0781      	lsls	r1, r0, #30
 8009148:	bf58      	it	pl
 800914a:	6963      	ldrpl	r3, [r4, #20]
 800914c:	60a3      	str	r3, [r4, #8]
 800914e:	e7f4      	b.n	800913a <__swsetup_r+0x92>
 8009150:	2000      	movs	r0, #0
 8009152:	e7f7      	b.n	8009144 <__swsetup_r+0x9c>
 8009154:	20000068 	.word	0x20000068

08009158 <_raise_r>:
 8009158:	291f      	cmp	r1, #31
 800915a:	b538      	push	{r3, r4, r5, lr}
 800915c:	4604      	mov	r4, r0
 800915e:	460d      	mov	r5, r1
 8009160:	d904      	bls.n	800916c <_raise_r+0x14>
 8009162:	2316      	movs	r3, #22
 8009164:	6003      	str	r3, [r0, #0]
 8009166:	f04f 30ff 	mov.w	r0, #4294967295
 800916a:	bd38      	pop	{r3, r4, r5, pc}
 800916c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800916e:	b112      	cbz	r2, 8009176 <_raise_r+0x1e>
 8009170:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009174:	b94b      	cbnz	r3, 800918a <_raise_r+0x32>
 8009176:	4620      	mov	r0, r4
 8009178:	f000 f830 	bl	80091dc <_getpid_r>
 800917c:	462a      	mov	r2, r5
 800917e:	4601      	mov	r1, r0
 8009180:	4620      	mov	r0, r4
 8009182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009186:	f000 b817 	b.w	80091b8 <_kill_r>
 800918a:	2b01      	cmp	r3, #1
 800918c:	d00a      	beq.n	80091a4 <_raise_r+0x4c>
 800918e:	1c59      	adds	r1, r3, #1
 8009190:	d103      	bne.n	800919a <_raise_r+0x42>
 8009192:	2316      	movs	r3, #22
 8009194:	6003      	str	r3, [r0, #0]
 8009196:	2001      	movs	r0, #1
 8009198:	e7e7      	b.n	800916a <_raise_r+0x12>
 800919a:	2400      	movs	r4, #0
 800919c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80091a0:	4628      	mov	r0, r5
 80091a2:	4798      	blx	r3
 80091a4:	2000      	movs	r0, #0
 80091a6:	e7e0      	b.n	800916a <_raise_r+0x12>

080091a8 <raise>:
 80091a8:	4b02      	ldr	r3, [pc, #8]	; (80091b4 <raise+0xc>)
 80091aa:	4601      	mov	r1, r0
 80091ac:	6818      	ldr	r0, [r3, #0]
 80091ae:	f7ff bfd3 	b.w	8009158 <_raise_r>
 80091b2:	bf00      	nop
 80091b4:	20000068 	.word	0x20000068

080091b8 <_kill_r>:
 80091b8:	b538      	push	{r3, r4, r5, lr}
 80091ba:	4d07      	ldr	r5, [pc, #28]	; (80091d8 <_kill_r+0x20>)
 80091bc:	2300      	movs	r3, #0
 80091be:	4604      	mov	r4, r0
 80091c0:	4608      	mov	r0, r1
 80091c2:	4611      	mov	r1, r2
 80091c4:	602b      	str	r3, [r5, #0]
 80091c6:	f7f9 fa4b 	bl	8002660 <_kill>
 80091ca:	1c43      	adds	r3, r0, #1
 80091cc:	d102      	bne.n	80091d4 <_kill_r+0x1c>
 80091ce:	682b      	ldr	r3, [r5, #0]
 80091d0:	b103      	cbz	r3, 80091d4 <_kill_r+0x1c>
 80091d2:	6023      	str	r3, [r4, #0]
 80091d4:	bd38      	pop	{r3, r4, r5, pc}
 80091d6:	bf00      	nop
 80091d8:	200005e8 	.word	0x200005e8

080091dc <_getpid_r>:
 80091dc:	f7f9 ba38 	b.w	8002650 <_getpid>

080091e0 <__swhatbuf_r>:
 80091e0:	b570      	push	{r4, r5, r6, lr}
 80091e2:	460c      	mov	r4, r1
 80091e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091e8:	2900      	cmp	r1, #0
 80091ea:	b096      	sub	sp, #88	; 0x58
 80091ec:	4615      	mov	r5, r2
 80091ee:	461e      	mov	r6, r3
 80091f0:	da0d      	bge.n	800920e <__swhatbuf_r+0x2e>
 80091f2:	89a3      	ldrh	r3, [r4, #12]
 80091f4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80091f8:	f04f 0100 	mov.w	r1, #0
 80091fc:	bf0c      	ite	eq
 80091fe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009202:	2340      	movne	r3, #64	; 0x40
 8009204:	2000      	movs	r0, #0
 8009206:	6031      	str	r1, [r6, #0]
 8009208:	602b      	str	r3, [r5, #0]
 800920a:	b016      	add	sp, #88	; 0x58
 800920c:	bd70      	pop	{r4, r5, r6, pc}
 800920e:	466a      	mov	r2, sp
 8009210:	f000 f848 	bl	80092a4 <_fstat_r>
 8009214:	2800      	cmp	r0, #0
 8009216:	dbec      	blt.n	80091f2 <__swhatbuf_r+0x12>
 8009218:	9901      	ldr	r1, [sp, #4]
 800921a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800921e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009222:	4259      	negs	r1, r3
 8009224:	4159      	adcs	r1, r3
 8009226:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800922a:	e7eb      	b.n	8009204 <__swhatbuf_r+0x24>

0800922c <__smakebuf_r>:
 800922c:	898b      	ldrh	r3, [r1, #12]
 800922e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009230:	079d      	lsls	r5, r3, #30
 8009232:	4606      	mov	r6, r0
 8009234:	460c      	mov	r4, r1
 8009236:	d507      	bpl.n	8009248 <__smakebuf_r+0x1c>
 8009238:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800923c:	6023      	str	r3, [r4, #0]
 800923e:	6123      	str	r3, [r4, #16]
 8009240:	2301      	movs	r3, #1
 8009242:	6163      	str	r3, [r4, #20]
 8009244:	b002      	add	sp, #8
 8009246:	bd70      	pop	{r4, r5, r6, pc}
 8009248:	ab01      	add	r3, sp, #4
 800924a:	466a      	mov	r2, sp
 800924c:	f7ff ffc8 	bl	80091e0 <__swhatbuf_r>
 8009250:	9900      	ldr	r1, [sp, #0]
 8009252:	4605      	mov	r5, r0
 8009254:	4630      	mov	r0, r6
 8009256:	f7fe febd 	bl	8007fd4 <_malloc_r>
 800925a:	b948      	cbnz	r0, 8009270 <__smakebuf_r+0x44>
 800925c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009260:	059a      	lsls	r2, r3, #22
 8009262:	d4ef      	bmi.n	8009244 <__smakebuf_r+0x18>
 8009264:	f023 0303 	bic.w	r3, r3, #3
 8009268:	f043 0302 	orr.w	r3, r3, #2
 800926c:	81a3      	strh	r3, [r4, #12]
 800926e:	e7e3      	b.n	8009238 <__smakebuf_r+0xc>
 8009270:	89a3      	ldrh	r3, [r4, #12]
 8009272:	6020      	str	r0, [r4, #0]
 8009274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009278:	81a3      	strh	r3, [r4, #12]
 800927a:	9b00      	ldr	r3, [sp, #0]
 800927c:	6163      	str	r3, [r4, #20]
 800927e:	9b01      	ldr	r3, [sp, #4]
 8009280:	6120      	str	r0, [r4, #16]
 8009282:	b15b      	cbz	r3, 800929c <__smakebuf_r+0x70>
 8009284:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009288:	4630      	mov	r0, r6
 800928a:	f000 f81d 	bl	80092c8 <_isatty_r>
 800928e:	b128      	cbz	r0, 800929c <__smakebuf_r+0x70>
 8009290:	89a3      	ldrh	r3, [r4, #12]
 8009292:	f023 0303 	bic.w	r3, r3, #3
 8009296:	f043 0301 	orr.w	r3, r3, #1
 800929a:	81a3      	strh	r3, [r4, #12]
 800929c:	89a3      	ldrh	r3, [r4, #12]
 800929e:	431d      	orrs	r5, r3
 80092a0:	81a5      	strh	r5, [r4, #12]
 80092a2:	e7cf      	b.n	8009244 <__smakebuf_r+0x18>

080092a4 <_fstat_r>:
 80092a4:	b538      	push	{r3, r4, r5, lr}
 80092a6:	4d07      	ldr	r5, [pc, #28]	; (80092c4 <_fstat_r+0x20>)
 80092a8:	2300      	movs	r3, #0
 80092aa:	4604      	mov	r4, r0
 80092ac:	4608      	mov	r0, r1
 80092ae:	4611      	mov	r1, r2
 80092b0:	602b      	str	r3, [r5, #0]
 80092b2:	f7f9 fa34 	bl	800271e <_fstat>
 80092b6:	1c43      	adds	r3, r0, #1
 80092b8:	d102      	bne.n	80092c0 <_fstat_r+0x1c>
 80092ba:	682b      	ldr	r3, [r5, #0]
 80092bc:	b103      	cbz	r3, 80092c0 <_fstat_r+0x1c>
 80092be:	6023      	str	r3, [r4, #0]
 80092c0:	bd38      	pop	{r3, r4, r5, pc}
 80092c2:	bf00      	nop
 80092c4:	200005e8 	.word	0x200005e8

080092c8 <_isatty_r>:
 80092c8:	b538      	push	{r3, r4, r5, lr}
 80092ca:	4d06      	ldr	r5, [pc, #24]	; (80092e4 <_isatty_r+0x1c>)
 80092cc:	2300      	movs	r3, #0
 80092ce:	4604      	mov	r4, r0
 80092d0:	4608      	mov	r0, r1
 80092d2:	602b      	str	r3, [r5, #0]
 80092d4:	f7f9 fa33 	bl	800273e <_isatty>
 80092d8:	1c43      	adds	r3, r0, #1
 80092da:	d102      	bne.n	80092e2 <_isatty_r+0x1a>
 80092dc:	682b      	ldr	r3, [r5, #0]
 80092de:	b103      	cbz	r3, 80092e2 <_isatty_r+0x1a>
 80092e0:	6023      	str	r3, [r4, #0]
 80092e2:	bd38      	pop	{r3, r4, r5, pc}
 80092e4:	200005e8 	.word	0x200005e8

080092e8 <_init>:
 80092e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ea:	bf00      	nop
 80092ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ee:	bc08      	pop	{r3}
 80092f0:	469e      	mov	lr, r3
 80092f2:	4770      	bx	lr

080092f4 <_fini>:
 80092f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092f6:	bf00      	nop
 80092f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092fa:	bc08      	pop	{r3}
 80092fc:	469e      	mov	lr, r3
 80092fe:	4770      	bx	lr
