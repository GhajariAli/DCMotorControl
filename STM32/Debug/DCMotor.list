
DCMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009828  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  080099c8  080099c8  000199c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d94  08009d94  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08009d94  08009d94  00019d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d9c  08009d9c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d9c  08009d9c  00019d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009da0  08009da0  00019da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08009da4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000434  200001d8  08009f7c  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000060c  08009f7c  0002060c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000feeb  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002659  00000000  00000000  00030136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee8  00000000  00000000  00032790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b98  00000000  00000000  00033678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018b57  00000000  00000000  00034210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000123aa  00000000  00000000  0004cd67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009bea7  00000000  00000000  0005f111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f84  00000000  00000000  000fafb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000fff3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080099b0 	.word	0x080099b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	080099b0 	.word	0x080099b0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <updatePID>:
#include "PID.h"

void updatePID(PID_Controller* pid, double current) {
 8000ef4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ef8:	b08a      	sub	sp, #40	; 0x28
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	60f8      	str	r0, [r7, #12]
 8000efe:	ed87 0b00 	vstr	d0, [r7]
	double error=0;
 8000f02:	f04f 0200 	mov.w	r2, #0
 8000f06:	f04f 0300 	mov.w	r3, #0
 8000f0a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	switch (pid->ControlMode){
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d055      	beq.n	8000fc2 <updatePID+0xce>
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	dc54      	bgt.n	8000fc4 <updatePID+0xd0>
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d002      	beq.n	8000f24 <updatePID+0x30>
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d00c      	beq.n	8000f3c <updatePID+0x48>
 8000f22:	e04f      	b.n	8000fc4 <updatePID+0xd0>
	case Velocity:
		error = pid->target - current;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8000f2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f2e:	f7ff f9b3 	bl	8000298 <__aeabi_dsub>
 8000f32:	4602      	mov	r2, r0
 8000f34:	460b      	mov	r3, r1
 8000f36:	e9c7 2308 	strd	r2, r3, [r7, #32]
		break;
 8000f3a:	e043      	b.n	8000fc4 <updatePID+0xd0>
	case Position:
		error = pid->target - current;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8000f42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f46:	f7ff f9a7 	bl	8000298 <__aeabi_dsub>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	e9c7 2308 	strd	r2, r3, [r7, #32]
		if (error >0){
 8000f52:	f04f 0200 	mov.w	r2, #0
 8000f56:	f04f 0300 	mov.w	r3, #0
 8000f5a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000f5e:	f7ff fde3 	bl	8000b28 <__aeabi_dcmpgt>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d00b      	beq.n	8000f80 <updatePID+0x8c>
			error=(ENCODER_RESOLUTION/2)-error;
 8000f68:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000f6c:	f04f 0000 	mov.w	r0, #0
 8000f70:	4984      	ldr	r1, [pc, #528]	; (8001184 <updatePID+0x290>)
 8000f72:	f7ff f991 	bl	8000298 <__aeabi_dsub>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	e9c7 2308 	strd	r2, r3, [r7, #32]
			error=-((ENCODER_RESOLUTION/2)+error);
		}
		else{
			error= 0;
		}
		break;
 8000f7e:	e021      	b.n	8000fc4 <updatePID+0xd0>
		else if (error<0){
 8000f80:	f04f 0200 	mov.w	r2, #0
 8000f84:	f04f 0300 	mov.w	r3, #0
 8000f88:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000f8c:	f7ff fdae 	bl	8000aec <__aeabi_dcmplt>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d00e      	beq.n	8000fb4 <updatePID+0xc0>
			error=-((ENCODER_RESOLUTION/2)+error);
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	4b7a      	ldr	r3, [pc, #488]	; (8001184 <updatePID+0x290>)
 8000f9c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000fa0:	f7ff f97c 	bl	800029c <__adddf3>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4611      	mov	r1, r2
 8000faa:	6239      	str	r1, [r7, #32]
 8000fac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8000fb2:	e007      	b.n	8000fc4 <updatePID+0xd0>
			error= 0;
 8000fb4:	f04f 0200 	mov.w	r2, #0
 8000fb8:	f04f 0300 	mov.w	r3, #0
 8000fbc:	e9c7 2308 	strd	r2, r3, [r7, #32]
		break;
 8000fc0:	e000      	b.n	8000fc4 <updatePID+0xd0>
	case Torque:

		break;
 8000fc2:	bf00      	nop

	}
	pid->CurrentError=error;
 8000fc4:	68f9      	ldr	r1, [r7, #12]
 8000fc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000fca:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	double P,D;
	if (pid->ControlMode!=Position){
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	f000 8091 	beq.w	80010fa <updatePID+0x206>
		// Proportional
		P = pid->Kp * error;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000fde:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000fe2:	f7ff fb11 	bl	8000608 <__aeabi_dmul>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	e9c7 2306 	strd	r2, r3, [r7, #24]
		// Integral
		pid->integral += pid->Ki * error * (pid->dt/1000);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000ffa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000ffe:	f7ff fb03 	bl	8000608 <__aeabi_dmul>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4690      	mov	r8, r2
 8001008:	4699      	mov	r9, r3
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8001010:	f04f 0200 	mov.w	r2, #0
 8001014:	4b5c      	ldr	r3, [pc, #368]	; (8001188 <updatePID+0x294>)
 8001016:	f7ff fc21 	bl	800085c <__aeabi_ddiv>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	4640      	mov	r0, r8
 8001020:	4649      	mov	r1, r9
 8001022:	f7ff faf1 	bl	8000608 <__aeabi_dmul>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	4620      	mov	r0, r4
 800102c:	4629      	mov	r1, r5
 800102e:	f7ff f935 	bl	800029c <__adddf3>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	68f9      	ldr	r1, [r7, #12]
 8001038:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		// Derivative
		D = pid->Kd * (error - pid->prev_error) / (pid->dt/1000);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001048:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800104c:	f7ff f924 	bl	8000298 <__aeabi_dsub>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4620      	mov	r0, r4
 8001056:	4629      	mov	r1, r5
 8001058:	f7ff fad6 	bl	8000608 <__aeabi_dmul>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4614      	mov	r4, r2
 8001062:	461d      	mov	r5, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800106a:	f04f 0200 	mov.w	r2, #0
 800106e:	4b46      	ldr	r3, [pc, #280]	; (8001188 <updatePID+0x294>)
 8001070:	f7ff fbf4 	bl	800085c <__aeabi_ddiv>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4620      	mov	r0, r4
 800107a:	4629      	mov	r1, r5
 800107c:	f7ff fbee 	bl	800085c <__aeabi_ddiv>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	e9c7 2304 	strd	r2, r3, [r7, #16]
		// Total
		pid->output = P + pid->integral + D;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800108e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001092:	f7ff f903 	bl	800029c <__adddf3>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	4610      	mov	r0, r2
 800109c:	4619      	mov	r1, r3
 800109e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80010a2:	f7ff f8fb 	bl	800029c <__adddf3>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	68f9      	ldr	r1, [r7, #12]
 80010ac:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		// Integral with anti-windup
		if (pid->integral > pid->max_output) {
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80010bc:	f7ff fd34 	bl	8000b28 <__aeabi_dcmpgt>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d006      	beq.n	80010d4 <updatePID+0x1e0>
			pid->integral = pid->max_output;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80010cc:	68f9      	ldr	r1, [r7, #12]
 80010ce:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 80010d2:	e0af      	b.n	8001234 <updatePID+0x340>
		} else if (pid->integral < pid->min_output) {
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80010e0:	f7ff fd04 	bl	8000aec <__aeabi_dcmplt>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f000 80a4 	beq.w	8001234 <updatePID+0x340>
			pid->integral = pid->min_output;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80010f2:	68f9      	ldr	r1, [r7, #12]
 80010f4:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 80010f8:	e09c      	b.n	8001234 <updatePID+0x340>
		}
	}
	else {
		P = pid->Kp * error;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001100:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001104:	f7ff fa80 	bl	8000608 <__aeabi_dmul>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	e9c7 2306 	strd	r2, r3, [r7, #24]
		pid->integral += pid->Ki * error * (pid->dt/1000);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800111c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001120:	f7ff fa72 	bl	8000608 <__aeabi_dmul>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4690      	mov	r8, r2
 800112a:	4699      	mov	r9, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	4b14      	ldr	r3, [pc, #80]	; (8001188 <updatePID+0x294>)
 8001138:	f7ff fb90 	bl	800085c <__aeabi_ddiv>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4640      	mov	r0, r8
 8001142:	4649      	mov	r1, r9
 8001144:	f7ff fa60 	bl	8000608 <__aeabi_dmul>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	4620      	mov	r0, r4
 800114e:	4629      	mov	r1, r5
 8001150:	f7ff f8a4 	bl	800029c <__adddf3>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	68f9      	ldr	r1, [r7, #12]
 800115a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		// Integral with anti-windup
		if (pid->integral > pid->max_Integral) {
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800116a:	f7ff fcdd 	bl	8000b28 <__aeabi_dcmpgt>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d00b      	beq.n	800118c <updatePID+0x298>
			pid->integral = pid->max_Integral;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800117a:	68f9      	ldr	r1, [r7, #12]
 800117c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8001180:	e015      	b.n	80011ae <updatePID+0x2ba>
 8001182:	bf00      	nop
 8001184:	40600000 	.word	0x40600000
 8001188:	408f4000 	.word	0x408f4000
		} else if (pid->integral < pid->min_Integral) {
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001198:	f7ff fca8 	bl	8000aec <__aeabi_dcmplt>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d005      	beq.n	80011ae <updatePID+0x2ba>
			pid->integral = pid->min_Integral;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80011a8:	68f9      	ldr	r1, [r7, #12]
 80011aa:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		}
		D = pid->Kd * (error - pid->prev_error) / (pid->dt/1000);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80011ba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80011be:	f7ff f86b 	bl	8000298 <__aeabi_dsub>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4620      	mov	r0, r4
 80011c8:	4629      	mov	r1, r5
 80011ca:	f7ff fa1d 	bl	8000608 <__aeabi_dmul>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4614      	mov	r4, r2
 80011d4:	461d      	mov	r5, r3
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	4b2b      	ldr	r3, [pc, #172]	; (8001290 <updatePID+0x39c>)
 80011e2:	f7ff fb3b 	bl	800085c <__aeabi_ddiv>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4620      	mov	r0, r4
 80011ec:	4629      	mov	r1, r5
 80011ee:	f7ff fb35 	bl	800085c <__aeabi_ddiv>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	e9c7 2304 	strd	r2, r3, [r7, #16]
		// Total
		pid->output = (PWM_MAXVALUE/2) + P + pid->integral + D;
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	4b25      	ldr	r3, [pc, #148]	; (8001294 <updatePID+0x3a0>)
 8001200:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001204:	f7ff f84a 	bl	800029c <__adddf3>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4610      	mov	r0, r2
 800120e:	4619      	mov	r1, r3
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001216:	f7ff f841 	bl	800029c <__adddf3>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4610      	mov	r0, r2
 8001220:	4619      	mov	r1, r3
 8001222:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001226:	f7ff f839 	bl	800029c <__adddf3>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	68f9      	ldr	r1, [r7, #12]
 8001230:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	}


	// Saturate output within limits
	if (pid->output > pid->max_output) {
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001240:	f7ff fc72 	bl	8000b28 <__aeabi_dcmpgt>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d006      	beq.n	8001258 <updatePID+0x364>
		pid->output = pid->max_output;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001250:	68f9      	ldr	r1, [r7, #12]
 8001252:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8001256:	e010      	b.n	800127a <updatePID+0x386>
	} else if (pid->output < pid->min_output) {
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001264:	f7ff fc42 	bl	8000aec <__aeabi_dcmplt>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d005      	beq.n	800127a <updatePID+0x386>
		pid->output = pid->min_output;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001274:	68f9      	ldr	r1, [r7, #12]
 8001276:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	}
	pid->prev_error = error;
 800127a:	68f9      	ldr	r1, [r7, #12]
 800127c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001280:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8001284:	bf00      	nop
 8001286:	3728      	adds	r7, #40	; 0x28
 8001288:	46bd      	mov	sp, r7
 800128a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800128e:	bf00      	nop
 8001290:	408f4000 	.word	0x408f4000
 8001294:	407f4000 	.word	0x407f4000

08001298 <ParseSBUS>:
#include "Sbus.h"

void ParseSBUS(tsbus* sbus){
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	sbus->ch[0]  = ( (sbus->ReceivedData[1]		| sbus->ReceivedData[2]<<8) 								& 0x07FF );
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	785b      	ldrb	r3, [r3, #1]
 80012a4:	b21a      	sxth	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	789b      	ldrb	r3, [r3, #2]
 80012aa:	021b      	lsls	r3, r3, #8
 80012ac:	b21b      	sxth	r3, r3
 80012ae:	4313      	orrs	r3, r2
 80012b0:	b21b      	sxth	r3, r3
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	835a      	strh	r2, [r3, #26]
	sbus->ch[1]  = ( (sbus->ReceivedData[2]>>3	| sbus->ReceivedData[3]<<5) 								& 0x07FF );
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	789b      	ldrb	r3, [r3, #2]
 80012c2:	08db      	lsrs	r3, r3, #3
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	b21a      	sxth	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	78db      	ldrb	r3, [r3, #3]
 80012cc:	015b      	lsls	r3, r3, #5
 80012ce:	b21b      	sxth	r3, r3
 80012d0:	4313      	orrs	r3, r2
 80012d2:	b21b      	sxth	r3, r3
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012da:	b29a      	uxth	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	839a      	strh	r2, [r3, #28]
	sbus->ch[2]  = ( (sbus->ReceivedData[3]>>6	| sbus->ReceivedData[4]<<2 	| sbus->ReceivedData[5]<<10 ) 	& 0x07FF );
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	78db      	ldrb	r3, [r3, #3]
 80012e4:	099b      	lsrs	r3, r3, #6
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	b21a      	sxth	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	791b      	ldrb	r3, [r3, #4]
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	b21b      	sxth	r3, r3
 80012f2:	4313      	orrs	r3, r2
 80012f4:	b21a      	sxth	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	795b      	ldrb	r3, [r3, #5]
 80012fa:	029b      	lsls	r3, r3, #10
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	4313      	orrs	r3, r2
 8001300:	b21b      	sxth	r3, r3
 8001302:	b29b      	uxth	r3, r3
 8001304:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001308:	b29a      	uxth	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	83da      	strh	r2, [r3, #30]
	sbus->ch[3]  = ( (sbus->ReceivedData[5]>>1	| sbus->ReceivedData[6]<<7) 								& 0x07FF );
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	795b      	ldrb	r3, [r3, #5]
 8001312:	085b      	lsrs	r3, r3, #1
 8001314:	b2db      	uxtb	r3, r3
 8001316:	b21a      	sxth	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	799b      	ldrb	r3, [r3, #6]
 800131c:	01db      	lsls	r3, r3, #7
 800131e:	b21b      	sxth	r3, r3
 8001320:	4313      	orrs	r3, r2
 8001322:	b21b      	sxth	r3, r3
 8001324:	b29b      	uxth	r3, r3
 8001326:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800132a:	b29a      	uxth	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	841a      	strh	r2, [r3, #32]
	sbus->ch[4]  = ( (sbus->ReceivedData[6]>>4	| sbus->ReceivedData[7]<<4) 								& 0x07FF );
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	799b      	ldrb	r3, [r3, #6]
 8001334:	091b      	lsrs	r3, r3, #4
 8001336:	b2db      	uxtb	r3, r3
 8001338:	b21a      	sxth	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	79db      	ldrb	r3, [r3, #7]
 800133e:	011b      	lsls	r3, r3, #4
 8001340:	b21b      	sxth	r3, r3
 8001342:	4313      	orrs	r3, r2
 8001344:	b21b      	sxth	r3, r3
 8001346:	b29b      	uxth	r3, r3
 8001348:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800134c:	b29a      	uxth	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	845a      	strh	r2, [r3, #34]	; 0x22
	sbus->ch[5]  = ( (sbus->ReceivedData[7]>>7	| sbus->ReceivedData[8]<<1	| sbus->ReceivedData[9]<<9 ) 	& 0x07FF );
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	79db      	ldrb	r3, [r3, #7]
 8001356:	09db      	lsrs	r3, r3, #7
 8001358:	b2db      	uxtb	r3, r3
 800135a:	b21a      	sxth	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	7a1b      	ldrb	r3, [r3, #8]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	b21b      	sxth	r3, r3
 8001364:	4313      	orrs	r3, r2
 8001366:	b21a      	sxth	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	7a5b      	ldrb	r3, [r3, #9]
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	b21b      	sxth	r3, r3
 8001370:	4313      	orrs	r3, r2
 8001372:	b21b      	sxth	r3, r3
 8001374:	b29b      	uxth	r3, r3
 8001376:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800137a:	b29a      	uxth	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	849a      	strh	r2, [r3, #36]	; 0x24
	sbus->ch[6]  = ( (sbus->ReceivedData[9]>>2 	| sbus->ReceivedData[10]<<6) 								& 0x07FF );
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	7a5b      	ldrb	r3, [r3, #9]
 8001384:	089b      	lsrs	r3, r3, #2
 8001386:	b2db      	uxtb	r3, r3
 8001388:	b21a      	sxth	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	7a9b      	ldrb	r3, [r3, #10]
 800138e:	019b      	lsls	r3, r3, #6
 8001390:	b21b      	sxth	r3, r3
 8001392:	4313      	orrs	r3, r2
 8001394:	b21b      	sxth	r3, r3
 8001396:	b29b      	uxth	r3, r3
 8001398:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800139c:	b29a      	uxth	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	84da      	strh	r2, [r3, #38]	; 0x26
	sbus->ch[7]  = ( (sbus->ReceivedData[10]>>5 | sbus->ReceivedData[11]<<3) 								& 0x07FF );
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	7a9b      	ldrb	r3, [r3, #10]
 80013a6:	095b      	lsrs	r3, r3, #5
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	b21a      	sxth	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	7adb      	ldrb	r3, [r3, #11]
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	b21b      	sxth	r3, r3
 80013b4:	4313      	orrs	r3, r2
 80013b6:	b21b      	sxth	r3, r3
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013be:	b29a      	uxth	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	851a      	strh	r2, [r3, #40]	; 0x28
	sbus->ch[8]  = ( (sbus->ReceivedData[12]	| sbus->ReceivedData[13]<<8) 								& 0x07FF );
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	7b1b      	ldrb	r3, [r3, #12]
 80013c8:	b21a      	sxth	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	7b5b      	ldrb	r3, [r3, #13]
 80013ce:	021b      	lsls	r3, r3, #8
 80013d0:	b21b      	sxth	r3, r3
 80013d2:	4313      	orrs	r3, r2
 80013d4:	b21b      	sxth	r3, r3
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013dc:	b29a      	uxth	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	855a      	strh	r2, [r3, #42]	; 0x2a
	sbus->ch[9]  = ( (sbus->ReceivedData[13]>>3 | sbus->ReceivedData[14]<<5) 								& 0x07FF );
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	7b5b      	ldrb	r3, [r3, #13]
 80013e6:	08db      	lsrs	r3, r3, #3
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	b21a      	sxth	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	7b9b      	ldrb	r3, [r3, #14]
 80013f0:	015b      	lsls	r3, r3, #5
 80013f2:	b21b      	sxth	r3, r3
 80013f4:	4313      	orrs	r3, r2
 80013f6:	b21b      	sxth	r3, r3
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013fe:	b29a      	uxth	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	859a      	strh	r2, [r3, #44]	; 0x2c
	sbus->ch[10] = ( (sbus->ReceivedData[14]>>6 | sbus->ReceivedData[15]<<2 | sbus->ReceivedData[16]<<10) 	& 0x07FF );
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	7b9b      	ldrb	r3, [r3, #14]
 8001408:	099b      	lsrs	r3, r3, #6
 800140a:	b2db      	uxtb	r3, r3
 800140c:	b21a      	sxth	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7bdb      	ldrb	r3, [r3, #15]
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	b21b      	sxth	r3, r3
 8001416:	4313      	orrs	r3, r2
 8001418:	b21a      	sxth	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	7c1b      	ldrb	r3, [r3, #16]
 800141e:	029b      	lsls	r3, r3, #10
 8001420:	b21b      	sxth	r3, r3
 8001422:	4313      	orrs	r3, r2
 8001424:	b21b      	sxth	r3, r3
 8001426:	b29b      	uxth	r3, r3
 8001428:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800142c:	b29a      	uxth	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	85da      	strh	r2, [r3, #46]	; 0x2e
	sbus->ch[11] = ( (sbus->ReceivedData[16]>>1 | sbus->ReceivedData[17]<<7)								& 0x07FF );
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	7c1b      	ldrb	r3, [r3, #16]
 8001436:	085b      	lsrs	r3, r3, #1
 8001438:	b2db      	uxtb	r3, r3
 800143a:	b21a      	sxth	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	7c5b      	ldrb	r3, [r3, #17]
 8001440:	01db      	lsls	r3, r3, #7
 8001442:	b21b      	sxth	r3, r3
 8001444:	4313      	orrs	r3, r2
 8001446:	b21b      	sxth	r3, r3
 8001448:	b29b      	uxth	r3, r3
 800144a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800144e:	b29a      	uxth	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	861a      	strh	r2, [r3, #48]	; 0x30
	sbus->ch[12] = ( (sbus->ReceivedData[17]>>4 | sbus->ReceivedData[18]<<4)								& 0x07FF );
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	7c5b      	ldrb	r3, [r3, #17]
 8001458:	091b      	lsrs	r3, r3, #4
 800145a:	b2db      	uxtb	r3, r3
 800145c:	b21a      	sxth	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	7c9b      	ldrb	r3, [r3, #18]
 8001462:	011b      	lsls	r3, r3, #4
 8001464:	b21b      	sxth	r3, r3
 8001466:	4313      	orrs	r3, r2
 8001468:	b21b      	sxth	r3, r3
 800146a:	b29b      	uxth	r3, r3
 800146c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001470:	b29a      	uxth	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	865a      	strh	r2, [r3, #50]	; 0x32
	sbus->ch[13] = ( (sbus->ReceivedData[18]>>7 | sbus->ReceivedData[19]<<1 | sbus->ReceivedData[20]<<9) 	& 0x07FF );
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	7c9b      	ldrb	r3, [r3, #18]
 800147a:	09db      	lsrs	r3, r3, #7
 800147c:	b2db      	uxtb	r3, r3
 800147e:	b21a      	sxth	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	7cdb      	ldrb	r3, [r3, #19]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	b21b      	sxth	r3, r3
 8001488:	4313      	orrs	r3, r2
 800148a:	b21a      	sxth	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	7d1b      	ldrb	r3, [r3, #20]
 8001490:	025b      	lsls	r3, r3, #9
 8001492:	b21b      	sxth	r3, r3
 8001494:	4313      	orrs	r3, r2
 8001496:	b21b      	sxth	r3, r3
 8001498:	b29b      	uxth	r3, r3
 800149a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800149e:	b29a      	uxth	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	869a      	strh	r2, [r3, #52]	; 0x34
	sbus->ch[14] = ( (sbus->ReceivedData[20]>>2 | sbus->ReceivedData[21]<<6) 								& 0x07FF );
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	7d1b      	ldrb	r3, [r3, #20]
 80014a8:	089b      	lsrs	r3, r3, #2
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	b21a      	sxth	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	7d5b      	ldrb	r3, [r3, #21]
 80014b2:	019b      	lsls	r3, r3, #6
 80014b4:	b21b      	sxth	r3, r3
 80014b6:	4313      	orrs	r3, r2
 80014b8:	b21b      	sxth	r3, r3
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	86da      	strh	r2, [r3, #54]	; 0x36
	sbus->ch[15] = ( (sbus->ReceivedData[21]>>5 | sbus->ReceivedData[22]<<3) 								& 0x07FF );
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	7d5b      	ldrb	r3, [r3, #21]
 80014ca:	095b      	lsrs	r3, r3, #5
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	b21a      	sxth	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	7d9b      	ldrb	r3, [r3, #22]
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	b21b      	sxth	r3, r3
 80014d8:	4313      	orrs	r3, r2
 80014da:	b21b      	sxth	r3, r3
 80014dc:	b29b      	uxth	r3, r3
 80014de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	871a      	strh	r2, [r3, #56]	; 0x38
	sbus->ch[16] = (  sbus->ReceivedData[23] 	& 0x0001 ) ? 2047: 0;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	7ddb      	ldrb	r3, [r3, #23]
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d002      	beq.n	80014fa <ParseSBUS+0x262>
 80014f4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80014f8:	e000      	b.n	80014fc <ParseSBUS+0x264>
 80014fa:	2200      	movs	r2, #0
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	875a      	strh	r2, [r3, #58]	; 0x3a
	sbus->ch[17] = (  sbus->ReceivedData[23]>>1 & 0x0001 ) ? 2047: 0;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	7ddb      	ldrb	r3, [r3, #23]
 8001504:	085b      	lsrs	r3, r3, #1
 8001506:	b2db      	uxtb	r3, r3
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	2b00      	cmp	r3, #0
 800150e:	d002      	beq.n	8001516 <ParseSBUS+0x27e>
 8001510:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001514:	e000      	b.n	8001518 <ParseSBUS+0x280>
 8001516:	2200      	movs	r2, #0
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <GetEncoderValue>:
#include "encoder.h"
#include "main.h"

void GetEncoderValue(encoder_data *encoder){
 8001528:	b580      	push	{r7, lr}
 800152a:	b096      	sub	sp, #88	; 0x58
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
	  int EncoderGrayConvert[8] ={0,0,0,0,0,0,0,0};
 8001530:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001534:	2220      	movs	r2, #32
 8001536:	2100      	movs	r1, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f006 f940 	bl	80077be <memset>
	  int GrayCode=0;
 800153e:	2300      	movs	r3, #0
 8001540:	64bb      	str	r3, [r7, #72]	; 0x48
	  int GrayMSBDetected = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	657b      	str	r3, [r7, #84]	; 0x54
	  //reading encoder value as gray code
#ifdef ENCODER_GPIO_MODE
	  //EncoderGrayCode = GrayCodeConvert[(HAL_GPIO_ReadPin(Encoder_A_GPIO_Port, Encoder_A_Pin) <<1 | HAL_GPIO_ReadPin(Encoder_B_GPIO_Port, Encoder_B_Pin)) & 0x03];
	  int b[8];
	  b[0]=!HAL_GPIO_ReadPin(Encoder_0_GPIO_Port, Encoder_0_Pin);
 8001546:	f44f 7180 	mov.w	r1, #256	; 0x100
 800154a:	4883      	ldr	r0, [pc, #524]	; (8001758 <GetEncoderValue+0x230>)
 800154c:	f002 fe7a 	bl	8004244 <HAL_GPIO_ReadPin>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	bf0c      	ite	eq
 8001556:	2301      	moveq	r3, #1
 8001558:	2300      	movne	r3, #0
 800155a:	b2db      	uxtb	r3, r3
 800155c:	60bb      	str	r3, [r7, #8]
	  b[1]=!HAL_GPIO_ReadPin(Encoder_1_GPIO_Port, Encoder_1_Pin);
 800155e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001562:	487d      	ldr	r0, [pc, #500]	; (8001758 <GetEncoderValue+0x230>)
 8001564:	f002 fe6e 	bl	8004244 <HAL_GPIO_ReadPin>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	bf0c      	ite	eq
 800156e:	2301      	moveq	r3, #1
 8001570:	2300      	movne	r3, #0
 8001572:	b2db      	uxtb	r3, r3
 8001574:	60fb      	str	r3, [r7, #12]
	  b[2]=!HAL_GPIO_ReadPin(Encoder_2_GPIO_Port, Encoder_2_Pin);
 8001576:	2120      	movs	r1, #32
 8001578:	4878      	ldr	r0, [pc, #480]	; (800175c <GetEncoderValue+0x234>)
 800157a:	f002 fe63 	bl	8004244 <HAL_GPIO_ReadPin>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	bf0c      	ite	eq
 8001584:	2301      	moveq	r3, #1
 8001586:	2300      	movne	r3, #0
 8001588:	b2db      	uxtb	r3, r3
 800158a:	613b      	str	r3, [r7, #16]
	  b[3]=!HAL_GPIO_ReadPin(Encoder_3_GPIO_Port, Encoder_3_Pin);
 800158c:	2140      	movs	r1, #64	; 0x40
 800158e:	4873      	ldr	r0, [pc, #460]	; (800175c <GetEncoderValue+0x234>)
 8001590:	f002 fe58 	bl	8004244 <HAL_GPIO_ReadPin>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	bf0c      	ite	eq
 800159a:	2301      	moveq	r3, #1
 800159c:	2300      	movne	r3, #0
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	617b      	str	r3, [r7, #20]
	  b[4]=!HAL_GPIO_ReadPin(Encoder_4_GPIO_Port, Encoder_4_Pin);
 80015a2:	2180      	movs	r1, #128	; 0x80
 80015a4:	486d      	ldr	r0, [pc, #436]	; (800175c <GetEncoderValue+0x234>)
 80015a6:	f002 fe4d 	bl	8004244 <HAL_GPIO_ReadPin>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	bf0c      	ite	eq
 80015b0:	2301      	moveq	r3, #1
 80015b2:	2300      	movne	r3, #0
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	61bb      	str	r3, [r7, #24]
	  b[5]=!HAL_GPIO_ReadPin(Encoder_5_GPIO_Port, Encoder_5_Pin);
 80015b8:	2140      	movs	r1, #64	; 0x40
 80015ba:	4867      	ldr	r0, [pc, #412]	; (8001758 <GetEncoderValue+0x230>)
 80015bc:	f002 fe42 	bl	8004244 <HAL_GPIO_ReadPin>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	bf0c      	ite	eq
 80015c6:	2301      	moveq	r3, #1
 80015c8:	2300      	movne	r3, #0
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	61fb      	str	r3, [r7, #28]
	  b[6]=!HAL_GPIO_ReadPin(Encoder_6_GPIO_Port, Encoder_6_Pin);
 80015ce:	2180      	movs	r1, #128	; 0x80
 80015d0:	4863      	ldr	r0, [pc, #396]	; (8001760 <GetEncoderValue+0x238>)
 80015d2:	f002 fe37 	bl	8004244 <HAL_GPIO_ReadPin>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	bf0c      	ite	eq
 80015dc:	2301      	moveq	r3, #1
 80015de:	2300      	movne	r3, #0
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	623b      	str	r3, [r7, #32]
	  b[7]=!HAL_GPIO_ReadPin(Encoder_7_GPIO_Port, Encoder_7_Pin);
 80015e4:	2110      	movs	r1, #16
 80015e6:	485c      	ldr	r0, [pc, #368]	; (8001758 <GetEncoderValue+0x230>)
 80015e8:	f002 fe2c 	bl	8004244 <HAL_GPIO_ReadPin>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	bf0c      	ite	eq
 80015f2:	2301      	moveq	r3, #1
 80015f4:	2300      	movne	r3, #0
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
	  encoder->EncoderRawValue =(b[7] <<7 | b[6] <<6 | b[5] <<5 | b[4] <<4 | b[3] <<3 | b[2] <<2 | b[1] <<1 | b[0]) & 0b11111111;
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	01da      	lsls	r2, r3, #7
 80015fe:	6a3b      	ldr	r3, [r7, #32]
 8001600:	019b      	lsls	r3, r3, #6
 8001602:	431a      	orrs	r2, r3
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	015b      	lsls	r3, r3, #5
 8001608:	431a      	orrs	r2, r3
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	011b      	lsls	r3, r3, #4
 800160e:	431a      	orrs	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	431a      	orrs	r2, r3
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	431a      	orrs	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	431a      	orrs	r2, r3
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	4313      	orrs	r3, r2
 8001626:	b2da      	uxtb	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	609a      	str	r2, [r3, #8]
	  //To convert Gray to Binary write the most significant bit MSB then compare the next bit with that if similar put 0 if different put 1
	  for (int index = 7 ; index >= 0 ; index--){
 800162c:	2307      	movs	r3, #7
 800162e:	653b      	str	r3, [r7, #80]	; 0x50
 8001630:	e046      	b.n	80016c0 <GetEncoderValue+0x198>
	          if ((b[index]==1) & ! (GrayMSBDetected)) {
 8001632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	3358      	adds	r3, #88	; 0x58
 8001638:	443b      	add	r3, r7
 800163a:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800163e:	2b01      	cmp	r3, #1
 8001640:	bf0c      	ite	eq
 8001642:	2301      	moveq	r3, #1
 8001644:	2300      	movne	r3, #0
 8001646:	b2da      	uxtb	r2, r3
 8001648:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800164a:	2b00      	cmp	r3, #0
 800164c:	bf0c      	ite	eq
 800164e:	2301      	moveq	r3, #1
 8001650:	2300      	movne	r3, #0
 8001652:	b2db      	uxtb	r3, r3
 8001654:	4013      	ands	r3, r2
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b00      	cmp	r3, #0
 800165a:	d00d      	beq.n	8001678 <GetEncoderValue+0x150>
	        	  EncoderGrayConvert[index]=b[index];
 800165c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	3358      	adds	r3, #88	; 0x58
 8001662:	443b      	add	r3, r7
 8001664:	f853 2c50 	ldr.w	r2, [r3, #-80]
 8001668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	3358      	adds	r3, #88	; 0x58
 800166e:	443b      	add	r3, r7
 8001670:	f843 2c30 	str.w	r2, [r3, #-48]
	              GrayMSBDetected=index;
 8001674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001676:	657b      	str	r3, [r7, #84]	; 0x54
	          }
	          if(GrayMSBDetected){
 8001678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800167a:	2b00      	cmp	r3, #0
 800167c:	d01d      	beq.n	80016ba <GetEncoderValue+0x192>
	              if (EncoderGrayConvert[index+1]==b[index]) EncoderGrayConvert[index]=0;
 800167e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001680:	3301      	adds	r3, #1
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	3358      	adds	r3, #88	; 0x58
 8001686:	443b      	add	r3, r7
 8001688:	f853 2c30 	ldr.w	r2, [r3, #-48]
 800168c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	3358      	adds	r3, #88	; 0x58
 8001692:	443b      	add	r3, r7
 8001694:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8001698:	429a      	cmp	r2, r3
 800169a:	d107      	bne.n	80016ac <GetEncoderValue+0x184>
 800169c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	3358      	adds	r3, #88	; 0x58
 80016a2:	443b      	add	r3, r7
 80016a4:	2200      	movs	r2, #0
 80016a6:	f843 2c30 	str.w	r2, [r3, #-48]
 80016aa:	e006      	b.n	80016ba <GetEncoderValue+0x192>
	              else EncoderGrayConvert[index]=1;
 80016ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	3358      	adds	r3, #88	; 0x58
 80016b2:	443b      	add	r3, r7
 80016b4:	2201      	movs	r2, #1
 80016b6:	f843 2c30 	str.w	r2, [r3, #-48]
	  for (int index = 7 ; index >= 0 ; index--){
 80016ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016bc:	3b01      	subs	r3, #1
 80016be:	653b      	str	r3, [r7, #80]	; 0x50
 80016c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	dab5      	bge.n	8001632 <GetEncoderValue+0x10a>
	          }
	  }
	  encoder->GrayCode  = GrayCode =((   EncoderGrayConvert[7] <<7 |
 80016c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016c8:	01da      	lsls	r2, r3, #7
										  EncoderGrayConvert[6] <<6 |
 80016ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016cc:	019b      	lsls	r3, r3, #6
	  encoder->GrayCode  = GrayCode =((   EncoderGrayConvert[7] <<7 |
 80016ce:	431a      	orrs	r2, r3
										  EncoderGrayConvert[5] <<5 |
 80016d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016d2:	015b      	lsls	r3, r3, #5
										  EncoderGrayConvert[6] <<6 |
 80016d4:	431a      	orrs	r2, r3
										  EncoderGrayConvert[4] <<4 |
 80016d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016d8:	011b      	lsls	r3, r3, #4
										  EncoderGrayConvert[5] <<5 |
 80016da:	431a      	orrs	r2, r3
										  EncoderGrayConvert[3] <<3 |
 80016dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016de:	00db      	lsls	r3, r3, #3
										  EncoderGrayConvert[4] <<4 |
 80016e0:	431a      	orrs	r2, r3
										  EncoderGrayConvert[2] <<2 |
 80016e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016e4:	009b      	lsls	r3, r3, #2
										  EncoderGrayConvert[3] <<3 |
 80016e6:	431a      	orrs	r2, r3
										  EncoderGrayConvert[1] <<1 |
 80016e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ea:	005b      	lsls	r3, r3, #1
										  EncoderGrayConvert[2] <<2 |
 80016ec:	431a      	orrs	r2, r3
										  EncoderGrayConvert[0]) & 0b11111111);
 80016ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
										  EncoderGrayConvert[1] <<1 |
 80016f0:	4313      	orrs	r3, r2
	  encoder->GrayCode  = GrayCode =((   EncoderGrayConvert[7] <<7 |
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80016fa:	611a      	str	r2, [r3, #16]
	  EncoderGrayCode = GrayCodeConvert[(encoder->IT_EncoderChA <<1 | encoder->IT_EncoderChB) & 0x03];
#endif

#ifndef ENCODER_TIMER_MODE //the value will be written in main.c in timer interrupt function
	  //if encoder value updated
	  if (encoder->PreviusGrayCode != GrayCode){
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001702:	429a      	cmp	r2, r3
 8001704:	d024      	beq.n	8001750 <GetEncoderValue+0x228>
		  int EncoderDeltaValue;
		  EncoderDeltaValue = GrayCode-encoder->PreviusGrayCode;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	64fb      	str	r3, [r7, #76]	; 0x4c
		  if (EncoderDeltaValue<0) {EncoderDeltaValue+=4;}
 8001710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001712:	2b00      	cmp	r3, #0
 8001714:	da02      	bge.n	800171c <GetEncoderValue+0x1f4>
 8001716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001718:	3304      	adds	r3, #4
 800171a:	64fb      	str	r3, [r7, #76]	; 0x4c
		  if (EncoderDeltaValue ==1) {
 800171c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800171e:	2b01      	cmp	r3, #1
 8001720:	d108      	bne.n	8001734 <GetEncoderValue+0x20c>
			  encoder->direction=CW;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2201      	movs	r2, #1
 8001726:	751a      	strb	r2, [r3, #20]
			  encoder->EncoderValue++;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	1c5a      	adds	r2, r3, #1
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	619a      	str	r2, [r3, #24]
 8001732:	e00a      	b.n	800174a <GetEncoderValue+0x222>
		  }
		  else if (EncoderDeltaValue ==3){
 8001734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001736:	2b03      	cmp	r3, #3
 8001738:	d107      	bne.n	800174a <GetEncoderValue+0x222>
			  encoder->direction=CCW;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2202      	movs	r2, #2
 800173e:	751a      	strb	r2, [r3, #20]
			  encoder->EncoderValue--;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	1e5a      	subs	r2, r3, #1
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	619a      	str	r2, [r3, #24]
		  }
		  encoder->PreviusGrayCode=GrayCode;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800174e:	60da      	str	r2, [r3, #12]
	 }
#else
	  if (encoder->EncoderValue >=0){ encoder->direction = CW;}
	  else {encoder->direction = CCW;}
#endif
}
 8001750:	bf00      	nop
 8001752:	3758      	adds	r7, #88	; 0x58
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40020400 	.word	0x40020400
 800175c:	40020000 	.word	0x40020000
 8001760:	40020800 	.word	0x40020800

08001764 <HAL_UART_RxCpltCallback>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_usart1_rx;

/* USER CODE BEGIN PV */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	if (huart == &huart1){
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a05      	ldr	r2, [pc, #20]	; (8001784 <HAL_UART_RxCpltCallback+0x20>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d102      	bne.n	800177a <HAL_UART_RxCpltCallback+0x16>
		ParseSBUS(&receivedSBUS);
 8001774:	4804      	ldr	r0, [pc, #16]	; (8001788 <HAL_UART_RxCpltCallback+0x24>)
 8001776:	f7ff fd8f 	bl	8001298 <ParseSBUS>
	}
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200003d0 	.word	0x200003d0
 8001788:	200001f4 	.word	0x200001f4

0800178c <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
	if (huart == &huart2){
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a06      	ldr	r2, [pc, #24]	; (80017b0 <HAL_UART_TxCpltCallback+0x24>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d102      	bne.n	80017a2 <HAL_UART_TxCpltCallback+0x16>
		uart2Free=1;
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <HAL_UART_TxCpltCallback+0x28>)
 800179e:	2201      	movs	r2, #1
 80017a0:	601a      	str	r2, [r3, #0]
	}
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	20000414 	.word	0x20000414
 80017b4:	20000000 	.word	0x20000000

080017b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ba:	b0a5      	sub	sp, #148	; 0x94
 80017bc:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017be:	f001 f941 	bl	8002a44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017c2:	f000 fba1 	bl	8001f08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017c6:	f000 fdbb 	bl	8002340 <MX_GPIO_Init>
  MX_DMA_Init();
 80017ca:	f000 fd99 	bl	8002300 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80017ce:	f000 fd6d 	bl	80022ac <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80017d2:	f000 fc53 	bl	800207c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80017d6:	f000 fd3d 	bl	8002254 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80017da:	f000 fbfd 	bl	8001fd8 <MX_ADC1_Init>
  MX_TIM2_Init();
 80017de:	f000 fced 	bl	80021bc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1, &receivedSBUS.ReceivedData[0], SBUS_LEN);
 80017e2:	2219      	movs	r2, #25
 80017e4:	4998      	ldr	r1, [pc, #608]	; (8001a48 <main+0x290>)
 80017e6:	4899      	ldr	r0, [pc, #612]	; (8001a4c <main+0x294>)
 80017e8:	f004 f9b4 	bl	8005b54 <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim1);
 80017ec:	4898      	ldr	r0, [pc, #608]	; (8001a50 <main+0x298>)
 80017ee:	f003 fa9d 	bl	8004d2c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim2);
 80017f2:	4898      	ldr	r0, [pc, #608]	; (8001a54 <main+0x29c>)
 80017f4:	f003 fa40 	bl	8004c78 <HAL_TIM_Base_Start>
  HAL_ADC_Start(&hadc1);
 80017f8:	4897      	ldr	r0, [pc, #604]	; (8001a58 <main+0x2a0>)
 80017fa:	f001 f9d9 	bl	8002bb0 <HAL_ADC_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80017fe:	2100      	movs	r1, #0
 8001800:	4893      	ldr	r0, [pc, #588]	; (8001a50 <main+0x298>)
 8001802:	f003 fb4f 	bl	8004ea4 <HAL_TIM_PWM_Start>
  SystemTime=HAL_GetTick();
 8001806:	f001 f983 	bl	8002b10 <HAL_GetTick>
 800180a:	4603      	mov	r3, r0
 800180c:	4a93      	ldr	r2, [pc, #588]	; (8001a5c <main+0x2a4>)
 800180e:	6013      	str	r3, [r2, #0]
  TestEncoder.PreviusGrayCode=0;
 8001810:	4b93      	ldr	r3, [pc, #588]	; (8001a60 <main+0x2a8>)
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]
  TestEncoder.EncoderValue=0;
 8001816:	4b92      	ldr	r3, [pc, #584]	; (8001a60 <main+0x2a8>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  TestEncoder.PreviousEncoderValue=0;
 800181c:	4b90      	ldr	r3, [pc, #576]	; (8001a60 <main+0x2a8>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
  TestEncoder.SpeedRPM=0;
 8001822:	4b8f      	ldr	r3, [pc, #572]	; (8001a60 <main+0x2a8>)
 8001824:	2200      	movs	r2, #0
 8001826:	621a      	str	r2, [r3, #32]
  TestEncoder.direction=CW;
 8001828:	4b8d      	ldr	r3, [pc, #564]	; (8001a60 <main+0x2a8>)
 800182a:	2201      	movs	r2, #1
 800182c:	751a      	strb	r2, [r3, #20]
  PID.Kp=5;
 800182e:	498d      	ldr	r1, [pc, #564]	; (8001a64 <main+0x2ac>)
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	4b8c      	ldr	r3, [pc, #560]	; (8001a68 <main+0x2b0>)
 8001836:	e9c1 2302 	strd	r2, r3, [r1, #8]
  PID.Ki=0.6;
 800183a:	498a      	ldr	r1, [pc, #552]	; (8001a64 <main+0x2ac>)
 800183c:	a374      	add	r3, pc, #464	; (adr r3, 8001a10 <main+0x258>)
 800183e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001842:	e9c1 2304 	strd	r2, r3, [r1, #16]
  PID.Kd=0.1;
 8001846:	4987      	ldr	r1, [pc, #540]	; (8001a64 <main+0x2ac>)
 8001848:	a373      	add	r3, pc, #460	; (adr r3, 8001a18 <main+0x260>)
 800184a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184e:	e9c1 2306 	strd	r2, r3, [r1, #24]
  PID.dt=10;
 8001852:	4984      	ldr	r1, [pc, #528]	; (8001a64 <main+0x2ac>)
 8001854:	f04f 0200 	mov.w	r2, #0
 8001858:	4b84      	ldr	r3, [pc, #528]	; (8001a6c <main+0x2b4>)
 800185a:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
  PID.integral=0;
 800185e:	4981      	ldr	r1, [pc, #516]	; (8001a64 <main+0x2ac>)
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	f04f 0300 	mov.w	r3, #0
 8001868:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
  PID.min_output= 0;
 800186c:	497d      	ldr	r1, [pc, #500]	; (8001a64 <main+0x2ac>)
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	f04f 0300 	mov.w	r3, #0
 8001876:	e9c1 2308 	strd	r2, r3, [r1, #32]
  PID.max_output= 1000;
 800187a:	497a      	ldr	r1, [pc, #488]	; (8001a64 <main+0x2ac>)
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	4b7b      	ldr	r3, [pc, #492]	; (8001a70 <main+0x2b8>)
 8001882:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  PID.min_Integral= -500;
 8001886:	4977      	ldr	r1, [pc, #476]	; (8001a64 <main+0x2ac>)
 8001888:	a365      	add	r3, pc, #404	; (adr r3, 8001a20 <main+0x268>)
 800188a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
  PID.max_Integral= 500;
 8001892:	4974      	ldr	r1, [pc, #464]	; (8001a64 <main+0x2ac>)
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	4b76      	ldr	r3, [pc, #472]	; (8001a74 <main+0x2bc>)
 800189a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
  PID.output=5000;
 800189e:	4971      	ldr	r1, [pc, #452]	; (8001a64 <main+0x2ac>)
 80018a0:	a361      	add	r3, pc, #388	; (adr r3, 8001a28 <main+0x270>)
 80018a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a6:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
  PID.target=0;
 80018aa:	496e      	ldr	r1, [pc, #440]	; (8001a64 <main+0x2ac>)
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
  HAL_GPIO_WritePin(Motor_Enable_GPIO_Port, Motor_Enable_Pin, GPIO_PIN_SET);
 80018b8:	2201      	movs	r2, #1
 80018ba:	2102      	movs	r1, #2
 80018bc:	486e      	ldr	r0, [pc, #440]	; (8001a78 <main+0x2c0>)
 80018be:	f002 fcd9 	bl	8004274 <HAL_GPIO_WritePin>

  while (1)
  {

	  //read Encoder
	  GetEncoderValue(&TestEncoder);
 80018c2:	4867      	ldr	r0, [pc, #412]	; (8001a60 <main+0x2a8>)
 80018c4:	f7ff fe30 	bl	8001528 <GetEncoderValue>
	  //reading SBUS from remote controller and writing PWM output
	  if (!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){
 80018c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018cc:	486a      	ldr	r0, [pc, #424]	; (8001a78 <main+0x2c0>)
 80018ce:	f002 fcb9 	bl	8004244 <HAL_GPIO_ReadPin>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d115      	bne.n	8001904 <main+0x14c>
		  while(!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){}
 80018d8:	bf00      	nop
 80018da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018de:	4866      	ldr	r0, [pc, #408]	; (8001a78 <main+0x2c0>)
 80018e0:	f002 fcb0 	bl	8004244 <HAL_GPIO_ReadPin>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0f7      	beq.n	80018da <main+0x122>
		  if (OperationMode==3){
 80018ea:	4b64      	ldr	r3, [pc, #400]	; (8001a7c <main+0x2c4>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b03      	cmp	r3, #3
 80018f0:	d103      	bne.n	80018fa <main+0x142>
			  OperationMode=0;
 80018f2:	4b62      	ldr	r3, [pc, #392]	; (8001a7c <main+0x2c4>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	e004      	b.n	8001904 <main+0x14c>
		  }
		  else OperationMode++;
 80018fa:	4b60      	ldr	r3, [pc, #384]	; (8001a7c <main+0x2c4>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	3301      	adds	r3, #1
 8001900:	4a5e      	ldr	r2, [pc, #376]	; (8001a7c <main+0x2c4>)
 8001902:	6013      	str	r3, [r2, #0]
	  }
	  switch (OperationMode) {
 8001904:	4b5d      	ldr	r3, [pc, #372]	; (8001a7c <main+0x2c4>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b03      	cmp	r3, #3
 800190a:	f200 81d1 	bhi.w	8001cb0 <main+0x4f8>
 800190e:	a201      	add	r2, pc, #4	; (adr r2, 8001914 <main+0x15c>)
 8001910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001914:	08001925 	.word	0x08001925
 8001918:	08001971 	.word	0x08001971
 800191c:	08001b01 	.word	0x08001b01
 8001920:	08001bb5 	.word	0x08001bb5
	  case 0://get speed command from remote controller
		  PID.Kp=1.2;
 8001924:	494f      	ldr	r1, [pc, #316]	; (8001a64 <main+0x2ac>)
 8001926:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800192a:	4b55      	ldr	r3, [pc, #340]	; (8001a80 <main+0x2c8>)
 800192c:	e9c1 2302 	strd	r2, r3, [r1, #8]
		  PID.Ki=0.8;
 8001930:	494c      	ldr	r1, [pc, #304]	; (8001a64 <main+0x2ac>)
 8001932:	a33f      	add	r3, pc, #252	; (adr r3, 8001a30 <main+0x278>)
 8001934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001938:	e9c1 2304 	strd	r2, r3, [r1, #16]
		  PID.Kd=0;
 800193c:	4949      	ldr	r1, [pc, #292]	; (8001a64 <main+0x2ac>)
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	f04f 0300 	mov.w	r3, #0
 8001946:	e9c1 2306 	strd	r2, r3, [r1, #24]
		  PID.target = 0 ;
 800194a:	4946      	ldr	r1, [pc, #280]	; (8001a64 <main+0x2ac>)
 800194c:	f04f 0200 	mov.w	r2, #0
 8001950:	f04f 0300 	mov.w	r3, #0
 8001954:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		  ProcessValue= TestEncoder.SpeedRPM;
 8001958:	4b41      	ldr	r3, [pc, #260]	; (8001a60 <main+0x2a8>)
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	4a49      	ldr	r2, [pc, #292]	; (8001a84 <main+0x2cc>)
 800195e:	6013      	str	r3, [r2, #0]
		  PID.ControlMode=Velocity;
 8001960:	4b40      	ldr	r3, [pc, #256]	; (8001a64 <main+0x2ac>)
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]
		  PreviousOperationMode=OperationMode;
 8001966:	4b45      	ldr	r3, [pc, #276]	; (8001a7c <main+0x2c4>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a47      	ldr	r2, [pc, #284]	; (8001a88 <main+0x2d0>)
 800196c:	6013      	str	r3, [r2, #0]
		  break;
 800196e:	e19f      	b.n	8001cb0 <main+0x4f8>
	  case 1: //Position control
		  if (PreviousOperationMode!=OperationMode){
 8001970:	4b45      	ldr	r3, [pc, #276]	; (8001a88 <main+0x2d0>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4b41      	ldr	r3, [pc, #260]	; (8001a7c <main+0x2c4>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	d026      	beq.n	80019ca <main+0x212>
			  PID.Kp=0.75;
 800197c:	4939      	ldr	r1, [pc, #228]	; (8001a64 <main+0x2ac>)
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	4b42      	ldr	r3, [pc, #264]	; (8001a8c <main+0x2d4>)
 8001984:	e9c1 2302 	strd	r2, r3, [r1, #8]
			  PID.Ki=0.08;
 8001988:	4936      	ldr	r1, [pc, #216]	; (8001a64 <main+0x2ac>)
 800198a:	a32b      	add	r3, pc, #172	; (adr r3, 8001a38 <main+0x280>)
 800198c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001990:	e9c1 2304 	strd	r2, r3, [r1, #16]
			  PID.Kd=0.16;
 8001994:	4933      	ldr	r1, [pc, #204]	; (8001a64 <main+0x2ac>)
 8001996:	a32a      	add	r3, pc, #168	; (adr r3, 8001a40 <main+0x288>)
 8001998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199c:	e9c1 2306 	strd	r2, r3, [r1, #24]
			  PID.output=0;
 80019a0:	4930      	ldr	r1, [pc, #192]	; (8001a64 <main+0x2ac>)
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	f04f 0300 	mov.w	r3, #0
 80019aa:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
			  PID.target=0;
 80019ae:	492d      	ldr	r1, [pc, #180]	; (8001a64 <main+0x2ac>)
 80019b0:	f04f 0200 	mov.w	r2, #0
 80019b4:	f04f 0300 	mov.w	r3, #0
 80019b8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
			  PID.integral=0;
 80019bc:	4929      	ldr	r1, [pc, #164]	; (8001a64 <main+0x2ac>)
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		  }

		  if (receivedSBUS.ch[2]>200 && receivedSBUS.ch[2]<1800){
 80019ca:	4b1f      	ldr	r3, [pc, #124]	; (8001a48 <main+0x290>)
 80019cc:	8bdb      	ldrh	r3, [r3, #30]
 80019ce:	2bc8      	cmp	r3, #200	; 0xc8
 80019d0:	d914      	bls.n	80019fc <main+0x244>
 80019d2:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <main+0x290>)
 80019d4:	8bdb      	ldrh	r3, [r3, #30]
 80019d6:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80019da:	d20f      	bcs.n	80019fc <main+0x244>
			  ModuloSetpoint = (receivedSBUS.ch[2]-200)*360/1600;
 80019dc:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <main+0x290>)
 80019de:	8bdb      	ldrh	r3, [r3, #30]
 80019e0:	3bc8      	subs	r3, #200	; 0xc8
 80019e2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80019e6:	fb02 f303 	mul.w	r3, r2, r3
 80019ea:	4a29      	ldr	r2, [pc, #164]	; (8001a90 <main+0x2d8>)
 80019ec:	fb82 1203 	smull	r1, r2, r2, r3
 80019f0:	1252      	asrs	r2, r2, #9
 80019f2:	17db      	asrs	r3, r3, #31
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	4a27      	ldr	r2, [pc, #156]	; (8001a94 <main+0x2dc>)
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	e056      	b.n	8001aaa <main+0x2f2>
		  }
		  else if(receivedSBUS.ch[2]<200){
 80019fc:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <main+0x290>)
 80019fe:	8bdb      	ldrh	r3, [r3, #30]
 8001a00:	2bc7      	cmp	r3, #199	; 0xc7
 8001a02:	d849      	bhi.n	8001a98 <main+0x2e0>
			  ModuloSetpoint=0;
 8001a04:	4b23      	ldr	r3, [pc, #140]	; (8001a94 <main+0x2dc>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	e04e      	b.n	8001aaa <main+0x2f2>
 8001a0c:	f3af 8000 	nop.w
 8001a10:	33333333 	.word	0x33333333
 8001a14:	3fe33333 	.word	0x3fe33333
 8001a18:	9999999a 	.word	0x9999999a
 8001a1c:	3fb99999 	.word	0x3fb99999
 8001a20:	00000000 	.word	0x00000000
 8001a24:	c07f4000 	.word	0xc07f4000
 8001a28:	00000000 	.word	0x00000000
 8001a2c:	40b38800 	.word	0x40b38800
 8001a30:	9999999a 	.word	0x9999999a
 8001a34:	3fe99999 	.word	0x3fe99999
 8001a38:	47ae147b 	.word	0x47ae147b
 8001a3c:	3fb47ae1 	.word	0x3fb47ae1
 8001a40:	47ae147b 	.word	0x47ae147b
 8001a44:	3fc47ae1 	.word	0x3fc47ae1
 8001a48:	200001f4 	.word	0x200001f4
 8001a4c:	200003d0 	.word	0x200003d0
 8001a50:	20000340 	.word	0x20000340
 8001a54:	20000388 	.word	0x20000388
 8001a58:	200002f8 	.word	0x200002f8
 8001a5c:	20000234 	.word	0x20000234
 8001a60:	20000238 	.word	0x20000238
 8001a64:	20000260 	.word	0x20000260
 8001a68:	40140000 	.word	0x40140000
 8001a6c:	40240000 	.word	0x40240000
 8001a70:	408f4000 	.word	0x408f4000
 8001a74:	407f4000 	.word	0x407f4000
 8001a78:	40020800 	.word	0x40020800
 8001a7c:	200002d8 	.word	0x200002d8
 8001a80:	3ff33333 	.word	0x3ff33333
 8001a84:	200002ec 	.word	0x200002ec
 8001a88:	200002dc 	.word	0x200002dc
 8001a8c:	3fe80000 	.word	0x3fe80000
 8001a90:	51eb851f 	.word	0x51eb851f
 8001a94:	200002f0 	.word	0x200002f0
		  }
		  else if(receivedSBUS.ch[2]>1800){
 8001a98:	4b69      	ldr	r3, [pc, #420]	; (8001c40 <main+0x488>)
 8001a9a:	8bdb      	ldrh	r3, [r3, #30]
 8001a9c:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001aa0:	d903      	bls.n	8001aaa <main+0x2f2>
			  ModuloSetpoint=360;
 8001aa2:	4b68      	ldr	r3, [pc, #416]	; (8001c44 <main+0x48c>)
 8001aa4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001aa8:	601a      	str	r2, [r3, #0]
		  }
		  PID.target = ModuloSetpoint *256/360;
 8001aaa:	4b66      	ldr	r3, [pc, #408]	; (8001c44 <main+0x48c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	021b      	lsls	r3, r3, #8
 8001ab0:	4a65      	ldr	r2, [pc, #404]	; (8001c48 <main+0x490>)
 8001ab2:	fb82 1203 	smull	r1, r2, r2, r3
 8001ab6:	441a      	add	r2, r3
 8001ab8:	1212      	asrs	r2, r2, #8
 8001aba:	17db      	asrs	r3, r3, #31
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7fe fd38 	bl	8000534 <__aeabi_i2d>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4960      	ldr	r1, [pc, #384]	; (8001c4c <main+0x494>)
 8001aca:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		  PID.ControlMode=Position;
 8001ace:	4b5f      	ldr	r3, [pc, #380]	; (8001c4c <main+0x494>)
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	701a      	strb	r2, [r3, #0]
		  ProcessValue= TestEncoder.GrayCode;
 8001ad4:	4b5e      	ldr	r3, [pc, #376]	; (8001c50 <main+0x498>)
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	4a5e      	ldr	r2, [pc, #376]	; (8001c54 <main+0x49c>)
 8001ada:	6013      	str	r3, [r2, #0]
		  ModuloFeedback= ProcessValue*360/256;
 8001adc:	4b5d      	ldr	r3, [pc, #372]	; (8001c54 <main+0x49c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001ae4:	fb02 f303 	mul.w	r3, r2, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	da00      	bge.n	8001aee <main+0x336>
 8001aec:	33ff      	adds	r3, #255	; 0xff
 8001aee:	121b      	asrs	r3, r3, #8
 8001af0:	461a      	mov	r2, r3
 8001af2:	4b59      	ldr	r3, [pc, #356]	; (8001c58 <main+0x4a0>)
 8001af4:	601a      	str	r2, [r3, #0]
		  PreviousOperationMode=OperationMode;
 8001af6:	4b59      	ldr	r3, [pc, #356]	; (8001c5c <main+0x4a4>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a59      	ldr	r2, [pc, #356]	; (8001c60 <main+0x4a8>)
 8001afc:	6013      	str	r3, [r2, #0]
		  break;
 8001afe:	e0d7      	b.n	8001cb0 <main+0x4f8>
	  case 2:
		  PID.Kp=1.2;
 8001b00:	4952      	ldr	r1, [pc, #328]	; (8001c4c <main+0x494>)
 8001b02:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001b06:	4b57      	ldr	r3, [pc, #348]	; (8001c64 <main+0x4ac>)
 8001b08:	e9c1 2302 	strd	r2, r3, [r1, #8]
		  PID.Ki=0.8;
 8001b0c:	494f      	ldr	r1, [pc, #316]	; (8001c4c <main+0x494>)
 8001b0e:	a348      	add	r3, pc, #288	; (adr r3, 8001c30 <main+0x478>)
 8001b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b14:	e9c1 2304 	strd	r2, r3, [r1, #16]
		  PID.Kd=0;
 8001b18:	494c      	ldr	r1, [pc, #304]	; (8001c4c <main+0x494>)
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	f04f 0300 	mov.w	r3, #0
 8001b22:	e9c1 2306 	strd	r2, r3, [r1, #24]
		  PID.ControlMode=Velocity;
 8001b26:	4b49      	ldr	r3, [pc, #292]	; (8001c4c <main+0x494>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	701a      	strb	r2, [r3, #0]
		  if (receivedSBUS.ch[1]>1000 && receivedSBUS.ch[1]<2000){
 8001b2c:	4b44      	ldr	r3, [pc, #272]	; (8001c40 <main+0x488>)
 8001b2e:	8b9b      	ldrh	r3, [r3, #28]
 8001b30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b34:	d912      	bls.n	8001b5c <main+0x3a4>
 8001b36:	4b42      	ldr	r3, [pc, #264]	; (8001c40 <main+0x488>)
 8001b38:	8b9b      	ldrh	r3, [r3, #28]
 8001b3a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b3e:	d20d      	bcs.n	8001b5c <main+0x3a4>
			  PID.target = 2* ( receivedSBUS.ch[1]-1000);
 8001b40:	4b3f      	ldr	r3, [pc, #252]	; (8001c40 <main+0x488>)
 8001b42:	8b9b      	ldrh	r3, [r3, #28]
 8001b44:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fcf2 	bl	8000534 <__aeabi_i2d>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	493d      	ldr	r1, [pc, #244]	; (8001c4c <main+0x494>)
 8001b56:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8001b5a:	e022      	b.n	8001ba2 <main+0x3ea>
		  }
		  else if (receivedSBUS.ch[1]>0 && receivedSBUS.ch[1]<990){
 8001b5c:	4b38      	ldr	r3, [pc, #224]	; (8001c40 <main+0x488>)
 8001b5e:	8b9b      	ldrh	r3, [r3, #28]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d017      	beq.n	8001b94 <main+0x3dc>
 8001b64:	4b36      	ldr	r3, [pc, #216]	; (8001c40 <main+0x488>)
 8001b66:	8b9b      	ldrh	r3, [r3, #28]
 8001b68:	f240 32dd 	movw	r2, #989	; 0x3dd
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d811      	bhi.n	8001b94 <main+0x3dc>
			  PID.target = -2* (990- receivedSBUS.ch[1]);
 8001b70:	4b33      	ldr	r3, [pc, #204]	; (8001c40 <main+0x488>)
 8001b72:	8b9b      	ldrh	r3, [r3, #28]
 8001b74:	f5c3 7277 	rsb	r2, r3, #988	; 0x3dc
 8001b78:	3202      	adds	r2, #2
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	07db      	lsls	r3, r3, #31
 8001b7e:	1a9b      	subs	r3, r3, r2
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fcd6 	bl	8000534 <__aeabi_i2d>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	492f      	ldr	r1, [pc, #188]	; (8001c4c <main+0x494>)
 8001b8e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8001b92:	e006      	b.n	8001ba2 <main+0x3ea>
		  }
		  else{
			  PID.target=0;
 8001b94:	492d      	ldr	r1, [pc, #180]	; (8001c4c <main+0x494>)
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		  }
		  ProcessValue= TestEncoder.SpeedRPM;
 8001ba2:	4b2b      	ldr	r3, [pc, #172]	; (8001c50 <main+0x498>)
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	4a2b      	ldr	r2, [pc, #172]	; (8001c54 <main+0x49c>)
 8001ba8:	6013      	str	r3, [r2, #0]
		  PreviousOperationMode=OperationMode;
 8001baa:	4b2c      	ldr	r3, [pc, #176]	; (8001c5c <main+0x4a4>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a2c      	ldr	r2, [pc, #176]	; (8001c60 <main+0x4a8>)
 8001bb0:	6013      	str	r3, [r2, #0]
		  break;
 8001bb2:	e07d      	b.n	8001cb0 <main+0x4f8>
	  case 3: // toggle speed automatically
		  if (PreviousOperationMode!=OperationMode){
 8001bb4:	4b2a      	ldr	r3, [pc, #168]	; (8001c60 <main+0x4a8>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b28      	ldr	r3, [pc, #160]	; (8001c5c <main+0x4a4>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d018      	beq.n	8001bf2 <main+0x43a>
			  PID.Kp=1.2;
 8001bc0:	4922      	ldr	r1, [pc, #136]	; (8001c4c <main+0x494>)
 8001bc2:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001bc6:	4b27      	ldr	r3, [pc, #156]	; (8001c64 <main+0x4ac>)
 8001bc8:	e9c1 2302 	strd	r2, r3, [r1, #8]
			  PID.Ki=0.8;
 8001bcc:	491f      	ldr	r1, [pc, #124]	; (8001c4c <main+0x494>)
 8001bce:	a318      	add	r3, pc, #96	; (adr r3, 8001c30 <main+0x478>)
 8001bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd4:	e9c1 2304 	strd	r2, r3, [r1, #16]
			  PID.Kd=0;
 8001bd8:	491c      	ldr	r1, [pc, #112]	; (8001c4c <main+0x494>)
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	f04f 0300 	mov.w	r3, #0
 8001be2:	e9c1 2306 	strd	r2, r3, [r1, #24]
			  PID.target=250;
 8001be6:	4919      	ldr	r1, [pc, #100]	; (8001c4c <main+0x494>)
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	4b1e      	ldr	r3, [pc, #120]	; (8001c68 <main+0x4b0>)
 8001bee:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		  }
		  PID.ControlMode=Velocity;
 8001bf2:	4b16      	ldr	r3, [pc, #88]	; (8001c4c <main+0x494>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]
		  if(HAL_GetTick()-speedUpdateTime>=10000){
 8001bf8:	f000 ff8a 	bl	8002b10 <HAL_GetTick>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	4a1b      	ldr	r2, [pc, #108]	; (8001c6c <main+0x4b4>)
 8001c00:	6812      	ldr	r2, [r2, #0]
 8001c02:	1a9b      	subs	r3, r3, r2
 8001c04:	f242 720f 	movw	r2, #9999	; 0x270f
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d948      	bls.n	8001c9e <main+0x4e6>
	 		  if(PID.target==-250) PID.target=250;
 8001c0c:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <main+0x494>)
 8001c0e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001c12:	a309      	add	r3, pc, #36	; (adr r3, 8001c38 <main+0x480>)
 8001c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c18:	f7fe ff5e 	bl	8000ad8 <__aeabi_dcmpeq>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d026      	beq.n	8001c70 <main+0x4b8>
 8001c22:	490a      	ldr	r1, [pc, #40]	; (8001c4c <main+0x494>)
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <main+0x4b0>)
 8001c2a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8001c2e:	e030      	b.n	8001c92 <main+0x4da>
 8001c30:	9999999a 	.word	0x9999999a
 8001c34:	3fe99999 	.word	0x3fe99999
 8001c38:	00000000 	.word	0x00000000
 8001c3c:	c06f4000 	.word	0xc06f4000
 8001c40:	200001f4 	.word	0x200001f4
 8001c44:	200002f0 	.word	0x200002f0
 8001c48:	b60b60b7 	.word	0xb60b60b7
 8001c4c:	20000260 	.word	0x20000260
 8001c50:	20000238 	.word	0x20000238
 8001c54:	200002ec 	.word	0x200002ec
 8001c58:	200002f4 	.word	0x200002f4
 8001c5c:	200002d8 	.word	0x200002d8
 8001c60:	200002dc 	.word	0x200002dc
 8001c64:	3ff33333 	.word	0x3ff33333
 8001c68:	406f4000 	.word	0x406f4000
 8001c6c:	200002d4 	.word	0x200002d4
	 		  else if (PID.target==250) PID.target=-250;
 8001c70:	4b8b      	ldr	r3, [pc, #556]	; (8001ea0 <main+0x6e8>)
 8001c72:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	4b8a      	ldr	r3, [pc, #552]	; (8001ea4 <main+0x6ec>)
 8001c7c:	f7fe ff2c 	bl	8000ad8 <__aeabi_dcmpeq>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d005      	beq.n	8001c92 <main+0x4da>
 8001c86:	4986      	ldr	r1, [pc, #536]	; (8001ea0 <main+0x6e8>)
 8001c88:	a383      	add	r3, pc, #524	; (adr r3, 8001e98 <main+0x6e0>)
 8001c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	 		  speedUpdateTime=HAL_GetTick();
 8001c92:	f000 ff3d 	bl	8002b10 <HAL_GetTick>
 8001c96:	4603      	mov	r3, r0
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4b83      	ldr	r3, [pc, #524]	; (8001ea8 <main+0x6f0>)
 8001c9c:	601a      	str	r2, [r3, #0]

		  }
		  ProcessValue= TestEncoder.SpeedRPM;
 8001c9e:	4b83      	ldr	r3, [pc, #524]	; (8001eac <main+0x6f4>)
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	4a83      	ldr	r2, [pc, #524]	; (8001eb0 <main+0x6f8>)
 8001ca4:	6013      	str	r3, [r2, #0]
		  PreviousOperationMode=OperationMode;
 8001ca6:	4b83      	ldr	r3, [pc, #524]	; (8001eb4 <main+0x6fc>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a83      	ldr	r2, [pc, #524]	; (8001eb8 <main+0x700>)
 8001cac:	6013      	str	r3, [r2, #0]
		  break;
 8001cae:	bf00      	nop
	  }

	  //Calculate RPM
	  //with motor Voltage

	  Timer2Counter=__HAL_TIM_GET_COUNTER(&htim2);
 8001cb0:	4b82      	ldr	r3, [pc, #520]	; (8001ebc <main+0x704>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb6:	4a82      	ldr	r2, [pc, #520]	; (8001ec0 <main+0x708>)
 8001cb8:	6013      	str	r3, [r2, #0]
	  if (Timer2Counter>=1000000 || ADCReadingInProgress){//every 100 @ 100MHZ will be 1 micro-second so 1000000 will be 10ms
 8001cba:	4b81      	ldr	r3, [pc, #516]	; (8001ec0 <main+0x708>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a81      	ldr	r2, [pc, #516]	; (8001ec4 <main+0x70c>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d803      	bhi.n	8001ccc <main+0x514>
 8001cc4:	4b80      	ldr	r3, [pc, #512]	; (8001ec8 <main+0x710>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d038      	beq.n	8001d3e <main+0x586>
		  if (ADCReadingInProgress==0){
 8001ccc:	4b7e      	ldr	r3, [pc, #504]	; (8001ec8 <main+0x710>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d103      	bne.n	8001cdc <main+0x524>
			  __HAL_TIM_SET_COUNTER(&htim2,0);
 8001cd4:	4b79      	ldr	r3, [pc, #484]	; (8001ebc <main+0x704>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	625a      	str	r2, [r3, #36]	; 0x24
		  }
		  ADCReadingInProgress= __HAL_TIM_GET_COUNTER(&htim2);
 8001cdc:	4b77      	ldr	r3, [pc, #476]	; (8001ebc <main+0x704>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	4b78      	ldr	r3, [pc, #480]	; (8001ec8 <main+0x710>)
 8001ce6:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(Motor_Enable_GPIO_Port, Motor_Enable_Pin, GPIO_PIN_RESET);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2102      	movs	r1, #2
 8001cec:	4877      	ldr	r0, [pc, #476]	; (8001ecc <main+0x714>)
 8001cee:	f002 fac1 	bl	8004274 <HAL_GPIO_WritePin>
		  if (ADCReadingInProgress>=25000){//wait 250 usec before reading ADC
 8001cf2:	4b75      	ldr	r3, [pc, #468]	; (8001ec8 <main+0x710>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	dd1f      	ble.n	8001d3e <main+0x586>
			  int ADCStatus=10;
 8001cfe:	230a      	movs	r3, #10
 8001d00:	677b      	str	r3, [r7, #116]	; 0x74
			  ADCStatus=HAL_ADC_PollForConversion(&hadc1,1);
 8001d02:	2101      	movs	r1, #1
 8001d04:	4872      	ldr	r0, [pc, #456]	; (8001ed0 <main+0x718>)
 8001d06:	f001 f807 	bl	8002d18 <HAL_ADC_PollForConversion>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	677b      	str	r3, [r7, #116]	; 0x74
			  if(ADCStatus==0){
 8001d0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d114      	bne.n	8001d3e <main+0x586>
				  MotorVoltageRaw=HAL_ADC_GetValue(&hadc1);
 8001d14:	486e      	ldr	r0, [pc, #440]	; (8001ed0 <main+0x718>)
 8001d16:	f001 f99a 	bl	800304e <HAL_ADC_GetValue>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	4a6d      	ldr	r2, [pc, #436]	; (8001ed4 <main+0x71c>)
 8001d1e:	6013      	str	r3, [r2, #0]
				  HAL_ADC_Start(&hadc1);
 8001d20:	486b      	ldr	r0, [pc, #428]	; (8001ed0 <main+0x718>)
 8001d22:	f000 ff45 	bl	8002bb0 <HAL_ADC_Start>
				  __HAL_TIM_SET_COUNTER(&htim2,0);
 8001d26:	4b65      	ldr	r3, [pc, #404]	; (8001ebc <main+0x704>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	625a      	str	r2, [r3, #36]	; 0x24
				  HAL_GPIO_WritePin(Motor_Enable_GPIO_Port, Motor_Enable_Pin, GPIO_PIN_SET);
 8001d2e:	2201      	movs	r2, #1
 8001d30:	2102      	movs	r1, #2
 8001d32:	4866      	ldr	r0, [pc, #408]	; (8001ecc <main+0x714>)
 8001d34:	f002 fa9e 	bl	8004274 <HAL_GPIO_WritePin>
				  ADCReadingInProgress=0;
 8001d38:	4b63      	ldr	r3, [pc, #396]	; (8001ec8 <main+0x710>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
		  }


	  }
	  //with Encoder
	  if (HAL_GetTick()-SystemTime>=(PID.dt)){
 8001d3e:	f000 fee7 	bl	8002b10 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	4b64      	ldr	r3, [pc, #400]	; (8001ed8 <main+0x720>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fbe2 	bl	8000514 <__aeabi_ui2d>
 8001d50:	4b53      	ldr	r3, [pc, #332]	; (8001ea0 <main+0x6e8>)
 8001d52:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001d56:	f7fe fedd 	bl	8000b14 <__aeabi_dcmpge>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d052      	beq.n	8001e06 <main+0x64e>
		  TestEncoder.SpeedRPM=(TestEncoder.EncoderValue-TestEncoder.PreviousEncoderValue)*(1000/PID.dt)*60/256;//1000/dt for converting to pulse per second - 60 for 1sec to 1min - 256 for pules/rev - for gray code to pulse
 8001d60:	4b52      	ldr	r3, [pc, #328]	; (8001eac <main+0x6f4>)
 8001d62:	699a      	ldr	r2, [r3, #24]
 8001d64:	4b51      	ldr	r3, [pc, #324]	; (8001eac <main+0x6f4>)
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fbe2 	bl	8000534 <__aeabi_i2d>
 8001d70:	4604      	mov	r4, r0
 8001d72:	460d      	mov	r5, r1
 8001d74:	4b4a      	ldr	r3, [pc, #296]	; (8001ea0 <main+0x6e8>)
 8001d76:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001d7a:	f04f 0000 	mov.w	r0, #0
 8001d7e:	4957      	ldr	r1, [pc, #348]	; (8001edc <main+0x724>)
 8001d80:	f7fe fd6c 	bl	800085c <__aeabi_ddiv>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4620      	mov	r0, r4
 8001d8a:	4629      	mov	r1, r5
 8001d8c:	f7fe fc3c 	bl	8000608 <__aeabi_dmul>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4610      	mov	r0, r2
 8001d96:	4619      	mov	r1, r3
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	4b50      	ldr	r3, [pc, #320]	; (8001ee0 <main+0x728>)
 8001d9e:	f7fe fc33 	bl	8000608 <__aeabi_dmul>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	4610      	mov	r0, r2
 8001da8:	4619      	mov	r1, r3
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	4b4d      	ldr	r3, [pc, #308]	; (8001ee4 <main+0x72c>)
 8001db0:	f7fe fd54 	bl	800085c <__aeabi_ddiv>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4610      	mov	r0, r2
 8001dba:	4619      	mov	r1, r3
 8001dbc:	f7fe fed4 	bl	8000b68 <__aeabi_d2iz>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	4a3a      	ldr	r2, [pc, #232]	; (8001eac <main+0x6f4>)
 8001dc4:	6213      	str	r3, [r2, #32]
		  TestEncoder.PreviousEncoderValue=TestEncoder.EncoderValue;
 8001dc6:	4b39      	ldr	r3, [pc, #228]	; (8001eac <main+0x6f4>)
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	4a38      	ldr	r2, [pc, #224]	; (8001eac <main+0x6f4>)
 8001dcc:	61d3      	str	r3, [r2, #28]
		  SystemTime=HAL_GetTick();
 8001dce:	f000 fe9f 	bl	8002b10 <HAL_GetTick>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	4a40      	ldr	r2, [pc, #256]	; (8001ed8 <main+0x720>)
 8001dd6:	6013      	str	r3, [r2, #0]
		  updatePID(&PID, ProcessValue);
 8001dd8:	4b35      	ldr	r3, [pc, #212]	; (8001eb0 <main+0x6f8>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7fe fba9 	bl	8000534 <__aeabi_i2d>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	ec43 2b10 	vmov	d0, r2, r3
 8001dea:	482d      	ldr	r0, [pc, #180]	; (8001ea0 <main+0x6e8>)
 8001dec:	f7ff f882 	bl	8000ef4 <updatePID>
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,PID.output);
 8001df0:	4b2b      	ldr	r3, [pc, #172]	; (8001ea0 <main+0x6e8>)
 8001df2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001df6:	493c      	ldr	r1, [pc, #240]	; (8001ee8 <main+0x730>)
 8001df8:	680c      	ldr	r4, [r1, #0]
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f7fe fedb 	bl	8000bb8 <__aeabi_d2uiz>
 8001e02:	4603      	mov	r3, r0
 8001e04:	6363      	str	r3, [r4, #52]	; 0x34
	  }
	  if (HAL_GetTick()-messageUpdateTime>=50){
 8001e06:	f000 fe83 	bl	8002b10 <HAL_GetTick>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	4a37      	ldr	r2, [pc, #220]	; (8001eec <main+0x734>)
 8001e0e:	6812      	ldr	r2, [r2, #0]
 8001e10:	1a9b      	subs	r3, r3, r2
 8001e12:	2b31      	cmp	r3, #49	; 0x31
 8001e14:	f67f ad55 	bls.w	80018c2 <main+0x10a>
		  char message[100];
		  int messagaLen=0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	673b      	str	r3, [r7, #112]	; 0x70
		  messagaLen=sprintf(&message,"Spd=%ld, SpdSet=%f,PosSet=%d, PosFB=%d, Volt=%d T=%d ,\n",ProcessValue,PID.target,ModuloSetpoint,ModuloFeedback,(MotorVoltageRaw*6/10)-1200,messageUpdateTime);
 8001e1c:	4b24      	ldr	r3, [pc, #144]	; (8001eb0 <main+0x6f8>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	607b      	str	r3, [r7, #4]
 8001e22:	4b1f      	ldr	r3, [pc, #124]	; (8001ea0 <main+0x6e8>)
 8001e24:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001e28:	4b31      	ldr	r3, [pc, #196]	; (8001ef0 <main+0x738>)
 8001e2a:	681c      	ldr	r4, [r3, #0]
 8001e2c:	4b31      	ldr	r3, [pc, #196]	; (8001ef4 <main+0x73c>)
 8001e2e:	681d      	ldr	r5, [r3, #0]
 8001e30:	4b28      	ldr	r3, [pc, #160]	; (8001ed4 <main+0x71c>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4613      	mov	r3, r2
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	4413      	add	r3, r2
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4b2e      	ldr	r3, [pc, #184]	; (8001ef8 <main+0x740>)
 8001e40:	fba3 2302 	umull	r2, r3, r3, r2
 8001e44:	08db      	lsrs	r3, r3, #3
 8001e46:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8001e4a:	4a28      	ldr	r2, [pc, #160]	; (8001eec <main+0x734>)
 8001e4c:	6812      	ldr	r2, [r2, #0]
 8001e4e:	f107 060c 	add.w	r6, r7, #12
 8001e52:	9205      	str	r2, [sp, #20]
 8001e54:	9304      	str	r3, [sp, #16]
 8001e56:	9503      	str	r5, [sp, #12]
 8001e58:	9402      	str	r4, [sp, #8]
 8001e5a:	e9cd 0100 	strd	r0, r1, [sp]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	4926      	ldr	r1, [pc, #152]	; (8001efc <main+0x744>)
 8001e62:	4630      	mov	r0, r6
 8001e64:	f005 fc48 	bl	80076f8 <siprintf>
 8001e68:	6738      	str	r0, [r7, #112]	; 0x70
		  if (uart2Free==1){
 8001e6a:	4b25      	ldr	r3, [pc, #148]	; (8001f00 <main+0x748>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d10a      	bne.n	8001e88 <main+0x6d0>
			  HAL_UART_Transmit_IT(&huart2, message, messagaLen);
 8001e72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	f107 030c 	add.w	r3, r7, #12
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4821      	ldr	r0, [pc, #132]	; (8001f04 <main+0x74c>)
 8001e7e:	f003 fe24 	bl	8005aca <HAL_UART_Transmit_IT>
			  uart2Free=0;
 8001e82:	4b1f      	ldr	r3, [pc, #124]	; (8001f00 <main+0x748>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
		  }
		  messageUpdateTime=HAL_GetTick();
 8001e88:	f000 fe42 	bl	8002b10 <HAL_GetTick>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	461a      	mov	r2, r3
 8001e90:	4b16      	ldr	r3, [pc, #88]	; (8001eec <main+0x734>)
 8001e92:	601a      	str	r2, [r3, #0]
	  GetEncoderValue(&TestEncoder);
 8001e94:	e515      	b.n	80018c2 <main+0x10a>
 8001e96:	bf00      	nop
 8001e98:	00000000 	.word	0x00000000
 8001e9c:	c06f4000 	.word	0xc06f4000
 8001ea0:	20000260 	.word	0x20000260
 8001ea4:	406f4000 	.word	0x406f4000
 8001ea8:	200002d4 	.word	0x200002d4
 8001eac:	20000238 	.word	0x20000238
 8001eb0:	200002ec 	.word	0x200002ec
 8001eb4:	200002d8 	.word	0x200002d8
 8001eb8:	200002dc 	.word	0x200002dc
 8001ebc:	20000388 	.word	0x20000388
 8001ec0:	200002e0 	.word	0x200002e0
 8001ec4:	000f423f 	.word	0x000f423f
 8001ec8:	200002e4 	.word	0x200002e4
 8001ecc:	40020800 	.word	0x40020800
 8001ed0:	200002f8 	.word	0x200002f8
 8001ed4:	200002e8 	.word	0x200002e8
 8001ed8:	20000234 	.word	0x20000234
 8001edc:	408f4000 	.word	0x408f4000
 8001ee0:	404e0000 	.word	0x404e0000
 8001ee4:	40700000 	.word	0x40700000
 8001ee8:	20000340 	.word	0x20000340
 8001eec:	200002d0 	.word	0x200002d0
 8001ef0:	200002f0 	.word	0x200002f0
 8001ef4:	200002f4 	.word	0x200002f4
 8001ef8:	cccccccd 	.word	0xcccccccd
 8001efc:	080099c8 	.word	0x080099c8
 8001f00:	20000000 	.word	0x20000000
 8001f04:	20000414 	.word	0x20000414

08001f08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b094      	sub	sp, #80	; 0x50
 8001f0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f0e:	f107 0320 	add.w	r3, r7, #32
 8001f12:	2230      	movs	r2, #48	; 0x30
 8001f14:	2100      	movs	r1, #0
 8001f16:	4618      	mov	r0, r3
 8001f18:	f005 fc51 	bl	80077be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f1c:	f107 030c 	add.w	r3, r7, #12
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	4b27      	ldr	r3, [pc, #156]	; (8001fd0 <SystemClock_Config+0xc8>)
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	4a26      	ldr	r2, [pc, #152]	; (8001fd0 <SystemClock_Config+0xc8>)
 8001f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3c:	4b24      	ldr	r3, [pc, #144]	; (8001fd0 <SystemClock_Config+0xc8>)
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f48:	2300      	movs	r3, #0
 8001f4a:	607b      	str	r3, [r7, #4]
 8001f4c:	4b21      	ldr	r3, [pc, #132]	; (8001fd4 <SystemClock_Config+0xcc>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a20      	ldr	r2, [pc, #128]	; (8001fd4 <SystemClock_Config+0xcc>)
 8001f52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	4b1e      	ldr	r3, [pc, #120]	; (8001fd4 <SystemClock_Config+0xcc>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f60:	607b      	str	r3, [r7, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f64:	2302      	movs	r3, #2
 8001f66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f6c:	2310      	movs	r3, #16
 8001f6e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f70:	2302      	movs	r3, #2
 8001f72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f74:	2300      	movs	r3, #0
 8001f76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f78:	2308      	movs	r3, #8
 8001f7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001f7c:	2364      	movs	r3, #100	; 0x64
 8001f7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f80:	2302      	movs	r3, #2
 8001f82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f84:	2304      	movs	r3, #4
 8001f86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f88:	f107 0320 	add.w	r3, r7, #32
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f002 f98b 	bl	80042a8 <HAL_RCC_OscConfig>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f98:	f000 fa68 	bl	800246c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f9c:	230f      	movs	r3, #15
 8001f9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001fb2:	f107 030c 	add.w	r3, r7, #12
 8001fb6:	2103      	movs	r1, #3
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f002 fbed 	bl	8004798 <HAL_RCC_ClockConfig>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001fc4:	f000 fa52 	bl	800246c <Error_Handler>
  }
}
 8001fc8:	bf00      	nop
 8001fca:	3750      	adds	r7, #80	; 0x50
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40007000 	.word	0x40007000

08001fd8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001fde:	463b      	mov	r3, r7
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001fea:	4b21      	ldr	r3, [pc, #132]	; (8002070 <MX_ADC1_Init+0x98>)
 8001fec:	4a21      	ldr	r2, [pc, #132]	; (8002074 <MX_ADC1_Init+0x9c>)
 8001fee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ff0:	4b1f      	ldr	r3, [pc, #124]	; (8002070 <MX_ADC1_Init+0x98>)
 8001ff2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ff6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	; (8002070 <MX_ADC1_Init+0x98>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001ffe:	4b1c      	ldr	r3, [pc, #112]	; (8002070 <MX_ADC1_Init+0x98>)
 8002000:	2200      	movs	r2, #0
 8002002:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002004:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <MX_ADC1_Init+0x98>)
 8002006:	2200      	movs	r2, #0
 8002008:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800200a:	4b19      	ldr	r3, [pc, #100]	; (8002070 <MX_ADC1_Init+0x98>)
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002012:	4b17      	ldr	r3, [pc, #92]	; (8002070 <MX_ADC1_Init+0x98>)
 8002014:	2200      	movs	r2, #0
 8002016:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002018:	4b15      	ldr	r3, [pc, #84]	; (8002070 <MX_ADC1_Init+0x98>)
 800201a:	4a17      	ldr	r2, [pc, #92]	; (8002078 <MX_ADC1_Init+0xa0>)
 800201c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800201e:	4b14      	ldr	r3, [pc, #80]	; (8002070 <MX_ADC1_Init+0x98>)
 8002020:	2200      	movs	r2, #0
 8002022:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002024:	4b12      	ldr	r3, [pc, #72]	; (8002070 <MX_ADC1_Init+0x98>)
 8002026:	2201      	movs	r2, #1
 8002028:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800202a:	4b11      	ldr	r3, [pc, #68]	; (8002070 <MX_ADC1_Init+0x98>)
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002032:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <MX_ADC1_Init+0x98>)
 8002034:	2201      	movs	r2, #1
 8002036:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002038:	480d      	ldr	r0, [pc, #52]	; (8002070 <MX_ADC1_Init+0x98>)
 800203a:	f000 fd75 	bl	8002b28 <HAL_ADC_Init>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002044:	f000 fa12 	bl	800246c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002048:	2301      	movs	r3, #1
 800204a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800204c:	2301      	movs	r3, #1
 800204e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002050:	2300      	movs	r3, #0
 8002052:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002054:	463b      	mov	r3, r7
 8002056:	4619      	mov	r1, r3
 8002058:	4805      	ldr	r0, [pc, #20]	; (8002070 <MX_ADC1_Init+0x98>)
 800205a:	f001 f823 	bl	80030a4 <HAL_ADC_ConfigChannel>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002064:	f000 fa02 	bl	800246c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002068:	bf00      	nop
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	200002f8 	.word	0x200002f8
 8002074:	40012000 	.word	0x40012000
 8002078:	0f000001 	.word	0x0f000001

0800207c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b096      	sub	sp, #88	; 0x58
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002082:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	605a      	str	r2, [r3, #4]
 800208c:	609a      	str	r2, [r3, #8]
 800208e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002090:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800209a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	605a      	str	r2, [r3, #4]
 80020a4:	609a      	str	r2, [r3, #8]
 80020a6:	60da      	str	r2, [r3, #12]
 80020a8:	611a      	str	r2, [r3, #16]
 80020aa:	615a      	str	r2, [r3, #20]
 80020ac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020ae:	1d3b      	adds	r3, r7, #4
 80020b0:	2220      	movs	r2, #32
 80020b2:	2100      	movs	r1, #0
 80020b4:	4618      	mov	r0, r3
 80020b6:	f005 fb82 	bl	80077be <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020ba:	4b3e      	ldr	r3, [pc, #248]	; (80021b4 <MX_TIM1_Init+0x138>)
 80020bc:	4a3e      	ldr	r2, [pc, #248]	; (80021b8 <MX_TIM1_Init+0x13c>)
 80020be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 80020c0:	4b3c      	ldr	r3, [pc, #240]	; (80021b4 <MX_TIM1_Init+0x138>)
 80020c2:	2203      	movs	r2, #3
 80020c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c6:	4b3b      	ldr	r3, [pc, #236]	; (80021b4 <MX_TIM1_Init+0x138>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80020cc:	4b39      	ldr	r3, [pc, #228]	; (80021b4 <MX_TIM1_Init+0x138>)
 80020ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020d4:	4b37      	ldr	r3, [pc, #220]	; (80021b4 <MX_TIM1_Init+0x138>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020da:	4b36      	ldr	r3, [pc, #216]	; (80021b4 <MX_TIM1_Init+0x138>)
 80020dc:	2200      	movs	r2, #0
 80020de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020e0:	4b34      	ldr	r3, [pc, #208]	; (80021b4 <MX_TIM1_Init+0x138>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020e6:	4833      	ldr	r0, [pc, #204]	; (80021b4 <MX_TIM1_Init+0x138>)
 80020e8:	f002 fd76 	bl	8004bd8 <HAL_TIM_Base_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80020f2:	f000 f9bb 	bl	800246c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020fa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002100:	4619      	mov	r1, r3
 8002102:	482c      	ldr	r0, [pc, #176]	; (80021b4 <MX_TIM1_Init+0x138>)
 8002104:	f003 f840 	bl	8005188 <HAL_TIM_ConfigClockSource>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800210e:	f000 f9ad 	bl	800246c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002112:	4828      	ldr	r0, [pc, #160]	; (80021b4 <MX_TIM1_Init+0x138>)
 8002114:	f002 fe6c 	bl	8004df0 <HAL_TIM_PWM_Init>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800211e:	f000 f9a5 	bl	800246c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002122:	2300      	movs	r3, #0
 8002124:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002126:	2300      	movs	r3, #0
 8002128:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800212a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800212e:	4619      	mov	r1, r3
 8002130:	4820      	ldr	r0, [pc, #128]	; (80021b4 <MX_TIM1_Init+0x138>)
 8002132:	f003 fbbd 	bl	80058b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800213c:	f000 f996 	bl	800246c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002140:	2360      	movs	r3, #96	; 0x60
 8002142:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002148:	2300      	movs	r3, #0
 800214a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800214c:	2300      	movs	r3, #0
 800214e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002150:	2304      	movs	r3, #4
 8002152:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002154:	2300      	movs	r3, #0
 8002156:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002158:	2300      	movs	r3, #0
 800215a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800215c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002160:	2200      	movs	r2, #0
 8002162:	4619      	mov	r1, r3
 8002164:	4813      	ldr	r0, [pc, #76]	; (80021b4 <MX_TIM1_Init+0x138>)
 8002166:	f002 ff4d 	bl	8005004 <HAL_TIM_PWM_ConfigChannel>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002170:	f000 f97c 	bl	800246c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002174:	2300      	movs	r3, #0
 8002176:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002178:	2300      	movs	r3, #0
 800217a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002180:	2300      	movs	r3, #0
 8002182:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002188:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800218c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800218e:	2300      	movs	r3, #0
 8002190:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002192:	1d3b      	adds	r3, r7, #4
 8002194:	4619      	mov	r1, r3
 8002196:	4807      	ldr	r0, [pc, #28]	; (80021b4 <MX_TIM1_Init+0x138>)
 8002198:	f003 fbf8 	bl	800598c <HAL_TIMEx_ConfigBreakDeadTime>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80021a2:	f000 f963 	bl	800246c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80021a6:	4803      	ldr	r0, [pc, #12]	; (80021b4 <MX_TIM1_Init+0x138>)
 80021a8:	f000 fa10 	bl	80025cc <HAL_TIM_MspPostInit>

}
 80021ac:	bf00      	nop
 80021ae:	3758      	adds	r7, #88	; 0x58
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20000340 	.word	0x20000340
 80021b8:	40010000 	.word	0x40010000

080021bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021c2:	f107 0308 	add.w	r3, r7, #8
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	605a      	str	r2, [r3, #4]
 80021cc:	609a      	str	r2, [r3, #8]
 80021ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021d0:	463b      	mov	r3, r7
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021d8:	4b1d      	ldr	r3, [pc, #116]	; (8002250 <MX_TIM2_Init+0x94>)
 80021da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80021e0:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <MX_TIM2_Init+0x94>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e6:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <MX_TIM2_Init+0x94>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80021ec:	4b18      	ldr	r3, [pc, #96]	; (8002250 <MX_TIM2_Init+0x94>)
 80021ee:	f04f 32ff 	mov.w	r2, #4294967295
 80021f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021f4:	4b16      	ldr	r3, [pc, #88]	; (8002250 <MX_TIM2_Init+0x94>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021fa:	4b15      	ldr	r3, [pc, #84]	; (8002250 <MX_TIM2_Init+0x94>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002200:	4813      	ldr	r0, [pc, #76]	; (8002250 <MX_TIM2_Init+0x94>)
 8002202:	f002 fce9 	bl	8004bd8 <HAL_TIM_Base_Init>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800220c:	f000 f92e 	bl	800246c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002210:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002214:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002216:	f107 0308 	add.w	r3, r7, #8
 800221a:	4619      	mov	r1, r3
 800221c:	480c      	ldr	r0, [pc, #48]	; (8002250 <MX_TIM2_Init+0x94>)
 800221e:	f002 ffb3 	bl	8005188 <HAL_TIM_ConfigClockSource>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002228:	f000 f920 	bl	800246c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800222c:	2300      	movs	r3, #0
 800222e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002230:	2300      	movs	r3, #0
 8002232:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002234:	463b      	mov	r3, r7
 8002236:	4619      	mov	r1, r3
 8002238:	4805      	ldr	r0, [pc, #20]	; (8002250 <MX_TIM2_Init+0x94>)
 800223a:	f003 fb39 	bl	80058b0 <HAL_TIMEx_MasterConfigSynchronization>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002244:	f000 f912 	bl	800246c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002248:	bf00      	nop
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20000388 	.word	0x20000388

08002254 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002258:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <MX_USART1_UART_Init+0x4c>)
 800225a:	4a12      	ldr	r2, [pc, #72]	; (80022a4 <MX_USART1_UART_Init+0x50>)
 800225c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <MX_USART1_UART_Init+0x4c>)
 8002260:	4a11      	ldr	r2, [pc, #68]	; (80022a8 <MX_USART1_UART_Init+0x54>)
 8002262:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002264:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <MX_USART1_UART_Init+0x4c>)
 8002266:	2200      	movs	r2, #0
 8002268:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 800226a:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <MX_USART1_UART_Init+0x4c>)
 800226c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002270:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8002272:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <MX_USART1_UART_Init+0x4c>)
 8002274:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002278:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 800227a:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <MX_USART1_UART_Init+0x4c>)
 800227c:	2204      	movs	r2, #4
 800227e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002280:	4b07      	ldr	r3, [pc, #28]	; (80022a0 <MX_USART1_UART_Init+0x4c>)
 8002282:	2200      	movs	r2, #0
 8002284:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002286:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <MX_USART1_UART_Init+0x4c>)
 8002288:	2200      	movs	r2, #0
 800228a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800228c:	4804      	ldr	r0, [pc, #16]	; (80022a0 <MX_USART1_UART_Init+0x4c>)
 800228e:	f003 fbcf 	bl	8005a30 <HAL_UART_Init>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8002298:	f000 f8e8 	bl	800246c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800229c:	bf00      	nop
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	200003d0 	.word	0x200003d0
 80022a4:	40011000 	.word	0x40011000
 80022a8:	000186a0 	.word	0x000186a0

080022ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022b0:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <MX_USART2_UART_Init+0x4c>)
 80022b2:	4a12      	ldr	r2, [pc, #72]	; (80022fc <MX_USART2_UART_Init+0x50>)
 80022b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <MX_USART2_UART_Init+0x4c>)
 80022b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022be:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <MX_USART2_UART_Init+0x4c>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022c4:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <MX_USART2_UART_Init+0x4c>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022ca:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <MX_USART2_UART_Init+0x4c>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022d0:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <MX_USART2_UART_Init+0x4c>)
 80022d2:	220c      	movs	r2, #12
 80022d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022d6:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <MX_USART2_UART_Init+0x4c>)
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022dc:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <MX_USART2_UART_Init+0x4c>)
 80022de:	2200      	movs	r2, #0
 80022e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022e2:	4805      	ldr	r0, [pc, #20]	; (80022f8 <MX_USART2_UART_Init+0x4c>)
 80022e4:	f003 fba4 	bl	8005a30 <HAL_UART_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80022ee:	f000 f8bd 	bl	800246c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000414 	.word	0x20000414
 80022fc:	40004400 	.word	0x40004400

08002300 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	607b      	str	r3, [r7, #4]
 800230a:	4b0c      	ldr	r3, [pc, #48]	; (800233c <MX_DMA_Init+0x3c>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	4a0b      	ldr	r2, [pc, #44]	; (800233c <MX_DMA_Init+0x3c>)
 8002310:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002314:	6313      	str	r3, [r2, #48]	; 0x30
 8002316:	4b09      	ldr	r3, [pc, #36]	; (800233c <MX_DMA_Init+0x3c>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800231e:	607b      	str	r3, [r7, #4]
 8002320:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002322:	2200      	movs	r2, #0
 8002324:	2100      	movs	r1, #0
 8002326:	203a      	movs	r0, #58	; 0x3a
 8002328:	f001 f9cf 	bl	80036ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800232c:	203a      	movs	r0, #58	; 0x3a
 800232e:	f001 f9e8 	bl	8003702 <HAL_NVIC_EnableIRQ>

}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40023800 	.word	0x40023800

08002340 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b08a      	sub	sp, #40	; 0x28
 8002344:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002346:	f107 0314 	add.w	r3, r7, #20
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	605a      	str	r2, [r3, #4]
 8002350:	609a      	str	r2, [r3, #8]
 8002352:	60da      	str	r2, [r3, #12]
 8002354:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	4b40      	ldr	r3, [pc, #256]	; (800245c <MX_GPIO_Init+0x11c>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	4a3f      	ldr	r2, [pc, #252]	; (800245c <MX_GPIO_Init+0x11c>)
 8002360:	f043 0304 	orr.w	r3, r3, #4
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
 8002366:	4b3d      	ldr	r3, [pc, #244]	; (800245c <MX_GPIO_Init+0x11c>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	4b39      	ldr	r3, [pc, #228]	; (800245c <MX_GPIO_Init+0x11c>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	4a38      	ldr	r2, [pc, #224]	; (800245c <MX_GPIO_Init+0x11c>)
 800237c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002380:	6313      	str	r3, [r2, #48]	; 0x30
 8002382:	4b36      	ldr	r3, [pc, #216]	; (800245c <MX_GPIO_Init+0x11c>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	4b32      	ldr	r3, [pc, #200]	; (800245c <MX_GPIO_Init+0x11c>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	4a31      	ldr	r2, [pc, #196]	; (800245c <MX_GPIO_Init+0x11c>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	6313      	str	r3, [r2, #48]	; 0x30
 800239e:	4b2f      	ldr	r3, [pc, #188]	; (800245c <MX_GPIO_Init+0x11c>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	60bb      	str	r3, [r7, #8]
 80023a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	607b      	str	r3, [r7, #4]
 80023ae:	4b2b      	ldr	r3, [pc, #172]	; (800245c <MX_GPIO_Init+0x11c>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	4a2a      	ldr	r2, [pc, #168]	; (800245c <MX_GPIO_Init+0x11c>)
 80023b4:	f043 0302 	orr.w	r3, r3, #2
 80023b8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ba:	4b28      	ldr	r3, [pc, #160]	; (800245c <MX_GPIO_Init+0x11c>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	607b      	str	r3, [r7, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor_Enable_GPIO_Port, Motor_Enable_Pin, GPIO_PIN_RESET);
 80023c6:	2200      	movs	r2, #0
 80023c8:	2102      	movs	r1, #2
 80023ca:	4825      	ldr	r0, [pc, #148]	; (8002460 <MX_GPIO_Init+0x120>)
 80023cc:	f001 ff52 	bl	8004274 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin Encoder_6_Pin */
  GPIO_InitStruct.Pin = B1_Pin|Encoder_6_Pin;
 80023d0:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 80023d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023de:	f107 0314 	add.w	r3, r7, #20
 80023e2:	4619      	mov	r1, r3
 80023e4:	481e      	ldr	r0, [pc, #120]	; (8002460 <MX_GPIO_Init+0x120>)
 80023e6:	f001 fda9 	bl	8003f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_Enable_Pin */
  GPIO_InitStruct.Pin = Motor_Enable_Pin;
 80023ea:	2302      	movs	r3, #2
 80023ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ee:	2301      	movs	r3, #1
 80023f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f6:	2300      	movs	r3, #0
 80023f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Motor_Enable_GPIO_Port, &GPIO_InitStruct);
 80023fa:	f107 0314 	add.w	r3, r7, #20
 80023fe:	4619      	mov	r1, r3
 8002400:	4817      	ldr	r0, [pc, #92]	; (8002460 <MX_GPIO_Init+0x120>)
 8002402:	f001 fd9b 	bl	8003f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : Encoder_2_Pin Encoder_3_Pin Encoder_4_Pin */
  GPIO_InitStruct.Pin = Encoder_2_Pin|Encoder_3_Pin|Encoder_4_Pin;
 8002406:	23e0      	movs	r3, #224	; 0xe0
 8002408:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800240a:	2300      	movs	r3, #0
 800240c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240e:	2300      	movs	r3, #0
 8002410:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002412:	f107 0314 	add.w	r3, r7, #20
 8002416:	4619      	mov	r1, r3
 8002418:	4812      	ldr	r0, [pc, #72]	; (8002464 <MX_GPIO_Init+0x124>)
 800241a:	f001 fd8f 	bl	8003f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : Encoder_7_Pin Encoder_5_Pin Encoder_1_Pin */
  GPIO_InitStruct.Pin = Encoder_7_Pin|Encoder_5_Pin|Encoder_1_Pin;
 800241e:	f44f 7314 	mov.w	r3, #592	; 0x250
 8002422:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002424:	2300      	movs	r3, #0
 8002426:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800242c:	f107 0314 	add.w	r3, r7, #20
 8002430:	4619      	mov	r1, r3
 8002432:	480d      	ldr	r0, [pc, #52]	; (8002468 <MX_GPIO_Init+0x128>)
 8002434:	f001 fd82 	bl	8003f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder_0_Pin */
  GPIO_InitStruct.Pin = Encoder_0_Pin;
 8002438:	f44f 7380 	mov.w	r3, #256	; 0x100
 800243c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800243e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002442:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Encoder_0_GPIO_Port, &GPIO_InitStruct);
 8002448:	f107 0314 	add.w	r3, r7, #20
 800244c:	4619      	mov	r1, r3
 800244e:	4806      	ldr	r0, [pc, #24]	; (8002468 <MX_GPIO_Init+0x128>)
 8002450:	f001 fd74 	bl	8003f3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002454:	bf00      	nop
 8002456:	3728      	adds	r7, #40	; 0x28
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40023800 	.word	0x40023800
 8002460:	40020800 	.word	0x40020800
 8002464:	40020000 	.word	0x40020000
 8002468:	40020400 	.word	0x40020400

0800246c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002470:	b672      	cpsid	i
}
 8002472:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002474:	e7fe      	b.n	8002474 <Error_Handler+0x8>
	...

08002478 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	607b      	str	r3, [r7, #4]
 8002482:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <HAL_MspInit+0x4c>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	4a0f      	ldr	r2, [pc, #60]	; (80024c4 <HAL_MspInit+0x4c>)
 8002488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800248c:	6453      	str	r3, [r2, #68]	; 0x44
 800248e:	4b0d      	ldr	r3, [pc, #52]	; (80024c4 <HAL_MspInit+0x4c>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002496:	607b      	str	r3, [r7, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	603b      	str	r3, [r7, #0]
 800249e:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <HAL_MspInit+0x4c>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	4a08      	ldr	r2, [pc, #32]	; (80024c4 <HAL_MspInit+0x4c>)
 80024a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a8:	6413      	str	r3, [r2, #64]	; 0x40
 80024aa:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <HAL_MspInit+0x4c>)
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b2:	603b      	str	r3, [r7, #0]
 80024b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80024b6:	2007      	movs	r0, #7
 80024b8:	f001 f8fc 	bl	80036b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024bc:	bf00      	nop
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40023800 	.word	0x40023800

080024c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08a      	sub	sp, #40	; 0x28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d0:	f107 0314 	add.w	r3, r7, #20
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a1b      	ldr	r2, [pc, #108]	; (8002554 <HAL_ADC_MspInit+0x8c>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d12f      	bne.n	800254a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	4b1a      	ldr	r3, [pc, #104]	; (8002558 <HAL_ADC_MspInit+0x90>)
 80024f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f2:	4a19      	ldr	r2, [pc, #100]	; (8002558 <HAL_ADC_MspInit+0x90>)
 80024f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f8:	6453      	str	r3, [r2, #68]	; 0x44
 80024fa:	4b17      	ldr	r3, [pc, #92]	; (8002558 <HAL_ADC_MspInit+0x90>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002502:	613b      	str	r3, [r7, #16]
 8002504:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	4b13      	ldr	r3, [pc, #76]	; (8002558 <HAL_ADC_MspInit+0x90>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	4a12      	ldr	r2, [pc, #72]	; (8002558 <HAL_ADC_MspInit+0x90>)
 8002510:	f043 0301 	orr.w	r3, r3, #1
 8002514:	6313      	str	r3, [r2, #48]	; 0x30
 8002516:	4b10      	ldr	r3, [pc, #64]	; (8002558 <HAL_ADC_MspInit+0x90>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Motor_Voltage_Pin;
 8002522:	2302      	movs	r3, #2
 8002524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002526:	2303      	movs	r3, #3
 8002528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Motor_Voltage_GPIO_Port, &GPIO_InitStruct);
 800252e:	f107 0314 	add.w	r3, r7, #20
 8002532:	4619      	mov	r1, r3
 8002534:	4809      	ldr	r0, [pc, #36]	; (800255c <HAL_ADC_MspInit+0x94>)
 8002536:	f001 fd01 	bl	8003f3c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800253a:	2200      	movs	r2, #0
 800253c:	2100      	movs	r1, #0
 800253e:	2012      	movs	r0, #18
 8002540:	f001 f8c3 	bl	80036ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002544:	2012      	movs	r0, #18
 8002546:	f001 f8dc 	bl	8003702 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800254a:	bf00      	nop
 800254c:	3728      	adds	r7, #40	; 0x28
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40012000 	.word	0x40012000
 8002558:	40023800 	.word	0x40023800
 800255c:	40020000 	.word	0x40020000

08002560 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a15      	ldr	r2, [pc, #84]	; (80025c4 <HAL_TIM_Base_MspInit+0x64>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d10e      	bne.n	8002590 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	4b14      	ldr	r3, [pc, #80]	; (80025c8 <HAL_TIM_Base_MspInit+0x68>)
 8002578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257a:	4a13      	ldr	r2, [pc, #76]	; (80025c8 <HAL_TIM_Base_MspInit+0x68>)
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	6453      	str	r3, [r2, #68]	; 0x44
 8002582:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <HAL_TIM_Base_MspInit+0x68>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800258e:	e012      	b.n	80025b6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002598:	d10d      	bne.n	80025b6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <HAL_TIM_Base_MspInit+0x68>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	4a09      	ldr	r2, [pc, #36]	; (80025c8 <HAL_TIM_Base_MspInit+0x68>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	6413      	str	r3, [r2, #64]	; 0x40
 80025aa:	4b07      	ldr	r3, [pc, #28]	; (80025c8 <HAL_TIM_Base_MspInit+0x68>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	60bb      	str	r3, [r7, #8]
 80025b4:	68bb      	ldr	r3, [r7, #8]
}
 80025b6:	bf00      	nop
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40010000 	.word	0x40010000
 80025c8:	40023800 	.word	0x40023800

080025cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d4:	f107 030c 	add.w	r3, r7, #12
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	60da      	str	r2, [r3, #12]
 80025e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a12      	ldr	r2, [pc, #72]	; (8002634 <HAL_TIM_MspPostInit+0x68>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d11e      	bne.n	800262c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	4b11      	ldr	r3, [pc, #68]	; (8002638 <HAL_TIM_MspPostInit+0x6c>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	4a10      	ldr	r2, [pc, #64]	; (8002638 <HAL_TIM_MspPostInit+0x6c>)
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	6313      	str	r3, [r2, #48]	; 0x30
 80025fe:	4b0e      	ldr	r3, [pc, #56]	; (8002638 <HAL_TIM_MspPostInit+0x6c>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800260a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800260e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002610:	2302      	movs	r3, #2
 8002612:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002618:	2300      	movs	r3, #0
 800261a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800261c:	2301      	movs	r3, #1
 800261e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002620:	f107 030c 	add.w	r3, r7, #12
 8002624:	4619      	mov	r1, r3
 8002626:	4805      	ldr	r0, [pc, #20]	; (800263c <HAL_TIM_MspPostInit+0x70>)
 8002628:	f001 fc88 	bl	8003f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800262c:	bf00      	nop
 800262e:	3720      	adds	r7, #32
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40010000 	.word	0x40010000
 8002638:	40023800 	.word	0x40023800
 800263c:	40020000 	.word	0x40020000

08002640 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08c      	sub	sp, #48	; 0x30
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002648:	f107 031c 	add.w	r3, r7, #28
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	60da      	str	r2, [r3, #12]
 8002656:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a4e      	ldr	r2, [pc, #312]	; (8002798 <HAL_UART_MspInit+0x158>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d15c      	bne.n	800271c <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	61bb      	str	r3, [r7, #24]
 8002666:	4b4d      	ldr	r3, [pc, #308]	; (800279c <HAL_UART_MspInit+0x15c>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	4a4c      	ldr	r2, [pc, #304]	; (800279c <HAL_UART_MspInit+0x15c>)
 800266c:	f043 0310 	orr.w	r3, r3, #16
 8002670:	6453      	str	r3, [r2, #68]	; 0x44
 8002672:	4b4a      	ldr	r3, [pc, #296]	; (800279c <HAL_UART_MspInit+0x15c>)
 8002674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002676:	f003 0310 	and.w	r3, r3, #16
 800267a:	61bb      	str	r3, [r7, #24]
 800267c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	4b46      	ldr	r3, [pc, #280]	; (800279c <HAL_UART_MspInit+0x15c>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	4a45      	ldr	r2, [pc, #276]	; (800279c <HAL_UART_MspInit+0x15c>)
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	6313      	str	r3, [r2, #48]	; 0x30
 800268e:	4b43      	ldr	r3, [pc, #268]	; (800279c <HAL_UART_MspInit+0x15c>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800269a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800269e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a0:	2302      	movs	r3, #2
 80026a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a8:	2303      	movs	r3, #3
 80026aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026ac:	2307      	movs	r3, #7
 80026ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b0:	f107 031c 	add.w	r3, r7, #28
 80026b4:	4619      	mov	r1, r3
 80026b6:	483a      	ldr	r0, [pc, #232]	; (80027a0 <HAL_UART_MspInit+0x160>)
 80026b8:	f001 fc40 	bl	8003f3c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80026bc:	4b39      	ldr	r3, [pc, #228]	; (80027a4 <HAL_UART_MspInit+0x164>)
 80026be:	4a3a      	ldr	r2, [pc, #232]	; (80027a8 <HAL_UART_MspInit+0x168>)
 80026c0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80026c2:	4b38      	ldr	r3, [pc, #224]	; (80027a4 <HAL_UART_MspInit+0x164>)
 80026c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026c8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026ca:	4b36      	ldr	r3, [pc, #216]	; (80027a4 <HAL_UART_MspInit+0x164>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026d0:	4b34      	ldr	r3, [pc, #208]	; (80027a4 <HAL_UART_MspInit+0x164>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026d6:	4b33      	ldr	r3, [pc, #204]	; (80027a4 <HAL_UART_MspInit+0x164>)
 80026d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026dc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026de:	4b31      	ldr	r3, [pc, #196]	; (80027a4 <HAL_UART_MspInit+0x164>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026e4:	4b2f      	ldr	r3, [pc, #188]	; (80027a4 <HAL_UART_MspInit+0x164>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80026ea:	4b2e      	ldr	r3, [pc, #184]	; (80027a4 <HAL_UART_MspInit+0x164>)
 80026ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026f0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026f2:	4b2c      	ldr	r3, [pc, #176]	; (80027a4 <HAL_UART_MspInit+0x164>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026f8:	4b2a      	ldr	r3, [pc, #168]	; (80027a4 <HAL_UART_MspInit+0x164>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80026fe:	4829      	ldr	r0, [pc, #164]	; (80027a4 <HAL_UART_MspInit+0x164>)
 8002700:	f001 f81a 	bl	8003738 <HAL_DMA_Init>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800270a:	f7ff feaf 	bl	800246c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a24      	ldr	r2, [pc, #144]	; (80027a4 <HAL_UART_MspInit+0x164>)
 8002712:	639a      	str	r2, [r3, #56]	; 0x38
 8002714:	4a23      	ldr	r2, [pc, #140]	; (80027a4 <HAL_UART_MspInit+0x164>)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800271a:	e038      	b.n	800278e <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a22      	ldr	r2, [pc, #136]	; (80027ac <HAL_UART_MspInit+0x16c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d133      	bne.n	800278e <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	613b      	str	r3, [r7, #16]
 800272a:	4b1c      	ldr	r3, [pc, #112]	; (800279c <HAL_UART_MspInit+0x15c>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	4a1b      	ldr	r2, [pc, #108]	; (800279c <HAL_UART_MspInit+0x15c>)
 8002730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002734:	6413      	str	r3, [r2, #64]	; 0x40
 8002736:	4b19      	ldr	r3, [pc, #100]	; (800279c <HAL_UART_MspInit+0x15c>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273e:	613b      	str	r3, [r7, #16]
 8002740:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	4b15      	ldr	r3, [pc, #84]	; (800279c <HAL_UART_MspInit+0x15c>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	4a14      	ldr	r2, [pc, #80]	; (800279c <HAL_UART_MspInit+0x15c>)
 800274c:	f043 0301 	orr.w	r3, r3, #1
 8002750:	6313      	str	r3, [r2, #48]	; 0x30
 8002752:	4b12      	ldr	r3, [pc, #72]	; (800279c <HAL_UART_MspInit+0x15c>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800275e:	230c      	movs	r3, #12
 8002760:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002762:	2302      	movs	r3, #2
 8002764:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002766:	2300      	movs	r3, #0
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800276a:	2303      	movs	r3, #3
 800276c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800276e:	2307      	movs	r3, #7
 8002770:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002772:	f107 031c 	add.w	r3, r7, #28
 8002776:	4619      	mov	r1, r3
 8002778:	4809      	ldr	r0, [pc, #36]	; (80027a0 <HAL_UART_MspInit+0x160>)
 800277a:	f001 fbdf 	bl	8003f3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800277e:	2200      	movs	r2, #0
 8002780:	2100      	movs	r1, #0
 8002782:	2026      	movs	r0, #38	; 0x26
 8002784:	f000 ffa1 	bl	80036ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002788:	2026      	movs	r0, #38	; 0x26
 800278a:	f000 ffba 	bl	8003702 <HAL_NVIC_EnableIRQ>
}
 800278e:	bf00      	nop
 8002790:	3730      	adds	r7, #48	; 0x30
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	40011000 	.word	0x40011000
 800279c:	40023800 	.word	0x40023800
 80027a0:	40020000 	.word	0x40020000
 80027a4:	20000458 	.word	0x20000458
 80027a8:	40026440 	.word	0x40026440
 80027ac:	40004400 	.word	0x40004400

080027b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027b4:	e7fe      	b.n	80027b4 <NMI_Handler+0x4>

080027b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027b6:	b480      	push	{r7}
 80027b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ba:	e7fe      	b.n	80027ba <HardFault_Handler+0x4>

080027bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027c0:	e7fe      	b.n	80027c0 <MemManage_Handler+0x4>

080027c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027c2:	b480      	push	{r7}
 80027c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027c6:	e7fe      	b.n	80027c6 <BusFault_Handler+0x4>

080027c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027cc:	e7fe      	b.n	80027cc <UsageFault_Handler+0x4>

080027ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027ce:	b480      	push	{r7}
 80027d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027e0:	bf00      	nop
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027ea:	b480      	push	{r7}
 80027ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027ee:	bf00      	nop
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027fc:	f000 f974 	bl	8002ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002800:	bf00      	nop
 8002802:	bd80      	pop	{r7, pc}

08002804 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002808:	4802      	ldr	r0, [pc, #8]	; (8002814 <ADC_IRQHandler+0x10>)
 800280a:	f000 fb10 	bl	8002e2e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800280e:	bf00      	nop
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	200002f8 	.word	0x200002f8

08002818 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800281c:	4802      	ldr	r0, [pc, #8]	; (8002828 <USART2_IRQHandler+0x10>)
 800281e:	f003 f9c9 	bl	8005bb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	20000414 	.word	0x20000414

0800282c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002830:	4802      	ldr	r0, [pc, #8]	; (800283c <DMA2_Stream2_IRQHandler+0x10>)
 8002832:	f001 f919 	bl	8003a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002836:	bf00      	nop
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	20000458 	.word	0x20000458

08002840 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  return 1;
 8002844:	2301      	movs	r3, #1
}
 8002846:	4618      	mov	r0, r3
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <_kill>:

int _kill(int pid, int sig)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800285a:	f005 f803 	bl	8007864 <__errno>
 800285e:	4603      	mov	r3, r0
 8002860:	2216      	movs	r2, #22
 8002862:	601a      	str	r2, [r3, #0]
  return -1;
 8002864:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002868:	4618      	mov	r0, r3
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <_exit>:

void _exit (int status)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002878:	f04f 31ff 	mov.w	r1, #4294967295
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f7ff ffe7 	bl	8002850 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002882:	e7fe      	b.n	8002882 <_exit+0x12>

08002884 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]
 8002894:	e00a      	b.n	80028ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002896:	f3af 8000 	nop.w
 800289a:	4601      	mov	r1, r0
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	1c5a      	adds	r2, r3, #1
 80028a0:	60ba      	str	r2, [r7, #8]
 80028a2:	b2ca      	uxtb	r2, r1
 80028a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	3301      	adds	r3, #1
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	dbf0      	blt.n	8002896 <_read+0x12>
  }

  return len;
 80028b4:	687b      	ldr	r3, [r7, #4]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b086      	sub	sp, #24
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	60f8      	str	r0, [r7, #12]
 80028c6:	60b9      	str	r1, [r7, #8]
 80028c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ca:	2300      	movs	r3, #0
 80028cc:	617b      	str	r3, [r7, #20]
 80028ce:	e009      	b.n	80028e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	1c5a      	adds	r2, r3, #1
 80028d4:	60ba      	str	r2, [r7, #8]
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	3301      	adds	r3, #1
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	dbf1      	blt.n	80028d0 <_write+0x12>
  }
  return len;
 80028ec:	687b      	ldr	r3, [r7, #4]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <_close>:

int _close(int file)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002902:	4618      	mov	r0, r3
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
 8002916:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800291e:	605a      	str	r2, [r3, #4]
  return 0;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <_isatty>:

int _isatty(int file)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002936:	2301      	movs	r3, #1
}
 8002938:	4618      	mov	r0, r3
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
	...

08002960 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002968:	4a14      	ldr	r2, [pc, #80]	; (80029bc <_sbrk+0x5c>)
 800296a:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <_sbrk+0x60>)
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002974:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <_sbrk+0x64>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d102      	bne.n	8002982 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800297c:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <_sbrk+0x64>)
 800297e:	4a12      	ldr	r2, [pc, #72]	; (80029c8 <_sbrk+0x68>)
 8002980:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002982:	4b10      	ldr	r3, [pc, #64]	; (80029c4 <_sbrk+0x64>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4413      	add	r3, r2
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	429a      	cmp	r2, r3
 800298e:	d207      	bcs.n	80029a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002990:	f004 ff68 	bl	8007864 <__errno>
 8002994:	4603      	mov	r3, r0
 8002996:	220c      	movs	r2, #12
 8002998:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800299a:	f04f 33ff 	mov.w	r3, #4294967295
 800299e:	e009      	b.n	80029b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029a0:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <_sbrk+0x64>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029a6:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <_sbrk+0x64>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4413      	add	r3, r2
 80029ae:	4a05      	ldr	r2, [pc, #20]	; (80029c4 <_sbrk+0x64>)
 80029b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029b2:	68fb      	ldr	r3, [r7, #12]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	20020000 	.word	0x20020000
 80029c0:	00000400 	.word	0x00000400
 80029c4:	200004b8 	.word	0x200004b8
 80029c8:	20000610 	.word	0x20000610

080029cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029d0:	4b06      	ldr	r3, [pc, #24]	; (80029ec <SystemInit+0x20>)
 80029d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d6:	4a05      	ldr	r2, [pc, #20]	; (80029ec <SystemInit+0x20>)
 80029d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029e0:	bf00      	nop
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	e000ed00 	.word	0xe000ed00

080029f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80029f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029f4:	480d      	ldr	r0, [pc, #52]	; (8002a2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029f6:	490e      	ldr	r1, [pc, #56]	; (8002a30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029f8:	4a0e      	ldr	r2, [pc, #56]	; (8002a34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029fc:	e002      	b.n	8002a04 <LoopCopyDataInit>

080029fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a02:	3304      	adds	r3, #4

08002a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a08:	d3f9      	bcc.n	80029fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a0a:	4a0b      	ldr	r2, [pc, #44]	; (8002a38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a0c:	4c0b      	ldr	r4, [pc, #44]	; (8002a3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a10:	e001      	b.n	8002a16 <LoopFillZerobss>

08002a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a14:	3204      	adds	r2, #4

08002a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a18:	d3fb      	bcc.n	8002a12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a1a:	f7ff ffd7 	bl	80029cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a1e:	f004 ff27 	bl	8007870 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a22:	f7fe fec9 	bl	80017b8 <main>
  bx  lr    
 8002a26:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a30:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002a34:	08009da4 	.word	0x08009da4
  ldr r2, =_sbss
 8002a38:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002a3c:	2000060c 	.word	0x2000060c

08002a40 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a40:	e7fe      	b.n	8002a40 <DMA1_Stream0_IRQHandler>
	...

08002a44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a48:	4b0e      	ldr	r3, [pc, #56]	; (8002a84 <HAL_Init+0x40>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a0d      	ldr	r2, [pc, #52]	; (8002a84 <HAL_Init+0x40>)
 8002a4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a54:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <HAL_Init+0x40>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a0a      	ldr	r2, [pc, #40]	; (8002a84 <HAL_Init+0x40>)
 8002a5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a60:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <HAL_Init+0x40>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a07      	ldr	r2, [pc, #28]	; (8002a84 <HAL_Init+0x40>)
 8002a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a6c:	2003      	movs	r0, #3
 8002a6e:	f000 fe21 	bl	80036b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a72:	2000      	movs	r0, #0
 8002a74:	f000 f808 	bl	8002a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a78:	f7ff fcfe 	bl	8002478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40023c00 	.word	0x40023c00

08002a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a90:	4b12      	ldr	r3, [pc, #72]	; (8002adc <HAL_InitTick+0x54>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <HAL_InitTick+0x58>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	4619      	mov	r1, r3
 8002a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 fe39 	bl	800371e <HAL_SYSTICK_Config>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e00e      	b.n	8002ad4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b0f      	cmp	r3, #15
 8002aba:	d80a      	bhi.n	8002ad2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002abc:	2200      	movs	r2, #0
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac4:	f000 fe01 	bl	80036ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ac8:	4a06      	ldr	r2, [pc, #24]	; (8002ae4 <HAL_InitTick+0x5c>)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	e000      	b.n	8002ad4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	20000004 	.word	0x20000004
 8002ae0:	2000000c 	.word	0x2000000c
 8002ae4:	20000008 	.word	0x20000008

08002ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002aec:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <HAL_IncTick+0x20>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	461a      	mov	r2, r3
 8002af2:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <HAL_IncTick+0x24>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4413      	add	r3, r2
 8002af8:	4a04      	ldr	r2, [pc, #16]	; (8002b0c <HAL_IncTick+0x24>)
 8002afa:	6013      	str	r3, [r2, #0]
}
 8002afc:	bf00      	nop
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	2000000c 	.word	0x2000000c
 8002b0c:	200004bc 	.word	0x200004bc

08002b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  return uwTick;
 8002b14:	4b03      	ldr	r3, [pc, #12]	; (8002b24 <HAL_GetTick+0x14>)
 8002b16:	681b      	ldr	r3, [r3, #0]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	200004bc 	.word	0x200004bc

08002b28 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b30:	2300      	movs	r3, #0
 8002b32:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e033      	b.n	8002ba6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d109      	bne.n	8002b5a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7ff fcbe 	bl	80024c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	f003 0310 	and.w	r3, r3, #16
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d118      	bne.n	8002b98 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b6e:	f023 0302 	bic.w	r3, r3, #2
 8002b72:	f043 0202 	orr.w	r2, r3, #2
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 fbc4 	bl	8003308 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	f023 0303 	bic.w	r3, r3, #3
 8002b8e:	f043 0201 	orr.w	r2, r3, #1
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	641a      	str	r2, [r3, #64]	; 0x40
 8002b96:	e001      	b.n	8002b9c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
	...

08002bb0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d101      	bne.n	8002bca <HAL_ADC_Start+0x1a>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e097      	b.n	8002cfa <HAL_ADC_Start+0x14a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d018      	beq.n	8002c12 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0201 	orr.w	r2, r2, #1
 8002bee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bf0:	4b45      	ldr	r3, [pc, #276]	; (8002d08 <HAL_ADC_Start+0x158>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a45      	ldr	r2, [pc, #276]	; (8002d0c <HAL_ADC_Start+0x15c>)
 8002bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfa:	0c9a      	lsrs	r2, r3, #18
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	4413      	add	r3, r2
 8002c02:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002c04:	e002      	b.n	8002c0c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f9      	bne.n	8002c06 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d15f      	bne.n	8002ce0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c28:	f023 0301 	bic.w	r3, r3, #1
 8002c2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d007      	beq.n	8002c52 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c4a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c5e:	d106      	bne.n	8002c6e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c64:	f023 0206 	bic.w	r2, r3, #6
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	645a      	str	r2, [r3, #68]	; 0x44
 8002c6c:	e002      	b.n	8002c74 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c7c:	4b24      	ldr	r3, [pc, #144]	; (8002d10 <HAL_ADC_Start+0x160>)
 8002c7e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002c88:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f003 031f 	and.w	r3, r3, #31
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10f      	bne.n	8002cb6 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d129      	bne.n	8002cf8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	e020      	b.n	8002cf8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a16      	ldr	r2, [pc, #88]	; (8002d14 <HAL_ADC_Start+0x164>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d11b      	bne.n	8002cf8 <HAL_ADC_Start+0x148>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d114      	bne.n	8002cf8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002cdc:	609a      	str	r2, [r3, #8]
 8002cde:	e00b      	b.n	8002cf8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	f043 0210 	orr.w	r2, r3, #16
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf0:	f043 0201 	orr.w	r2, r3, #1
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	20000004 	.word	0x20000004
 8002d0c:	431bde83 	.word	0x431bde83
 8002d10:	40012300 	.word	0x40012300
 8002d14:	40012000 	.word	0x40012000

08002d18 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d34:	d113      	bne.n	8002d5e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002d40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d44:	d10b      	bne.n	8002d5e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f043 0220 	orr.w	r2, r3, #32
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e063      	b.n	8002e26 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002d5e:	f7ff fed7 	bl	8002b10 <HAL_GetTick>
 8002d62:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d64:	e021      	b.n	8002daa <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6c:	d01d      	beq.n	8002daa <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d007      	beq.n	8002d84 <HAL_ADC_PollForConversion+0x6c>
 8002d74:	f7ff fecc 	bl	8002b10 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d212      	bcs.n	8002daa <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d00b      	beq.n	8002daa <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	f043 0204 	orr.w	r2, r3, #4
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e03d      	b.n	8002e26 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d1d6      	bne.n	8002d66 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f06f 0212 	mvn.w	r2, #18
 8002dc0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d123      	bne.n	8002e24 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d11f      	bne.n	8002e24 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d006      	beq.n	8002e00 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d111      	bne.n	8002e24 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d105      	bne.n	8002e24 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	f043 0201 	orr.w	r2, r3, #1
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b086      	sub	sp, #24
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	f003 0320 	and.w	r3, r3, #32
 8002e5c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d049      	beq.n	8002ef8 <HAL_ADC_IRQHandler+0xca>
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d046      	beq.n	8002ef8 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	f003 0310 	and.w	r3, r3, #16
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d105      	bne.n	8002e82 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d12b      	bne.n	8002ee8 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d127      	bne.n	8002ee8 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d006      	beq.n	8002eb4 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d119      	bne.n	8002ee8 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0220 	bic.w	r2, r2, #32
 8002ec2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d105      	bne.n	8002ee8 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	f043 0201 	orr.w	r2, r3, #1
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 f8bd 	bl	8003068 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f06f 0212 	mvn.w	r2, #18
 8002ef6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f003 0304 	and.w	r3, r3, #4
 8002efe:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f06:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d057      	beq.n	8002fbe <HAL_ADC_IRQHandler+0x190>
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d054      	beq.n	8002fbe <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	f003 0310 	and.w	r3, r3, #16
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d105      	bne.n	8002f2c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d139      	bne.n	8002fae <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f40:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d006      	beq.n	8002f56 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d12b      	bne.n	8002fae <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d124      	bne.n	8002fae <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d11d      	bne.n	8002fae <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d119      	bne.n	8002fae <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f88:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d105      	bne.n	8002fae <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	f043 0201 	orr.w	r2, r3, #1
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 faa6 	bl	8003500 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f06f 020c 	mvn.w	r2, #12
 8002fbc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fcc:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d017      	beq.n	8003004 <HAL_ADC_IRQHandler+0x1d6>
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d014      	beq.n	8003004 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d10d      	bne.n	8003004 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 f841 	bl	800307c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f06f 0201 	mvn.w	r2, #1
 8003002:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f003 0320 	and.w	r3, r3, #32
 800300a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003012:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d015      	beq.n	8003046 <HAL_ADC_IRQHandler+0x218>
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d012      	beq.n	8003046 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003024:	f043 0202 	orr.w	r2, r3, #2
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f06f 0220 	mvn.w	r2, #32
 8003034:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f82a 	bl	8003090 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f06f 0220 	mvn.w	r2, #32
 8003044:	601a      	str	r2, [r3, #0]
  }
}
 8003046:	bf00      	nop
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800304e:	b480      	push	{r7}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800305c:	4618      	mov	r0, r3
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d101      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x1c>
 80030bc:	2302      	movs	r3, #2
 80030be:	e113      	b.n	80032e8 <HAL_ADC_ConfigChannel+0x244>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b09      	cmp	r3, #9
 80030ce:	d925      	bls.n	800311c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68d9      	ldr	r1, [r3, #12]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	b29b      	uxth	r3, r3
 80030dc:	461a      	mov	r2, r3
 80030de:	4613      	mov	r3, r2
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	4413      	add	r3, r2
 80030e4:	3b1e      	subs	r3, #30
 80030e6:	2207      	movs	r2, #7
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	43da      	mvns	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	400a      	ands	r2, r1
 80030f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68d9      	ldr	r1, [r3, #12]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	b29b      	uxth	r3, r3
 8003106:	4618      	mov	r0, r3
 8003108:	4603      	mov	r3, r0
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	4403      	add	r3, r0
 800310e:	3b1e      	subs	r3, #30
 8003110:	409a      	lsls	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	60da      	str	r2, [r3, #12]
 800311a:	e022      	b.n	8003162 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6919      	ldr	r1, [r3, #16]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	b29b      	uxth	r3, r3
 8003128:	461a      	mov	r2, r3
 800312a:	4613      	mov	r3, r2
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	4413      	add	r3, r2
 8003130:	2207      	movs	r2, #7
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	43da      	mvns	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	400a      	ands	r2, r1
 800313e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6919      	ldr	r1, [r3, #16]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	b29b      	uxth	r3, r3
 8003150:	4618      	mov	r0, r3
 8003152:	4603      	mov	r3, r0
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	4403      	add	r3, r0
 8003158:	409a      	lsls	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b06      	cmp	r3, #6
 8003168:	d824      	bhi.n	80031b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	3b05      	subs	r3, #5
 800317c:	221f      	movs	r2, #31
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43da      	mvns	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	400a      	ands	r2, r1
 800318a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	b29b      	uxth	r3, r3
 8003198:	4618      	mov	r0, r3
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	3b05      	subs	r3, #5
 80031a6:	fa00 f203 	lsl.w	r2, r0, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	635a      	str	r2, [r3, #52]	; 0x34
 80031b2:	e04c      	b.n	800324e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b0c      	cmp	r3, #12
 80031ba:	d824      	bhi.n	8003206 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	3b23      	subs	r3, #35	; 0x23
 80031ce:	221f      	movs	r2, #31
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	43da      	mvns	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	400a      	ands	r2, r1
 80031dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	4618      	mov	r0, r3
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	3b23      	subs	r3, #35	; 0x23
 80031f8:	fa00 f203 	lsl.w	r2, r0, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	631a      	str	r2, [r3, #48]	; 0x30
 8003204:	e023      	b.n	800324e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4413      	add	r3, r2
 8003216:	3b41      	subs	r3, #65	; 0x41
 8003218:	221f      	movs	r2, #31
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	43da      	mvns	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	400a      	ands	r2, r1
 8003226:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	b29b      	uxth	r3, r3
 8003234:	4618      	mov	r0, r3
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	3b41      	subs	r3, #65	; 0x41
 8003242:	fa00 f203 	lsl.w	r2, r0, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800324e:	4b29      	ldr	r3, [pc, #164]	; (80032f4 <HAL_ADC_ConfigChannel+0x250>)
 8003250:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a28      	ldr	r2, [pc, #160]	; (80032f8 <HAL_ADC_ConfigChannel+0x254>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d10f      	bne.n	800327c <HAL_ADC_ConfigChannel+0x1d8>
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b12      	cmp	r3, #18
 8003262:	d10b      	bne.n	800327c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a1d      	ldr	r2, [pc, #116]	; (80032f8 <HAL_ADC_ConfigChannel+0x254>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d12b      	bne.n	80032de <HAL_ADC_ConfigChannel+0x23a>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a1c      	ldr	r2, [pc, #112]	; (80032fc <HAL_ADC_ConfigChannel+0x258>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d003      	beq.n	8003298 <HAL_ADC_ConfigChannel+0x1f4>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b11      	cmp	r3, #17
 8003296:	d122      	bne.n	80032de <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a11      	ldr	r2, [pc, #68]	; (80032fc <HAL_ADC_ConfigChannel+0x258>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d111      	bne.n	80032de <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032ba:	4b11      	ldr	r3, [pc, #68]	; (8003300 <HAL_ADC_ConfigChannel+0x25c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a11      	ldr	r2, [pc, #68]	; (8003304 <HAL_ADC_ConfigChannel+0x260>)
 80032c0:	fba2 2303 	umull	r2, r3, r2, r3
 80032c4:	0c9a      	lsrs	r2, r3, #18
 80032c6:	4613      	mov	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80032d0:	e002      	b.n	80032d8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	3b01      	subs	r3, #1
 80032d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f9      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	40012300 	.word	0x40012300
 80032f8:	40012000 	.word	0x40012000
 80032fc:	10000012 	.word	0x10000012
 8003300:	20000004 	.word	0x20000004
 8003304:	431bde83 	.word	0x431bde83

08003308 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003310:	4b79      	ldr	r3, [pc, #484]	; (80034f8 <ADC_Init+0x1f0>)
 8003312:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	431a      	orrs	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800333c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6859      	ldr	r1, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	021a      	lsls	r2, r3, #8
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003360:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6859      	ldr	r1, [r3, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003382:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6899      	ldr	r1, [r3, #8]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68da      	ldr	r2, [r3, #12]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	4a58      	ldr	r2, [pc, #352]	; (80034fc <ADC_Init+0x1f4>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d022      	beq.n	80033e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689a      	ldr	r2, [r3, #8]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6899      	ldr	r1, [r3, #8]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6899      	ldr	r1, [r3, #8]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	609a      	str	r2, [r3, #8]
 80033e4:	e00f      	b.n	8003406 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003404:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0202 	bic.w	r2, r2, #2
 8003414:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6899      	ldr	r1, [r3, #8]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	7e1b      	ldrb	r3, [r3, #24]
 8003420:	005a      	lsls	r2, r3, #1
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d01b      	beq.n	800346c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003442:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003452:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6859      	ldr	r1, [r3, #4]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	3b01      	subs	r3, #1
 8003460:	035a      	lsls	r2, r3, #13
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	605a      	str	r2, [r3, #4]
 800346a:	e007      	b.n	800347c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800347a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800348a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	3b01      	subs	r3, #1
 8003498:	051a      	lsls	r2, r3, #20
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80034b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6899      	ldr	r1, [r3, #8]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034be:	025a      	lsls	r2, r3, #9
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689a      	ldr	r2, [r3, #8]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6899      	ldr	r1, [r3, #8]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	029a      	lsls	r2, r3, #10
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	609a      	str	r2, [r3, #8]
}
 80034ec:	bf00      	nop
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	40012300 	.word	0x40012300
 80034fc:	0f000001 	.word	0x0f000001

08003500 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003524:	4b0c      	ldr	r3, [pc, #48]	; (8003558 <__NVIC_SetPriorityGrouping+0x44>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003530:	4013      	ands	r3, r2
 8003532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800353c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003546:	4a04      	ldr	r2, [pc, #16]	; (8003558 <__NVIC_SetPriorityGrouping+0x44>)
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	60d3      	str	r3, [r2, #12]
}
 800354c:	bf00      	nop
 800354e:	3714      	adds	r7, #20
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	e000ed00 	.word	0xe000ed00

0800355c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003560:	4b04      	ldr	r3, [pc, #16]	; (8003574 <__NVIC_GetPriorityGrouping+0x18>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	0a1b      	lsrs	r3, r3, #8
 8003566:	f003 0307 	and.w	r3, r3, #7
}
 800356a:	4618      	mov	r0, r3
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	e000ed00 	.word	0xe000ed00

08003578 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	4603      	mov	r3, r0
 8003580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003586:	2b00      	cmp	r3, #0
 8003588:	db0b      	blt.n	80035a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800358a:	79fb      	ldrb	r3, [r7, #7]
 800358c:	f003 021f 	and.w	r2, r3, #31
 8003590:	4907      	ldr	r1, [pc, #28]	; (80035b0 <__NVIC_EnableIRQ+0x38>)
 8003592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003596:	095b      	lsrs	r3, r3, #5
 8003598:	2001      	movs	r0, #1
 800359a:	fa00 f202 	lsl.w	r2, r0, r2
 800359e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	e000e100 	.word	0xe000e100

080035b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	6039      	str	r1, [r7, #0]
 80035be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	db0a      	blt.n	80035de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	490c      	ldr	r1, [pc, #48]	; (8003600 <__NVIC_SetPriority+0x4c>)
 80035ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d2:	0112      	lsls	r2, r2, #4
 80035d4:	b2d2      	uxtb	r2, r2
 80035d6:	440b      	add	r3, r1
 80035d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035dc:	e00a      	b.n	80035f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	4908      	ldr	r1, [pc, #32]	; (8003604 <__NVIC_SetPriority+0x50>)
 80035e4:	79fb      	ldrb	r3, [r7, #7]
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	3b04      	subs	r3, #4
 80035ec:	0112      	lsls	r2, r2, #4
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	440b      	add	r3, r1
 80035f2:	761a      	strb	r2, [r3, #24]
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	e000e100 	.word	0xe000e100
 8003604:	e000ed00 	.word	0xe000ed00

08003608 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003608:	b480      	push	{r7}
 800360a:	b089      	sub	sp, #36	; 0x24
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f003 0307 	and.w	r3, r3, #7
 800361a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f1c3 0307 	rsb	r3, r3, #7
 8003622:	2b04      	cmp	r3, #4
 8003624:	bf28      	it	cs
 8003626:	2304      	movcs	r3, #4
 8003628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	3304      	adds	r3, #4
 800362e:	2b06      	cmp	r3, #6
 8003630:	d902      	bls.n	8003638 <NVIC_EncodePriority+0x30>
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	3b03      	subs	r3, #3
 8003636:	e000      	b.n	800363a <NVIC_EncodePriority+0x32>
 8003638:	2300      	movs	r3, #0
 800363a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800363c:	f04f 32ff 	mov.w	r2, #4294967295
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	43da      	mvns	r2, r3
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	401a      	ands	r2, r3
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003650:	f04f 31ff 	mov.w	r1, #4294967295
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	fa01 f303 	lsl.w	r3, r1, r3
 800365a:	43d9      	mvns	r1, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003660:	4313      	orrs	r3, r2
         );
}
 8003662:	4618      	mov	r0, r3
 8003664:	3724      	adds	r7, #36	; 0x24
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
	...

08003670 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3b01      	subs	r3, #1
 800367c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003680:	d301      	bcc.n	8003686 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003682:	2301      	movs	r3, #1
 8003684:	e00f      	b.n	80036a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003686:	4a0a      	ldr	r2, [pc, #40]	; (80036b0 <SysTick_Config+0x40>)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3b01      	subs	r3, #1
 800368c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800368e:	210f      	movs	r1, #15
 8003690:	f04f 30ff 	mov.w	r0, #4294967295
 8003694:	f7ff ff8e 	bl	80035b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003698:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <SysTick_Config+0x40>)
 800369a:	2200      	movs	r2, #0
 800369c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800369e:	4b04      	ldr	r3, [pc, #16]	; (80036b0 <SysTick_Config+0x40>)
 80036a0:	2207      	movs	r2, #7
 80036a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	e000e010 	.word	0xe000e010

080036b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7ff ff29 	bl	8003514 <__NVIC_SetPriorityGrouping>
}
 80036c2:	bf00      	nop
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b086      	sub	sp, #24
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	4603      	mov	r3, r0
 80036d2:	60b9      	str	r1, [r7, #8]
 80036d4:	607a      	str	r2, [r7, #4]
 80036d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036d8:	2300      	movs	r3, #0
 80036da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036dc:	f7ff ff3e 	bl	800355c <__NVIC_GetPriorityGrouping>
 80036e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	68b9      	ldr	r1, [r7, #8]
 80036e6:	6978      	ldr	r0, [r7, #20]
 80036e8:	f7ff ff8e 	bl	8003608 <NVIC_EncodePriority>
 80036ec:	4602      	mov	r2, r0
 80036ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036f2:	4611      	mov	r1, r2
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff ff5d 	bl	80035b4 <__NVIC_SetPriority>
}
 80036fa:	bf00      	nop
 80036fc:	3718      	adds	r7, #24
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b082      	sub	sp, #8
 8003706:	af00      	add	r7, sp, #0
 8003708:	4603      	mov	r3, r0
 800370a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800370c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff ff31 	bl	8003578 <__NVIC_EnableIRQ>
}
 8003716:	bf00      	nop
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b082      	sub	sp, #8
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7ff ffa2 	bl	8003670 <SysTick_Config>
 800372c:	4603      	mov	r3, r0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003740:	2300      	movs	r3, #0
 8003742:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003744:	f7ff f9e4 	bl	8002b10 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e099      	b.n	8003888 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2202      	movs	r2, #2
 8003758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0201 	bic.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003774:	e00f      	b.n	8003796 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003776:	f7ff f9cb 	bl	8002b10 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b05      	cmp	r3, #5
 8003782:	d908      	bls.n	8003796 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2220      	movs	r2, #32
 8003788:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2203      	movs	r2, #3
 800378e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e078      	b.n	8003888 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1e8      	bne.n	8003776 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	4b38      	ldr	r3, [pc, #224]	; (8003890 <HAL_DMA_Init+0x158>)
 80037b0:	4013      	ands	r3, r2
 80037b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d107      	bne.n	8003800 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f8:	4313      	orrs	r3, r2
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f023 0307 	bic.w	r3, r3, #7
 8003816:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	4313      	orrs	r3, r2
 8003820:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	2b04      	cmp	r3, #4
 8003828:	d117      	bne.n	800385a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	4313      	orrs	r3, r2
 8003832:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00e      	beq.n	800385a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 fb01 	bl	8003e44 <DMA_CheckFifoParam>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d008      	beq.n	800385a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2240      	movs	r2, #64	; 0x40
 800384c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003856:	2301      	movs	r3, #1
 8003858:	e016      	b.n	8003888 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 fab8 	bl	8003dd8 <DMA_CalcBaseAndBitshift>
 8003868:	4603      	mov	r3, r0
 800386a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003870:	223f      	movs	r2, #63	; 0x3f
 8003872:	409a      	lsls	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3718      	adds	r7, #24
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	f010803f 	.word	0xf010803f

08003894 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
 80038a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038a2:	2300      	movs	r3, #0
 80038a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d101      	bne.n	80038ba <HAL_DMA_Start_IT+0x26>
 80038b6:	2302      	movs	r3, #2
 80038b8:	e040      	b.n	800393c <HAL_DMA_Start_IT+0xa8>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d12f      	bne.n	800392e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2202      	movs	r2, #2
 80038d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	68b9      	ldr	r1, [r7, #8]
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 fa4a 	bl	8003d7c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ec:	223f      	movs	r2, #63	; 0x3f
 80038ee:	409a      	lsls	r2, r3
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0216 	orr.w	r2, r2, #22
 8003902:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	2b00      	cmp	r3, #0
 800390a:	d007      	beq.n	800391c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0208 	orr.w	r2, r2, #8
 800391a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 0201 	orr.w	r2, r2, #1
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	e005      	b.n	800393a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003936:	2302      	movs	r3, #2
 8003938:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800393a:	7dfb      	ldrb	r3, [r7, #23]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3718      	adds	r7, #24
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003950:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003952:	f7ff f8dd 	bl	8002b10 <HAL_GetTick>
 8003956:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d008      	beq.n	8003976 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2280      	movs	r2, #128	; 0x80
 8003968:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e052      	b.n	8003a1c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 0216 	bic.w	r2, r2, #22
 8003984:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	695a      	ldr	r2, [r3, #20]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003994:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	2b00      	cmp	r3, #0
 800399c:	d103      	bne.n	80039a6 <HAL_DMA_Abort+0x62>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d007      	beq.n	80039b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 0208 	bic.w	r2, r2, #8
 80039b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0201 	bic.w	r2, r2, #1
 80039c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039c6:	e013      	b.n	80039f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039c8:	f7ff f8a2 	bl	8002b10 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b05      	cmp	r3, #5
 80039d4:	d90c      	bls.n	80039f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2220      	movs	r2, #32
 80039da:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2203      	movs	r2, #3
 80039e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e015      	b.n	8003a1c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1e4      	bne.n	80039c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a02:	223f      	movs	r2, #63	; 0x3f
 8003a04:	409a      	lsls	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d004      	beq.n	8003a42 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2280      	movs	r2, #128	; 0x80
 8003a3c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e00c      	b.n	8003a5c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2205      	movs	r2, #5
 8003a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0201 	bic.w	r2, r2, #1
 8003a58:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a74:	4b8e      	ldr	r3, [pc, #568]	; (8003cb0 <HAL_DMA_IRQHandler+0x248>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a8e      	ldr	r2, [pc, #568]	; (8003cb4 <HAL_DMA_IRQHandler+0x24c>)
 8003a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7e:	0a9b      	lsrs	r3, r3, #10
 8003a80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a92:	2208      	movs	r2, #8
 8003a94:	409a      	lsls	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d01a      	beq.n	8003ad4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d013      	beq.n	8003ad4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0204 	bic.w	r2, r2, #4
 8003aba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac0:	2208      	movs	r2, #8
 8003ac2:	409a      	lsls	r2, r3
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003acc:	f043 0201 	orr.w	r2, r3, #1
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad8:	2201      	movs	r2, #1
 8003ada:	409a      	lsls	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d012      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00b      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af6:	2201      	movs	r2, #1
 8003af8:	409a      	lsls	r2, r3
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b02:	f043 0202 	orr.w	r2, r3, #2
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0e:	2204      	movs	r2, #4
 8003b10:	409a      	lsls	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	4013      	ands	r3, r2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d012      	beq.n	8003b40 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00b      	beq.n	8003b40 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2c:	2204      	movs	r2, #4
 8003b2e:	409a      	lsls	r2, r3
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b38:	f043 0204 	orr.w	r2, r3, #4
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b44:	2210      	movs	r2, #16
 8003b46:	409a      	lsls	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d043      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0308 	and.w	r3, r3, #8
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d03c      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b62:	2210      	movs	r2, #16
 8003b64:	409a      	lsls	r2, r3
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d018      	beq.n	8003baa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d108      	bne.n	8003b98 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d024      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	4798      	blx	r3
 8003b96:	e01f      	b.n	8003bd8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d01b      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	4798      	blx	r3
 8003ba8:	e016      	b.n	8003bd8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d107      	bne.n	8003bc8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 0208 	bic.w	r2, r2, #8
 8003bc6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bdc:	2220      	movs	r2, #32
 8003bde:	409a      	lsls	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4013      	ands	r3, r2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 808f 	beq.w	8003d08 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0310 	and.w	r3, r3, #16
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 8087 	beq.w	8003d08 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfe:	2220      	movs	r2, #32
 8003c00:	409a      	lsls	r2, r3
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b05      	cmp	r3, #5
 8003c10:	d136      	bne.n	8003c80 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0216 	bic.w	r2, r2, #22
 8003c20:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695a      	ldr	r2, [r3, #20]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c30:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d103      	bne.n	8003c42 <HAL_DMA_IRQHandler+0x1da>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d007      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 0208 	bic.w	r2, r2, #8
 8003c50:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c56:	223f      	movs	r2, #63	; 0x3f
 8003c58:	409a      	lsls	r2, r3
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d07e      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	4798      	blx	r3
        }
        return;
 8003c7e:	e079      	b.n	8003d74 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d01d      	beq.n	8003cca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10d      	bne.n	8003cb8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d031      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	4798      	blx	r3
 8003cac:	e02c      	b.n	8003d08 <HAL_DMA_IRQHandler+0x2a0>
 8003cae:	bf00      	nop
 8003cb0:	20000004 	.word	0x20000004
 8003cb4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d023      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	4798      	blx	r3
 8003cc8:	e01e      	b.n	8003d08 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d10f      	bne.n	8003cf8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 0210 	bic.w	r2, r2, #16
 8003ce6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d032      	beq.n	8003d76 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d022      	beq.n	8003d62 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2205      	movs	r2, #5
 8003d20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 0201 	bic.w	r2, r2, #1
 8003d32:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	3301      	adds	r3, #1
 8003d38:	60bb      	str	r3, [r7, #8]
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d307      	bcc.n	8003d50 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1f2      	bne.n	8003d34 <HAL_DMA_IRQHandler+0x2cc>
 8003d4e:	e000      	b.n	8003d52 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003d50:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d005      	beq.n	8003d76 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	4798      	blx	r3
 8003d72:	e000      	b.n	8003d76 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003d74:	bf00      	nop
    }
  }
}
 8003d76:	3718      	adds	r7, #24
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
 8003d88:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d98:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	2b40      	cmp	r3, #64	; 0x40
 8003da8:	d108      	bne.n	8003dbc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003dba:	e007      	b.n	8003dcc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	60da      	str	r2, [r3, #12]
}
 8003dcc:	bf00      	nop
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	3b10      	subs	r3, #16
 8003de8:	4a14      	ldr	r2, [pc, #80]	; (8003e3c <DMA_CalcBaseAndBitshift+0x64>)
 8003dea:	fba2 2303 	umull	r2, r3, r2, r3
 8003dee:	091b      	lsrs	r3, r3, #4
 8003df0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003df2:	4a13      	ldr	r2, [pc, #76]	; (8003e40 <DMA_CalcBaseAndBitshift+0x68>)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4413      	add	r3, r2
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2b03      	cmp	r3, #3
 8003e04:	d909      	bls.n	8003e1a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e0e:	f023 0303 	bic.w	r3, r3, #3
 8003e12:	1d1a      	adds	r2, r3, #4
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	659a      	str	r2, [r3, #88]	; 0x58
 8003e18:	e007      	b.n	8003e2a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e22:	f023 0303 	bic.w	r3, r3, #3
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3714      	adds	r7, #20
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	aaaaaaab 	.word	0xaaaaaaab
 8003e40:	08009a18 	.word	0x08009a18

08003e44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d11f      	bne.n	8003e9e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	2b03      	cmp	r3, #3
 8003e62:	d856      	bhi.n	8003f12 <DMA_CheckFifoParam+0xce>
 8003e64:	a201      	add	r2, pc, #4	; (adr r2, 8003e6c <DMA_CheckFifoParam+0x28>)
 8003e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6a:	bf00      	nop
 8003e6c:	08003e7d 	.word	0x08003e7d
 8003e70:	08003e8f 	.word	0x08003e8f
 8003e74:	08003e7d 	.word	0x08003e7d
 8003e78:	08003f13 	.word	0x08003f13
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d046      	beq.n	8003f16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e8c:	e043      	b.n	8003f16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e96:	d140      	bne.n	8003f1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e9c:	e03d      	b.n	8003f1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ea6:	d121      	bne.n	8003eec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	2b03      	cmp	r3, #3
 8003eac:	d837      	bhi.n	8003f1e <DMA_CheckFifoParam+0xda>
 8003eae:	a201      	add	r2, pc, #4	; (adr r2, 8003eb4 <DMA_CheckFifoParam+0x70>)
 8003eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb4:	08003ec5 	.word	0x08003ec5
 8003eb8:	08003ecb 	.word	0x08003ecb
 8003ebc:	08003ec5 	.word	0x08003ec5
 8003ec0:	08003edd 	.word	0x08003edd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ec8:	e030      	b.n	8003f2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ece:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d025      	beq.n	8003f22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eda:	e022      	b.n	8003f22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ee4:	d11f      	bne.n	8003f26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003eea:	e01c      	b.n	8003f26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d903      	bls.n	8003efa <DMA_CheckFifoParam+0xb6>
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2b03      	cmp	r3, #3
 8003ef6:	d003      	beq.n	8003f00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ef8:	e018      	b.n	8003f2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	73fb      	strb	r3, [r7, #15]
      break;
 8003efe:	e015      	b.n	8003f2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00e      	beq.n	8003f2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f10:	e00b      	b.n	8003f2a <DMA_CheckFifoParam+0xe6>
      break;
 8003f12:	bf00      	nop
 8003f14:	e00a      	b.n	8003f2c <DMA_CheckFifoParam+0xe8>
      break;
 8003f16:	bf00      	nop
 8003f18:	e008      	b.n	8003f2c <DMA_CheckFifoParam+0xe8>
      break;
 8003f1a:	bf00      	nop
 8003f1c:	e006      	b.n	8003f2c <DMA_CheckFifoParam+0xe8>
      break;
 8003f1e:	bf00      	nop
 8003f20:	e004      	b.n	8003f2c <DMA_CheckFifoParam+0xe8>
      break;
 8003f22:	bf00      	nop
 8003f24:	e002      	b.n	8003f2c <DMA_CheckFifoParam+0xe8>
      break;   
 8003f26:	bf00      	nop
 8003f28:	e000      	b.n	8003f2c <DMA_CheckFifoParam+0xe8>
      break;
 8003f2a:	bf00      	nop
    }
  } 
  
  return status; 
 8003f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop

08003f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b089      	sub	sp, #36	; 0x24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f46:	2300      	movs	r3, #0
 8003f48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f52:	2300      	movs	r3, #0
 8003f54:	61fb      	str	r3, [r7, #28]
 8003f56:	e159      	b.n	800420c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f58:	2201      	movs	r2, #1
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	f040 8148 	bne.w	8004206 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f003 0303 	and.w	r3, r3, #3
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d005      	beq.n	8003f8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d130      	bne.n	8003ff0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	2203      	movs	r2, #3
 8003f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9e:	43db      	mvns	r3, r3
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	68da      	ldr	r2, [r3, #12]
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	091b      	lsrs	r3, r3, #4
 8003fda:	f003 0201 	and.w	r2, r3, #1
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f003 0303 	and.w	r3, r3, #3
 8003ff8:	2b03      	cmp	r3, #3
 8003ffa:	d017      	beq.n	800402c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	2203      	movs	r2, #3
 8004008:	fa02 f303 	lsl.w	r3, r2, r3
 800400c:	43db      	mvns	r3, r3
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	4013      	ands	r3, r2
 8004012:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	689a      	ldr	r2, [r3, #8]
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	4313      	orrs	r3, r2
 8004024:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f003 0303 	and.w	r3, r3, #3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d123      	bne.n	8004080 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	08da      	lsrs	r2, r3, #3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3208      	adds	r2, #8
 8004040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004044:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	220f      	movs	r2, #15
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	43db      	mvns	r3, r3
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	4013      	ands	r3, r2
 800405a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	691a      	ldr	r2, [r3, #16]
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	f003 0307 	and.w	r3, r3, #7
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	4313      	orrs	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	08da      	lsrs	r2, r3, #3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	3208      	adds	r2, #8
 800407a:	69b9      	ldr	r1, [r7, #24]
 800407c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	2203      	movs	r2, #3
 800408c:	fa02 f303 	lsl.w	r3, r2, r3
 8004090:	43db      	mvns	r3, r3
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	4013      	ands	r3, r2
 8004096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f003 0203 	and.w	r2, r3, #3
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 80a2 	beq.w	8004206 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040c2:	2300      	movs	r3, #0
 80040c4:	60fb      	str	r3, [r7, #12]
 80040c6:	4b57      	ldr	r3, [pc, #348]	; (8004224 <HAL_GPIO_Init+0x2e8>)
 80040c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ca:	4a56      	ldr	r2, [pc, #344]	; (8004224 <HAL_GPIO_Init+0x2e8>)
 80040cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040d0:	6453      	str	r3, [r2, #68]	; 0x44
 80040d2:	4b54      	ldr	r3, [pc, #336]	; (8004224 <HAL_GPIO_Init+0x2e8>)
 80040d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040de:	4a52      	ldr	r2, [pc, #328]	; (8004228 <HAL_GPIO_Init+0x2ec>)
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	089b      	lsrs	r3, r3, #2
 80040e4:	3302      	adds	r3, #2
 80040e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	f003 0303 	and.w	r3, r3, #3
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	220f      	movs	r2, #15
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	43db      	mvns	r3, r3
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	4013      	ands	r3, r2
 8004100:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a49      	ldr	r2, [pc, #292]	; (800422c <HAL_GPIO_Init+0x2f0>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d019      	beq.n	800413e <HAL_GPIO_Init+0x202>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a48      	ldr	r2, [pc, #288]	; (8004230 <HAL_GPIO_Init+0x2f4>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d013      	beq.n	800413a <HAL_GPIO_Init+0x1fe>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a47      	ldr	r2, [pc, #284]	; (8004234 <HAL_GPIO_Init+0x2f8>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d00d      	beq.n	8004136 <HAL_GPIO_Init+0x1fa>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a46      	ldr	r2, [pc, #280]	; (8004238 <HAL_GPIO_Init+0x2fc>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d007      	beq.n	8004132 <HAL_GPIO_Init+0x1f6>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a45      	ldr	r2, [pc, #276]	; (800423c <HAL_GPIO_Init+0x300>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d101      	bne.n	800412e <HAL_GPIO_Init+0x1f2>
 800412a:	2304      	movs	r3, #4
 800412c:	e008      	b.n	8004140 <HAL_GPIO_Init+0x204>
 800412e:	2307      	movs	r3, #7
 8004130:	e006      	b.n	8004140 <HAL_GPIO_Init+0x204>
 8004132:	2303      	movs	r3, #3
 8004134:	e004      	b.n	8004140 <HAL_GPIO_Init+0x204>
 8004136:	2302      	movs	r3, #2
 8004138:	e002      	b.n	8004140 <HAL_GPIO_Init+0x204>
 800413a:	2301      	movs	r3, #1
 800413c:	e000      	b.n	8004140 <HAL_GPIO_Init+0x204>
 800413e:	2300      	movs	r3, #0
 8004140:	69fa      	ldr	r2, [r7, #28]
 8004142:	f002 0203 	and.w	r2, r2, #3
 8004146:	0092      	lsls	r2, r2, #2
 8004148:	4093      	lsls	r3, r2
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	4313      	orrs	r3, r2
 800414e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004150:	4935      	ldr	r1, [pc, #212]	; (8004228 <HAL_GPIO_Init+0x2ec>)
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	089b      	lsrs	r3, r3, #2
 8004156:	3302      	adds	r3, #2
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800415e:	4b38      	ldr	r3, [pc, #224]	; (8004240 <HAL_GPIO_Init+0x304>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	43db      	mvns	r3, r3
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	4013      	ands	r3, r2
 800416c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	4313      	orrs	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004182:	4a2f      	ldr	r2, [pc, #188]	; (8004240 <HAL_GPIO_Init+0x304>)
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004188:	4b2d      	ldr	r3, [pc, #180]	; (8004240 <HAL_GPIO_Init+0x304>)
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	43db      	mvns	r3, r3
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	4013      	ands	r3, r2
 8004196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d003      	beq.n	80041ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041ac:	4a24      	ldr	r2, [pc, #144]	; (8004240 <HAL_GPIO_Init+0x304>)
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041b2:	4b23      	ldr	r3, [pc, #140]	; (8004240 <HAL_GPIO_Init+0x304>)
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	43db      	mvns	r3, r3
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	4013      	ands	r3, r2
 80041c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041d6:	4a1a      	ldr	r2, [pc, #104]	; (8004240 <HAL_GPIO_Init+0x304>)
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041dc:	4b18      	ldr	r3, [pc, #96]	; (8004240 <HAL_GPIO_Init+0x304>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	43db      	mvns	r3, r3
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	4013      	ands	r3, r2
 80041ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d003      	beq.n	8004200 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004200:	4a0f      	ldr	r2, [pc, #60]	; (8004240 <HAL_GPIO_Init+0x304>)
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	3301      	adds	r3, #1
 800420a:	61fb      	str	r3, [r7, #28]
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	2b0f      	cmp	r3, #15
 8004210:	f67f aea2 	bls.w	8003f58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004214:	bf00      	nop
 8004216:	bf00      	nop
 8004218:	3724      	adds	r7, #36	; 0x24
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	40023800 	.word	0x40023800
 8004228:	40013800 	.word	0x40013800
 800422c:	40020000 	.word	0x40020000
 8004230:	40020400 	.word	0x40020400
 8004234:	40020800 	.word	0x40020800
 8004238:	40020c00 	.word	0x40020c00
 800423c:	40021000 	.word	0x40021000
 8004240:	40013c00 	.word	0x40013c00

08004244 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	460b      	mov	r3, r1
 800424e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	691a      	ldr	r2, [r3, #16]
 8004254:	887b      	ldrh	r3, [r7, #2]
 8004256:	4013      	ands	r3, r2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d002      	beq.n	8004262 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800425c:	2301      	movs	r3, #1
 800425e:	73fb      	strb	r3, [r7, #15]
 8004260:	e001      	b.n	8004266 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004262:	2300      	movs	r3, #0
 8004264:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004266:	7bfb      	ldrb	r3, [r7, #15]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	460b      	mov	r3, r1
 800427e:	807b      	strh	r3, [r7, #2]
 8004280:	4613      	mov	r3, r2
 8004282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004284:	787b      	ldrb	r3, [r7, #1]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800428a:	887a      	ldrh	r2, [r7, #2]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004290:	e003      	b.n	800429a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004292:	887b      	ldrh	r3, [r7, #2]
 8004294:	041a      	lsls	r2, r3, #16
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	619a      	str	r2, [r3, #24]
}
 800429a:	bf00      	nop
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
	...

080042a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e267      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d075      	beq.n	80043b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042c6:	4b88      	ldr	r3, [pc, #544]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 030c 	and.w	r3, r3, #12
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d00c      	beq.n	80042ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042d2:	4b85      	ldr	r3, [pc, #532]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042da:	2b08      	cmp	r3, #8
 80042dc:	d112      	bne.n	8004304 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042de:	4b82      	ldr	r3, [pc, #520]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042ea:	d10b      	bne.n	8004304 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ec:	4b7e      	ldr	r3, [pc, #504]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d05b      	beq.n	80043b0 <HAL_RCC_OscConfig+0x108>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d157      	bne.n	80043b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e242      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800430c:	d106      	bne.n	800431c <HAL_RCC_OscConfig+0x74>
 800430e:	4b76      	ldr	r3, [pc, #472]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a75      	ldr	r2, [pc, #468]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004318:	6013      	str	r3, [r2, #0]
 800431a:	e01d      	b.n	8004358 <HAL_RCC_OscConfig+0xb0>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004324:	d10c      	bne.n	8004340 <HAL_RCC_OscConfig+0x98>
 8004326:	4b70      	ldr	r3, [pc, #448]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a6f      	ldr	r2, [pc, #444]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 800432c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	4b6d      	ldr	r3, [pc, #436]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a6c      	ldr	r2, [pc, #432]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800433c:	6013      	str	r3, [r2, #0]
 800433e:	e00b      	b.n	8004358 <HAL_RCC_OscConfig+0xb0>
 8004340:	4b69      	ldr	r3, [pc, #420]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a68      	ldr	r2, [pc, #416]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800434a:	6013      	str	r3, [r2, #0]
 800434c:	4b66      	ldr	r3, [pc, #408]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a65      	ldr	r2, [pc, #404]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d013      	beq.n	8004388 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004360:	f7fe fbd6 	bl	8002b10 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004368:	f7fe fbd2 	bl	8002b10 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b64      	cmp	r3, #100	; 0x64
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e207      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800437a:	4b5b      	ldr	r3, [pc, #364]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0f0      	beq.n	8004368 <HAL_RCC_OscConfig+0xc0>
 8004386:	e014      	b.n	80043b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004388:	f7fe fbc2 	bl	8002b10 <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004390:	f7fe fbbe 	bl	8002b10 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b64      	cmp	r3, #100	; 0x64
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e1f3      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043a2:	4b51      	ldr	r3, [pc, #324]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1f0      	bne.n	8004390 <HAL_RCC_OscConfig+0xe8>
 80043ae:	e000      	b.n	80043b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d063      	beq.n	8004486 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043be:	4b4a      	ldr	r3, [pc, #296]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 030c 	and.w	r3, r3, #12
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00b      	beq.n	80043e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ca:	4b47      	ldr	r3, [pc, #284]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043d2:	2b08      	cmp	r3, #8
 80043d4:	d11c      	bne.n	8004410 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043d6:	4b44      	ldr	r3, [pc, #272]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d116      	bne.n	8004410 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043e2:	4b41      	ldr	r3, [pc, #260]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d005      	beq.n	80043fa <HAL_RCC_OscConfig+0x152>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d001      	beq.n	80043fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e1c7      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043fa:	4b3b      	ldr	r3, [pc, #236]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	4937      	ldr	r1, [pc, #220]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 800440a:	4313      	orrs	r3, r2
 800440c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800440e:	e03a      	b.n	8004486 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d020      	beq.n	800445a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004418:	4b34      	ldr	r3, [pc, #208]	; (80044ec <HAL_RCC_OscConfig+0x244>)
 800441a:	2201      	movs	r2, #1
 800441c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800441e:	f7fe fb77 	bl	8002b10 <HAL_GetTick>
 8004422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004424:	e008      	b.n	8004438 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004426:	f7fe fb73 	bl	8002b10 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d901      	bls.n	8004438 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e1a8      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004438:	4b2b      	ldr	r3, [pc, #172]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0f0      	beq.n	8004426 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004444:	4b28      	ldr	r3, [pc, #160]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	4925      	ldr	r1, [pc, #148]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004454:	4313      	orrs	r3, r2
 8004456:	600b      	str	r3, [r1, #0]
 8004458:	e015      	b.n	8004486 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800445a:	4b24      	ldr	r3, [pc, #144]	; (80044ec <HAL_RCC_OscConfig+0x244>)
 800445c:	2200      	movs	r2, #0
 800445e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004460:	f7fe fb56 	bl	8002b10 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004468:	f7fe fb52 	bl	8002b10 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e187      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800447a:	4b1b      	ldr	r3, [pc, #108]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1f0      	bne.n	8004468 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0308 	and.w	r3, r3, #8
 800448e:	2b00      	cmp	r3, #0
 8004490:	d036      	beq.n	8004500 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d016      	beq.n	80044c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800449a:	4b15      	ldr	r3, [pc, #84]	; (80044f0 <HAL_RCC_OscConfig+0x248>)
 800449c:	2201      	movs	r2, #1
 800449e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a0:	f7fe fb36 	bl	8002b10 <HAL_GetTick>
 80044a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044a6:	e008      	b.n	80044ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044a8:	f7fe fb32 	bl	8002b10 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e167      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ba:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 80044bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0f0      	beq.n	80044a8 <HAL_RCC_OscConfig+0x200>
 80044c6:	e01b      	b.n	8004500 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044c8:	4b09      	ldr	r3, [pc, #36]	; (80044f0 <HAL_RCC_OscConfig+0x248>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ce:	f7fe fb1f 	bl	8002b10 <HAL_GetTick>
 80044d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044d4:	e00e      	b.n	80044f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044d6:	f7fe fb1b 	bl	8002b10 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d907      	bls.n	80044f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e150      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
 80044e8:	40023800 	.word	0x40023800
 80044ec:	42470000 	.word	0x42470000
 80044f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044f4:	4b88      	ldr	r3, [pc, #544]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 80044f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1ea      	bne.n	80044d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 8097 	beq.w	800463c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800450e:	2300      	movs	r3, #0
 8004510:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004512:	4b81      	ldr	r3, [pc, #516]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10f      	bne.n	800453e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800451e:	2300      	movs	r3, #0
 8004520:	60bb      	str	r3, [r7, #8]
 8004522:	4b7d      	ldr	r3, [pc, #500]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	4a7c      	ldr	r2, [pc, #496]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 8004528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800452c:	6413      	str	r3, [r2, #64]	; 0x40
 800452e:	4b7a      	ldr	r3, [pc, #488]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004536:	60bb      	str	r3, [r7, #8]
 8004538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800453a:	2301      	movs	r3, #1
 800453c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800453e:	4b77      	ldr	r3, [pc, #476]	; (800471c <HAL_RCC_OscConfig+0x474>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004546:	2b00      	cmp	r3, #0
 8004548:	d118      	bne.n	800457c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800454a:	4b74      	ldr	r3, [pc, #464]	; (800471c <HAL_RCC_OscConfig+0x474>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a73      	ldr	r2, [pc, #460]	; (800471c <HAL_RCC_OscConfig+0x474>)
 8004550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004556:	f7fe fadb 	bl	8002b10 <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800455c:	e008      	b.n	8004570 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800455e:	f7fe fad7 	bl	8002b10 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e10c      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004570:	4b6a      	ldr	r3, [pc, #424]	; (800471c <HAL_RCC_OscConfig+0x474>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0f0      	beq.n	800455e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d106      	bne.n	8004592 <HAL_RCC_OscConfig+0x2ea>
 8004584:	4b64      	ldr	r3, [pc, #400]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 8004586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004588:	4a63      	ldr	r2, [pc, #396]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 800458a:	f043 0301 	orr.w	r3, r3, #1
 800458e:	6713      	str	r3, [r2, #112]	; 0x70
 8004590:	e01c      	b.n	80045cc <HAL_RCC_OscConfig+0x324>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	2b05      	cmp	r3, #5
 8004598:	d10c      	bne.n	80045b4 <HAL_RCC_OscConfig+0x30c>
 800459a:	4b5f      	ldr	r3, [pc, #380]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 800459c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459e:	4a5e      	ldr	r2, [pc, #376]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 80045a0:	f043 0304 	orr.w	r3, r3, #4
 80045a4:	6713      	str	r3, [r2, #112]	; 0x70
 80045a6:	4b5c      	ldr	r3, [pc, #368]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 80045a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045aa:	4a5b      	ldr	r2, [pc, #364]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 80045ac:	f043 0301 	orr.w	r3, r3, #1
 80045b0:	6713      	str	r3, [r2, #112]	; 0x70
 80045b2:	e00b      	b.n	80045cc <HAL_RCC_OscConfig+0x324>
 80045b4:	4b58      	ldr	r3, [pc, #352]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 80045b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b8:	4a57      	ldr	r2, [pc, #348]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 80045ba:	f023 0301 	bic.w	r3, r3, #1
 80045be:	6713      	str	r3, [r2, #112]	; 0x70
 80045c0:	4b55      	ldr	r3, [pc, #340]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 80045c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c4:	4a54      	ldr	r2, [pc, #336]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 80045c6:	f023 0304 	bic.w	r3, r3, #4
 80045ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d015      	beq.n	8004600 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d4:	f7fe fa9c 	bl	8002b10 <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045da:	e00a      	b.n	80045f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045dc:	f7fe fa98 	bl	8002b10 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e0cb      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f2:	4b49      	ldr	r3, [pc, #292]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 80045f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0ee      	beq.n	80045dc <HAL_RCC_OscConfig+0x334>
 80045fe:	e014      	b.n	800462a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004600:	f7fe fa86 	bl	8002b10 <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004606:	e00a      	b.n	800461e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004608:	f7fe fa82 	bl	8002b10 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	f241 3288 	movw	r2, #5000	; 0x1388
 8004616:	4293      	cmp	r3, r2
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e0b5      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800461e:	4b3e      	ldr	r3, [pc, #248]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 8004620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1ee      	bne.n	8004608 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800462a:	7dfb      	ldrb	r3, [r7, #23]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d105      	bne.n	800463c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004630:	4b39      	ldr	r3, [pc, #228]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 8004632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004634:	4a38      	ldr	r2, [pc, #224]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 8004636:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800463a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 80a1 	beq.w	8004788 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004646:	4b34      	ldr	r3, [pc, #208]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 030c 	and.w	r3, r3, #12
 800464e:	2b08      	cmp	r3, #8
 8004650:	d05c      	beq.n	800470c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	2b02      	cmp	r3, #2
 8004658:	d141      	bne.n	80046de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800465a:	4b31      	ldr	r3, [pc, #196]	; (8004720 <HAL_RCC_OscConfig+0x478>)
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004660:	f7fe fa56 	bl	8002b10 <HAL_GetTick>
 8004664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004666:	e008      	b.n	800467a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004668:	f7fe fa52 	bl	8002b10 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b02      	cmp	r3, #2
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e087      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800467a:	4b27      	ldr	r3, [pc, #156]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1f0      	bne.n	8004668 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	69da      	ldr	r2, [r3, #28]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	431a      	orrs	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	019b      	lsls	r3, r3, #6
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469c:	085b      	lsrs	r3, r3, #1
 800469e:	3b01      	subs	r3, #1
 80046a0:	041b      	lsls	r3, r3, #16
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a8:	061b      	lsls	r3, r3, #24
 80046aa:	491b      	ldr	r1, [pc, #108]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046b0:	4b1b      	ldr	r3, [pc, #108]	; (8004720 <HAL_RCC_OscConfig+0x478>)
 80046b2:	2201      	movs	r2, #1
 80046b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b6:	f7fe fa2b 	bl	8002b10 <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046bc:	e008      	b.n	80046d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046be:	f7fe fa27 	bl	8002b10 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d901      	bls.n	80046d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e05c      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046d0:	4b11      	ldr	r3, [pc, #68]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d0f0      	beq.n	80046be <HAL_RCC_OscConfig+0x416>
 80046dc:	e054      	b.n	8004788 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046de:	4b10      	ldr	r3, [pc, #64]	; (8004720 <HAL_RCC_OscConfig+0x478>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e4:	f7fe fa14 	bl	8002b10 <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ec:	f7fe fa10 	bl	8002b10 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e045      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fe:	4b06      	ldr	r3, [pc, #24]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1f0      	bne.n	80046ec <HAL_RCC_OscConfig+0x444>
 800470a:	e03d      	b.n	8004788 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d107      	bne.n	8004724 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e038      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
 8004718:	40023800 	.word	0x40023800
 800471c:	40007000 	.word	0x40007000
 8004720:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004724:	4b1b      	ldr	r3, [pc, #108]	; (8004794 <HAL_RCC_OscConfig+0x4ec>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d028      	beq.n	8004784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800473c:	429a      	cmp	r2, r3
 800473e:	d121      	bne.n	8004784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800474a:	429a      	cmp	r2, r3
 800474c:	d11a      	bne.n	8004784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004754:	4013      	ands	r3, r2
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800475a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800475c:	4293      	cmp	r3, r2
 800475e:	d111      	bne.n	8004784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476a:	085b      	lsrs	r3, r3, #1
 800476c:	3b01      	subs	r3, #1
 800476e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004770:	429a      	cmp	r2, r3
 8004772:	d107      	bne.n	8004784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004780:	429a      	cmp	r2, r3
 8004782:	d001      	beq.n	8004788 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e000      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3718      	adds	r7, #24
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	40023800 	.word	0x40023800

08004798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e0cc      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047ac:	4b68      	ldr	r3, [pc, #416]	; (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0307 	and.w	r3, r3, #7
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d90c      	bls.n	80047d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ba:	4b65      	ldr	r3, [pc, #404]	; (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	b2d2      	uxtb	r2, r2
 80047c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c2:	4b63      	ldr	r3, [pc, #396]	; (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0307 	and.w	r3, r3, #7
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d001      	beq.n	80047d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e0b8      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d020      	beq.n	8004822 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047ec:	4b59      	ldr	r3, [pc, #356]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	4a58      	ldr	r2, [pc, #352]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80047f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0308 	and.w	r3, r3, #8
 8004800:	2b00      	cmp	r3, #0
 8004802:	d005      	beq.n	8004810 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004804:	4b53      	ldr	r3, [pc, #332]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	4a52      	ldr	r2, [pc, #328]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 800480a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800480e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004810:	4b50      	ldr	r3, [pc, #320]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	494d      	ldr	r1, [pc, #308]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	4313      	orrs	r3, r2
 8004820:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d044      	beq.n	80048b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d107      	bne.n	8004846 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004836:	4b47      	ldr	r3, [pc, #284]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d119      	bne.n	8004876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e07f      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2b02      	cmp	r3, #2
 800484c:	d003      	beq.n	8004856 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004852:	2b03      	cmp	r3, #3
 8004854:	d107      	bne.n	8004866 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004856:	4b3f      	ldr	r3, [pc, #252]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d109      	bne.n	8004876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e06f      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004866:	4b3b      	ldr	r3, [pc, #236]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e067      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004876:	4b37      	ldr	r3, [pc, #220]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f023 0203 	bic.w	r2, r3, #3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	4934      	ldr	r1, [pc, #208]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004884:	4313      	orrs	r3, r2
 8004886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004888:	f7fe f942 	bl	8002b10 <HAL_GetTick>
 800488c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800488e:	e00a      	b.n	80048a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004890:	f7fe f93e 	bl	8002b10 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	f241 3288 	movw	r2, #5000	; 0x1388
 800489e:	4293      	cmp	r3, r2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e04f      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a6:	4b2b      	ldr	r3, [pc, #172]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 020c 	and.w	r2, r3, #12
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d1eb      	bne.n	8004890 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048b8:	4b25      	ldr	r3, [pc, #148]	; (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0307 	and.w	r3, r3, #7
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d20c      	bcs.n	80048e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048c6:	4b22      	ldr	r3, [pc, #136]	; (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	b2d2      	uxtb	r2, r2
 80048cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ce:	4b20      	ldr	r3, [pc, #128]	; (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0307 	and.w	r3, r3, #7
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d001      	beq.n	80048e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e032      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d008      	beq.n	80048fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048ec:	4b19      	ldr	r3, [pc, #100]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	4916      	ldr	r1, [pc, #88]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0308 	and.w	r3, r3, #8
 8004906:	2b00      	cmp	r3, #0
 8004908:	d009      	beq.n	800491e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800490a:	4b12      	ldr	r3, [pc, #72]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	490e      	ldr	r1, [pc, #56]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 800491a:	4313      	orrs	r3, r2
 800491c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800491e:	f000 f821 	bl	8004964 <HAL_RCC_GetSysClockFreq>
 8004922:	4602      	mov	r2, r0
 8004924:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	091b      	lsrs	r3, r3, #4
 800492a:	f003 030f 	and.w	r3, r3, #15
 800492e:	490a      	ldr	r1, [pc, #40]	; (8004958 <HAL_RCC_ClockConfig+0x1c0>)
 8004930:	5ccb      	ldrb	r3, [r1, r3]
 8004932:	fa22 f303 	lsr.w	r3, r2, r3
 8004936:	4a09      	ldr	r2, [pc, #36]	; (800495c <HAL_RCC_ClockConfig+0x1c4>)
 8004938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800493a:	4b09      	ldr	r3, [pc, #36]	; (8004960 <HAL_RCC_ClockConfig+0x1c8>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4618      	mov	r0, r3
 8004940:	f7fe f8a2 	bl	8002a88 <HAL_InitTick>

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	40023c00 	.word	0x40023c00
 8004954:	40023800 	.word	0x40023800
 8004958:	08009a00 	.word	0x08009a00
 800495c:	20000004 	.word	0x20000004
 8004960:	20000008 	.word	0x20000008

08004964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004968:	b094      	sub	sp, #80	; 0x50
 800496a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800496c:	2300      	movs	r3, #0
 800496e:	647b      	str	r3, [r7, #68]	; 0x44
 8004970:	2300      	movs	r3, #0
 8004972:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004974:	2300      	movs	r3, #0
 8004976:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004978:	2300      	movs	r3, #0
 800497a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800497c:	4b79      	ldr	r3, [pc, #484]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x200>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f003 030c 	and.w	r3, r3, #12
 8004984:	2b08      	cmp	r3, #8
 8004986:	d00d      	beq.n	80049a4 <HAL_RCC_GetSysClockFreq+0x40>
 8004988:	2b08      	cmp	r3, #8
 800498a:	f200 80e1 	bhi.w	8004b50 <HAL_RCC_GetSysClockFreq+0x1ec>
 800498e:	2b00      	cmp	r3, #0
 8004990:	d002      	beq.n	8004998 <HAL_RCC_GetSysClockFreq+0x34>
 8004992:	2b04      	cmp	r3, #4
 8004994:	d003      	beq.n	800499e <HAL_RCC_GetSysClockFreq+0x3a>
 8004996:	e0db      	b.n	8004b50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004998:	4b73      	ldr	r3, [pc, #460]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x204>)
 800499a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800499c:	e0db      	b.n	8004b56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800499e:	4b73      	ldr	r3, [pc, #460]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x208>)
 80049a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049a2:	e0d8      	b.n	8004b56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049a4:	4b6f      	ldr	r3, [pc, #444]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x200>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049ae:	4b6d      	ldr	r3, [pc, #436]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x200>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d063      	beq.n	8004a82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ba:	4b6a      	ldr	r3, [pc, #424]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x200>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	099b      	lsrs	r3, r3, #6
 80049c0:	2200      	movs	r2, #0
 80049c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80049c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80049c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049cc:	633b      	str	r3, [r7, #48]	; 0x30
 80049ce:	2300      	movs	r3, #0
 80049d0:	637b      	str	r3, [r7, #52]	; 0x34
 80049d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80049d6:	4622      	mov	r2, r4
 80049d8:	462b      	mov	r3, r5
 80049da:	f04f 0000 	mov.w	r0, #0
 80049de:	f04f 0100 	mov.w	r1, #0
 80049e2:	0159      	lsls	r1, r3, #5
 80049e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049e8:	0150      	lsls	r0, r2, #5
 80049ea:	4602      	mov	r2, r0
 80049ec:	460b      	mov	r3, r1
 80049ee:	4621      	mov	r1, r4
 80049f0:	1a51      	subs	r1, r2, r1
 80049f2:	6139      	str	r1, [r7, #16]
 80049f4:	4629      	mov	r1, r5
 80049f6:	eb63 0301 	sbc.w	r3, r3, r1
 80049fa:	617b      	str	r3, [r7, #20]
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a08:	4659      	mov	r1, fp
 8004a0a:	018b      	lsls	r3, r1, #6
 8004a0c:	4651      	mov	r1, sl
 8004a0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a12:	4651      	mov	r1, sl
 8004a14:	018a      	lsls	r2, r1, #6
 8004a16:	4651      	mov	r1, sl
 8004a18:	ebb2 0801 	subs.w	r8, r2, r1
 8004a1c:	4659      	mov	r1, fp
 8004a1e:	eb63 0901 	sbc.w	r9, r3, r1
 8004a22:	f04f 0200 	mov.w	r2, #0
 8004a26:	f04f 0300 	mov.w	r3, #0
 8004a2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a36:	4690      	mov	r8, r2
 8004a38:	4699      	mov	r9, r3
 8004a3a:	4623      	mov	r3, r4
 8004a3c:	eb18 0303 	adds.w	r3, r8, r3
 8004a40:	60bb      	str	r3, [r7, #8]
 8004a42:	462b      	mov	r3, r5
 8004a44:	eb49 0303 	adc.w	r3, r9, r3
 8004a48:	60fb      	str	r3, [r7, #12]
 8004a4a:	f04f 0200 	mov.w	r2, #0
 8004a4e:	f04f 0300 	mov.w	r3, #0
 8004a52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a56:	4629      	mov	r1, r5
 8004a58:	024b      	lsls	r3, r1, #9
 8004a5a:	4621      	mov	r1, r4
 8004a5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a60:	4621      	mov	r1, r4
 8004a62:	024a      	lsls	r2, r1, #9
 8004a64:	4610      	mov	r0, r2
 8004a66:	4619      	mov	r1, r3
 8004a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a74:	f7fc f8c0 	bl	8000bf8 <__aeabi_uldivmod>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a80:	e058      	b.n	8004b34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a82:	4b38      	ldr	r3, [pc, #224]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	099b      	lsrs	r3, r3, #6
 8004a88:	2200      	movs	r2, #0
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	4611      	mov	r1, r2
 8004a8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a92:	623b      	str	r3, [r7, #32]
 8004a94:	2300      	movs	r3, #0
 8004a96:	627b      	str	r3, [r7, #36]	; 0x24
 8004a98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a9c:	4642      	mov	r2, r8
 8004a9e:	464b      	mov	r3, r9
 8004aa0:	f04f 0000 	mov.w	r0, #0
 8004aa4:	f04f 0100 	mov.w	r1, #0
 8004aa8:	0159      	lsls	r1, r3, #5
 8004aaa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004aae:	0150      	lsls	r0, r2, #5
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	4641      	mov	r1, r8
 8004ab6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004aba:	4649      	mov	r1, r9
 8004abc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ac0:	f04f 0200 	mov.w	r2, #0
 8004ac4:	f04f 0300 	mov.w	r3, #0
 8004ac8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004acc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ad0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ad4:	ebb2 040a 	subs.w	r4, r2, sl
 8004ad8:	eb63 050b 	sbc.w	r5, r3, fp
 8004adc:	f04f 0200 	mov.w	r2, #0
 8004ae0:	f04f 0300 	mov.w	r3, #0
 8004ae4:	00eb      	lsls	r3, r5, #3
 8004ae6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004aea:	00e2      	lsls	r2, r4, #3
 8004aec:	4614      	mov	r4, r2
 8004aee:	461d      	mov	r5, r3
 8004af0:	4643      	mov	r3, r8
 8004af2:	18e3      	adds	r3, r4, r3
 8004af4:	603b      	str	r3, [r7, #0]
 8004af6:	464b      	mov	r3, r9
 8004af8:	eb45 0303 	adc.w	r3, r5, r3
 8004afc:	607b      	str	r3, [r7, #4]
 8004afe:	f04f 0200 	mov.w	r2, #0
 8004b02:	f04f 0300 	mov.w	r3, #0
 8004b06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b0a:	4629      	mov	r1, r5
 8004b0c:	028b      	lsls	r3, r1, #10
 8004b0e:	4621      	mov	r1, r4
 8004b10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b14:	4621      	mov	r1, r4
 8004b16:	028a      	lsls	r2, r1, #10
 8004b18:	4610      	mov	r0, r2
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b1e:	2200      	movs	r2, #0
 8004b20:	61bb      	str	r3, [r7, #24]
 8004b22:	61fa      	str	r2, [r7, #28]
 8004b24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b28:	f7fc f866 	bl	8000bf8 <__aeabi_uldivmod>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4613      	mov	r3, r2
 8004b32:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b34:	4b0b      	ldr	r3, [pc, #44]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	0c1b      	lsrs	r3, r3, #16
 8004b3a:	f003 0303 	and.w	r3, r3, #3
 8004b3e:	3301      	adds	r3, #1
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004b44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b4e:	e002      	b.n	8004b56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b50:	4b05      	ldr	r3, [pc, #20]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3750      	adds	r7, #80	; 0x50
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b62:	bf00      	nop
 8004b64:	40023800 	.word	0x40023800
 8004b68:	00f42400 	.word	0x00f42400
 8004b6c:	007a1200 	.word	0x007a1200

08004b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b74:	4b03      	ldr	r3, [pc, #12]	; (8004b84 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b76:	681b      	ldr	r3, [r3, #0]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	20000004 	.word	0x20000004

08004b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b8c:	f7ff fff0 	bl	8004b70 <HAL_RCC_GetHCLKFreq>
 8004b90:	4602      	mov	r2, r0
 8004b92:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	0a9b      	lsrs	r3, r3, #10
 8004b98:	f003 0307 	and.w	r3, r3, #7
 8004b9c:	4903      	ldr	r1, [pc, #12]	; (8004bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	40023800 	.word	0x40023800
 8004bac:	08009a10 	.word	0x08009a10

08004bb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004bb4:	f7ff ffdc 	bl	8004b70 <HAL_RCC_GetHCLKFreq>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	4b05      	ldr	r3, [pc, #20]	; (8004bd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	0b5b      	lsrs	r3, r3, #13
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	4903      	ldr	r1, [pc, #12]	; (8004bd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bc6:	5ccb      	ldrb	r3, [r1, r3]
 8004bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	40023800 	.word	0x40023800
 8004bd4:	08009a10 	.word	0x08009a10

08004bd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e041      	b.n	8004c6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d106      	bne.n	8004c04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f7fd fcae 	bl	8002560 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2202      	movs	r2, #2
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	3304      	adds	r3, #4
 8004c14:	4619      	mov	r1, r3
 8004c16:	4610      	mov	r0, r2
 8004c18:	f000 fb7e 	bl	8005318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
	...

08004c78 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d001      	beq.n	8004c90 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e03c      	b.n	8004d0a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2202      	movs	r2, #2
 8004c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a1e      	ldr	r2, [pc, #120]	; (8004d18 <HAL_TIM_Base_Start+0xa0>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d018      	beq.n	8004cd4 <HAL_TIM_Base_Start+0x5c>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004caa:	d013      	beq.n	8004cd4 <HAL_TIM_Base_Start+0x5c>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a1a      	ldr	r2, [pc, #104]	; (8004d1c <HAL_TIM_Base_Start+0xa4>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d00e      	beq.n	8004cd4 <HAL_TIM_Base_Start+0x5c>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a19      	ldr	r2, [pc, #100]	; (8004d20 <HAL_TIM_Base_Start+0xa8>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d009      	beq.n	8004cd4 <HAL_TIM_Base_Start+0x5c>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a17      	ldr	r2, [pc, #92]	; (8004d24 <HAL_TIM_Base_Start+0xac>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d004      	beq.n	8004cd4 <HAL_TIM_Base_Start+0x5c>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a16      	ldr	r2, [pc, #88]	; (8004d28 <HAL_TIM_Base_Start+0xb0>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d111      	bne.n	8004cf8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f003 0307 	and.w	r3, r3, #7
 8004cde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2b06      	cmp	r3, #6
 8004ce4:	d010      	beq.n	8004d08 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f042 0201 	orr.w	r2, r2, #1
 8004cf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cf6:	e007      	b.n	8004d08 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0201 	orr.w	r2, r2, #1
 8004d06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	40010000 	.word	0x40010000
 8004d1c:	40000400 	.word	0x40000400
 8004d20:	40000800 	.word	0x40000800
 8004d24:	40000c00 	.word	0x40000c00
 8004d28:	40014000 	.word	0x40014000

08004d2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d001      	beq.n	8004d44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e044      	b.n	8004dce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2202      	movs	r2, #2
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68da      	ldr	r2, [r3, #12]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f042 0201 	orr.w	r2, r2, #1
 8004d5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a1e      	ldr	r2, [pc, #120]	; (8004ddc <HAL_TIM_Base_Start_IT+0xb0>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d018      	beq.n	8004d98 <HAL_TIM_Base_Start_IT+0x6c>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d6e:	d013      	beq.n	8004d98 <HAL_TIM_Base_Start_IT+0x6c>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a1a      	ldr	r2, [pc, #104]	; (8004de0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d00e      	beq.n	8004d98 <HAL_TIM_Base_Start_IT+0x6c>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a19      	ldr	r2, [pc, #100]	; (8004de4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d009      	beq.n	8004d98 <HAL_TIM_Base_Start_IT+0x6c>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a17      	ldr	r2, [pc, #92]	; (8004de8 <HAL_TIM_Base_Start_IT+0xbc>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d004      	beq.n	8004d98 <HAL_TIM_Base_Start_IT+0x6c>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a16      	ldr	r2, [pc, #88]	; (8004dec <HAL_TIM_Base_Start_IT+0xc0>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d111      	bne.n	8004dbc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f003 0307 	and.w	r3, r3, #7
 8004da2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b06      	cmp	r3, #6
 8004da8:	d010      	beq.n	8004dcc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f042 0201 	orr.w	r2, r2, #1
 8004db8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dba:	e007      	b.n	8004dcc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f042 0201 	orr.w	r2, r2, #1
 8004dca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	40010000 	.word	0x40010000
 8004de0:	40000400 	.word	0x40000400
 8004de4:	40000800 	.word	0x40000800
 8004de8:	40000c00 	.word	0x40000c00
 8004dec:	40014000 	.word	0x40014000

08004df0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e041      	b.n	8004e86 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d106      	bne.n	8004e1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f839 	bl	8004e8e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	3304      	adds	r3, #4
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	4610      	mov	r0, r2
 8004e30:	f000 fa72 	bl	8005318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
	...

08004ea4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d109      	bne.n	8004ec8 <HAL_TIM_PWM_Start+0x24>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	bf14      	ite	ne
 8004ec0:	2301      	movne	r3, #1
 8004ec2:	2300      	moveq	r3, #0
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	e022      	b.n	8004f0e <HAL_TIM_PWM_Start+0x6a>
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	2b04      	cmp	r3, #4
 8004ecc:	d109      	bne.n	8004ee2 <HAL_TIM_PWM_Start+0x3e>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	bf14      	ite	ne
 8004eda:	2301      	movne	r3, #1
 8004edc:	2300      	moveq	r3, #0
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	e015      	b.n	8004f0e <HAL_TIM_PWM_Start+0x6a>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b08      	cmp	r3, #8
 8004ee6:	d109      	bne.n	8004efc <HAL_TIM_PWM_Start+0x58>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	bf14      	ite	ne
 8004ef4:	2301      	movne	r3, #1
 8004ef6:	2300      	moveq	r3, #0
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	e008      	b.n	8004f0e <HAL_TIM_PWM_Start+0x6a>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	bf14      	ite	ne
 8004f08:	2301      	movne	r3, #1
 8004f0a:	2300      	moveq	r3, #0
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e068      	b.n	8004fe8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d104      	bne.n	8004f26 <HAL_TIM_PWM_Start+0x82>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f24:	e013      	b.n	8004f4e <HAL_TIM_PWM_Start+0xaa>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2b04      	cmp	r3, #4
 8004f2a:	d104      	bne.n	8004f36 <HAL_TIM_PWM_Start+0x92>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2202      	movs	r2, #2
 8004f30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f34:	e00b      	b.n	8004f4e <HAL_TIM_PWM_Start+0xaa>
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	2b08      	cmp	r3, #8
 8004f3a:	d104      	bne.n	8004f46 <HAL_TIM_PWM_Start+0xa2>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f44:	e003      	b.n	8004f4e <HAL_TIM_PWM_Start+0xaa>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2202      	movs	r2, #2
 8004f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2201      	movs	r2, #1
 8004f54:	6839      	ldr	r1, [r7, #0]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 fc84 	bl	8005864 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a23      	ldr	r2, [pc, #140]	; (8004ff0 <HAL_TIM_PWM_Start+0x14c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d107      	bne.n	8004f76 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a1d      	ldr	r2, [pc, #116]	; (8004ff0 <HAL_TIM_PWM_Start+0x14c>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d018      	beq.n	8004fb2 <HAL_TIM_PWM_Start+0x10e>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f88:	d013      	beq.n	8004fb2 <HAL_TIM_PWM_Start+0x10e>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a19      	ldr	r2, [pc, #100]	; (8004ff4 <HAL_TIM_PWM_Start+0x150>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d00e      	beq.n	8004fb2 <HAL_TIM_PWM_Start+0x10e>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a17      	ldr	r2, [pc, #92]	; (8004ff8 <HAL_TIM_PWM_Start+0x154>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d009      	beq.n	8004fb2 <HAL_TIM_PWM_Start+0x10e>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a16      	ldr	r2, [pc, #88]	; (8004ffc <HAL_TIM_PWM_Start+0x158>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d004      	beq.n	8004fb2 <HAL_TIM_PWM_Start+0x10e>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a14      	ldr	r2, [pc, #80]	; (8005000 <HAL_TIM_PWM_Start+0x15c>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d111      	bne.n	8004fd6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f003 0307 	and.w	r3, r3, #7
 8004fbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2b06      	cmp	r3, #6
 8004fc2:	d010      	beq.n	8004fe6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 0201 	orr.w	r2, r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fd4:	e007      	b.n	8004fe6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f042 0201 	orr.w	r2, r2, #1
 8004fe4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	40010000 	.word	0x40010000
 8004ff4:	40000400 	.word	0x40000400
 8004ff8:	40000800 	.word	0x40000800
 8004ffc:	40000c00 	.word	0x40000c00
 8005000:	40014000 	.word	0x40014000

08005004 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005010:	2300      	movs	r3, #0
 8005012:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800501a:	2b01      	cmp	r3, #1
 800501c:	d101      	bne.n	8005022 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800501e:	2302      	movs	r3, #2
 8005020:	e0ae      	b.n	8005180 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b0c      	cmp	r3, #12
 800502e:	f200 809f 	bhi.w	8005170 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005032:	a201      	add	r2, pc, #4	; (adr r2, 8005038 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005038:	0800506d 	.word	0x0800506d
 800503c:	08005171 	.word	0x08005171
 8005040:	08005171 	.word	0x08005171
 8005044:	08005171 	.word	0x08005171
 8005048:	080050ad 	.word	0x080050ad
 800504c:	08005171 	.word	0x08005171
 8005050:	08005171 	.word	0x08005171
 8005054:	08005171 	.word	0x08005171
 8005058:	080050ef 	.word	0x080050ef
 800505c:	08005171 	.word	0x08005171
 8005060:	08005171 	.word	0x08005171
 8005064:	08005171 	.word	0x08005171
 8005068:	0800512f 	.word	0x0800512f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68b9      	ldr	r1, [r7, #8]
 8005072:	4618      	mov	r0, r3
 8005074:	f000 f9d0 	bl	8005418 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	699a      	ldr	r2, [r3, #24]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f042 0208 	orr.w	r2, r2, #8
 8005086:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	699a      	ldr	r2, [r3, #24]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 0204 	bic.w	r2, r2, #4
 8005096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6999      	ldr	r1, [r3, #24]
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	691a      	ldr	r2, [r3, #16]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	619a      	str	r2, [r3, #24]
      break;
 80050aa:	e064      	b.n	8005176 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68b9      	ldr	r1, [r7, #8]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 fa16 	bl	80054e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699a      	ldr	r2, [r3, #24]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	699a      	ldr	r2, [r3, #24]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6999      	ldr	r1, [r3, #24]
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	021a      	lsls	r2, r3, #8
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	619a      	str	r2, [r3, #24]
      break;
 80050ec:	e043      	b.n	8005176 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68b9      	ldr	r1, [r7, #8]
 80050f4:	4618      	mov	r0, r3
 80050f6:	f000 fa61 	bl	80055bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	69da      	ldr	r2, [r3, #28]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f042 0208 	orr.w	r2, r2, #8
 8005108:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	69da      	ldr	r2, [r3, #28]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 0204 	bic.w	r2, r2, #4
 8005118:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	69d9      	ldr	r1, [r3, #28]
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	691a      	ldr	r2, [r3, #16]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	430a      	orrs	r2, r1
 800512a:	61da      	str	r2, [r3, #28]
      break;
 800512c:	e023      	b.n	8005176 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68b9      	ldr	r1, [r7, #8]
 8005134:	4618      	mov	r0, r3
 8005136:	f000 faab 	bl	8005690 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	69da      	ldr	r2, [r3, #28]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005148:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	69da      	ldr	r2, [r3, #28]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005158:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	69d9      	ldr	r1, [r3, #28]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	021a      	lsls	r2, r3, #8
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	430a      	orrs	r2, r1
 800516c:	61da      	str	r2, [r3, #28]
      break;
 800516e:	e002      	b.n	8005176 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	75fb      	strb	r3, [r7, #23]
      break;
 8005174:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800517e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005180:	4618      	mov	r0, r3
 8005182:	3718      	adds	r7, #24
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005192:	2300      	movs	r3, #0
 8005194:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800519c:	2b01      	cmp	r3, #1
 800519e:	d101      	bne.n	80051a4 <HAL_TIM_ConfigClockSource+0x1c>
 80051a0:	2302      	movs	r3, #2
 80051a2:	e0b4      	b.n	800530e <HAL_TIM_ConfigClockSource+0x186>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051dc:	d03e      	beq.n	800525c <HAL_TIM_ConfigClockSource+0xd4>
 80051de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051e2:	f200 8087 	bhi.w	80052f4 <HAL_TIM_ConfigClockSource+0x16c>
 80051e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ea:	f000 8086 	beq.w	80052fa <HAL_TIM_ConfigClockSource+0x172>
 80051ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051f2:	d87f      	bhi.n	80052f4 <HAL_TIM_ConfigClockSource+0x16c>
 80051f4:	2b70      	cmp	r3, #112	; 0x70
 80051f6:	d01a      	beq.n	800522e <HAL_TIM_ConfigClockSource+0xa6>
 80051f8:	2b70      	cmp	r3, #112	; 0x70
 80051fa:	d87b      	bhi.n	80052f4 <HAL_TIM_ConfigClockSource+0x16c>
 80051fc:	2b60      	cmp	r3, #96	; 0x60
 80051fe:	d050      	beq.n	80052a2 <HAL_TIM_ConfigClockSource+0x11a>
 8005200:	2b60      	cmp	r3, #96	; 0x60
 8005202:	d877      	bhi.n	80052f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005204:	2b50      	cmp	r3, #80	; 0x50
 8005206:	d03c      	beq.n	8005282 <HAL_TIM_ConfigClockSource+0xfa>
 8005208:	2b50      	cmp	r3, #80	; 0x50
 800520a:	d873      	bhi.n	80052f4 <HAL_TIM_ConfigClockSource+0x16c>
 800520c:	2b40      	cmp	r3, #64	; 0x40
 800520e:	d058      	beq.n	80052c2 <HAL_TIM_ConfigClockSource+0x13a>
 8005210:	2b40      	cmp	r3, #64	; 0x40
 8005212:	d86f      	bhi.n	80052f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005214:	2b30      	cmp	r3, #48	; 0x30
 8005216:	d064      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005218:	2b30      	cmp	r3, #48	; 0x30
 800521a:	d86b      	bhi.n	80052f4 <HAL_TIM_ConfigClockSource+0x16c>
 800521c:	2b20      	cmp	r3, #32
 800521e:	d060      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005220:	2b20      	cmp	r3, #32
 8005222:	d867      	bhi.n	80052f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005224:	2b00      	cmp	r3, #0
 8005226:	d05c      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005228:	2b10      	cmp	r3, #16
 800522a:	d05a      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0x15a>
 800522c:	e062      	b.n	80052f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6818      	ldr	r0, [r3, #0]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	6899      	ldr	r1, [r3, #8]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	f000 faf1 	bl	8005824 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005250:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	609a      	str	r2, [r3, #8]
      break;
 800525a:	e04f      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6818      	ldr	r0, [r3, #0]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	6899      	ldr	r1, [r3, #8]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	f000 fada 	bl	8005824 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689a      	ldr	r2, [r3, #8]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800527e:	609a      	str	r2, [r3, #8]
      break;
 8005280:	e03c      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6818      	ldr	r0, [r3, #0]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	6859      	ldr	r1, [r3, #4]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	461a      	mov	r2, r3
 8005290:	f000 fa4e 	bl	8005730 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2150      	movs	r1, #80	; 0x50
 800529a:	4618      	mov	r0, r3
 800529c:	f000 faa7 	bl	80057ee <TIM_ITRx_SetConfig>
      break;
 80052a0:	e02c      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6818      	ldr	r0, [r3, #0]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	6859      	ldr	r1, [r3, #4]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	461a      	mov	r2, r3
 80052b0:	f000 fa6d 	bl	800578e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2160      	movs	r1, #96	; 0x60
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 fa97 	bl	80057ee <TIM_ITRx_SetConfig>
      break;
 80052c0:	e01c      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6818      	ldr	r0, [r3, #0]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	6859      	ldr	r1, [r3, #4]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	461a      	mov	r2, r3
 80052d0:	f000 fa2e 	bl	8005730 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2140      	movs	r1, #64	; 0x40
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 fa87 	bl	80057ee <TIM_ITRx_SetConfig>
      break;
 80052e0:	e00c      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4619      	mov	r1, r3
 80052ec:	4610      	mov	r0, r2
 80052ee:	f000 fa7e 	bl	80057ee <TIM_ITRx_SetConfig>
      break;
 80052f2:	e003      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	73fb      	strb	r3, [r7, #15]
      break;
 80052f8:	e000      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80052fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800530c:	7bfb      	ldrb	r3, [r7, #15]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
	...

08005318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a34      	ldr	r2, [pc, #208]	; (80053fc <TIM_Base_SetConfig+0xe4>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d00f      	beq.n	8005350 <TIM_Base_SetConfig+0x38>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005336:	d00b      	beq.n	8005350 <TIM_Base_SetConfig+0x38>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a31      	ldr	r2, [pc, #196]	; (8005400 <TIM_Base_SetConfig+0xe8>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d007      	beq.n	8005350 <TIM_Base_SetConfig+0x38>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a30      	ldr	r2, [pc, #192]	; (8005404 <TIM_Base_SetConfig+0xec>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d003      	beq.n	8005350 <TIM_Base_SetConfig+0x38>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a2f      	ldr	r2, [pc, #188]	; (8005408 <TIM_Base_SetConfig+0xf0>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d108      	bne.n	8005362 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005356:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	4313      	orrs	r3, r2
 8005360:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a25      	ldr	r2, [pc, #148]	; (80053fc <TIM_Base_SetConfig+0xe4>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d01b      	beq.n	80053a2 <TIM_Base_SetConfig+0x8a>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005370:	d017      	beq.n	80053a2 <TIM_Base_SetConfig+0x8a>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a22      	ldr	r2, [pc, #136]	; (8005400 <TIM_Base_SetConfig+0xe8>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d013      	beq.n	80053a2 <TIM_Base_SetConfig+0x8a>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a21      	ldr	r2, [pc, #132]	; (8005404 <TIM_Base_SetConfig+0xec>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d00f      	beq.n	80053a2 <TIM_Base_SetConfig+0x8a>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a20      	ldr	r2, [pc, #128]	; (8005408 <TIM_Base_SetConfig+0xf0>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d00b      	beq.n	80053a2 <TIM_Base_SetConfig+0x8a>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a1f      	ldr	r2, [pc, #124]	; (800540c <TIM_Base_SetConfig+0xf4>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d007      	beq.n	80053a2 <TIM_Base_SetConfig+0x8a>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a1e      	ldr	r2, [pc, #120]	; (8005410 <TIM_Base_SetConfig+0xf8>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d003      	beq.n	80053a2 <TIM_Base_SetConfig+0x8a>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a1d      	ldr	r2, [pc, #116]	; (8005414 <TIM_Base_SetConfig+0xfc>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d108      	bne.n	80053b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a08      	ldr	r2, [pc, #32]	; (80053fc <TIM_Base_SetConfig+0xe4>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d103      	bne.n	80053e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	691a      	ldr	r2, [r3, #16]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	615a      	str	r2, [r3, #20]
}
 80053ee:	bf00      	nop
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	40010000 	.word	0x40010000
 8005400:	40000400 	.word	0x40000400
 8005404:	40000800 	.word	0x40000800
 8005408:	40000c00 	.word	0x40000c00
 800540c:	40014000 	.word	0x40014000
 8005410:	40014400 	.word	0x40014400
 8005414:	40014800 	.word	0x40014800

08005418 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	f023 0201 	bic.w	r2, r3, #1
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f023 0303 	bic.w	r3, r3, #3
 800544e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	4313      	orrs	r3, r2
 8005458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f023 0302 	bic.w	r3, r3, #2
 8005460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	4313      	orrs	r3, r2
 800546a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a1c      	ldr	r2, [pc, #112]	; (80054e0 <TIM_OC1_SetConfig+0xc8>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d10c      	bne.n	800548e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f023 0308 	bic.w	r3, r3, #8
 800547a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	4313      	orrs	r3, r2
 8005484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f023 0304 	bic.w	r3, r3, #4
 800548c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a13      	ldr	r2, [pc, #76]	; (80054e0 <TIM_OC1_SetConfig+0xc8>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d111      	bne.n	80054ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800549c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	621a      	str	r2, [r3, #32]
}
 80054d4:	bf00      	nop
 80054d6:	371c      	adds	r7, #28
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	40010000 	.word	0x40010000

080054e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b087      	sub	sp, #28
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	f023 0210 	bic.w	r2, r3, #16
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800551a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	021b      	lsls	r3, r3, #8
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	4313      	orrs	r3, r2
 8005526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f023 0320 	bic.w	r3, r3, #32
 800552e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	011b      	lsls	r3, r3, #4
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	4313      	orrs	r3, r2
 800553a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a1e      	ldr	r2, [pc, #120]	; (80055b8 <TIM_OC2_SetConfig+0xd4>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d10d      	bne.n	8005560 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800554a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	011b      	lsls	r3, r3, #4
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	4313      	orrs	r3, r2
 8005556:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800555e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a15      	ldr	r2, [pc, #84]	; (80055b8 <TIM_OC2_SetConfig+0xd4>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d113      	bne.n	8005590 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800556e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005576:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	4313      	orrs	r3, r2
 8005582:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	4313      	orrs	r3, r2
 800558e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	621a      	str	r2, [r3, #32]
}
 80055aa:	bf00      	nop
 80055ac:	371c      	adds	r7, #28
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	40010000 	.word	0x40010000

080055bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055bc:	b480      	push	{r7}
 80055be:	b087      	sub	sp, #28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	69db      	ldr	r3, [r3, #28]
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f023 0303 	bic.w	r3, r3, #3
 80055f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	021b      	lsls	r3, r3, #8
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	4313      	orrs	r3, r2
 8005610:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a1d      	ldr	r2, [pc, #116]	; (800568c <TIM_OC3_SetConfig+0xd0>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d10d      	bne.n	8005636 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005620:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	021b      	lsls	r3, r3, #8
 8005628:	697a      	ldr	r2, [r7, #20]
 800562a:	4313      	orrs	r3, r2
 800562c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005634:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a14      	ldr	r2, [pc, #80]	; (800568c <TIM_OC3_SetConfig+0xd0>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d113      	bne.n	8005666 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005644:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800564c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	011b      	lsls	r3, r3, #4
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	4313      	orrs	r3, r2
 8005658:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	011b      	lsls	r3, r3, #4
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	4313      	orrs	r3, r2
 8005664:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	685a      	ldr	r2, [r3, #4]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	621a      	str	r2, [r3, #32]
}
 8005680:	bf00      	nop
 8005682:	371c      	adds	r7, #28
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	40010000 	.word	0x40010000

08005690 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005690:	b480      	push	{r7}
 8005692:	b087      	sub	sp, #28
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	69db      	ldr	r3, [r3, #28]
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	021b      	lsls	r3, r3, #8
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	031b      	lsls	r3, r3, #12
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a10      	ldr	r2, [pc, #64]	; (800572c <TIM_OC4_SetConfig+0x9c>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d109      	bne.n	8005704 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	019b      	lsls	r3, r3, #6
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	4313      	orrs	r3, r2
 8005702:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	621a      	str	r2, [r3, #32]
}
 800571e:	bf00      	nop
 8005720:	371c      	adds	r7, #28
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	40010000 	.word	0x40010000

08005730 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005730:	b480      	push	{r7}
 8005732:	b087      	sub	sp, #28
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6a1b      	ldr	r3, [r3, #32]
 8005740:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	f023 0201 	bic.w	r2, r3, #1
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800575a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	011b      	lsls	r3, r3, #4
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	4313      	orrs	r3, r2
 8005764:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f023 030a 	bic.w	r3, r3, #10
 800576c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	4313      	orrs	r3, r2
 8005774:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	621a      	str	r2, [r3, #32]
}
 8005782:	bf00      	nop
 8005784:	371c      	adds	r7, #28
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800578e:	b480      	push	{r7}
 8005790:	b087      	sub	sp, #28
 8005792:	af00      	add	r7, sp, #0
 8005794:	60f8      	str	r0, [r7, #12]
 8005796:	60b9      	str	r1, [r7, #8]
 8005798:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	f023 0210 	bic.w	r2, r3, #16
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6a1b      	ldr	r3, [r3, #32]
 80057b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	031b      	lsls	r3, r3, #12
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	011b      	lsls	r3, r3, #4
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	621a      	str	r2, [r3, #32]
}
 80057e2:	bf00      	nop
 80057e4:	371c      	adds	r7, #28
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b085      	sub	sp, #20
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
 80057f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005804:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4313      	orrs	r3, r2
 800580c:	f043 0307 	orr.w	r3, r3, #7
 8005810:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	609a      	str	r2, [r3, #8]
}
 8005818:	bf00      	nop
 800581a:	3714      	adds	r7, #20
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005824:	b480      	push	{r7}
 8005826:	b087      	sub	sp, #28
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]
 8005830:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800583e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	021a      	lsls	r2, r3, #8
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	431a      	orrs	r2, r3
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	4313      	orrs	r3, r2
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	4313      	orrs	r3, r2
 8005850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	609a      	str	r2, [r3, #8]
}
 8005858:	bf00      	nop
 800585a:	371c      	adds	r7, #28
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	f003 031f 	and.w	r3, r3, #31
 8005876:	2201      	movs	r2, #1
 8005878:	fa02 f303 	lsl.w	r3, r2, r3
 800587c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6a1a      	ldr	r2, [r3, #32]
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	43db      	mvns	r3, r3
 8005886:	401a      	ands	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6a1a      	ldr	r2, [r3, #32]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	f003 031f 	and.w	r3, r3, #31
 8005896:	6879      	ldr	r1, [r7, #4]
 8005898:	fa01 f303 	lsl.w	r3, r1, r3
 800589c:	431a      	orrs	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	621a      	str	r2, [r3, #32]
}
 80058a2:	bf00      	nop
 80058a4:	371c      	adds	r7, #28
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
	...

080058b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d101      	bne.n	80058c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058c4:	2302      	movs	r3, #2
 80058c6:	e050      	b.n	800596a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a1c      	ldr	r2, [pc, #112]	; (8005978 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d018      	beq.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005914:	d013      	beq.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a18      	ldr	r2, [pc, #96]	; (800597c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d00e      	beq.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a16      	ldr	r2, [pc, #88]	; (8005980 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d009      	beq.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a15      	ldr	r2, [pc, #84]	; (8005984 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d004      	beq.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a13      	ldr	r2, [pc, #76]	; (8005988 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d10c      	bne.n	8005958 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005944:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	4313      	orrs	r3, r2
 800594e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	40010000 	.word	0x40010000
 800597c:	40000400 	.word	0x40000400
 8005980:	40000800 	.word	0x40000800
 8005984:	40000c00 	.word	0x40000c00
 8005988:	40014000 	.word	0x40014000

0800598c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005996:	2300      	movs	r3, #0
 8005998:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d101      	bne.n	80059a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80059a4:	2302      	movs	r3, #2
 80059a6:	e03d      	b.n	8005a24 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3714      	adds	r7, #20
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e03f      	b.n	8005ac2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d106      	bne.n	8005a5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f7fc fdf2 	bl	8002640 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2224      	movs	r2, #36	; 0x24
 8005a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68da      	ldr	r2, [r3, #12]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 fea3 	bl	80067c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	691a      	ldr	r2, [r3, #16]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	695a      	ldr	r2, [r3, #20]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68da      	ldr	r2, [r3, #12]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005aa8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2220      	movs	r2, #32
 8005abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3708      	adds	r7, #8
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005aca:	b480      	push	{r7}
 8005acc:	b085      	sub	sp, #20
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	60f8      	str	r0, [r7, #12]
 8005ad2:	60b9      	str	r1, [r7, #8]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2b20      	cmp	r3, #32
 8005ae2:	d130      	bne.n	8005b46 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d002      	beq.n	8005af0 <HAL_UART_Transmit_IT+0x26>
 8005aea:	88fb      	ldrh	r3, [r7, #6]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d101      	bne.n	8005af4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e029      	b.n	8005b48 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d101      	bne.n	8005b02 <HAL_UART_Transmit_IT+0x38>
 8005afe:	2302      	movs	r3, #2
 8005b00:	e022      	b.n	8005b48 <HAL_UART_Transmit_IT+0x7e>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2201      	movs	r2, #1
 8005b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	88fa      	ldrh	r2, [r7, #6]
 8005b14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	88fa      	ldrh	r2, [r7, #6]
 8005b1a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2221      	movs	r2, #33	; 0x21
 8005b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68da      	ldr	r2, [r3, #12]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b40:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005b42:	2300      	movs	r3, #0
 8005b44:	e000      	b.n	8005b48 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005b46:	2302      	movs	r3, #2
  }
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3714      	adds	r7, #20
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b20      	cmp	r3, #32
 8005b6c:	d11d      	bne.n	8005baa <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d002      	beq.n	8005b7a <HAL_UART_Receive_DMA+0x26>
 8005b74:	88fb      	ldrh	r3, [r7, #6]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d101      	bne.n	8005b7e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e016      	b.n	8005bac <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d101      	bne.n	8005b8c <HAL_UART_Receive_DMA+0x38>
 8005b88:	2302      	movs	r3, #2
 8005b8a:	e00f      	b.n	8005bac <HAL_UART_Receive_DMA+0x58>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005b9a:	88fb      	ldrh	r3, [r7, #6]
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	68b9      	ldr	r1, [r7, #8]
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f000 fbad 	bl	8006300 <UART_Start_Receive_DMA>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	e000      	b.n	8005bac <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005baa:	2302      	movs	r3, #2
  }
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b0ba      	sub	sp, #232	; 0xe8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005be0:	2300      	movs	r3, #0
 8005be2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bea:	f003 030f 	and.w	r3, r3, #15
 8005bee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005bf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10f      	bne.n	8005c1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bfe:	f003 0320 	and.w	r3, r3, #32
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d009      	beq.n	8005c1a <HAL_UART_IRQHandler+0x66>
 8005c06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c0a:	f003 0320 	and.w	r3, r3, #32
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d003      	beq.n	8005c1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 fd19 	bl	800664a <UART_Receive_IT>
      return;
 8005c18:	e256      	b.n	80060c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005c1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f000 80de 	beq.w	8005de0 <HAL_UART_IRQHandler+0x22c>
 8005c24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c28:	f003 0301 	and.w	r3, r3, #1
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d106      	bne.n	8005c3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c34:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f000 80d1 	beq.w	8005de0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00b      	beq.n	8005c62 <HAL_UART_IRQHandler+0xae>
 8005c4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d005      	beq.n	8005c62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5a:	f043 0201 	orr.w	r2, r3, #1
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c66:	f003 0304 	and.w	r3, r3, #4
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00b      	beq.n	8005c86 <HAL_UART_IRQHandler+0xd2>
 8005c6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d005      	beq.n	8005c86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7e:	f043 0202 	orr.w	r2, r3, #2
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00b      	beq.n	8005caa <HAL_UART_IRQHandler+0xf6>
 8005c92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c96:	f003 0301 	and.w	r3, r3, #1
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d005      	beq.n	8005caa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca2:	f043 0204 	orr.w	r2, r3, #4
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cae:	f003 0308 	and.w	r3, r3, #8
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d011      	beq.n	8005cda <HAL_UART_IRQHandler+0x126>
 8005cb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cba:	f003 0320 	and.w	r3, r3, #32
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d105      	bne.n	8005cce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005cc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d005      	beq.n	8005cda <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd2:	f043 0208 	orr.w	r2, r3, #8
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f000 81ed 	beq.w	80060be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ce8:	f003 0320 	and.w	r3, r3, #32
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d008      	beq.n	8005d02 <HAL_UART_IRQHandler+0x14e>
 8005cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cf4:	f003 0320 	and.w	r3, r3, #32
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d002      	beq.n	8005d02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 fca4 	bl	800664a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d0c:	2b40      	cmp	r3, #64	; 0x40
 8005d0e:	bf0c      	ite	eq
 8005d10:	2301      	moveq	r3, #1
 8005d12:	2300      	movne	r3, #0
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1e:	f003 0308 	and.w	r3, r3, #8
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d103      	bne.n	8005d2e <HAL_UART_IRQHandler+0x17a>
 8005d26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d04f      	beq.n	8005dce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 fbac 	bl	800648c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d3e:	2b40      	cmp	r3, #64	; 0x40
 8005d40:	d141      	bne.n	8005dc6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	3314      	adds	r3, #20
 8005d48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d50:	e853 3f00 	ldrex	r3, [r3]
 8005d54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	3314      	adds	r3, #20
 8005d6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d7e:	e841 2300 	strex	r3, r2, [r1]
 8005d82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1d9      	bne.n	8005d42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d013      	beq.n	8005dbe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9a:	4a7d      	ldr	r2, [pc, #500]	; (8005f90 <HAL_UART_IRQHandler+0x3dc>)
 8005d9c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7fd fe3e 	bl	8003a24 <HAL_DMA_Abort_IT>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d016      	beq.n	8005ddc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005db8:	4610      	mov	r0, r2
 8005dba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dbc:	e00e      	b.n	8005ddc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 f990 	bl	80060e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dc4:	e00a      	b.n	8005ddc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 f98c 	bl	80060e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dcc:	e006      	b.n	8005ddc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 f988 	bl	80060e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005dda:	e170      	b.n	80060be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ddc:	bf00      	nop
    return;
 8005dde:	e16e      	b.n	80060be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	f040 814a 	bne.w	800607e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dee:	f003 0310 	and.w	r3, r3, #16
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f000 8143 	beq.w	800607e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dfc:	f003 0310 	and.w	r3, r3, #16
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f000 813c 	beq.w	800607e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e06:	2300      	movs	r3, #0
 8005e08:	60bb      	str	r3, [r7, #8]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	60bb      	str	r3, [r7, #8]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	60bb      	str	r3, [r7, #8]
 8005e1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e26:	2b40      	cmp	r3, #64	; 0x40
 8005e28:	f040 80b4 	bne.w	8005f94 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f000 8140 	beq.w	80060c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	f080 8139 	bcs.w	80060c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e56:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5c:	69db      	ldr	r3, [r3, #28]
 8005e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e62:	f000 8088 	beq.w	8005f76 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	330c      	adds	r3, #12
 8005e6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e74:	e853 3f00 	ldrex	r3, [r3]
 8005e78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	330c      	adds	r3, #12
 8005e8e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005e92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005ea2:	e841 2300 	strex	r3, r2, [r1]
 8005ea6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005eaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1d9      	bne.n	8005e66 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	3314      	adds	r3, #20
 8005eb8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ebc:	e853 3f00 	ldrex	r3, [r3]
 8005ec0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005ec2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ec4:	f023 0301 	bic.w	r3, r3, #1
 8005ec8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	3314      	adds	r3, #20
 8005ed2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005ed6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005eda:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005edc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005ede:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005ee2:	e841 2300 	strex	r3, r2, [r1]
 8005ee6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ee8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1e1      	bne.n	8005eb2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	3314      	adds	r3, #20
 8005ef4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ef8:	e853 3f00 	ldrex	r3, [r3]
 8005efc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005efe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	3314      	adds	r3, #20
 8005f0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005f12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f1a:	e841 2300 	strex	r3, r2, [r1]
 8005f1e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1e3      	bne.n	8005eee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2220      	movs	r2, #32
 8005f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	330c      	adds	r3, #12
 8005f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f3e:	e853 3f00 	ldrex	r3, [r3]
 8005f42:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f46:	f023 0310 	bic.w	r3, r3, #16
 8005f4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	330c      	adds	r3, #12
 8005f54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005f58:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f5a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f60:	e841 2300 	strex	r3, r2, [r1]
 8005f64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1e3      	bne.n	8005f34 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7fd fce7 	bl	8003944 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	4619      	mov	r1, r3
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f8b6 	bl	80060f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f8c:	e099      	b.n	80060c2 <HAL_UART_IRQHandler+0x50e>
 8005f8e:	bf00      	nop
 8005f90:	08006553 	.word	0x08006553
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f000 808b 	beq.w	80060c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005fb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f000 8086 	beq.w	80060c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	330c      	adds	r3, #12
 8005fc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc4:	e853 3f00 	ldrex	r3, [r3]
 8005fc8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	330c      	adds	r3, #12
 8005fda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005fde:	647a      	str	r2, [r7, #68]	; 0x44
 8005fe0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fe4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fe6:	e841 2300 	strex	r3, r2, [r1]
 8005fea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1e3      	bne.n	8005fba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	3314      	adds	r3, #20
 8005ff8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffc:	e853 3f00 	ldrex	r3, [r3]
 8006000:	623b      	str	r3, [r7, #32]
   return(result);
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	f023 0301 	bic.w	r3, r3, #1
 8006008:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	3314      	adds	r3, #20
 8006012:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006016:	633a      	str	r2, [r7, #48]	; 0x30
 8006018:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800601c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800601e:	e841 2300 	strex	r3, r2, [r1]
 8006022:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1e3      	bne.n	8005ff2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2220      	movs	r2, #32
 800602e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	330c      	adds	r3, #12
 800603e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	e853 3f00 	ldrex	r3, [r3]
 8006046:	60fb      	str	r3, [r7, #12]
   return(result);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f023 0310 	bic.w	r3, r3, #16
 800604e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	330c      	adds	r3, #12
 8006058:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800605c:	61fa      	str	r2, [r7, #28]
 800605e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006060:	69b9      	ldr	r1, [r7, #24]
 8006062:	69fa      	ldr	r2, [r7, #28]
 8006064:	e841 2300 	strex	r3, r2, [r1]
 8006068:	617b      	str	r3, [r7, #20]
   return(result);
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1e3      	bne.n	8006038 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006070:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006074:	4619      	mov	r1, r3
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f83e 	bl	80060f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800607c:	e023      	b.n	80060c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800607e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006086:	2b00      	cmp	r3, #0
 8006088:	d009      	beq.n	800609e <HAL_UART_IRQHandler+0x4ea>
 800608a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800608e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006092:	2b00      	cmp	r3, #0
 8006094:	d003      	beq.n	800609e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 fa6f 	bl	800657a <UART_Transmit_IT>
    return;
 800609c:	e014      	b.n	80060c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800609e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00e      	beq.n	80060c8 <HAL_UART_IRQHandler+0x514>
 80060aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d008      	beq.n	80060c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 faaf 	bl	800661a <UART_EndTransmit_IT>
    return;
 80060bc:	e004      	b.n	80060c8 <HAL_UART_IRQHandler+0x514>
    return;
 80060be:	bf00      	nop
 80060c0:	e002      	b.n	80060c8 <HAL_UART_IRQHandler+0x514>
      return;
 80060c2:	bf00      	nop
 80060c4:	e000      	b.n	80060c8 <HAL_UART_IRQHandler+0x514>
      return;
 80060c6:	bf00      	nop
  }
}
 80060c8:	37e8      	adds	r7, #232	; 0xe8
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop

080060d0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80060d8:	bf00      	nop
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	460b      	mov	r3, r1
 8006102:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b09c      	sub	sp, #112	; 0x70
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006128:	2b00      	cmp	r3, #0
 800612a:	d172      	bne.n	8006212 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800612c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800612e:	2200      	movs	r2, #0
 8006130:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	330c      	adds	r3, #12
 8006138:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800613c:	e853 3f00 	ldrex	r3, [r3]
 8006140:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006144:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006148:	66bb      	str	r3, [r7, #104]	; 0x68
 800614a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	330c      	adds	r3, #12
 8006150:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006152:	65ba      	str	r2, [r7, #88]	; 0x58
 8006154:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006156:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006158:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800615a:	e841 2300 	strex	r3, r2, [r1]
 800615e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1e5      	bne.n	8006132 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	3314      	adds	r3, #20
 800616c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006170:	e853 3f00 	ldrex	r3, [r3]
 8006174:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006178:	f023 0301 	bic.w	r3, r3, #1
 800617c:	667b      	str	r3, [r7, #100]	; 0x64
 800617e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3314      	adds	r3, #20
 8006184:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006186:	647a      	str	r2, [r7, #68]	; 0x44
 8006188:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800618c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800618e:	e841 2300 	strex	r3, r2, [r1]
 8006192:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1e5      	bne.n	8006166 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800619a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	3314      	adds	r3, #20
 80061a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a4:	e853 3f00 	ldrex	r3, [r3]
 80061a8:	623b      	str	r3, [r7, #32]
   return(result);
 80061aa:	6a3b      	ldr	r3, [r7, #32]
 80061ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061b0:	663b      	str	r3, [r7, #96]	; 0x60
 80061b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	3314      	adds	r3, #20
 80061b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80061ba:	633a      	str	r2, [r7, #48]	; 0x30
 80061bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061c2:	e841 2300 	strex	r3, r2, [r1]
 80061c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1e5      	bne.n	800619a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80061ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061d0:	2220      	movs	r2, #32
 80061d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d119      	bne.n	8006212 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	330c      	adds	r3, #12
 80061e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	e853 3f00 	ldrex	r3, [r3]
 80061ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f023 0310 	bic.w	r3, r3, #16
 80061f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	330c      	adds	r3, #12
 80061fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80061fe:	61fa      	str	r2, [r7, #28]
 8006200:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006202:	69b9      	ldr	r1, [r7, #24]
 8006204:	69fa      	ldr	r2, [r7, #28]
 8006206:	e841 2300 	strex	r3, r2, [r1]
 800620a:	617b      	str	r3, [r7, #20]
   return(result);
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1e5      	bne.n	80061de <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006216:	2b01      	cmp	r3, #1
 8006218:	d106      	bne.n	8006228 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800621a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800621c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800621e:	4619      	mov	r1, r3
 8006220:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006222:	f7ff ff69 	bl	80060f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006226:	e002      	b.n	800622e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006228:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800622a:	f7fb fa9b 	bl	8001764 <HAL_UART_RxCpltCallback>
}
 800622e:	bf00      	nop
 8006230:	3770      	adds	r7, #112	; 0x70
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b084      	sub	sp, #16
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006242:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006248:	2b01      	cmp	r3, #1
 800624a:	d108      	bne.n	800625e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006250:	085b      	lsrs	r3, r3, #1
 8006252:	b29b      	uxth	r3, r3
 8006254:	4619      	mov	r1, r3
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f7ff ff4e 	bl	80060f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800625c:	e002      	b.n	8006264 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f7ff ff36 	bl	80060d0 <HAL_UART_RxHalfCpltCallback>
}
 8006264:	bf00      	nop
 8006266:	3710      	adds	r7, #16
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006274:	2300      	movs	r3, #0
 8006276:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006288:	2b80      	cmp	r3, #128	; 0x80
 800628a:	bf0c      	ite	eq
 800628c:	2301      	moveq	r3, #1
 800628e:	2300      	movne	r3, #0
 8006290:	b2db      	uxtb	r3, r3
 8006292:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b21      	cmp	r3, #33	; 0x21
 800629e:	d108      	bne.n	80062b2 <UART_DMAError+0x46>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d005      	beq.n	80062b2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	2200      	movs	r2, #0
 80062aa:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80062ac:	68b8      	ldr	r0, [r7, #8]
 80062ae:	f000 f8c5 	bl	800643c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062bc:	2b40      	cmp	r3, #64	; 0x40
 80062be:	bf0c      	ite	eq
 80062c0:	2301      	moveq	r3, #1
 80062c2:	2300      	movne	r3, #0
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b22      	cmp	r3, #34	; 0x22
 80062d2:	d108      	bne.n	80062e6 <UART_DMAError+0x7a>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d005      	beq.n	80062e6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	2200      	movs	r2, #0
 80062de:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80062e0:	68b8      	ldr	r0, [r7, #8]
 80062e2:	f000 f8d3 	bl	800648c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ea:	f043 0210 	orr.w	r2, r3, #16
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062f2:	68b8      	ldr	r0, [r7, #8]
 80062f4:	f7ff fef6 	bl	80060e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062f8:	bf00      	nop
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b098      	sub	sp, #96	; 0x60
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	4613      	mov	r3, r2
 800630c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	88fa      	ldrh	r2, [r7, #6]
 8006318:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2222      	movs	r2, #34	; 0x22
 8006324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632c:	4a40      	ldr	r2, [pc, #256]	; (8006430 <UART_Start_Receive_DMA+0x130>)
 800632e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006334:	4a3f      	ldr	r2, [pc, #252]	; (8006434 <UART_Start_Receive_DMA+0x134>)
 8006336:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633c:	4a3e      	ldr	r2, [pc, #248]	; (8006438 <UART_Start_Receive_DMA+0x138>)
 800633e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006344:	2200      	movs	r2, #0
 8006346:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006348:	f107 0308 	add.w	r3, r7, #8
 800634c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	3304      	adds	r3, #4
 8006358:	4619      	mov	r1, r3
 800635a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	88fb      	ldrh	r3, [r7, #6]
 8006360:	f7fd fa98 	bl	8003894 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006364:	2300      	movs	r3, #0
 8006366:	613b      	str	r3, [r7, #16]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	613b      	str	r3, [r7, #16]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	613b      	str	r3, [r7, #16]
 8006378:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d019      	beq.n	80063be <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	330c      	adds	r3, #12
 8006390:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006394:	e853 3f00 	ldrex	r3, [r3]
 8006398:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800639a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800639c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	330c      	adds	r3, #12
 80063a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063aa:	64fa      	str	r2, [r7, #76]	; 0x4c
 80063ac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80063b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063b2:	e841 2300 	strex	r3, r2, [r1]
 80063b6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80063b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1e5      	bne.n	800638a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	3314      	adds	r3, #20
 80063c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c8:	e853 3f00 	ldrex	r3, [r3]
 80063cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d0:	f043 0301 	orr.w	r3, r3, #1
 80063d4:	657b      	str	r3, [r7, #84]	; 0x54
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	3314      	adds	r3, #20
 80063dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80063de:	63ba      	str	r2, [r7, #56]	; 0x38
 80063e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80063e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063e6:	e841 2300 	strex	r3, r2, [r1]
 80063ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80063ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1e5      	bne.n	80063be <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	3314      	adds	r3, #20
 80063f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	e853 3f00 	ldrex	r3, [r3]
 8006400:	617b      	str	r3, [r7, #20]
   return(result);
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006408:	653b      	str	r3, [r7, #80]	; 0x50
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	3314      	adds	r3, #20
 8006410:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006412:	627a      	str	r2, [r7, #36]	; 0x24
 8006414:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006416:	6a39      	ldr	r1, [r7, #32]
 8006418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800641a:	e841 2300 	strex	r3, r2, [r1]
 800641e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1e5      	bne.n	80063f2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3760      	adds	r7, #96	; 0x60
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	08006111 	.word	0x08006111
 8006434:	08006237 	.word	0x08006237
 8006438:	0800626d 	.word	0x0800626d

0800643c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800643c:	b480      	push	{r7}
 800643e:	b089      	sub	sp, #36	; 0x24
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	330c      	adds	r3, #12
 800644a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	e853 3f00 	ldrex	r3, [r3]
 8006452:	60bb      	str	r3, [r7, #8]
   return(result);
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800645a:	61fb      	str	r3, [r7, #28]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	330c      	adds	r3, #12
 8006462:	69fa      	ldr	r2, [r7, #28]
 8006464:	61ba      	str	r2, [r7, #24]
 8006466:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006468:	6979      	ldr	r1, [r7, #20]
 800646a:	69ba      	ldr	r2, [r7, #24]
 800646c:	e841 2300 	strex	r3, r2, [r1]
 8006470:	613b      	str	r3, [r7, #16]
   return(result);
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1e5      	bne.n	8006444 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2220      	movs	r2, #32
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006480:	bf00      	nop
 8006482:	3724      	adds	r7, #36	; 0x24
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800648c:	b480      	push	{r7}
 800648e:	b095      	sub	sp, #84	; 0x54
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	330c      	adds	r3, #12
 800649a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800649e:	e853 3f00 	ldrex	r3, [r3]
 80064a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80064a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	330c      	adds	r3, #12
 80064b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064b4:	643a      	str	r2, [r7, #64]	; 0x40
 80064b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064bc:	e841 2300 	strex	r3, r2, [r1]
 80064c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1e5      	bne.n	8006494 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3314      	adds	r3, #20
 80064ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d0:	6a3b      	ldr	r3, [r7, #32]
 80064d2:	e853 3f00 	ldrex	r3, [r3]
 80064d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	f023 0301 	bic.w	r3, r3, #1
 80064de:	64bb      	str	r3, [r7, #72]	; 0x48
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	3314      	adds	r3, #20
 80064e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064f0:	e841 2300 	strex	r3, r2, [r1]
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d1e5      	bne.n	80064c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006500:	2b01      	cmp	r3, #1
 8006502:	d119      	bne.n	8006538 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	330c      	adds	r3, #12
 800650a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	e853 3f00 	ldrex	r3, [r3]
 8006512:	60bb      	str	r3, [r7, #8]
   return(result);
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	f023 0310 	bic.w	r3, r3, #16
 800651a:	647b      	str	r3, [r7, #68]	; 0x44
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	330c      	adds	r3, #12
 8006522:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006524:	61ba      	str	r2, [r7, #24]
 8006526:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006528:	6979      	ldr	r1, [r7, #20]
 800652a:	69ba      	ldr	r2, [r7, #24]
 800652c:	e841 2300 	strex	r3, r2, [r1]
 8006530:	613b      	str	r3, [r7, #16]
   return(result);
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1e5      	bne.n	8006504 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2220      	movs	r2, #32
 800653c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006546:	bf00      	nop
 8006548:	3754      	adds	r7, #84	; 0x54
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr

08006552 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006552:	b580      	push	{r7, lr}
 8006554:	b084      	sub	sp, #16
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f7ff fdb9 	bl	80060e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006572:	bf00      	nop
 8006574:	3710      	adds	r7, #16
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800657a:	b480      	push	{r7}
 800657c:	b085      	sub	sp, #20
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b21      	cmp	r3, #33	; 0x21
 800658c:	d13e      	bne.n	800660c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006596:	d114      	bne.n	80065c2 <UART_Transmit_IT+0x48>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d110      	bne.n	80065c2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a1b      	ldr	r3, [r3, #32]
 80065a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	881b      	ldrh	r3, [r3, #0]
 80065aa:	461a      	mov	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	1c9a      	adds	r2, r3, #2
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	621a      	str	r2, [r3, #32]
 80065c0:	e008      	b.n	80065d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	1c59      	adds	r1, r3, #1
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	6211      	str	r1, [r2, #32]
 80065cc:	781a      	ldrb	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065d8:	b29b      	uxth	r3, r3
 80065da:	3b01      	subs	r3, #1
 80065dc:	b29b      	uxth	r3, r3
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	4619      	mov	r1, r3
 80065e2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10f      	bne.n	8006608 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68da      	ldr	r2, [r3, #12]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68da      	ldr	r2, [r3, #12]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006606:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006608:	2300      	movs	r3, #0
 800660a:	e000      	b.n	800660e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800660c:	2302      	movs	r3, #2
  }
}
 800660e:	4618      	mov	r0, r3
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b082      	sub	sp, #8
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68da      	ldr	r2, [r3, #12]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006630:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2220      	movs	r2, #32
 8006636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7fb f8a6 	bl	800178c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b08c      	sub	sp, #48	; 0x30
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b22      	cmp	r3, #34	; 0x22
 800665c:	f040 80ab 	bne.w	80067b6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006668:	d117      	bne.n	800669a <UART_Receive_IT+0x50>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d113      	bne.n	800669a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006672:	2300      	movs	r3, #0
 8006674:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800667a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	b29b      	uxth	r3, r3
 8006684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006688:	b29a      	uxth	r2, r3
 800668a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006692:	1c9a      	adds	r2, r3, #2
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	629a      	str	r2, [r3, #40]	; 0x28
 8006698:	e026      	b.n	80066e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800669e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80066a0:	2300      	movs	r3, #0
 80066a2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ac:	d007      	beq.n	80066be <UART_Receive_IT+0x74>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d10a      	bne.n	80066cc <UART_Receive_IT+0x82>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d106      	bne.n	80066cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c8:	701a      	strb	r2, [r3, #0]
 80066ca:	e008      	b.n	80066de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e2:	1c5a      	adds	r2, r3, #1
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	3b01      	subs	r3, #1
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	4619      	mov	r1, r3
 80066f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d15a      	bne.n	80067b2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68da      	ldr	r2, [r3, #12]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f022 0220 	bic.w	r2, r2, #32
 800670a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68da      	ldr	r2, [r3, #12]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800671a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	695a      	ldr	r2, [r3, #20]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f022 0201 	bic.w	r2, r2, #1
 800672a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2220      	movs	r2, #32
 8006730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006738:	2b01      	cmp	r3, #1
 800673a:	d135      	bne.n	80067a8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	330c      	adds	r3, #12
 8006748:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	e853 3f00 	ldrex	r3, [r3]
 8006750:	613b      	str	r3, [r7, #16]
   return(result);
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	f023 0310 	bic.w	r3, r3, #16
 8006758:	627b      	str	r3, [r7, #36]	; 0x24
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	330c      	adds	r3, #12
 8006760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006762:	623a      	str	r2, [r7, #32]
 8006764:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006766:	69f9      	ldr	r1, [r7, #28]
 8006768:	6a3a      	ldr	r2, [r7, #32]
 800676a:	e841 2300 	strex	r3, r2, [r1]
 800676e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1e5      	bne.n	8006742 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0310 	and.w	r3, r3, #16
 8006780:	2b10      	cmp	r3, #16
 8006782:	d10a      	bne.n	800679a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006784:	2300      	movs	r3, #0
 8006786:	60fb      	str	r3, [r7, #12]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	60fb      	str	r3, [r7, #12]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	60fb      	str	r3, [r7, #12]
 8006798:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800679e:	4619      	mov	r1, r3
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f7ff fca9 	bl	80060f8 <HAL_UARTEx_RxEventCallback>
 80067a6:	e002      	b.n	80067ae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f7fa ffdb 	bl	8001764 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80067ae:	2300      	movs	r3, #0
 80067b0:	e002      	b.n	80067b8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80067b2:	2300      	movs	r3, #0
 80067b4:	e000      	b.n	80067b8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80067b6:	2302      	movs	r3, #2
  }
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3730      	adds	r7, #48	; 0x30
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067c4:	b0c0      	sub	sp, #256	; 0x100
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80067d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067dc:	68d9      	ldr	r1, [r3, #12]
 80067de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	ea40 0301 	orr.w	r3, r0, r1
 80067e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ee:	689a      	ldr	r2, [r3, #8]
 80067f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	431a      	orrs	r2, r3
 80067f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	431a      	orrs	r2, r3
 8006800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006804:	69db      	ldr	r3, [r3, #28]
 8006806:	4313      	orrs	r3, r2
 8006808:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800680c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006818:	f021 010c 	bic.w	r1, r1, #12
 800681c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006826:	430b      	orrs	r3, r1
 8006828:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800682a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800683a:	6999      	ldr	r1, [r3, #24]
 800683c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	ea40 0301 	orr.w	r3, r0, r1
 8006846:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	4b8f      	ldr	r3, [pc, #572]	; (8006a8c <UART_SetConfig+0x2cc>)
 8006850:	429a      	cmp	r2, r3
 8006852:	d005      	beq.n	8006860 <UART_SetConfig+0xa0>
 8006854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	4b8d      	ldr	r3, [pc, #564]	; (8006a90 <UART_SetConfig+0x2d0>)
 800685c:	429a      	cmp	r2, r3
 800685e:	d104      	bne.n	800686a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006860:	f7fe f9a6 	bl	8004bb0 <HAL_RCC_GetPCLK2Freq>
 8006864:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006868:	e003      	b.n	8006872 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800686a:	f7fe f98d 	bl	8004b88 <HAL_RCC_GetPCLK1Freq>
 800686e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006876:	69db      	ldr	r3, [r3, #28]
 8006878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800687c:	f040 810c 	bne.w	8006a98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006880:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006884:	2200      	movs	r2, #0
 8006886:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800688a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800688e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006892:	4622      	mov	r2, r4
 8006894:	462b      	mov	r3, r5
 8006896:	1891      	adds	r1, r2, r2
 8006898:	65b9      	str	r1, [r7, #88]	; 0x58
 800689a:	415b      	adcs	r3, r3
 800689c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800689e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80068a2:	4621      	mov	r1, r4
 80068a4:	eb12 0801 	adds.w	r8, r2, r1
 80068a8:	4629      	mov	r1, r5
 80068aa:	eb43 0901 	adc.w	r9, r3, r1
 80068ae:	f04f 0200 	mov.w	r2, #0
 80068b2:	f04f 0300 	mov.w	r3, #0
 80068b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068c2:	4690      	mov	r8, r2
 80068c4:	4699      	mov	r9, r3
 80068c6:	4623      	mov	r3, r4
 80068c8:	eb18 0303 	adds.w	r3, r8, r3
 80068cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80068d0:	462b      	mov	r3, r5
 80068d2:	eb49 0303 	adc.w	r3, r9, r3
 80068d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80068da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80068e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80068ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80068ee:	460b      	mov	r3, r1
 80068f0:	18db      	adds	r3, r3, r3
 80068f2:	653b      	str	r3, [r7, #80]	; 0x50
 80068f4:	4613      	mov	r3, r2
 80068f6:	eb42 0303 	adc.w	r3, r2, r3
 80068fa:	657b      	str	r3, [r7, #84]	; 0x54
 80068fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006900:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006904:	f7fa f978 	bl	8000bf8 <__aeabi_uldivmod>
 8006908:	4602      	mov	r2, r0
 800690a:	460b      	mov	r3, r1
 800690c:	4b61      	ldr	r3, [pc, #388]	; (8006a94 <UART_SetConfig+0x2d4>)
 800690e:	fba3 2302 	umull	r2, r3, r3, r2
 8006912:	095b      	lsrs	r3, r3, #5
 8006914:	011c      	lsls	r4, r3, #4
 8006916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800691a:	2200      	movs	r2, #0
 800691c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006920:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006924:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006928:	4642      	mov	r2, r8
 800692a:	464b      	mov	r3, r9
 800692c:	1891      	adds	r1, r2, r2
 800692e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006930:	415b      	adcs	r3, r3
 8006932:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006934:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006938:	4641      	mov	r1, r8
 800693a:	eb12 0a01 	adds.w	sl, r2, r1
 800693e:	4649      	mov	r1, r9
 8006940:	eb43 0b01 	adc.w	fp, r3, r1
 8006944:	f04f 0200 	mov.w	r2, #0
 8006948:	f04f 0300 	mov.w	r3, #0
 800694c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006950:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006954:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006958:	4692      	mov	sl, r2
 800695a:	469b      	mov	fp, r3
 800695c:	4643      	mov	r3, r8
 800695e:	eb1a 0303 	adds.w	r3, sl, r3
 8006962:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006966:	464b      	mov	r3, r9
 8006968:	eb4b 0303 	adc.w	r3, fp, r3
 800696c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800697c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006980:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006984:	460b      	mov	r3, r1
 8006986:	18db      	adds	r3, r3, r3
 8006988:	643b      	str	r3, [r7, #64]	; 0x40
 800698a:	4613      	mov	r3, r2
 800698c:	eb42 0303 	adc.w	r3, r2, r3
 8006990:	647b      	str	r3, [r7, #68]	; 0x44
 8006992:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006996:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800699a:	f7fa f92d 	bl	8000bf8 <__aeabi_uldivmod>
 800699e:	4602      	mov	r2, r0
 80069a0:	460b      	mov	r3, r1
 80069a2:	4611      	mov	r1, r2
 80069a4:	4b3b      	ldr	r3, [pc, #236]	; (8006a94 <UART_SetConfig+0x2d4>)
 80069a6:	fba3 2301 	umull	r2, r3, r3, r1
 80069aa:	095b      	lsrs	r3, r3, #5
 80069ac:	2264      	movs	r2, #100	; 0x64
 80069ae:	fb02 f303 	mul.w	r3, r2, r3
 80069b2:	1acb      	subs	r3, r1, r3
 80069b4:	00db      	lsls	r3, r3, #3
 80069b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80069ba:	4b36      	ldr	r3, [pc, #216]	; (8006a94 <UART_SetConfig+0x2d4>)
 80069bc:	fba3 2302 	umull	r2, r3, r3, r2
 80069c0:	095b      	lsrs	r3, r3, #5
 80069c2:	005b      	lsls	r3, r3, #1
 80069c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069c8:	441c      	add	r4, r3
 80069ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069ce:	2200      	movs	r2, #0
 80069d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80069d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80069dc:	4642      	mov	r2, r8
 80069de:	464b      	mov	r3, r9
 80069e0:	1891      	adds	r1, r2, r2
 80069e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80069e4:	415b      	adcs	r3, r3
 80069e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80069ec:	4641      	mov	r1, r8
 80069ee:	1851      	adds	r1, r2, r1
 80069f0:	6339      	str	r1, [r7, #48]	; 0x30
 80069f2:	4649      	mov	r1, r9
 80069f4:	414b      	adcs	r3, r1
 80069f6:	637b      	str	r3, [r7, #52]	; 0x34
 80069f8:	f04f 0200 	mov.w	r2, #0
 80069fc:	f04f 0300 	mov.w	r3, #0
 8006a00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006a04:	4659      	mov	r1, fp
 8006a06:	00cb      	lsls	r3, r1, #3
 8006a08:	4651      	mov	r1, sl
 8006a0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a0e:	4651      	mov	r1, sl
 8006a10:	00ca      	lsls	r2, r1, #3
 8006a12:	4610      	mov	r0, r2
 8006a14:	4619      	mov	r1, r3
 8006a16:	4603      	mov	r3, r0
 8006a18:	4642      	mov	r2, r8
 8006a1a:	189b      	adds	r3, r3, r2
 8006a1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a20:	464b      	mov	r3, r9
 8006a22:	460a      	mov	r2, r1
 8006a24:	eb42 0303 	adc.w	r3, r2, r3
 8006a28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a38:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006a3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006a40:	460b      	mov	r3, r1
 8006a42:	18db      	adds	r3, r3, r3
 8006a44:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a46:	4613      	mov	r3, r2
 8006a48:	eb42 0303 	adc.w	r3, r2, r3
 8006a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006a56:	f7fa f8cf 	bl	8000bf8 <__aeabi_uldivmod>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	4b0d      	ldr	r3, [pc, #52]	; (8006a94 <UART_SetConfig+0x2d4>)
 8006a60:	fba3 1302 	umull	r1, r3, r3, r2
 8006a64:	095b      	lsrs	r3, r3, #5
 8006a66:	2164      	movs	r1, #100	; 0x64
 8006a68:	fb01 f303 	mul.w	r3, r1, r3
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	00db      	lsls	r3, r3, #3
 8006a70:	3332      	adds	r3, #50	; 0x32
 8006a72:	4a08      	ldr	r2, [pc, #32]	; (8006a94 <UART_SetConfig+0x2d4>)
 8006a74:	fba2 2303 	umull	r2, r3, r2, r3
 8006a78:	095b      	lsrs	r3, r3, #5
 8006a7a:	f003 0207 	and.w	r2, r3, #7
 8006a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4422      	add	r2, r4
 8006a86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a88:	e106      	b.n	8006c98 <UART_SetConfig+0x4d8>
 8006a8a:	bf00      	nop
 8006a8c:	40011000 	.word	0x40011000
 8006a90:	40011400 	.word	0x40011400
 8006a94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006aa2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006aa6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006aaa:	4642      	mov	r2, r8
 8006aac:	464b      	mov	r3, r9
 8006aae:	1891      	adds	r1, r2, r2
 8006ab0:	6239      	str	r1, [r7, #32]
 8006ab2:	415b      	adcs	r3, r3
 8006ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ab6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006aba:	4641      	mov	r1, r8
 8006abc:	1854      	adds	r4, r2, r1
 8006abe:	4649      	mov	r1, r9
 8006ac0:	eb43 0501 	adc.w	r5, r3, r1
 8006ac4:	f04f 0200 	mov.w	r2, #0
 8006ac8:	f04f 0300 	mov.w	r3, #0
 8006acc:	00eb      	lsls	r3, r5, #3
 8006ace:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ad2:	00e2      	lsls	r2, r4, #3
 8006ad4:	4614      	mov	r4, r2
 8006ad6:	461d      	mov	r5, r3
 8006ad8:	4643      	mov	r3, r8
 8006ada:	18e3      	adds	r3, r4, r3
 8006adc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006ae0:	464b      	mov	r3, r9
 8006ae2:	eb45 0303 	adc.w	r3, r5, r3
 8006ae6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006af6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006afa:	f04f 0200 	mov.w	r2, #0
 8006afe:	f04f 0300 	mov.w	r3, #0
 8006b02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006b06:	4629      	mov	r1, r5
 8006b08:	008b      	lsls	r3, r1, #2
 8006b0a:	4621      	mov	r1, r4
 8006b0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b10:	4621      	mov	r1, r4
 8006b12:	008a      	lsls	r2, r1, #2
 8006b14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006b18:	f7fa f86e 	bl	8000bf8 <__aeabi_uldivmod>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	460b      	mov	r3, r1
 8006b20:	4b60      	ldr	r3, [pc, #384]	; (8006ca4 <UART_SetConfig+0x4e4>)
 8006b22:	fba3 2302 	umull	r2, r3, r3, r2
 8006b26:	095b      	lsrs	r3, r3, #5
 8006b28:	011c      	lsls	r4, r3, #4
 8006b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b34:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006b38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006b3c:	4642      	mov	r2, r8
 8006b3e:	464b      	mov	r3, r9
 8006b40:	1891      	adds	r1, r2, r2
 8006b42:	61b9      	str	r1, [r7, #24]
 8006b44:	415b      	adcs	r3, r3
 8006b46:	61fb      	str	r3, [r7, #28]
 8006b48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b4c:	4641      	mov	r1, r8
 8006b4e:	1851      	adds	r1, r2, r1
 8006b50:	6139      	str	r1, [r7, #16]
 8006b52:	4649      	mov	r1, r9
 8006b54:	414b      	adcs	r3, r1
 8006b56:	617b      	str	r3, [r7, #20]
 8006b58:	f04f 0200 	mov.w	r2, #0
 8006b5c:	f04f 0300 	mov.w	r3, #0
 8006b60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b64:	4659      	mov	r1, fp
 8006b66:	00cb      	lsls	r3, r1, #3
 8006b68:	4651      	mov	r1, sl
 8006b6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b6e:	4651      	mov	r1, sl
 8006b70:	00ca      	lsls	r2, r1, #3
 8006b72:	4610      	mov	r0, r2
 8006b74:	4619      	mov	r1, r3
 8006b76:	4603      	mov	r3, r0
 8006b78:	4642      	mov	r2, r8
 8006b7a:	189b      	adds	r3, r3, r2
 8006b7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b80:	464b      	mov	r3, r9
 8006b82:	460a      	mov	r2, r1
 8006b84:	eb42 0303 	adc.w	r3, r2, r3
 8006b88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b96:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006b98:	f04f 0200 	mov.w	r2, #0
 8006b9c:	f04f 0300 	mov.w	r3, #0
 8006ba0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006ba4:	4649      	mov	r1, r9
 8006ba6:	008b      	lsls	r3, r1, #2
 8006ba8:	4641      	mov	r1, r8
 8006baa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bae:	4641      	mov	r1, r8
 8006bb0:	008a      	lsls	r2, r1, #2
 8006bb2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006bb6:	f7fa f81f 	bl	8000bf8 <__aeabi_uldivmod>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	4611      	mov	r1, r2
 8006bc0:	4b38      	ldr	r3, [pc, #224]	; (8006ca4 <UART_SetConfig+0x4e4>)
 8006bc2:	fba3 2301 	umull	r2, r3, r3, r1
 8006bc6:	095b      	lsrs	r3, r3, #5
 8006bc8:	2264      	movs	r2, #100	; 0x64
 8006bca:	fb02 f303 	mul.w	r3, r2, r3
 8006bce:	1acb      	subs	r3, r1, r3
 8006bd0:	011b      	lsls	r3, r3, #4
 8006bd2:	3332      	adds	r3, #50	; 0x32
 8006bd4:	4a33      	ldr	r2, [pc, #204]	; (8006ca4 <UART_SetConfig+0x4e4>)
 8006bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8006bda:	095b      	lsrs	r3, r3, #5
 8006bdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006be0:	441c      	add	r4, r3
 8006be2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006be6:	2200      	movs	r2, #0
 8006be8:	673b      	str	r3, [r7, #112]	; 0x70
 8006bea:	677a      	str	r2, [r7, #116]	; 0x74
 8006bec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006bf0:	4642      	mov	r2, r8
 8006bf2:	464b      	mov	r3, r9
 8006bf4:	1891      	adds	r1, r2, r2
 8006bf6:	60b9      	str	r1, [r7, #8]
 8006bf8:	415b      	adcs	r3, r3
 8006bfa:	60fb      	str	r3, [r7, #12]
 8006bfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c00:	4641      	mov	r1, r8
 8006c02:	1851      	adds	r1, r2, r1
 8006c04:	6039      	str	r1, [r7, #0]
 8006c06:	4649      	mov	r1, r9
 8006c08:	414b      	adcs	r3, r1
 8006c0a:	607b      	str	r3, [r7, #4]
 8006c0c:	f04f 0200 	mov.w	r2, #0
 8006c10:	f04f 0300 	mov.w	r3, #0
 8006c14:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006c18:	4659      	mov	r1, fp
 8006c1a:	00cb      	lsls	r3, r1, #3
 8006c1c:	4651      	mov	r1, sl
 8006c1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c22:	4651      	mov	r1, sl
 8006c24:	00ca      	lsls	r2, r1, #3
 8006c26:	4610      	mov	r0, r2
 8006c28:	4619      	mov	r1, r3
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	4642      	mov	r2, r8
 8006c2e:	189b      	adds	r3, r3, r2
 8006c30:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c32:	464b      	mov	r3, r9
 8006c34:	460a      	mov	r2, r1
 8006c36:	eb42 0303 	adc.w	r3, r2, r3
 8006c3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	663b      	str	r3, [r7, #96]	; 0x60
 8006c46:	667a      	str	r2, [r7, #100]	; 0x64
 8006c48:	f04f 0200 	mov.w	r2, #0
 8006c4c:	f04f 0300 	mov.w	r3, #0
 8006c50:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006c54:	4649      	mov	r1, r9
 8006c56:	008b      	lsls	r3, r1, #2
 8006c58:	4641      	mov	r1, r8
 8006c5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c5e:	4641      	mov	r1, r8
 8006c60:	008a      	lsls	r2, r1, #2
 8006c62:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006c66:	f7f9 ffc7 	bl	8000bf8 <__aeabi_uldivmod>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	4b0d      	ldr	r3, [pc, #52]	; (8006ca4 <UART_SetConfig+0x4e4>)
 8006c70:	fba3 1302 	umull	r1, r3, r3, r2
 8006c74:	095b      	lsrs	r3, r3, #5
 8006c76:	2164      	movs	r1, #100	; 0x64
 8006c78:	fb01 f303 	mul.w	r3, r1, r3
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	011b      	lsls	r3, r3, #4
 8006c80:	3332      	adds	r3, #50	; 0x32
 8006c82:	4a08      	ldr	r2, [pc, #32]	; (8006ca4 <UART_SetConfig+0x4e4>)
 8006c84:	fba2 2303 	umull	r2, r3, r2, r3
 8006c88:	095b      	lsrs	r3, r3, #5
 8006c8a:	f003 020f 	and.w	r2, r3, #15
 8006c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4422      	add	r2, r4
 8006c96:	609a      	str	r2, [r3, #8]
}
 8006c98:	bf00      	nop
 8006c9a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ca4:	51eb851f 	.word	0x51eb851f

08006ca8 <__cvt>:
 8006ca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cac:	ec55 4b10 	vmov	r4, r5, d0
 8006cb0:	2d00      	cmp	r5, #0
 8006cb2:	460e      	mov	r6, r1
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	462b      	mov	r3, r5
 8006cb8:	bfbb      	ittet	lt
 8006cba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006cbe:	461d      	movlt	r5, r3
 8006cc0:	2300      	movge	r3, #0
 8006cc2:	232d      	movlt	r3, #45	; 0x2d
 8006cc4:	700b      	strb	r3, [r1, #0]
 8006cc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cc8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006ccc:	4691      	mov	r9, r2
 8006cce:	f023 0820 	bic.w	r8, r3, #32
 8006cd2:	bfbc      	itt	lt
 8006cd4:	4622      	movlt	r2, r4
 8006cd6:	4614      	movlt	r4, r2
 8006cd8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006cdc:	d005      	beq.n	8006cea <__cvt+0x42>
 8006cde:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006ce2:	d100      	bne.n	8006ce6 <__cvt+0x3e>
 8006ce4:	3601      	adds	r6, #1
 8006ce6:	2102      	movs	r1, #2
 8006ce8:	e000      	b.n	8006cec <__cvt+0x44>
 8006cea:	2103      	movs	r1, #3
 8006cec:	ab03      	add	r3, sp, #12
 8006cee:	9301      	str	r3, [sp, #4]
 8006cf0:	ab02      	add	r3, sp, #8
 8006cf2:	9300      	str	r3, [sp, #0]
 8006cf4:	ec45 4b10 	vmov	d0, r4, r5
 8006cf8:	4653      	mov	r3, sl
 8006cfa:	4632      	mov	r2, r6
 8006cfc:	f000 fe68 	bl	80079d0 <_dtoa_r>
 8006d00:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006d04:	4607      	mov	r7, r0
 8006d06:	d102      	bne.n	8006d0e <__cvt+0x66>
 8006d08:	f019 0f01 	tst.w	r9, #1
 8006d0c:	d022      	beq.n	8006d54 <__cvt+0xac>
 8006d0e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d12:	eb07 0906 	add.w	r9, r7, r6
 8006d16:	d110      	bne.n	8006d3a <__cvt+0x92>
 8006d18:	783b      	ldrb	r3, [r7, #0]
 8006d1a:	2b30      	cmp	r3, #48	; 0x30
 8006d1c:	d10a      	bne.n	8006d34 <__cvt+0x8c>
 8006d1e:	2200      	movs	r2, #0
 8006d20:	2300      	movs	r3, #0
 8006d22:	4620      	mov	r0, r4
 8006d24:	4629      	mov	r1, r5
 8006d26:	f7f9 fed7 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d2a:	b918      	cbnz	r0, 8006d34 <__cvt+0x8c>
 8006d2c:	f1c6 0601 	rsb	r6, r6, #1
 8006d30:	f8ca 6000 	str.w	r6, [sl]
 8006d34:	f8da 3000 	ldr.w	r3, [sl]
 8006d38:	4499      	add	r9, r3
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	4620      	mov	r0, r4
 8006d40:	4629      	mov	r1, r5
 8006d42:	f7f9 fec9 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d46:	b108      	cbz	r0, 8006d4c <__cvt+0xa4>
 8006d48:	f8cd 900c 	str.w	r9, [sp, #12]
 8006d4c:	2230      	movs	r2, #48	; 0x30
 8006d4e:	9b03      	ldr	r3, [sp, #12]
 8006d50:	454b      	cmp	r3, r9
 8006d52:	d307      	bcc.n	8006d64 <__cvt+0xbc>
 8006d54:	9b03      	ldr	r3, [sp, #12]
 8006d56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d58:	1bdb      	subs	r3, r3, r7
 8006d5a:	4638      	mov	r0, r7
 8006d5c:	6013      	str	r3, [r2, #0]
 8006d5e:	b004      	add	sp, #16
 8006d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d64:	1c59      	adds	r1, r3, #1
 8006d66:	9103      	str	r1, [sp, #12]
 8006d68:	701a      	strb	r2, [r3, #0]
 8006d6a:	e7f0      	b.n	8006d4e <__cvt+0xa6>

08006d6c <__exponent>:
 8006d6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d6e:	4603      	mov	r3, r0
 8006d70:	2900      	cmp	r1, #0
 8006d72:	bfb8      	it	lt
 8006d74:	4249      	neglt	r1, r1
 8006d76:	f803 2b02 	strb.w	r2, [r3], #2
 8006d7a:	bfb4      	ite	lt
 8006d7c:	222d      	movlt	r2, #45	; 0x2d
 8006d7e:	222b      	movge	r2, #43	; 0x2b
 8006d80:	2909      	cmp	r1, #9
 8006d82:	7042      	strb	r2, [r0, #1]
 8006d84:	dd2a      	ble.n	8006ddc <__exponent+0x70>
 8006d86:	f10d 0207 	add.w	r2, sp, #7
 8006d8a:	4617      	mov	r7, r2
 8006d8c:	260a      	movs	r6, #10
 8006d8e:	4694      	mov	ip, r2
 8006d90:	fb91 f5f6 	sdiv	r5, r1, r6
 8006d94:	fb06 1415 	mls	r4, r6, r5, r1
 8006d98:	3430      	adds	r4, #48	; 0x30
 8006d9a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006d9e:	460c      	mov	r4, r1
 8006da0:	2c63      	cmp	r4, #99	; 0x63
 8006da2:	f102 32ff 	add.w	r2, r2, #4294967295
 8006da6:	4629      	mov	r1, r5
 8006da8:	dcf1      	bgt.n	8006d8e <__exponent+0x22>
 8006daa:	3130      	adds	r1, #48	; 0x30
 8006dac:	f1ac 0402 	sub.w	r4, ip, #2
 8006db0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006db4:	1c41      	adds	r1, r0, #1
 8006db6:	4622      	mov	r2, r4
 8006db8:	42ba      	cmp	r2, r7
 8006dba:	d30a      	bcc.n	8006dd2 <__exponent+0x66>
 8006dbc:	f10d 0209 	add.w	r2, sp, #9
 8006dc0:	eba2 020c 	sub.w	r2, r2, ip
 8006dc4:	42bc      	cmp	r4, r7
 8006dc6:	bf88      	it	hi
 8006dc8:	2200      	movhi	r2, #0
 8006dca:	4413      	add	r3, r2
 8006dcc:	1a18      	subs	r0, r3, r0
 8006dce:	b003      	add	sp, #12
 8006dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dd2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006dd6:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006dda:	e7ed      	b.n	8006db8 <__exponent+0x4c>
 8006ddc:	2330      	movs	r3, #48	; 0x30
 8006dde:	3130      	adds	r1, #48	; 0x30
 8006de0:	7083      	strb	r3, [r0, #2]
 8006de2:	70c1      	strb	r1, [r0, #3]
 8006de4:	1d03      	adds	r3, r0, #4
 8006de6:	e7f1      	b.n	8006dcc <__exponent+0x60>

08006de8 <_printf_float>:
 8006de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dec:	ed2d 8b02 	vpush	{d8}
 8006df0:	b08d      	sub	sp, #52	; 0x34
 8006df2:	460c      	mov	r4, r1
 8006df4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006df8:	4616      	mov	r6, r2
 8006dfa:	461f      	mov	r7, r3
 8006dfc:	4605      	mov	r5, r0
 8006dfe:	f000 fce7 	bl	80077d0 <_localeconv_r>
 8006e02:	f8d0 a000 	ldr.w	sl, [r0]
 8006e06:	4650      	mov	r0, sl
 8006e08:	f7f9 fa3a 	bl	8000280 <strlen>
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	930a      	str	r3, [sp, #40]	; 0x28
 8006e10:	6823      	ldr	r3, [r4, #0]
 8006e12:	9305      	str	r3, [sp, #20]
 8006e14:	f8d8 3000 	ldr.w	r3, [r8]
 8006e18:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006e1c:	3307      	adds	r3, #7
 8006e1e:	f023 0307 	bic.w	r3, r3, #7
 8006e22:	f103 0208 	add.w	r2, r3, #8
 8006e26:	f8c8 2000 	str.w	r2, [r8]
 8006e2a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e32:	9307      	str	r3, [sp, #28]
 8006e34:	f8cd 8018 	str.w	r8, [sp, #24]
 8006e38:	ee08 0a10 	vmov	s16, r0
 8006e3c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006e40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e44:	4b9e      	ldr	r3, [pc, #632]	; (80070c0 <_printf_float+0x2d8>)
 8006e46:	f04f 32ff 	mov.w	r2, #4294967295
 8006e4a:	f7f9 fe77 	bl	8000b3c <__aeabi_dcmpun>
 8006e4e:	bb88      	cbnz	r0, 8006eb4 <_printf_float+0xcc>
 8006e50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e54:	4b9a      	ldr	r3, [pc, #616]	; (80070c0 <_printf_float+0x2d8>)
 8006e56:	f04f 32ff 	mov.w	r2, #4294967295
 8006e5a:	f7f9 fe51 	bl	8000b00 <__aeabi_dcmple>
 8006e5e:	bb48      	cbnz	r0, 8006eb4 <_printf_float+0xcc>
 8006e60:	2200      	movs	r2, #0
 8006e62:	2300      	movs	r3, #0
 8006e64:	4640      	mov	r0, r8
 8006e66:	4649      	mov	r1, r9
 8006e68:	f7f9 fe40 	bl	8000aec <__aeabi_dcmplt>
 8006e6c:	b110      	cbz	r0, 8006e74 <_printf_float+0x8c>
 8006e6e:	232d      	movs	r3, #45	; 0x2d
 8006e70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e74:	4a93      	ldr	r2, [pc, #588]	; (80070c4 <_printf_float+0x2dc>)
 8006e76:	4b94      	ldr	r3, [pc, #592]	; (80070c8 <_printf_float+0x2e0>)
 8006e78:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006e7c:	bf94      	ite	ls
 8006e7e:	4690      	movls	r8, r2
 8006e80:	4698      	movhi	r8, r3
 8006e82:	2303      	movs	r3, #3
 8006e84:	6123      	str	r3, [r4, #16]
 8006e86:	9b05      	ldr	r3, [sp, #20]
 8006e88:	f023 0304 	bic.w	r3, r3, #4
 8006e8c:	6023      	str	r3, [r4, #0]
 8006e8e:	f04f 0900 	mov.w	r9, #0
 8006e92:	9700      	str	r7, [sp, #0]
 8006e94:	4633      	mov	r3, r6
 8006e96:	aa0b      	add	r2, sp, #44	; 0x2c
 8006e98:	4621      	mov	r1, r4
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	f000 f9da 	bl	8007254 <_printf_common>
 8006ea0:	3001      	adds	r0, #1
 8006ea2:	f040 8090 	bne.w	8006fc6 <_printf_float+0x1de>
 8006ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8006eaa:	b00d      	add	sp, #52	; 0x34
 8006eac:	ecbd 8b02 	vpop	{d8}
 8006eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eb4:	4642      	mov	r2, r8
 8006eb6:	464b      	mov	r3, r9
 8006eb8:	4640      	mov	r0, r8
 8006eba:	4649      	mov	r1, r9
 8006ebc:	f7f9 fe3e 	bl	8000b3c <__aeabi_dcmpun>
 8006ec0:	b140      	cbz	r0, 8006ed4 <_printf_float+0xec>
 8006ec2:	464b      	mov	r3, r9
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	bfbc      	itt	lt
 8006ec8:	232d      	movlt	r3, #45	; 0x2d
 8006eca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006ece:	4a7f      	ldr	r2, [pc, #508]	; (80070cc <_printf_float+0x2e4>)
 8006ed0:	4b7f      	ldr	r3, [pc, #508]	; (80070d0 <_printf_float+0x2e8>)
 8006ed2:	e7d1      	b.n	8006e78 <_printf_float+0x90>
 8006ed4:	6863      	ldr	r3, [r4, #4]
 8006ed6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006eda:	9206      	str	r2, [sp, #24]
 8006edc:	1c5a      	adds	r2, r3, #1
 8006ede:	d13f      	bne.n	8006f60 <_printf_float+0x178>
 8006ee0:	2306      	movs	r3, #6
 8006ee2:	6063      	str	r3, [r4, #4]
 8006ee4:	9b05      	ldr	r3, [sp, #20]
 8006ee6:	6861      	ldr	r1, [r4, #4]
 8006ee8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006eec:	2300      	movs	r3, #0
 8006eee:	9303      	str	r3, [sp, #12]
 8006ef0:	ab0a      	add	r3, sp, #40	; 0x28
 8006ef2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006ef6:	ab09      	add	r3, sp, #36	; 0x24
 8006ef8:	ec49 8b10 	vmov	d0, r8, r9
 8006efc:	9300      	str	r3, [sp, #0]
 8006efe:	6022      	str	r2, [r4, #0]
 8006f00:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006f04:	4628      	mov	r0, r5
 8006f06:	f7ff fecf 	bl	8006ca8 <__cvt>
 8006f0a:	9b06      	ldr	r3, [sp, #24]
 8006f0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f0e:	2b47      	cmp	r3, #71	; 0x47
 8006f10:	4680      	mov	r8, r0
 8006f12:	d108      	bne.n	8006f26 <_printf_float+0x13e>
 8006f14:	1cc8      	adds	r0, r1, #3
 8006f16:	db02      	blt.n	8006f1e <_printf_float+0x136>
 8006f18:	6863      	ldr	r3, [r4, #4]
 8006f1a:	4299      	cmp	r1, r3
 8006f1c:	dd41      	ble.n	8006fa2 <_printf_float+0x1ba>
 8006f1e:	f1ab 0302 	sub.w	r3, fp, #2
 8006f22:	fa5f fb83 	uxtb.w	fp, r3
 8006f26:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f2a:	d820      	bhi.n	8006f6e <_printf_float+0x186>
 8006f2c:	3901      	subs	r1, #1
 8006f2e:	465a      	mov	r2, fp
 8006f30:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f34:	9109      	str	r1, [sp, #36]	; 0x24
 8006f36:	f7ff ff19 	bl	8006d6c <__exponent>
 8006f3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f3c:	1813      	adds	r3, r2, r0
 8006f3e:	2a01      	cmp	r2, #1
 8006f40:	4681      	mov	r9, r0
 8006f42:	6123      	str	r3, [r4, #16]
 8006f44:	dc02      	bgt.n	8006f4c <_printf_float+0x164>
 8006f46:	6822      	ldr	r2, [r4, #0]
 8006f48:	07d2      	lsls	r2, r2, #31
 8006f4a:	d501      	bpl.n	8006f50 <_printf_float+0x168>
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	6123      	str	r3, [r4, #16]
 8006f50:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d09c      	beq.n	8006e92 <_printf_float+0xaa>
 8006f58:	232d      	movs	r3, #45	; 0x2d
 8006f5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f5e:	e798      	b.n	8006e92 <_printf_float+0xaa>
 8006f60:	9a06      	ldr	r2, [sp, #24]
 8006f62:	2a47      	cmp	r2, #71	; 0x47
 8006f64:	d1be      	bne.n	8006ee4 <_printf_float+0xfc>
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1bc      	bne.n	8006ee4 <_printf_float+0xfc>
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e7b9      	b.n	8006ee2 <_printf_float+0xfa>
 8006f6e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006f72:	d118      	bne.n	8006fa6 <_printf_float+0x1be>
 8006f74:	2900      	cmp	r1, #0
 8006f76:	6863      	ldr	r3, [r4, #4]
 8006f78:	dd0b      	ble.n	8006f92 <_printf_float+0x1aa>
 8006f7a:	6121      	str	r1, [r4, #16]
 8006f7c:	b913      	cbnz	r3, 8006f84 <_printf_float+0x19c>
 8006f7e:	6822      	ldr	r2, [r4, #0]
 8006f80:	07d0      	lsls	r0, r2, #31
 8006f82:	d502      	bpl.n	8006f8a <_printf_float+0x1a2>
 8006f84:	3301      	adds	r3, #1
 8006f86:	440b      	add	r3, r1
 8006f88:	6123      	str	r3, [r4, #16]
 8006f8a:	65a1      	str	r1, [r4, #88]	; 0x58
 8006f8c:	f04f 0900 	mov.w	r9, #0
 8006f90:	e7de      	b.n	8006f50 <_printf_float+0x168>
 8006f92:	b913      	cbnz	r3, 8006f9a <_printf_float+0x1b2>
 8006f94:	6822      	ldr	r2, [r4, #0]
 8006f96:	07d2      	lsls	r2, r2, #31
 8006f98:	d501      	bpl.n	8006f9e <_printf_float+0x1b6>
 8006f9a:	3302      	adds	r3, #2
 8006f9c:	e7f4      	b.n	8006f88 <_printf_float+0x1a0>
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e7f2      	b.n	8006f88 <_printf_float+0x1a0>
 8006fa2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fa8:	4299      	cmp	r1, r3
 8006faa:	db05      	blt.n	8006fb8 <_printf_float+0x1d0>
 8006fac:	6823      	ldr	r3, [r4, #0]
 8006fae:	6121      	str	r1, [r4, #16]
 8006fb0:	07d8      	lsls	r0, r3, #31
 8006fb2:	d5ea      	bpl.n	8006f8a <_printf_float+0x1a2>
 8006fb4:	1c4b      	adds	r3, r1, #1
 8006fb6:	e7e7      	b.n	8006f88 <_printf_float+0x1a0>
 8006fb8:	2900      	cmp	r1, #0
 8006fba:	bfd4      	ite	le
 8006fbc:	f1c1 0202 	rsble	r2, r1, #2
 8006fc0:	2201      	movgt	r2, #1
 8006fc2:	4413      	add	r3, r2
 8006fc4:	e7e0      	b.n	8006f88 <_printf_float+0x1a0>
 8006fc6:	6823      	ldr	r3, [r4, #0]
 8006fc8:	055a      	lsls	r2, r3, #21
 8006fca:	d407      	bmi.n	8006fdc <_printf_float+0x1f4>
 8006fcc:	6923      	ldr	r3, [r4, #16]
 8006fce:	4642      	mov	r2, r8
 8006fd0:	4631      	mov	r1, r6
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	47b8      	blx	r7
 8006fd6:	3001      	adds	r0, #1
 8006fd8:	d12c      	bne.n	8007034 <_printf_float+0x24c>
 8006fda:	e764      	b.n	8006ea6 <_printf_float+0xbe>
 8006fdc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006fe0:	f240 80e0 	bls.w	80071a4 <_printf_float+0x3bc>
 8006fe4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006fe8:	2200      	movs	r2, #0
 8006fea:	2300      	movs	r3, #0
 8006fec:	f7f9 fd74 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ff0:	2800      	cmp	r0, #0
 8006ff2:	d034      	beq.n	800705e <_printf_float+0x276>
 8006ff4:	4a37      	ldr	r2, [pc, #220]	; (80070d4 <_printf_float+0x2ec>)
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	4631      	mov	r1, r6
 8006ffa:	4628      	mov	r0, r5
 8006ffc:	47b8      	blx	r7
 8006ffe:	3001      	adds	r0, #1
 8007000:	f43f af51 	beq.w	8006ea6 <_printf_float+0xbe>
 8007004:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007008:	429a      	cmp	r2, r3
 800700a:	db02      	blt.n	8007012 <_printf_float+0x22a>
 800700c:	6823      	ldr	r3, [r4, #0]
 800700e:	07d8      	lsls	r0, r3, #31
 8007010:	d510      	bpl.n	8007034 <_printf_float+0x24c>
 8007012:	ee18 3a10 	vmov	r3, s16
 8007016:	4652      	mov	r2, sl
 8007018:	4631      	mov	r1, r6
 800701a:	4628      	mov	r0, r5
 800701c:	47b8      	blx	r7
 800701e:	3001      	adds	r0, #1
 8007020:	f43f af41 	beq.w	8006ea6 <_printf_float+0xbe>
 8007024:	f04f 0800 	mov.w	r8, #0
 8007028:	f104 091a 	add.w	r9, r4, #26
 800702c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800702e:	3b01      	subs	r3, #1
 8007030:	4543      	cmp	r3, r8
 8007032:	dc09      	bgt.n	8007048 <_printf_float+0x260>
 8007034:	6823      	ldr	r3, [r4, #0]
 8007036:	079b      	lsls	r3, r3, #30
 8007038:	f100 8107 	bmi.w	800724a <_printf_float+0x462>
 800703c:	68e0      	ldr	r0, [r4, #12]
 800703e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007040:	4298      	cmp	r0, r3
 8007042:	bfb8      	it	lt
 8007044:	4618      	movlt	r0, r3
 8007046:	e730      	b.n	8006eaa <_printf_float+0xc2>
 8007048:	2301      	movs	r3, #1
 800704a:	464a      	mov	r2, r9
 800704c:	4631      	mov	r1, r6
 800704e:	4628      	mov	r0, r5
 8007050:	47b8      	blx	r7
 8007052:	3001      	adds	r0, #1
 8007054:	f43f af27 	beq.w	8006ea6 <_printf_float+0xbe>
 8007058:	f108 0801 	add.w	r8, r8, #1
 800705c:	e7e6      	b.n	800702c <_printf_float+0x244>
 800705e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007060:	2b00      	cmp	r3, #0
 8007062:	dc39      	bgt.n	80070d8 <_printf_float+0x2f0>
 8007064:	4a1b      	ldr	r2, [pc, #108]	; (80070d4 <_printf_float+0x2ec>)
 8007066:	2301      	movs	r3, #1
 8007068:	4631      	mov	r1, r6
 800706a:	4628      	mov	r0, r5
 800706c:	47b8      	blx	r7
 800706e:	3001      	adds	r0, #1
 8007070:	f43f af19 	beq.w	8006ea6 <_printf_float+0xbe>
 8007074:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007078:	4313      	orrs	r3, r2
 800707a:	d102      	bne.n	8007082 <_printf_float+0x29a>
 800707c:	6823      	ldr	r3, [r4, #0]
 800707e:	07d9      	lsls	r1, r3, #31
 8007080:	d5d8      	bpl.n	8007034 <_printf_float+0x24c>
 8007082:	ee18 3a10 	vmov	r3, s16
 8007086:	4652      	mov	r2, sl
 8007088:	4631      	mov	r1, r6
 800708a:	4628      	mov	r0, r5
 800708c:	47b8      	blx	r7
 800708e:	3001      	adds	r0, #1
 8007090:	f43f af09 	beq.w	8006ea6 <_printf_float+0xbe>
 8007094:	f04f 0900 	mov.w	r9, #0
 8007098:	f104 0a1a 	add.w	sl, r4, #26
 800709c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800709e:	425b      	negs	r3, r3
 80070a0:	454b      	cmp	r3, r9
 80070a2:	dc01      	bgt.n	80070a8 <_printf_float+0x2c0>
 80070a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070a6:	e792      	b.n	8006fce <_printf_float+0x1e6>
 80070a8:	2301      	movs	r3, #1
 80070aa:	4652      	mov	r2, sl
 80070ac:	4631      	mov	r1, r6
 80070ae:	4628      	mov	r0, r5
 80070b0:	47b8      	blx	r7
 80070b2:	3001      	adds	r0, #1
 80070b4:	f43f aef7 	beq.w	8006ea6 <_printf_float+0xbe>
 80070b8:	f109 0901 	add.w	r9, r9, #1
 80070bc:	e7ee      	b.n	800709c <_printf_float+0x2b4>
 80070be:	bf00      	nop
 80070c0:	7fefffff 	.word	0x7fefffff
 80070c4:	08009a20 	.word	0x08009a20
 80070c8:	08009a24 	.word	0x08009a24
 80070cc:	08009a28 	.word	0x08009a28
 80070d0:	08009a2c 	.word	0x08009a2c
 80070d4:	08009a30 	.word	0x08009a30
 80070d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070dc:	429a      	cmp	r2, r3
 80070de:	bfa8      	it	ge
 80070e0:	461a      	movge	r2, r3
 80070e2:	2a00      	cmp	r2, #0
 80070e4:	4691      	mov	r9, r2
 80070e6:	dc37      	bgt.n	8007158 <_printf_float+0x370>
 80070e8:	f04f 0b00 	mov.w	fp, #0
 80070ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070f0:	f104 021a 	add.w	r2, r4, #26
 80070f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070f6:	9305      	str	r3, [sp, #20]
 80070f8:	eba3 0309 	sub.w	r3, r3, r9
 80070fc:	455b      	cmp	r3, fp
 80070fe:	dc33      	bgt.n	8007168 <_printf_float+0x380>
 8007100:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007104:	429a      	cmp	r2, r3
 8007106:	db3b      	blt.n	8007180 <_printf_float+0x398>
 8007108:	6823      	ldr	r3, [r4, #0]
 800710a:	07da      	lsls	r2, r3, #31
 800710c:	d438      	bmi.n	8007180 <_printf_float+0x398>
 800710e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007112:	eba2 0903 	sub.w	r9, r2, r3
 8007116:	9b05      	ldr	r3, [sp, #20]
 8007118:	1ad2      	subs	r2, r2, r3
 800711a:	4591      	cmp	r9, r2
 800711c:	bfa8      	it	ge
 800711e:	4691      	movge	r9, r2
 8007120:	f1b9 0f00 	cmp.w	r9, #0
 8007124:	dc35      	bgt.n	8007192 <_printf_float+0x3aa>
 8007126:	f04f 0800 	mov.w	r8, #0
 800712a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800712e:	f104 0a1a 	add.w	sl, r4, #26
 8007132:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007136:	1a9b      	subs	r3, r3, r2
 8007138:	eba3 0309 	sub.w	r3, r3, r9
 800713c:	4543      	cmp	r3, r8
 800713e:	f77f af79 	ble.w	8007034 <_printf_float+0x24c>
 8007142:	2301      	movs	r3, #1
 8007144:	4652      	mov	r2, sl
 8007146:	4631      	mov	r1, r6
 8007148:	4628      	mov	r0, r5
 800714a:	47b8      	blx	r7
 800714c:	3001      	adds	r0, #1
 800714e:	f43f aeaa 	beq.w	8006ea6 <_printf_float+0xbe>
 8007152:	f108 0801 	add.w	r8, r8, #1
 8007156:	e7ec      	b.n	8007132 <_printf_float+0x34a>
 8007158:	4613      	mov	r3, r2
 800715a:	4631      	mov	r1, r6
 800715c:	4642      	mov	r2, r8
 800715e:	4628      	mov	r0, r5
 8007160:	47b8      	blx	r7
 8007162:	3001      	adds	r0, #1
 8007164:	d1c0      	bne.n	80070e8 <_printf_float+0x300>
 8007166:	e69e      	b.n	8006ea6 <_printf_float+0xbe>
 8007168:	2301      	movs	r3, #1
 800716a:	4631      	mov	r1, r6
 800716c:	4628      	mov	r0, r5
 800716e:	9205      	str	r2, [sp, #20]
 8007170:	47b8      	blx	r7
 8007172:	3001      	adds	r0, #1
 8007174:	f43f ae97 	beq.w	8006ea6 <_printf_float+0xbe>
 8007178:	9a05      	ldr	r2, [sp, #20]
 800717a:	f10b 0b01 	add.w	fp, fp, #1
 800717e:	e7b9      	b.n	80070f4 <_printf_float+0x30c>
 8007180:	ee18 3a10 	vmov	r3, s16
 8007184:	4652      	mov	r2, sl
 8007186:	4631      	mov	r1, r6
 8007188:	4628      	mov	r0, r5
 800718a:	47b8      	blx	r7
 800718c:	3001      	adds	r0, #1
 800718e:	d1be      	bne.n	800710e <_printf_float+0x326>
 8007190:	e689      	b.n	8006ea6 <_printf_float+0xbe>
 8007192:	9a05      	ldr	r2, [sp, #20]
 8007194:	464b      	mov	r3, r9
 8007196:	4442      	add	r2, r8
 8007198:	4631      	mov	r1, r6
 800719a:	4628      	mov	r0, r5
 800719c:	47b8      	blx	r7
 800719e:	3001      	adds	r0, #1
 80071a0:	d1c1      	bne.n	8007126 <_printf_float+0x33e>
 80071a2:	e680      	b.n	8006ea6 <_printf_float+0xbe>
 80071a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071a6:	2a01      	cmp	r2, #1
 80071a8:	dc01      	bgt.n	80071ae <_printf_float+0x3c6>
 80071aa:	07db      	lsls	r3, r3, #31
 80071ac:	d53a      	bpl.n	8007224 <_printf_float+0x43c>
 80071ae:	2301      	movs	r3, #1
 80071b0:	4642      	mov	r2, r8
 80071b2:	4631      	mov	r1, r6
 80071b4:	4628      	mov	r0, r5
 80071b6:	47b8      	blx	r7
 80071b8:	3001      	adds	r0, #1
 80071ba:	f43f ae74 	beq.w	8006ea6 <_printf_float+0xbe>
 80071be:	ee18 3a10 	vmov	r3, s16
 80071c2:	4652      	mov	r2, sl
 80071c4:	4631      	mov	r1, r6
 80071c6:	4628      	mov	r0, r5
 80071c8:	47b8      	blx	r7
 80071ca:	3001      	adds	r0, #1
 80071cc:	f43f ae6b 	beq.w	8006ea6 <_printf_float+0xbe>
 80071d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071d4:	2200      	movs	r2, #0
 80071d6:	2300      	movs	r3, #0
 80071d8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80071dc:	f7f9 fc7c 	bl	8000ad8 <__aeabi_dcmpeq>
 80071e0:	b9d8      	cbnz	r0, 800721a <_printf_float+0x432>
 80071e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80071e6:	f108 0201 	add.w	r2, r8, #1
 80071ea:	4631      	mov	r1, r6
 80071ec:	4628      	mov	r0, r5
 80071ee:	47b8      	blx	r7
 80071f0:	3001      	adds	r0, #1
 80071f2:	d10e      	bne.n	8007212 <_printf_float+0x42a>
 80071f4:	e657      	b.n	8006ea6 <_printf_float+0xbe>
 80071f6:	2301      	movs	r3, #1
 80071f8:	4652      	mov	r2, sl
 80071fa:	4631      	mov	r1, r6
 80071fc:	4628      	mov	r0, r5
 80071fe:	47b8      	blx	r7
 8007200:	3001      	adds	r0, #1
 8007202:	f43f ae50 	beq.w	8006ea6 <_printf_float+0xbe>
 8007206:	f108 0801 	add.w	r8, r8, #1
 800720a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800720c:	3b01      	subs	r3, #1
 800720e:	4543      	cmp	r3, r8
 8007210:	dcf1      	bgt.n	80071f6 <_printf_float+0x40e>
 8007212:	464b      	mov	r3, r9
 8007214:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007218:	e6da      	b.n	8006fd0 <_printf_float+0x1e8>
 800721a:	f04f 0800 	mov.w	r8, #0
 800721e:	f104 0a1a 	add.w	sl, r4, #26
 8007222:	e7f2      	b.n	800720a <_printf_float+0x422>
 8007224:	2301      	movs	r3, #1
 8007226:	4642      	mov	r2, r8
 8007228:	e7df      	b.n	80071ea <_printf_float+0x402>
 800722a:	2301      	movs	r3, #1
 800722c:	464a      	mov	r2, r9
 800722e:	4631      	mov	r1, r6
 8007230:	4628      	mov	r0, r5
 8007232:	47b8      	blx	r7
 8007234:	3001      	adds	r0, #1
 8007236:	f43f ae36 	beq.w	8006ea6 <_printf_float+0xbe>
 800723a:	f108 0801 	add.w	r8, r8, #1
 800723e:	68e3      	ldr	r3, [r4, #12]
 8007240:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007242:	1a5b      	subs	r3, r3, r1
 8007244:	4543      	cmp	r3, r8
 8007246:	dcf0      	bgt.n	800722a <_printf_float+0x442>
 8007248:	e6f8      	b.n	800703c <_printf_float+0x254>
 800724a:	f04f 0800 	mov.w	r8, #0
 800724e:	f104 0919 	add.w	r9, r4, #25
 8007252:	e7f4      	b.n	800723e <_printf_float+0x456>

08007254 <_printf_common>:
 8007254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007258:	4616      	mov	r6, r2
 800725a:	4699      	mov	r9, r3
 800725c:	688a      	ldr	r2, [r1, #8]
 800725e:	690b      	ldr	r3, [r1, #16]
 8007260:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007264:	4293      	cmp	r3, r2
 8007266:	bfb8      	it	lt
 8007268:	4613      	movlt	r3, r2
 800726a:	6033      	str	r3, [r6, #0]
 800726c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007270:	4607      	mov	r7, r0
 8007272:	460c      	mov	r4, r1
 8007274:	b10a      	cbz	r2, 800727a <_printf_common+0x26>
 8007276:	3301      	adds	r3, #1
 8007278:	6033      	str	r3, [r6, #0]
 800727a:	6823      	ldr	r3, [r4, #0]
 800727c:	0699      	lsls	r1, r3, #26
 800727e:	bf42      	ittt	mi
 8007280:	6833      	ldrmi	r3, [r6, #0]
 8007282:	3302      	addmi	r3, #2
 8007284:	6033      	strmi	r3, [r6, #0]
 8007286:	6825      	ldr	r5, [r4, #0]
 8007288:	f015 0506 	ands.w	r5, r5, #6
 800728c:	d106      	bne.n	800729c <_printf_common+0x48>
 800728e:	f104 0a19 	add.w	sl, r4, #25
 8007292:	68e3      	ldr	r3, [r4, #12]
 8007294:	6832      	ldr	r2, [r6, #0]
 8007296:	1a9b      	subs	r3, r3, r2
 8007298:	42ab      	cmp	r3, r5
 800729a:	dc26      	bgt.n	80072ea <_printf_common+0x96>
 800729c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072a0:	1e13      	subs	r3, r2, #0
 80072a2:	6822      	ldr	r2, [r4, #0]
 80072a4:	bf18      	it	ne
 80072a6:	2301      	movne	r3, #1
 80072a8:	0692      	lsls	r2, r2, #26
 80072aa:	d42b      	bmi.n	8007304 <_printf_common+0xb0>
 80072ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072b0:	4649      	mov	r1, r9
 80072b2:	4638      	mov	r0, r7
 80072b4:	47c0      	blx	r8
 80072b6:	3001      	adds	r0, #1
 80072b8:	d01e      	beq.n	80072f8 <_printf_common+0xa4>
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	6922      	ldr	r2, [r4, #16]
 80072be:	f003 0306 	and.w	r3, r3, #6
 80072c2:	2b04      	cmp	r3, #4
 80072c4:	bf02      	ittt	eq
 80072c6:	68e5      	ldreq	r5, [r4, #12]
 80072c8:	6833      	ldreq	r3, [r6, #0]
 80072ca:	1aed      	subeq	r5, r5, r3
 80072cc:	68a3      	ldr	r3, [r4, #8]
 80072ce:	bf0c      	ite	eq
 80072d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072d4:	2500      	movne	r5, #0
 80072d6:	4293      	cmp	r3, r2
 80072d8:	bfc4      	itt	gt
 80072da:	1a9b      	subgt	r3, r3, r2
 80072dc:	18ed      	addgt	r5, r5, r3
 80072de:	2600      	movs	r6, #0
 80072e0:	341a      	adds	r4, #26
 80072e2:	42b5      	cmp	r5, r6
 80072e4:	d11a      	bne.n	800731c <_printf_common+0xc8>
 80072e6:	2000      	movs	r0, #0
 80072e8:	e008      	b.n	80072fc <_printf_common+0xa8>
 80072ea:	2301      	movs	r3, #1
 80072ec:	4652      	mov	r2, sl
 80072ee:	4649      	mov	r1, r9
 80072f0:	4638      	mov	r0, r7
 80072f2:	47c0      	blx	r8
 80072f4:	3001      	adds	r0, #1
 80072f6:	d103      	bne.n	8007300 <_printf_common+0xac>
 80072f8:	f04f 30ff 	mov.w	r0, #4294967295
 80072fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007300:	3501      	adds	r5, #1
 8007302:	e7c6      	b.n	8007292 <_printf_common+0x3e>
 8007304:	18e1      	adds	r1, r4, r3
 8007306:	1c5a      	adds	r2, r3, #1
 8007308:	2030      	movs	r0, #48	; 0x30
 800730a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800730e:	4422      	add	r2, r4
 8007310:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007314:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007318:	3302      	adds	r3, #2
 800731a:	e7c7      	b.n	80072ac <_printf_common+0x58>
 800731c:	2301      	movs	r3, #1
 800731e:	4622      	mov	r2, r4
 8007320:	4649      	mov	r1, r9
 8007322:	4638      	mov	r0, r7
 8007324:	47c0      	blx	r8
 8007326:	3001      	adds	r0, #1
 8007328:	d0e6      	beq.n	80072f8 <_printf_common+0xa4>
 800732a:	3601      	adds	r6, #1
 800732c:	e7d9      	b.n	80072e2 <_printf_common+0x8e>
	...

08007330 <_printf_i>:
 8007330:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007334:	7e0f      	ldrb	r7, [r1, #24]
 8007336:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007338:	2f78      	cmp	r7, #120	; 0x78
 800733a:	4691      	mov	r9, r2
 800733c:	4680      	mov	r8, r0
 800733e:	460c      	mov	r4, r1
 8007340:	469a      	mov	sl, r3
 8007342:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007346:	d807      	bhi.n	8007358 <_printf_i+0x28>
 8007348:	2f62      	cmp	r7, #98	; 0x62
 800734a:	d80a      	bhi.n	8007362 <_printf_i+0x32>
 800734c:	2f00      	cmp	r7, #0
 800734e:	f000 80d4 	beq.w	80074fa <_printf_i+0x1ca>
 8007352:	2f58      	cmp	r7, #88	; 0x58
 8007354:	f000 80c0 	beq.w	80074d8 <_printf_i+0x1a8>
 8007358:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800735c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007360:	e03a      	b.n	80073d8 <_printf_i+0xa8>
 8007362:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007366:	2b15      	cmp	r3, #21
 8007368:	d8f6      	bhi.n	8007358 <_printf_i+0x28>
 800736a:	a101      	add	r1, pc, #4	; (adr r1, 8007370 <_printf_i+0x40>)
 800736c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007370:	080073c9 	.word	0x080073c9
 8007374:	080073dd 	.word	0x080073dd
 8007378:	08007359 	.word	0x08007359
 800737c:	08007359 	.word	0x08007359
 8007380:	08007359 	.word	0x08007359
 8007384:	08007359 	.word	0x08007359
 8007388:	080073dd 	.word	0x080073dd
 800738c:	08007359 	.word	0x08007359
 8007390:	08007359 	.word	0x08007359
 8007394:	08007359 	.word	0x08007359
 8007398:	08007359 	.word	0x08007359
 800739c:	080074e1 	.word	0x080074e1
 80073a0:	08007409 	.word	0x08007409
 80073a4:	0800749b 	.word	0x0800749b
 80073a8:	08007359 	.word	0x08007359
 80073ac:	08007359 	.word	0x08007359
 80073b0:	08007503 	.word	0x08007503
 80073b4:	08007359 	.word	0x08007359
 80073b8:	08007409 	.word	0x08007409
 80073bc:	08007359 	.word	0x08007359
 80073c0:	08007359 	.word	0x08007359
 80073c4:	080074a3 	.word	0x080074a3
 80073c8:	682b      	ldr	r3, [r5, #0]
 80073ca:	1d1a      	adds	r2, r3, #4
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	602a      	str	r2, [r5, #0]
 80073d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073d8:	2301      	movs	r3, #1
 80073da:	e09f      	b.n	800751c <_printf_i+0x1ec>
 80073dc:	6820      	ldr	r0, [r4, #0]
 80073de:	682b      	ldr	r3, [r5, #0]
 80073e0:	0607      	lsls	r7, r0, #24
 80073e2:	f103 0104 	add.w	r1, r3, #4
 80073e6:	6029      	str	r1, [r5, #0]
 80073e8:	d501      	bpl.n	80073ee <_printf_i+0xbe>
 80073ea:	681e      	ldr	r6, [r3, #0]
 80073ec:	e003      	b.n	80073f6 <_printf_i+0xc6>
 80073ee:	0646      	lsls	r6, r0, #25
 80073f0:	d5fb      	bpl.n	80073ea <_printf_i+0xba>
 80073f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80073f6:	2e00      	cmp	r6, #0
 80073f8:	da03      	bge.n	8007402 <_printf_i+0xd2>
 80073fa:	232d      	movs	r3, #45	; 0x2d
 80073fc:	4276      	negs	r6, r6
 80073fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007402:	485a      	ldr	r0, [pc, #360]	; (800756c <_printf_i+0x23c>)
 8007404:	230a      	movs	r3, #10
 8007406:	e012      	b.n	800742e <_printf_i+0xfe>
 8007408:	682b      	ldr	r3, [r5, #0]
 800740a:	6820      	ldr	r0, [r4, #0]
 800740c:	1d19      	adds	r1, r3, #4
 800740e:	6029      	str	r1, [r5, #0]
 8007410:	0605      	lsls	r5, r0, #24
 8007412:	d501      	bpl.n	8007418 <_printf_i+0xe8>
 8007414:	681e      	ldr	r6, [r3, #0]
 8007416:	e002      	b.n	800741e <_printf_i+0xee>
 8007418:	0641      	lsls	r1, r0, #25
 800741a:	d5fb      	bpl.n	8007414 <_printf_i+0xe4>
 800741c:	881e      	ldrh	r6, [r3, #0]
 800741e:	4853      	ldr	r0, [pc, #332]	; (800756c <_printf_i+0x23c>)
 8007420:	2f6f      	cmp	r7, #111	; 0x6f
 8007422:	bf0c      	ite	eq
 8007424:	2308      	moveq	r3, #8
 8007426:	230a      	movne	r3, #10
 8007428:	2100      	movs	r1, #0
 800742a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800742e:	6865      	ldr	r5, [r4, #4]
 8007430:	60a5      	str	r5, [r4, #8]
 8007432:	2d00      	cmp	r5, #0
 8007434:	bfa2      	ittt	ge
 8007436:	6821      	ldrge	r1, [r4, #0]
 8007438:	f021 0104 	bicge.w	r1, r1, #4
 800743c:	6021      	strge	r1, [r4, #0]
 800743e:	b90e      	cbnz	r6, 8007444 <_printf_i+0x114>
 8007440:	2d00      	cmp	r5, #0
 8007442:	d04b      	beq.n	80074dc <_printf_i+0x1ac>
 8007444:	4615      	mov	r5, r2
 8007446:	fbb6 f1f3 	udiv	r1, r6, r3
 800744a:	fb03 6711 	mls	r7, r3, r1, r6
 800744e:	5dc7      	ldrb	r7, [r0, r7]
 8007450:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007454:	4637      	mov	r7, r6
 8007456:	42bb      	cmp	r3, r7
 8007458:	460e      	mov	r6, r1
 800745a:	d9f4      	bls.n	8007446 <_printf_i+0x116>
 800745c:	2b08      	cmp	r3, #8
 800745e:	d10b      	bne.n	8007478 <_printf_i+0x148>
 8007460:	6823      	ldr	r3, [r4, #0]
 8007462:	07de      	lsls	r6, r3, #31
 8007464:	d508      	bpl.n	8007478 <_printf_i+0x148>
 8007466:	6923      	ldr	r3, [r4, #16]
 8007468:	6861      	ldr	r1, [r4, #4]
 800746a:	4299      	cmp	r1, r3
 800746c:	bfde      	ittt	le
 800746e:	2330      	movle	r3, #48	; 0x30
 8007470:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007474:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007478:	1b52      	subs	r2, r2, r5
 800747a:	6122      	str	r2, [r4, #16]
 800747c:	f8cd a000 	str.w	sl, [sp]
 8007480:	464b      	mov	r3, r9
 8007482:	aa03      	add	r2, sp, #12
 8007484:	4621      	mov	r1, r4
 8007486:	4640      	mov	r0, r8
 8007488:	f7ff fee4 	bl	8007254 <_printf_common>
 800748c:	3001      	adds	r0, #1
 800748e:	d14a      	bne.n	8007526 <_printf_i+0x1f6>
 8007490:	f04f 30ff 	mov.w	r0, #4294967295
 8007494:	b004      	add	sp, #16
 8007496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800749a:	6823      	ldr	r3, [r4, #0]
 800749c:	f043 0320 	orr.w	r3, r3, #32
 80074a0:	6023      	str	r3, [r4, #0]
 80074a2:	4833      	ldr	r0, [pc, #204]	; (8007570 <_printf_i+0x240>)
 80074a4:	2778      	movs	r7, #120	; 0x78
 80074a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80074aa:	6823      	ldr	r3, [r4, #0]
 80074ac:	6829      	ldr	r1, [r5, #0]
 80074ae:	061f      	lsls	r7, r3, #24
 80074b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80074b4:	d402      	bmi.n	80074bc <_printf_i+0x18c>
 80074b6:	065f      	lsls	r7, r3, #25
 80074b8:	bf48      	it	mi
 80074ba:	b2b6      	uxthmi	r6, r6
 80074bc:	07df      	lsls	r7, r3, #31
 80074be:	bf48      	it	mi
 80074c0:	f043 0320 	orrmi.w	r3, r3, #32
 80074c4:	6029      	str	r1, [r5, #0]
 80074c6:	bf48      	it	mi
 80074c8:	6023      	strmi	r3, [r4, #0]
 80074ca:	b91e      	cbnz	r6, 80074d4 <_printf_i+0x1a4>
 80074cc:	6823      	ldr	r3, [r4, #0]
 80074ce:	f023 0320 	bic.w	r3, r3, #32
 80074d2:	6023      	str	r3, [r4, #0]
 80074d4:	2310      	movs	r3, #16
 80074d6:	e7a7      	b.n	8007428 <_printf_i+0xf8>
 80074d8:	4824      	ldr	r0, [pc, #144]	; (800756c <_printf_i+0x23c>)
 80074da:	e7e4      	b.n	80074a6 <_printf_i+0x176>
 80074dc:	4615      	mov	r5, r2
 80074de:	e7bd      	b.n	800745c <_printf_i+0x12c>
 80074e0:	682b      	ldr	r3, [r5, #0]
 80074e2:	6826      	ldr	r6, [r4, #0]
 80074e4:	6961      	ldr	r1, [r4, #20]
 80074e6:	1d18      	adds	r0, r3, #4
 80074e8:	6028      	str	r0, [r5, #0]
 80074ea:	0635      	lsls	r5, r6, #24
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	d501      	bpl.n	80074f4 <_printf_i+0x1c4>
 80074f0:	6019      	str	r1, [r3, #0]
 80074f2:	e002      	b.n	80074fa <_printf_i+0x1ca>
 80074f4:	0670      	lsls	r0, r6, #25
 80074f6:	d5fb      	bpl.n	80074f0 <_printf_i+0x1c0>
 80074f8:	8019      	strh	r1, [r3, #0]
 80074fa:	2300      	movs	r3, #0
 80074fc:	6123      	str	r3, [r4, #16]
 80074fe:	4615      	mov	r5, r2
 8007500:	e7bc      	b.n	800747c <_printf_i+0x14c>
 8007502:	682b      	ldr	r3, [r5, #0]
 8007504:	1d1a      	adds	r2, r3, #4
 8007506:	602a      	str	r2, [r5, #0]
 8007508:	681d      	ldr	r5, [r3, #0]
 800750a:	6862      	ldr	r2, [r4, #4]
 800750c:	2100      	movs	r1, #0
 800750e:	4628      	mov	r0, r5
 8007510:	f7f8 fe66 	bl	80001e0 <memchr>
 8007514:	b108      	cbz	r0, 800751a <_printf_i+0x1ea>
 8007516:	1b40      	subs	r0, r0, r5
 8007518:	6060      	str	r0, [r4, #4]
 800751a:	6863      	ldr	r3, [r4, #4]
 800751c:	6123      	str	r3, [r4, #16]
 800751e:	2300      	movs	r3, #0
 8007520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007524:	e7aa      	b.n	800747c <_printf_i+0x14c>
 8007526:	6923      	ldr	r3, [r4, #16]
 8007528:	462a      	mov	r2, r5
 800752a:	4649      	mov	r1, r9
 800752c:	4640      	mov	r0, r8
 800752e:	47d0      	blx	sl
 8007530:	3001      	adds	r0, #1
 8007532:	d0ad      	beq.n	8007490 <_printf_i+0x160>
 8007534:	6823      	ldr	r3, [r4, #0]
 8007536:	079b      	lsls	r3, r3, #30
 8007538:	d413      	bmi.n	8007562 <_printf_i+0x232>
 800753a:	68e0      	ldr	r0, [r4, #12]
 800753c:	9b03      	ldr	r3, [sp, #12]
 800753e:	4298      	cmp	r0, r3
 8007540:	bfb8      	it	lt
 8007542:	4618      	movlt	r0, r3
 8007544:	e7a6      	b.n	8007494 <_printf_i+0x164>
 8007546:	2301      	movs	r3, #1
 8007548:	4632      	mov	r2, r6
 800754a:	4649      	mov	r1, r9
 800754c:	4640      	mov	r0, r8
 800754e:	47d0      	blx	sl
 8007550:	3001      	adds	r0, #1
 8007552:	d09d      	beq.n	8007490 <_printf_i+0x160>
 8007554:	3501      	adds	r5, #1
 8007556:	68e3      	ldr	r3, [r4, #12]
 8007558:	9903      	ldr	r1, [sp, #12]
 800755a:	1a5b      	subs	r3, r3, r1
 800755c:	42ab      	cmp	r3, r5
 800755e:	dcf2      	bgt.n	8007546 <_printf_i+0x216>
 8007560:	e7eb      	b.n	800753a <_printf_i+0x20a>
 8007562:	2500      	movs	r5, #0
 8007564:	f104 0619 	add.w	r6, r4, #25
 8007568:	e7f5      	b.n	8007556 <_printf_i+0x226>
 800756a:	bf00      	nop
 800756c:	08009a32 	.word	0x08009a32
 8007570:	08009a43 	.word	0x08009a43

08007574 <std>:
 8007574:	2300      	movs	r3, #0
 8007576:	b510      	push	{r4, lr}
 8007578:	4604      	mov	r4, r0
 800757a:	e9c0 3300 	strd	r3, r3, [r0]
 800757e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007582:	6083      	str	r3, [r0, #8]
 8007584:	8181      	strh	r1, [r0, #12]
 8007586:	6643      	str	r3, [r0, #100]	; 0x64
 8007588:	81c2      	strh	r2, [r0, #14]
 800758a:	6183      	str	r3, [r0, #24]
 800758c:	4619      	mov	r1, r3
 800758e:	2208      	movs	r2, #8
 8007590:	305c      	adds	r0, #92	; 0x5c
 8007592:	f000 f914 	bl	80077be <memset>
 8007596:	4b0d      	ldr	r3, [pc, #52]	; (80075cc <std+0x58>)
 8007598:	6263      	str	r3, [r4, #36]	; 0x24
 800759a:	4b0d      	ldr	r3, [pc, #52]	; (80075d0 <std+0x5c>)
 800759c:	62a3      	str	r3, [r4, #40]	; 0x28
 800759e:	4b0d      	ldr	r3, [pc, #52]	; (80075d4 <std+0x60>)
 80075a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075a2:	4b0d      	ldr	r3, [pc, #52]	; (80075d8 <std+0x64>)
 80075a4:	6323      	str	r3, [r4, #48]	; 0x30
 80075a6:	4b0d      	ldr	r3, [pc, #52]	; (80075dc <std+0x68>)
 80075a8:	6224      	str	r4, [r4, #32]
 80075aa:	429c      	cmp	r4, r3
 80075ac:	d006      	beq.n	80075bc <std+0x48>
 80075ae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80075b2:	4294      	cmp	r4, r2
 80075b4:	d002      	beq.n	80075bc <std+0x48>
 80075b6:	33d0      	adds	r3, #208	; 0xd0
 80075b8:	429c      	cmp	r4, r3
 80075ba:	d105      	bne.n	80075c8 <std+0x54>
 80075bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80075c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075c4:	f000 b978 	b.w	80078b8 <__retarget_lock_init_recursive>
 80075c8:	bd10      	pop	{r4, pc}
 80075ca:	bf00      	nop
 80075cc:	08007739 	.word	0x08007739
 80075d0:	0800775b 	.word	0x0800775b
 80075d4:	08007793 	.word	0x08007793
 80075d8:	080077b7 	.word	0x080077b7
 80075dc:	200004c0 	.word	0x200004c0

080075e0 <stdio_exit_handler>:
 80075e0:	4a02      	ldr	r2, [pc, #8]	; (80075ec <stdio_exit_handler+0xc>)
 80075e2:	4903      	ldr	r1, [pc, #12]	; (80075f0 <stdio_exit_handler+0x10>)
 80075e4:	4803      	ldr	r0, [pc, #12]	; (80075f4 <stdio_exit_handler+0x14>)
 80075e6:	f000 b869 	b.w	80076bc <_fwalk_sglue>
 80075ea:	bf00      	nop
 80075ec:	20000010 	.word	0x20000010
 80075f0:	08009269 	.word	0x08009269
 80075f4:	2000001c 	.word	0x2000001c

080075f8 <cleanup_stdio>:
 80075f8:	6841      	ldr	r1, [r0, #4]
 80075fa:	4b0c      	ldr	r3, [pc, #48]	; (800762c <cleanup_stdio+0x34>)
 80075fc:	4299      	cmp	r1, r3
 80075fe:	b510      	push	{r4, lr}
 8007600:	4604      	mov	r4, r0
 8007602:	d001      	beq.n	8007608 <cleanup_stdio+0x10>
 8007604:	f001 fe30 	bl	8009268 <_fflush_r>
 8007608:	68a1      	ldr	r1, [r4, #8]
 800760a:	4b09      	ldr	r3, [pc, #36]	; (8007630 <cleanup_stdio+0x38>)
 800760c:	4299      	cmp	r1, r3
 800760e:	d002      	beq.n	8007616 <cleanup_stdio+0x1e>
 8007610:	4620      	mov	r0, r4
 8007612:	f001 fe29 	bl	8009268 <_fflush_r>
 8007616:	68e1      	ldr	r1, [r4, #12]
 8007618:	4b06      	ldr	r3, [pc, #24]	; (8007634 <cleanup_stdio+0x3c>)
 800761a:	4299      	cmp	r1, r3
 800761c:	d004      	beq.n	8007628 <cleanup_stdio+0x30>
 800761e:	4620      	mov	r0, r4
 8007620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007624:	f001 be20 	b.w	8009268 <_fflush_r>
 8007628:	bd10      	pop	{r4, pc}
 800762a:	bf00      	nop
 800762c:	200004c0 	.word	0x200004c0
 8007630:	20000528 	.word	0x20000528
 8007634:	20000590 	.word	0x20000590

08007638 <global_stdio_init.part.0>:
 8007638:	b510      	push	{r4, lr}
 800763a:	4b0b      	ldr	r3, [pc, #44]	; (8007668 <global_stdio_init.part.0+0x30>)
 800763c:	4c0b      	ldr	r4, [pc, #44]	; (800766c <global_stdio_init.part.0+0x34>)
 800763e:	4a0c      	ldr	r2, [pc, #48]	; (8007670 <global_stdio_init.part.0+0x38>)
 8007640:	601a      	str	r2, [r3, #0]
 8007642:	4620      	mov	r0, r4
 8007644:	2200      	movs	r2, #0
 8007646:	2104      	movs	r1, #4
 8007648:	f7ff ff94 	bl	8007574 <std>
 800764c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007650:	2201      	movs	r2, #1
 8007652:	2109      	movs	r1, #9
 8007654:	f7ff ff8e 	bl	8007574 <std>
 8007658:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800765c:	2202      	movs	r2, #2
 800765e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007662:	2112      	movs	r1, #18
 8007664:	f7ff bf86 	b.w	8007574 <std>
 8007668:	200005f8 	.word	0x200005f8
 800766c:	200004c0 	.word	0x200004c0
 8007670:	080075e1 	.word	0x080075e1

08007674 <__sfp_lock_acquire>:
 8007674:	4801      	ldr	r0, [pc, #4]	; (800767c <__sfp_lock_acquire+0x8>)
 8007676:	f000 b920 	b.w	80078ba <__retarget_lock_acquire_recursive>
 800767a:	bf00      	nop
 800767c:	20000601 	.word	0x20000601

08007680 <__sfp_lock_release>:
 8007680:	4801      	ldr	r0, [pc, #4]	; (8007688 <__sfp_lock_release+0x8>)
 8007682:	f000 b91b 	b.w	80078bc <__retarget_lock_release_recursive>
 8007686:	bf00      	nop
 8007688:	20000601 	.word	0x20000601

0800768c <__sinit>:
 800768c:	b510      	push	{r4, lr}
 800768e:	4604      	mov	r4, r0
 8007690:	f7ff fff0 	bl	8007674 <__sfp_lock_acquire>
 8007694:	6a23      	ldr	r3, [r4, #32]
 8007696:	b11b      	cbz	r3, 80076a0 <__sinit+0x14>
 8007698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800769c:	f7ff bff0 	b.w	8007680 <__sfp_lock_release>
 80076a0:	4b04      	ldr	r3, [pc, #16]	; (80076b4 <__sinit+0x28>)
 80076a2:	6223      	str	r3, [r4, #32]
 80076a4:	4b04      	ldr	r3, [pc, #16]	; (80076b8 <__sinit+0x2c>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1f5      	bne.n	8007698 <__sinit+0xc>
 80076ac:	f7ff ffc4 	bl	8007638 <global_stdio_init.part.0>
 80076b0:	e7f2      	b.n	8007698 <__sinit+0xc>
 80076b2:	bf00      	nop
 80076b4:	080075f9 	.word	0x080075f9
 80076b8:	200005f8 	.word	0x200005f8

080076bc <_fwalk_sglue>:
 80076bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076c0:	4607      	mov	r7, r0
 80076c2:	4688      	mov	r8, r1
 80076c4:	4614      	mov	r4, r2
 80076c6:	2600      	movs	r6, #0
 80076c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076cc:	f1b9 0901 	subs.w	r9, r9, #1
 80076d0:	d505      	bpl.n	80076de <_fwalk_sglue+0x22>
 80076d2:	6824      	ldr	r4, [r4, #0]
 80076d4:	2c00      	cmp	r4, #0
 80076d6:	d1f7      	bne.n	80076c8 <_fwalk_sglue+0xc>
 80076d8:	4630      	mov	r0, r6
 80076da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076de:	89ab      	ldrh	r3, [r5, #12]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d907      	bls.n	80076f4 <_fwalk_sglue+0x38>
 80076e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076e8:	3301      	adds	r3, #1
 80076ea:	d003      	beq.n	80076f4 <_fwalk_sglue+0x38>
 80076ec:	4629      	mov	r1, r5
 80076ee:	4638      	mov	r0, r7
 80076f0:	47c0      	blx	r8
 80076f2:	4306      	orrs	r6, r0
 80076f4:	3568      	adds	r5, #104	; 0x68
 80076f6:	e7e9      	b.n	80076cc <_fwalk_sglue+0x10>

080076f8 <siprintf>:
 80076f8:	b40e      	push	{r1, r2, r3}
 80076fa:	b500      	push	{lr}
 80076fc:	b09c      	sub	sp, #112	; 0x70
 80076fe:	ab1d      	add	r3, sp, #116	; 0x74
 8007700:	9002      	str	r0, [sp, #8]
 8007702:	9006      	str	r0, [sp, #24]
 8007704:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007708:	4809      	ldr	r0, [pc, #36]	; (8007730 <siprintf+0x38>)
 800770a:	9107      	str	r1, [sp, #28]
 800770c:	9104      	str	r1, [sp, #16]
 800770e:	4909      	ldr	r1, [pc, #36]	; (8007734 <siprintf+0x3c>)
 8007710:	f853 2b04 	ldr.w	r2, [r3], #4
 8007714:	9105      	str	r1, [sp, #20]
 8007716:	6800      	ldr	r0, [r0, #0]
 8007718:	9301      	str	r3, [sp, #4]
 800771a:	a902      	add	r1, sp, #8
 800771c:	f001 fc20 	bl	8008f60 <_svfiprintf_r>
 8007720:	9b02      	ldr	r3, [sp, #8]
 8007722:	2200      	movs	r2, #0
 8007724:	701a      	strb	r2, [r3, #0]
 8007726:	b01c      	add	sp, #112	; 0x70
 8007728:	f85d eb04 	ldr.w	lr, [sp], #4
 800772c:	b003      	add	sp, #12
 800772e:	4770      	bx	lr
 8007730:	20000068 	.word	0x20000068
 8007734:	ffff0208 	.word	0xffff0208

08007738 <__sread>:
 8007738:	b510      	push	{r4, lr}
 800773a:	460c      	mov	r4, r1
 800773c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007740:	f000 f86c 	bl	800781c <_read_r>
 8007744:	2800      	cmp	r0, #0
 8007746:	bfab      	itete	ge
 8007748:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800774a:	89a3      	ldrhlt	r3, [r4, #12]
 800774c:	181b      	addge	r3, r3, r0
 800774e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007752:	bfac      	ite	ge
 8007754:	6563      	strge	r3, [r4, #84]	; 0x54
 8007756:	81a3      	strhlt	r3, [r4, #12]
 8007758:	bd10      	pop	{r4, pc}

0800775a <__swrite>:
 800775a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800775e:	461f      	mov	r7, r3
 8007760:	898b      	ldrh	r3, [r1, #12]
 8007762:	05db      	lsls	r3, r3, #23
 8007764:	4605      	mov	r5, r0
 8007766:	460c      	mov	r4, r1
 8007768:	4616      	mov	r6, r2
 800776a:	d505      	bpl.n	8007778 <__swrite+0x1e>
 800776c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007770:	2302      	movs	r3, #2
 8007772:	2200      	movs	r2, #0
 8007774:	f000 f840 	bl	80077f8 <_lseek_r>
 8007778:	89a3      	ldrh	r3, [r4, #12]
 800777a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800777e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007782:	81a3      	strh	r3, [r4, #12]
 8007784:	4632      	mov	r2, r6
 8007786:	463b      	mov	r3, r7
 8007788:	4628      	mov	r0, r5
 800778a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800778e:	f000 b857 	b.w	8007840 <_write_r>

08007792 <__sseek>:
 8007792:	b510      	push	{r4, lr}
 8007794:	460c      	mov	r4, r1
 8007796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800779a:	f000 f82d 	bl	80077f8 <_lseek_r>
 800779e:	1c43      	adds	r3, r0, #1
 80077a0:	89a3      	ldrh	r3, [r4, #12]
 80077a2:	bf15      	itete	ne
 80077a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80077a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80077aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80077ae:	81a3      	strheq	r3, [r4, #12]
 80077b0:	bf18      	it	ne
 80077b2:	81a3      	strhne	r3, [r4, #12]
 80077b4:	bd10      	pop	{r4, pc}

080077b6 <__sclose>:
 80077b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077ba:	f000 b80d 	b.w	80077d8 <_close_r>

080077be <memset>:
 80077be:	4402      	add	r2, r0
 80077c0:	4603      	mov	r3, r0
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d100      	bne.n	80077c8 <memset+0xa>
 80077c6:	4770      	bx	lr
 80077c8:	f803 1b01 	strb.w	r1, [r3], #1
 80077cc:	e7f9      	b.n	80077c2 <memset+0x4>
	...

080077d0 <_localeconv_r>:
 80077d0:	4800      	ldr	r0, [pc, #0]	; (80077d4 <_localeconv_r+0x4>)
 80077d2:	4770      	bx	lr
 80077d4:	2000015c 	.word	0x2000015c

080077d8 <_close_r>:
 80077d8:	b538      	push	{r3, r4, r5, lr}
 80077da:	4d06      	ldr	r5, [pc, #24]	; (80077f4 <_close_r+0x1c>)
 80077dc:	2300      	movs	r3, #0
 80077de:	4604      	mov	r4, r0
 80077e0:	4608      	mov	r0, r1
 80077e2:	602b      	str	r3, [r5, #0]
 80077e4:	f7fb f887 	bl	80028f6 <_close>
 80077e8:	1c43      	adds	r3, r0, #1
 80077ea:	d102      	bne.n	80077f2 <_close_r+0x1a>
 80077ec:	682b      	ldr	r3, [r5, #0]
 80077ee:	b103      	cbz	r3, 80077f2 <_close_r+0x1a>
 80077f0:	6023      	str	r3, [r4, #0]
 80077f2:	bd38      	pop	{r3, r4, r5, pc}
 80077f4:	200005fc 	.word	0x200005fc

080077f8 <_lseek_r>:
 80077f8:	b538      	push	{r3, r4, r5, lr}
 80077fa:	4d07      	ldr	r5, [pc, #28]	; (8007818 <_lseek_r+0x20>)
 80077fc:	4604      	mov	r4, r0
 80077fe:	4608      	mov	r0, r1
 8007800:	4611      	mov	r1, r2
 8007802:	2200      	movs	r2, #0
 8007804:	602a      	str	r2, [r5, #0]
 8007806:	461a      	mov	r2, r3
 8007808:	f7fb f89c 	bl	8002944 <_lseek>
 800780c:	1c43      	adds	r3, r0, #1
 800780e:	d102      	bne.n	8007816 <_lseek_r+0x1e>
 8007810:	682b      	ldr	r3, [r5, #0]
 8007812:	b103      	cbz	r3, 8007816 <_lseek_r+0x1e>
 8007814:	6023      	str	r3, [r4, #0]
 8007816:	bd38      	pop	{r3, r4, r5, pc}
 8007818:	200005fc 	.word	0x200005fc

0800781c <_read_r>:
 800781c:	b538      	push	{r3, r4, r5, lr}
 800781e:	4d07      	ldr	r5, [pc, #28]	; (800783c <_read_r+0x20>)
 8007820:	4604      	mov	r4, r0
 8007822:	4608      	mov	r0, r1
 8007824:	4611      	mov	r1, r2
 8007826:	2200      	movs	r2, #0
 8007828:	602a      	str	r2, [r5, #0]
 800782a:	461a      	mov	r2, r3
 800782c:	f7fb f82a 	bl	8002884 <_read>
 8007830:	1c43      	adds	r3, r0, #1
 8007832:	d102      	bne.n	800783a <_read_r+0x1e>
 8007834:	682b      	ldr	r3, [r5, #0]
 8007836:	b103      	cbz	r3, 800783a <_read_r+0x1e>
 8007838:	6023      	str	r3, [r4, #0]
 800783a:	bd38      	pop	{r3, r4, r5, pc}
 800783c:	200005fc 	.word	0x200005fc

08007840 <_write_r>:
 8007840:	b538      	push	{r3, r4, r5, lr}
 8007842:	4d07      	ldr	r5, [pc, #28]	; (8007860 <_write_r+0x20>)
 8007844:	4604      	mov	r4, r0
 8007846:	4608      	mov	r0, r1
 8007848:	4611      	mov	r1, r2
 800784a:	2200      	movs	r2, #0
 800784c:	602a      	str	r2, [r5, #0]
 800784e:	461a      	mov	r2, r3
 8007850:	f7fb f835 	bl	80028be <_write>
 8007854:	1c43      	adds	r3, r0, #1
 8007856:	d102      	bne.n	800785e <_write_r+0x1e>
 8007858:	682b      	ldr	r3, [r5, #0]
 800785a:	b103      	cbz	r3, 800785e <_write_r+0x1e>
 800785c:	6023      	str	r3, [r4, #0]
 800785e:	bd38      	pop	{r3, r4, r5, pc}
 8007860:	200005fc 	.word	0x200005fc

08007864 <__errno>:
 8007864:	4b01      	ldr	r3, [pc, #4]	; (800786c <__errno+0x8>)
 8007866:	6818      	ldr	r0, [r3, #0]
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	20000068 	.word	0x20000068

08007870 <__libc_init_array>:
 8007870:	b570      	push	{r4, r5, r6, lr}
 8007872:	4d0d      	ldr	r5, [pc, #52]	; (80078a8 <__libc_init_array+0x38>)
 8007874:	4c0d      	ldr	r4, [pc, #52]	; (80078ac <__libc_init_array+0x3c>)
 8007876:	1b64      	subs	r4, r4, r5
 8007878:	10a4      	asrs	r4, r4, #2
 800787a:	2600      	movs	r6, #0
 800787c:	42a6      	cmp	r6, r4
 800787e:	d109      	bne.n	8007894 <__libc_init_array+0x24>
 8007880:	4d0b      	ldr	r5, [pc, #44]	; (80078b0 <__libc_init_array+0x40>)
 8007882:	4c0c      	ldr	r4, [pc, #48]	; (80078b4 <__libc_init_array+0x44>)
 8007884:	f002 f894 	bl	80099b0 <_init>
 8007888:	1b64      	subs	r4, r4, r5
 800788a:	10a4      	asrs	r4, r4, #2
 800788c:	2600      	movs	r6, #0
 800788e:	42a6      	cmp	r6, r4
 8007890:	d105      	bne.n	800789e <__libc_init_array+0x2e>
 8007892:	bd70      	pop	{r4, r5, r6, pc}
 8007894:	f855 3b04 	ldr.w	r3, [r5], #4
 8007898:	4798      	blx	r3
 800789a:	3601      	adds	r6, #1
 800789c:	e7ee      	b.n	800787c <__libc_init_array+0xc>
 800789e:	f855 3b04 	ldr.w	r3, [r5], #4
 80078a2:	4798      	blx	r3
 80078a4:	3601      	adds	r6, #1
 80078a6:	e7f2      	b.n	800788e <__libc_init_array+0x1e>
 80078a8:	08009d9c 	.word	0x08009d9c
 80078ac:	08009d9c 	.word	0x08009d9c
 80078b0:	08009d9c 	.word	0x08009d9c
 80078b4:	08009da0 	.word	0x08009da0

080078b8 <__retarget_lock_init_recursive>:
 80078b8:	4770      	bx	lr

080078ba <__retarget_lock_acquire_recursive>:
 80078ba:	4770      	bx	lr

080078bc <__retarget_lock_release_recursive>:
 80078bc:	4770      	bx	lr

080078be <quorem>:
 80078be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c2:	6903      	ldr	r3, [r0, #16]
 80078c4:	690c      	ldr	r4, [r1, #16]
 80078c6:	42a3      	cmp	r3, r4
 80078c8:	4607      	mov	r7, r0
 80078ca:	db7e      	blt.n	80079ca <quorem+0x10c>
 80078cc:	3c01      	subs	r4, #1
 80078ce:	f101 0814 	add.w	r8, r1, #20
 80078d2:	f100 0514 	add.w	r5, r0, #20
 80078d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078da:	9301      	str	r3, [sp, #4]
 80078dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80078e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078e4:	3301      	adds	r3, #1
 80078e6:	429a      	cmp	r2, r3
 80078e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80078ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80078f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80078f4:	d331      	bcc.n	800795a <quorem+0x9c>
 80078f6:	f04f 0e00 	mov.w	lr, #0
 80078fa:	4640      	mov	r0, r8
 80078fc:	46ac      	mov	ip, r5
 80078fe:	46f2      	mov	sl, lr
 8007900:	f850 2b04 	ldr.w	r2, [r0], #4
 8007904:	b293      	uxth	r3, r2
 8007906:	fb06 e303 	mla	r3, r6, r3, lr
 800790a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800790e:	0c1a      	lsrs	r2, r3, #16
 8007910:	b29b      	uxth	r3, r3
 8007912:	ebaa 0303 	sub.w	r3, sl, r3
 8007916:	f8dc a000 	ldr.w	sl, [ip]
 800791a:	fa13 f38a 	uxtah	r3, r3, sl
 800791e:	fb06 220e 	mla	r2, r6, lr, r2
 8007922:	9300      	str	r3, [sp, #0]
 8007924:	9b00      	ldr	r3, [sp, #0]
 8007926:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800792a:	b292      	uxth	r2, r2
 800792c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007930:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007934:	f8bd 3000 	ldrh.w	r3, [sp]
 8007938:	4581      	cmp	r9, r0
 800793a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800793e:	f84c 3b04 	str.w	r3, [ip], #4
 8007942:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007946:	d2db      	bcs.n	8007900 <quorem+0x42>
 8007948:	f855 300b 	ldr.w	r3, [r5, fp]
 800794c:	b92b      	cbnz	r3, 800795a <quorem+0x9c>
 800794e:	9b01      	ldr	r3, [sp, #4]
 8007950:	3b04      	subs	r3, #4
 8007952:	429d      	cmp	r5, r3
 8007954:	461a      	mov	r2, r3
 8007956:	d32c      	bcc.n	80079b2 <quorem+0xf4>
 8007958:	613c      	str	r4, [r7, #16]
 800795a:	4638      	mov	r0, r7
 800795c:	f001 f9a6 	bl	8008cac <__mcmp>
 8007960:	2800      	cmp	r0, #0
 8007962:	db22      	blt.n	80079aa <quorem+0xec>
 8007964:	3601      	adds	r6, #1
 8007966:	4629      	mov	r1, r5
 8007968:	2000      	movs	r0, #0
 800796a:	f858 2b04 	ldr.w	r2, [r8], #4
 800796e:	f8d1 c000 	ldr.w	ip, [r1]
 8007972:	b293      	uxth	r3, r2
 8007974:	1ac3      	subs	r3, r0, r3
 8007976:	0c12      	lsrs	r2, r2, #16
 8007978:	fa13 f38c 	uxtah	r3, r3, ip
 800797c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007980:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007984:	b29b      	uxth	r3, r3
 8007986:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800798a:	45c1      	cmp	r9, r8
 800798c:	f841 3b04 	str.w	r3, [r1], #4
 8007990:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007994:	d2e9      	bcs.n	800796a <quorem+0xac>
 8007996:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800799a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800799e:	b922      	cbnz	r2, 80079aa <quorem+0xec>
 80079a0:	3b04      	subs	r3, #4
 80079a2:	429d      	cmp	r5, r3
 80079a4:	461a      	mov	r2, r3
 80079a6:	d30a      	bcc.n	80079be <quorem+0x100>
 80079a8:	613c      	str	r4, [r7, #16]
 80079aa:	4630      	mov	r0, r6
 80079ac:	b003      	add	sp, #12
 80079ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079b2:	6812      	ldr	r2, [r2, #0]
 80079b4:	3b04      	subs	r3, #4
 80079b6:	2a00      	cmp	r2, #0
 80079b8:	d1ce      	bne.n	8007958 <quorem+0x9a>
 80079ba:	3c01      	subs	r4, #1
 80079bc:	e7c9      	b.n	8007952 <quorem+0x94>
 80079be:	6812      	ldr	r2, [r2, #0]
 80079c0:	3b04      	subs	r3, #4
 80079c2:	2a00      	cmp	r2, #0
 80079c4:	d1f0      	bne.n	80079a8 <quorem+0xea>
 80079c6:	3c01      	subs	r4, #1
 80079c8:	e7eb      	b.n	80079a2 <quorem+0xe4>
 80079ca:	2000      	movs	r0, #0
 80079cc:	e7ee      	b.n	80079ac <quorem+0xee>
	...

080079d0 <_dtoa_r>:
 80079d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079d4:	ed2d 8b04 	vpush	{d8-d9}
 80079d8:	69c5      	ldr	r5, [r0, #28]
 80079da:	b093      	sub	sp, #76	; 0x4c
 80079dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80079e0:	ec57 6b10 	vmov	r6, r7, d0
 80079e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80079e8:	9107      	str	r1, [sp, #28]
 80079ea:	4604      	mov	r4, r0
 80079ec:	920a      	str	r2, [sp, #40]	; 0x28
 80079ee:	930d      	str	r3, [sp, #52]	; 0x34
 80079f0:	b975      	cbnz	r5, 8007a10 <_dtoa_r+0x40>
 80079f2:	2010      	movs	r0, #16
 80079f4:	f000 fe2a 	bl	800864c <malloc>
 80079f8:	4602      	mov	r2, r0
 80079fa:	61e0      	str	r0, [r4, #28]
 80079fc:	b920      	cbnz	r0, 8007a08 <_dtoa_r+0x38>
 80079fe:	4bae      	ldr	r3, [pc, #696]	; (8007cb8 <_dtoa_r+0x2e8>)
 8007a00:	21ef      	movs	r1, #239	; 0xef
 8007a02:	48ae      	ldr	r0, [pc, #696]	; (8007cbc <_dtoa_r+0x2ec>)
 8007a04:	f001 fc90 	bl	8009328 <__assert_func>
 8007a08:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007a0c:	6005      	str	r5, [r0, #0]
 8007a0e:	60c5      	str	r5, [r0, #12]
 8007a10:	69e3      	ldr	r3, [r4, #28]
 8007a12:	6819      	ldr	r1, [r3, #0]
 8007a14:	b151      	cbz	r1, 8007a2c <_dtoa_r+0x5c>
 8007a16:	685a      	ldr	r2, [r3, #4]
 8007a18:	604a      	str	r2, [r1, #4]
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	4093      	lsls	r3, r2
 8007a1e:	608b      	str	r3, [r1, #8]
 8007a20:	4620      	mov	r0, r4
 8007a22:	f000 ff07 	bl	8008834 <_Bfree>
 8007a26:	69e3      	ldr	r3, [r4, #28]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	601a      	str	r2, [r3, #0]
 8007a2c:	1e3b      	subs	r3, r7, #0
 8007a2e:	bfbb      	ittet	lt
 8007a30:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007a34:	9303      	strlt	r3, [sp, #12]
 8007a36:	2300      	movge	r3, #0
 8007a38:	2201      	movlt	r2, #1
 8007a3a:	bfac      	ite	ge
 8007a3c:	f8c8 3000 	strge.w	r3, [r8]
 8007a40:	f8c8 2000 	strlt.w	r2, [r8]
 8007a44:	4b9e      	ldr	r3, [pc, #632]	; (8007cc0 <_dtoa_r+0x2f0>)
 8007a46:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007a4a:	ea33 0308 	bics.w	r3, r3, r8
 8007a4e:	d11b      	bne.n	8007a88 <_dtoa_r+0xb8>
 8007a50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a52:	f242 730f 	movw	r3, #9999	; 0x270f
 8007a56:	6013      	str	r3, [r2, #0]
 8007a58:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007a5c:	4333      	orrs	r3, r6
 8007a5e:	f000 8593 	beq.w	8008588 <_dtoa_r+0xbb8>
 8007a62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a64:	b963      	cbnz	r3, 8007a80 <_dtoa_r+0xb0>
 8007a66:	4b97      	ldr	r3, [pc, #604]	; (8007cc4 <_dtoa_r+0x2f4>)
 8007a68:	e027      	b.n	8007aba <_dtoa_r+0xea>
 8007a6a:	4b97      	ldr	r3, [pc, #604]	; (8007cc8 <_dtoa_r+0x2f8>)
 8007a6c:	9300      	str	r3, [sp, #0]
 8007a6e:	3308      	adds	r3, #8
 8007a70:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007a72:	6013      	str	r3, [r2, #0]
 8007a74:	9800      	ldr	r0, [sp, #0]
 8007a76:	b013      	add	sp, #76	; 0x4c
 8007a78:	ecbd 8b04 	vpop	{d8-d9}
 8007a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a80:	4b90      	ldr	r3, [pc, #576]	; (8007cc4 <_dtoa_r+0x2f4>)
 8007a82:	9300      	str	r3, [sp, #0]
 8007a84:	3303      	adds	r3, #3
 8007a86:	e7f3      	b.n	8007a70 <_dtoa_r+0xa0>
 8007a88:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	ec51 0b17 	vmov	r0, r1, d7
 8007a92:	eeb0 8a47 	vmov.f32	s16, s14
 8007a96:	eef0 8a67 	vmov.f32	s17, s15
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	f7f9 f81c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007aa0:	4681      	mov	r9, r0
 8007aa2:	b160      	cbz	r0, 8007abe <_dtoa_r+0xee>
 8007aa4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	6013      	str	r3, [r2, #0]
 8007aaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f000 8568 	beq.w	8008582 <_dtoa_r+0xbb2>
 8007ab2:	4b86      	ldr	r3, [pc, #536]	; (8007ccc <_dtoa_r+0x2fc>)
 8007ab4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007ab6:	6013      	str	r3, [r2, #0]
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	9300      	str	r3, [sp, #0]
 8007abc:	e7da      	b.n	8007a74 <_dtoa_r+0xa4>
 8007abe:	aa10      	add	r2, sp, #64	; 0x40
 8007ac0:	a911      	add	r1, sp, #68	; 0x44
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	eeb0 0a48 	vmov.f32	s0, s16
 8007ac8:	eef0 0a68 	vmov.f32	s1, s17
 8007acc:	f001 f994 	bl	8008df8 <__d2b>
 8007ad0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007ad4:	4682      	mov	sl, r0
 8007ad6:	2d00      	cmp	r5, #0
 8007ad8:	d07f      	beq.n	8007bda <_dtoa_r+0x20a>
 8007ada:	ee18 3a90 	vmov	r3, s17
 8007ade:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ae2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007ae6:	ec51 0b18 	vmov	r0, r1, d8
 8007aea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007aee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007af2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007af6:	4619      	mov	r1, r3
 8007af8:	2200      	movs	r2, #0
 8007afa:	4b75      	ldr	r3, [pc, #468]	; (8007cd0 <_dtoa_r+0x300>)
 8007afc:	f7f8 fbcc 	bl	8000298 <__aeabi_dsub>
 8007b00:	a367      	add	r3, pc, #412	; (adr r3, 8007ca0 <_dtoa_r+0x2d0>)
 8007b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b06:	f7f8 fd7f 	bl	8000608 <__aeabi_dmul>
 8007b0a:	a367      	add	r3, pc, #412	; (adr r3, 8007ca8 <_dtoa_r+0x2d8>)
 8007b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b10:	f7f8 fbc4 	bl	800029c <__adddf3>
 8007b14:	4606      	mov	r6, r0
 8007b16:	4628      	mov	r0, r5
 8007b18:	460f      	mov	r7, r1
 8007b1a:	f7f8 fd0b 	bl	8000534 <__aeabi_i2d>
 8007b1e:	a364      	add	r3, pc, #400	; (adr r3, 8007cb0 <_dtoa_r+0x2e0>)
 8007b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b24:	f7f8 fd70 	bl	8000608 <__aeabi_dmul>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	4630      	mov	r0, r6
 8007b2e:	4639      	mov	r1, r7
 8007b30:	f7f8 fbb4 	bl	800029c <__adddf3>
 8007b34:	4606      	mov	r6, r0
 8007b36:	460f      	mov	r7, r1
 8007b38:	f7f9 f816 	bl	8000b68 <__aeabi_d2iz>
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	4683      	mov	fp, r0
 8007b40:	2300      	movs	r3, #0
 8007b42:	4630      	mov	r0, r6
 8007b44:	4639      	mov	r1, r7
 8007b46:	f7f8 ffd1 	bl	8000aec <__aeabi_dcmplt>
 8007b4a:	b148      	cbz	r0, 8007b60 <_dtoa_r+0x190>
 8007b4c:	4658      	mov	r0, fp
 8007b4e:	f7f8 fcf1 	bl	8000534 <__aeabi_i2d>
 8007b52:	4632      	mov	r2, r6
 8007b54:	463b      	mov	r3, r7
 8007b56:	f7f8 ffbf 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b5a:	b908      	cbnz	r0, 8007b60 <_dtoa_r+0x190>
 8007b5c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007b60:	f1bb 0f16 	cmp.w	fp, #22
 8007b64:	d857      	bhi.n	8007c16 <_dtoa_r+0x246>
 8007b66:	4b5b      	ldr	r3, [pc, #364]	; (8007cd4 <_dtoa_r+0x304>)
 8007b68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b70:	ec51 0b18 	vmov	r0, r1, d8
 8007b74:	f7f8 ffba 	bl	8000aec <__aeabi_dcmplt>
 8007b78:	2800      	cmp	r0, #0
 8007b7a:	d04e      	beq.n	8007c1a <_dtoa_r+0x24a>
 8007b7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007b80:	2300      	movs	r3, #0
 8007b82:	930c      	str	r3, [sp, #48]	; 0x30
 8007b84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b86:	1b5b      	subs	r3, r3, r5
 8007b88:	1e5a      	subs	r2, r3, #1
 8007b8a:	bf45      	ittet	mi
 8007b8c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007b90:	9305      	strmi	r3, [sp, #20]
 8007b92:	2300      	movpl	r3, #0
 8007b94:	2300      	movmi	r3, #0
 8007b96:	9206      	str	r2, [sp, #24]
 8007b98:	bf54      	ite	pl
 8007b9a:	9305      	strpl	r3, [sp, #20]
 8007b9c:	9306      	strmi	r3, [sp, #24]
 8007b9e:	f1bb 0f00 	cmp.w	fp, #0
 8007ba2:	db3c      	blt.n	8007c1e <_dtoa_r+0x24e>
 8007ba4:	9b06      	ldr	r3, [sp, #24]
 8007ba6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007baa:	445b      	add	r3, fp
 8007bac:	9306      	str	r3, [sp, #24]
 8007bae:	2300      	movs	r3, #0
 8007bb0:	9308      	str	r3, [sp, #32]
 8007bb2:	9b07      	ldr	r3, [sp, #28]
 8007bb4:	2b09      	cmp	r3, #9
 8007bb6:	d868      	bhi.n	8007c8a <_dtoa_r+0x2ba>
 8007bb8:	2b05      	cmp	r3, #5
 8007bba:	bfc4      	itt	gt
 8007bbc:	3b04      	subgt	r3, #4
 8007bbe:	9307      	strgt	r3, [sp, #28]
 8007bc0:	9b07      	ldr	r3, [sp, #28]
 8007bc2:	f1a3 0302 	sub.w	r3, r3, #2
 8007bc6:	bfcc      	ite	gt
 8007bc8:	2500      	movgt	r5, #0
 8007bca:	2501      	movle	r5, #1
 8007bcc:	2b03      	cmp	r3, #3
 8007bce:	f200 8085 	bhi.w	8007cdc <_dtoa_r+0x30c>
 8007bd2:	e8df f003 	tbb	[pc, r3]
 8007bd6:	3b2e      	.short	0x3b2e
 8007bd8:	5839      	.short	0x5839
 8007bda:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007bde:	441d      	add	r5, r3
 8007be0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007be4:	2b20      	cmp	r3, #32
 8007be6:	bfc1      	itttt	gt
 8007be8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007bec:	fa08 f803 	lslgt.w	r8, r8, r3
 8007bf0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007bf4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007bf8:	bfd6      	itet	le
 8007bfa:	f1c3 0320 	rsble	r3, r3, #32
 8007bfe:	ea48 0003 	orrgt.w	r0, r8, r3
 8007c02:	fa06 f003 	lslle.w	r0, r6, r3
 8007c06:	f7f8 fc85 	bl	8000514 <__aeabi_ui2d>
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007c10:	3d01      	subs	r5, #1
 8007c12:	920e      	str	r2, [sp, #56]	; 0x38
 8007c14:	e76f      	b.n	8007af6 <_dtoa_r+0x126>
 8007c16:	2301      	movs	r3, #1
 8007c18:	e7b3      	b.n	8007b82 <_dtoa_r+0x1b2>
 8007c1a:	900c      	str	r0, [sp, #48]	; 0x30
 8007c1c:	e7b2      	b.n	8007b84 <_dtoa_r+0x1b4>
 8007c1e:	9b05      	ldr	r3, [sp, #20]
 8007c20:	eba3 030b 	sub.w	r3, r3, fp
 8007c24:	9305      	str	r3, [sp, #20]
 8007c26:	f1cb 0300 	rsb	r3, fp, #0
 8007c2a:	9308      	str	r3, [sp, #32]
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c30:	e7bf      	b.n	8007bb2 <_dtoa_r+0x1e2>
 8007c32:	2300      	movs	r3, #0
 8007c34:	9309      	str	r3, [sp, #36]	; 0x24
 8007c36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	dc52      	bgt.n	8007ce2 <_dtoa_r+0x312>
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	9301      	str	r3, [sp, #4]
 8007c40:	9304      	str	r3, [sp, #16]
 8007c42:	461a      	mov	r2, r3
 8007c44:	920a      	str	r2, [sp, #40]	; 0x28
 8007c46:	e00b      	b.n	8007c60 <_dtoa_r+0x290>
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e7f3      	b.n	8007c34 <_dtoa_r+0x264>
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	9309      	str	r3, [sp, #36]	; 0x24
 8007c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c52:	445b      	add	r3, fp
 8007c54:	9301      	str	r3, [sp, #4]
 8007c56:	3301      	adds	r3, #1
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	9304      	str	r3, [sp, #16]
 8007c5c:	bfb8      	it	lt
 8007c5e:	2301      	movlt	r3, #1
 8007c60:	69e0      	ldr	r0, [r4, #28]
 8007c62:	2100      	movs	r1, #0
 8007c64:	2204      	movs	r2, #4
 8007c66:	f102 0614 	add.w	r6, r2, #20
 8007c6a:	429e      	cmp	r6, r3
 8007c6c:	d93d      	bls.n	8007cea <_dtoa_r+0x31a>
 8007c6e:	6041      	str	r1, [r0, #4]
 8007c70:	4620      	mov	r0, r4
 8007c72:	f000 fd9f 	bl	80087b4 <_Balloc>
 8007c76:	9000      	str	r0, [sp, #0]
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	d139      	bne.n	8007cf0 <_dtoa_r+0x320>
 8007c7c:	4b16      	ldr	r3, [pc, #88]	; (8007cd8 <_dtoa_r+0x308>)
 8007c7e:	4602      	mov	r2, r0
 8007c80:	f240 11af 	movw	r1, #431	; 0x1af
 8007c84:	e6bd      	b.n	8007a02 <_dtoa_r+0x32>
 8007c86:	2301      	movs	r3, #1
 8007c88:	e7e1      	b.n	8007c4e <_dtoa_r+0x27e>
 8007c8a:	2501      	movs	r5, #1
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	9307      	str	r3, [sp, #28]
 8007c90:	9509      	str	r5, [sp, #36]	; 0x24
 8007c92:	f04f 33ff 	mov.w	r3, #4294967295
 8007c96:	9301      	str	r3, [sp, #4]
 8007c98:	9304      	str	r3, [sp, #16]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	2312      	movs	r3, #18
 8007c9e:	e7d1      	b.n	8007c44 <_dtoa_r+0x274>
 8007ca0:	636f4361 	.word	0x636f4361
 8007ca4:	3fd287a7 	.word	0x3fd287a7
 8007ca8:	8b60c8b3 	.word	0x8b60c8b3
 8007cac:	3fc68a28 	.word	0x3fc68a28
 8007cb0:	509f79fb 	.word	0x509f79fb
 8007cb4:	3fd34413 	.word	0x3fd34413
 8007cb8:	08009a61 	.word	0x08009a61
 8007cbc:	08009a78 	.word	0x08009a78
 8007cc0:	7ff00000 	.word	0x7ff00000
 8007cc4:	08009a5d 	.word	0x08009a5d
 8007cc8:	08009a54 	.word	0x08009a54
 8007ccc:	08009a31 	.word	0x08009a31
 8007cd0:	3ff80000 	.word	0x3ff80000
 8007cd4:	08009b68 	.word	0x08009b68
 8007cd8:	08009ad0 	.word	0x08009ad0
 8007cdc:	2301      	movs	r3, #1
 8007cde:	9309      	str	r3, [sp, #36]	; 0x24
 8007ce0:	e7d7      	b.n	8007c92 <_dtoa_r+0x2c2>
 8007ce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ce4:	9301      	str	r3, [sp, #4]
 8007ce6:	9304      	str	r3, [sp, #16]
 8007ce8:	e7ba      	b.n	8007c60 <_dtoa_r+0x290>
 8007cea:	3101      	adds	r1, #1
 8007cec:	0052      	lsls	r2, r2, #1
 8007cee:	e7ba      	b.n	8007c66 <_dtoa_r+0x296>
 8007cf0:	69e3      	ldr	r3, [r4, #28]
 8007cf2:	9a00      	ldr	r2, [sp, #0]
 8007cf4:	601a      	str	r2, [r3, #0]
 8007cf6:	9b04      	ldr	r3, [sp, #16]
 8007cf8:	2b0e      	cmp	r3, #14
 8007cfa:	f200 80a8 	bhi.w	8007e4e <_dtoa_r+0x47e>
 8007cfe:	2d00      	cmp	r5, #0
 8007d00:	f000 80a5 	beq.w	8007e4e <_dtoa_r+0x47e>
 8007d04:	f1bb 0f00 	cmp.w	fp, #0
 8007d08:	dd38      	ble.n	8007d7c <_dtoa_r+0x3ac>
 8007d0a:	4bc0      	ldr	r3, [pc, #768]	; (800800c <_dtoa_r+0x63c>)
 8007d0c:	f00b 020f 	and.w	r2, fp, #15
 8007d10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d14:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007d18:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007d1c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007d20:	d019      	beq.n	8007d56 <_dtoa_r+0x386>
 8007d22:	4bbb      	ldr	r3, [pc, #748]	; (8008010 <_dtoa_r+0x640>)
 8007d24:	ec51 0b18 	vmov	r0, r1, d8
 8007d28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d2c:	f7f8 fd96 	bl	800085c <__aeabi_ddiv>
 8007d30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d34:	f008 080f 	and.w	r8, r8, #15
 8007d38:	2503      	movs	r5, #3
 8007d3a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008010 <_dtoa_r+0x640>
 8007d3e:	f1b8 0f00 	cmp.w	r8, #0
 8007d42:	d10a      	bne.n	8007d5a <_dtoa_r+0x38a>
 8007d44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d48:	4632      	mov	r2, r6
 8007d4a:	463b      	mov	r3, r7
 8007d4c:	f7f8 fd86 	bl	800085c <__aeabi_ddiv>
 8007d50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d54:	e02b      	b.n	8007dae <_dtoa_r+0x3de>
 8007d56:	2502      	movs	r5, #2
 8007d58:	e7ef      	b.n	8007d3a <_dtoa_r+0x36a>
 8007d5a:	f018 0f01 	tst.w	r8, #1
 8007d5e:	d008      	beq.n	8007d72 <_dtoa_r+0x3a2>
 8007d60:	4630      	mov	r0, r6
 8007d62:	4639      	mov	r1, r7
 8007d64:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007d68:	f7f8 fc4e 	bl	8000608 <__aeabi_dmul>
 8007d6c:	3501      	adds	r5, #1
 8007d6e:	4606      	mov	r6, r0
 8007d70:	460f      	mov	r7, r1
 8007d72:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007d76:	f109 0908 	add.w	r9, r9, #8
 8007d7a:	e7e0      	b.n	8007d3e <_dtoa_r+0x36e>
 8007d7c:	f000 809f 	beq.w	8007ebe <_dtoa_r+0x4ee>
 8007d80:	f1cb 0600 	rsb	r6, fp, #0
 8007d84:	4ba1      	ldr	r3, [pc, #644]	; (800800c <_dtoa_r+0x63c>)
 8007d86:	4fa2      	ldr	r7, [pc, #648]	; (8008010 <_dtoa_r+0x640>)
 8007d88:	f006 020f 	and.w	r2, r6, #15
 8007d8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d94:	ec51 0b18 	vmov	r0, r1, d8
 8007d98:	f7f8 fc36 	bl	8000608 <__aeabi_dmul>
 8007d9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007da0:	1136      	asrs	r6, r6, #4
 8007da2:	2300      	movs	r3, #0
 8007da4:	2502      	movs	r5, #2
 8007da6:	2e00      	cmp	r6, #0
 8007da8:	d17e      	bne.n	8007ea8 <_dtoa_r+0x4d8>
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d1d0      	bne.n	8007d50 <_dtoa_r+0x380>
 8007dae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007db0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f000 8084 	beq.w	8007ec2 <_dtoa_r+0x4f2>
 8007dba:	4b96      	ldr	r3, [pc, #600]	; (8008014 <_dtoa_r+0x644>)
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	4640      	mov	r0, r8
 8007dc0:	4649      	mov	r1, r9
 8007dc2:	f7f8 fe93 	bl	8000aec <__aeabi_dcmplt>
 8007dc6:	2800      	cmp	r0, #0
 8007dc8:	d07b      	beq.n	8007ec2 <_dtoa_r+0x4f2>
 8007dca:	9b04      	ldr	r3, [sp, #16]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d078      	beq.n	8007ec2 <_dtoa_r+0x4f2>
 8007dd0:	9b01      	ldr	r3, [sp, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	dd39      	ble.n	8007e4a <_dtoa_r+0x47a>
 8007dd6:	4b90      	ldr	r3, [pc, #576]	; (8008018 <_dtoa_r+0x648>)
 8007dd8:	2200      	movs	r2, #0
 8007dda:	4640      	mov	r0, r8
 8007ddc:	4649      	mov	r1, r9
 8007dde:	f7f8 fc13 	bl	8000608 <__aeabi_dmul>
 8007de2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007de6:	9e01      	ldr	r6, [sp, #4]
 8007de8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007dec:	3501      	adds	r5, #1
 8007dee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007df2:	4628      	mov	r0, r5
 8007df4:	f7f8 fb9e 	bl	8000534 <__aeabi_i2d>
 8007df8:	4642      	mov	r2, r8
 8007dfa:	464b      	mov	r3, r9
 8007dfc:	f7f8 fc04 	bl	8000608 <__aeabi_dmul>
 8007e00:	4b86      	ldr	r3, [pc, #536]	; (800801c <_dtoa_r+0x64c>)
 8007e02:	2200      	movs	r2, #0
 8007e04:	f7f8 fa4a 	bl	800029c <__adddf3>
 8007e08:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007e0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e10:	9303      	str	r3, [sp, #12]
 8007e12:	2e00      	cmp	r6, #0
 8007e14:	d158      	bne.n	8007ec8 <_dtoa_r+0x4f8>
 8007e16:	4b82      	ldr	r3, [pc, #520]	; (8008020 <_dtoa_r+0x650>)
 8007e18:	2200      	movs	r2, #0
 8007e1a:	4640      	mov	r0, r8
 8007e1c:	4649      	mov	r1, r9
 8007e1e:	f7f8 fa3b 	bl	8000298 <__aeabi_dsub>
 8007e22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e26:	4680      	mov	r8, r0
 8007e28:	4689      	mov	r9, r1
 8007e2a:	f7f8 fe7d 	bl	8000b28 <__aeabi_dcmpgt>
 8007e2e:	2800      	cmp	r0, #0
 8007e30:	f040 8296 	bne.w	8008360 <_dtoa_r+0x990>
 8007e34:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007e38:	4640      	mov	r0, r8
 8007e3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e3e:	4649      	mov	r1, r9
 8007e40:	f7f8 fe54 	bl	8000aec <__aeabi_dcmplt>
 8007e44:	2800      	cmp	r0, #0
 8007e46:	f040 8289 	bne.w	800835c <_dtoa_r+0x98c>
 8007e4a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007e4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	f2c0 814e 	blt.w	80080f2 <_dtoa_r+0x722>
 8007e56:	f1bb 0f0e 	cmp.w	fp, #14
 8007e5a:	f300 814a 	bgt.w	80080f2 <_dtoa_r+0x722>
 8007e5e:	4b6b      	ldr	r3, [pc, #428]	; (800800c <_dtoa_r+0x63c>)
 8007e60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007e64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	f280 80dc 	bge.w	8008028 <_dtoa_r+0x658>
 8007e70:	9b04      	ldr	r3, [sp, #16]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	f300 80d8 	bgt.w	8008028 <_dtoa_r+0x658>
 8007e78:	f040 826f 	bne.w	800835a <_dtoa_r+0x98a>
 8007e7c:	4b68      	ldr	r3, [pc, #416]	; (8008020 <_dtoa_r+0x650>)
 8007e7e:	2200      	movs	r2, #0
 8007e80:	4640      	mov	r0, r8
 8007e82:	4649      	mov	r1, r9
 8007e84:	f7f8 fbc0 	bl	8000608 <__aeabi_dmul>
 8007e88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e8c:	f7f8 fe42 	bl	8000b14 <__aeabi_dcmpge>
 8007e90:	9e04      	ldr	r6, [sp, #16]
 8007e92:	4637      	mov	r7, r6
 8007e94:	2800      	cmp	r0, #0
 8007e96:	f040 8245 	bne.w	8008324 <_dtoa_r+0x954>
 8007e9a:	9d00      	ldr	r5, [sp, #0]
 8007e9c:	2331      	movs	r3, #49	; 0x31
 8007e9e:	f805 3b01 	strb.w	r3, [r5], #1
 8007ea2:	f10b 0b01 	add.w	fp, fp, #1
 8007ea6:	e241      	b.n	800832c <_dtoa_r+0x95c>
 8007ea8:	07f2      	lsls	r2, r6, #31
 8007eaa:	d505      	bpl.n	8007eb8 <_dtoa_r+0x4e8>
 8007eac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007eb0:	f7f8 fbaa 	bl	8000608 <__aeabi_dmul>
 8007eb4:	3501      	adds	r5, #1
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	1076      	asrs	r6, r6, #1
 8007eba:	3708      	adds	r7, #8
 8007ebc:	e773      	b.n	8007da6 <_dtoa_r+0x3d6>
 8007ebe:	2502      	movs	r5, #2
 8007ec0:	e775      	b.n	8007dae <_dtoa_r+0x3de>
 8007ec2:	9e04      	ldr	r6, [sp, #16]
 8007ec4:	465f      	mov	r7, fp
 8007ec6:	e792      	b.n	8007dee <_dtoa_r+0x41e>
 8007ec8:	9900      	ldr	r1, [sp, #0]
 8007eca:	4b50      	ldr	r3, [pc, #320]	; (800800c <_dtoa_r+0x63c>)
 8007ecc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007ed0:	4431      	add	r1, r6
 8007ed2:	9102      	str	r1, [sp, #8]
 8007ed4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ed6:	eeb0 9a47 	vmov.f32	s18, s14
 8007eda:	eef0 9a67 	vmov.f32	s19, s15
 8007ede:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007ee2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ee6:	2900      	cmp	r1, #0
 8007ee8:	d044      	beq.n	8007f74 <_dtoa_r+0x5a4>
 8007eea:	494e      	ldr	r1, [pc, #312]	; (8008024 <_dtoa_r+0x654>)
 8007eec:	2000      	movs	r0, #0
 8007eee:	f7f8 fcb5 	bl	800085c <__aeabi_ddiv>
 8007ef2:	ec53 2b19 	vmov	r2, r3, d9
 8007ef6:	f7f8 f9cf 	bl	8000298 <__aeabi_dsub>
 8007efa:	9d00      	ldr	r5, [sp, #0]
 8007efc:	ec41 0b19 	vmov	d9, r0, r1
 8007f00:	4649      	mov	r1, r9
 8007f02:	4640      	mov	r0, r8
 8007f04:	f7f8 fe30 	bl	8000b68 <__aeabi_d2iz>
 8007f08:	4606      	mov	r6, r0
 8007f0a:	f7f8 fb13 	bl	8000534 <__aeabi_i2d>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	460b      	mov	r3, r1
 8007f12:	4640      	mov	r0, r8
 8007f14:	4649      	mov	r1, r9
 8007f16:	f7f8 f9bf 	bl	8000298 <__aeabi_dsub>
 8007f1a:	3630      	adds	r6, #48	; 0x30
 8007f1c:	f805 6b01 	strb.w	r6, [r5], #1
 8007f20:	ec53 2b19 	vmov	r2, r3, d9
 8007f24:	4680      	mov	r8, r0
 8007f26:	4689      	mov	r9, r1
 8007f28:	f7f8 fde0 	bl	8000aec <__aeabi_dcmplt>
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	d164      	bne.n	8007ffa <_dtoa_r+0x62a>
 8007f30:	4642      	mov	r2, r8
 8007f32:	464b      	mov	r3, r9
 8007f34:	4937      	ldr	r1, [pc, #220]	; (8008014 <_dtoa_r+0x644>)
 8007f36:	2000      	movs	r0, #0
 8007f38:	f7f8 f9ae 	bl	8000298 <__aeabi_dsub>
 8007f3c:	ec53 2b19 	vmov	r2, r3, d9
 8007f40:	f7f8 fdd4 	bl	8000aec <__aeabi_dcmplt>
 8007f44:	2800      	cmp	r0, #0
 8007f46:	f040 80b6 	bne.w	80080b6 <_dtoa_r+0x6e6>
 8007f4a:	9b02      	ldr	r3, [sp, #8]
 8007f4c:	429d      	cmp	r5, r3
 8007f4e:	f43f af7c 	beq.w	8007e4a <_dtoa_r+0x47a>
 8007f52:	4b31      	ldr	r3, [pc, #196]	; (8008018 <_dtoa_r+0x648>)
 8007f54:	ec51 0b19 	vmov	r0, r1, d9
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f7f8 fb55 	bl	8000608 <__aeabi_dmul>
 8007f5e:	4b2e      	ldr	r3, [pc, #184]	; (8008018 <_dtoa_r+0x648>)
 8007f60:	ec41 0b19 	vmov	d9, r0, r1
 8007f64:	2200      	movs	r2, #0
 8007f66:	4640      	mov	r0, r8
 8007f68:	4649      	mov	r1, r9
 8007f6a:	f7f8 fb4d 	bl	8000608 <__aeabi_dmul>
 8007f6e:	4680      	mov	r8, r0
 8007f70:	4689      	mov	r9, r1
 8007f72:	e7c5      	b.n	8007f00 <_dtoa_r+0x530>
 8007f74:	ec51 0b17 	vmov	r0, r1, d7
 8007f78:	f7f8 fb46 	bl	8000608 <__aeabi_dmul>
 8007f7c:	9b02      	ldr	r3, [sp, #8]
 8007f7e:	9d00      	ldr	r5, [sp, #0]
 8007f80:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f82:	ec41 0b19 	vmov	d9, r0, r1
 8007f86:	4649      	mov	r1, r9
 8007f88:	4640      	mov	r0, r8
 8007f8a:	f7f8 fded 	bl	8000b68 <__aeabi_d2iz>
 8007f8e:	4606      	mov	r6, r0
 8007f90:	f7f8 fad0 	bl	8000534 <__aeabi_i2d>
 8007f94:	3630      	adds	r6, #48	; 0x30
 8007f96:	4602      	mov	r2, r0
 8007f98:	460b      	mov	r3, r1
 8007f9a:	4640      	mov	r0, r8
 8007f9c:	4649      	mov	r1, r9
 8007f9e:	f7f8 f97b 	bl	8000298 <__aeabi_dsub>
 8007fa2:	f805 6b01 	strb.w	r6, [r5], #1
 8007fa6:	9b02      	ldr	r3, [sp, #8]
 8007fa8:	429d      	cmp	r5, r3
 8007faa:	4680      	mov	r8, r0
 8007fac:	4689      	mov	r9, r1
 8007fae:	f04f 0200 	mov.w	r2, #0
 8007fb2:	d124      	bne.n	8007ffe <_dtoa_r+0x62e>
 8007fb4:	4b1b      	ldr	r3, [pc, #108]	; (8008024 <_dtoa_r+0x654>)
 8007fb6:	ec51 0b19 	vmov	r0, r1, d9
 8007fba:	f7f8 f96f 	bl	800029c <__adddf3>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	4640      	mov	r0, r8
 8007fc4:	4649      	mov	r1, r9
 8007fc6:	f7f8 fdaf 	bl	8000b28 <__aeabi_dcmpgt>
 8007fca:	2800      	cmp	r0, #0
 8007fcc:	d173      	bne.n	80080b6 <_dtoa_r+0x6e6>
 8007fce:	ec53 2b19 	vmov	r2, r3, d9
 8007fd2:	4914      	ldr	r1, [pc, #80]	; (8008024 <_dtoa_r+0x654>)
 8007fd4:	2000      	movs	r0, #0
 8007fd6:	f7f8 f95f 	bl	8000298 <__aeabi_dsub>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	460b      	mov	r3, r1
 8007fde:	4640      	mov	r0, r8
 8007fe0:	4649      	mov	r1, r9
 8007fe2:	f7f8 fd83 	bl	8000aec <__aeabi_dcmplt>
 8007fe6:	2800      	cmp	r0, #0
 8007fe8:	f43f af2f 	beq.w	8007e4a <_dtoa_r+0x47a>
 8007fec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007fee:	1e6b      	subs	r3, r5, #1
 8007ff0:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ff2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007ff6:	2b30      	cmp	r3, #48	; 0x30
 8007ff8:	d0f8      	beq.n	8007fec <_dtoa_r+0x61c>
 8007ffa:	46bb      	mov	fp, r7
 8007ffc:	e04a      	b.n	8008094 <_dtoa_r+0x6c4>
 8007ffe:	4b06      	ldr	r3, [pc, #24]	; (8008018 <_dtoa_r+0x648>)
 8008000:	f7f8 fb02 	bl	8000608 <__aeabi_dmul>
 8008004:	4680      	mov	r8, r0
 8008006:	4689      	mov	r9, r1
 8008008:	e7bd      	b.n	8007f86 <_dtoa_r+0x5b6>
 800800a:	bf00      	nop
 800800c:	08009b68 	.word	0x08009b68
 8008010:	08009b40 	.word	0x08009b40
 8008014:	3ff00000 	.word	0x3ff00000
 8008018:	40240000 	.word	0x40240000
 800801c:	401c0000 	.word	0x401c0000
 8008020:	40140000 	.word	0x40140000
 8008024:	3fe00000 	.word	0x3fe00000
 8008028:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800802c:	9d00      	ldr	r5, [sp, #0]
 800802e:	4642      	mov	r2, r8
 8008030:	464b      	mov	r3, r9
 8008032:	4630      	mov	r0, r6
 8008034:	4639      	mov	r1, r7
 8008036:	f7f8 fc11 	bl	800085c <__aeabi_ddiv>
 800803a:	f7f8 fd95 	bl	8000b68 <__aeabi_d2iz>
 800803e:	9001      	str	r0, [sp, #4]
 8008040:	f7f8 fa78 	bl	8000534 <__aeabi_i2d>
 8008044:	4642      	mov	r2, r8
 8008046:	464b      	mov	r3, r9
 8008048:	f7f8 fade 	bl	8000608 <__aeabi_dmul>
 800804c:	4602      	mov	r2, r0
 800804e:	460b      	mov	r3, r1
 8008050:	4630      	mov	r0, r6
 8008052:	4639      	mov	r1, r7
 8008054:	f7f8 f920 	bl	8000298 <__aeabi_dsub>
 8008058:	9e01      	ldr	r6, [sp, #4]
 800805a:	9f04      	ldr	r7, [sp, #16]
 800805c:	3630      	adds	r6, #48	; 0x30
 800805e:	f805 6b01 	strb.w	r6, [r5], #1
 8008062:	9e00      	ldr	r6, [sp, #0]
 8008064:	1bae      	subs	r6, r5, r6
 8008066:	42b7      	cmp	r7, r6
 8008068:	4602      	mov	r2, r0
 800806a:	460b      	mov	r3, r1
 800806c:	d134      	bne.n	80080d8 <_dtoa_r+0x708>
 800806e:	f7f8 f915 	bl	800029c <__adddf3>
 8008072:	4642      	mov	r2, r8
 8008074:	464b      	mov	r3, r9
 8008076:	4606      	mov	r6, r0
 8008078:	460f      	mov	r7, r1
 800807a:	f7f8 fd55 	bl	8000b28 <__aeabi_dcmpgt>
 800807e:	b9c8      	cbnz	r0, 80080b4 <_dtoa_r+0x6e4>
 8008080:	4642      	mov	r2, r8
 8008082:	464b      	mov	r3, r9
 8008084:	4630      	mov	r0, r6
 8008086:	4639      	mov	r1, r7
 8008088:	f7f8 fd26 	bl	8000ad8 <__aeabi_dcmpeq>
 800808c:	b110      	cbz	r0, 8008094 <_dtoa_r+0x6c4>
 800808e:	9b01      	ldr	r3, [sp, #4]
 8008090:	07db      	lsls	r3, r3, #31
 8008092:	d40f      	bmi.n	80080b4 <_dtoa_r+0x6e4>
 8008094:	4651      	mov	r1, sl
 8008096:	4620      	mov	r0, r4
 8008098:	f000 fbcc 	bl	8008834 <_Bfree>
 800809c:	2300      	movs	r3, #0
 800809e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80080a0:	702b      	strb	r3, [r5, #0]
 80080a2:	f10b 0301 	add.w	r3, fp, #1
 80080a6:	6013      	str	r3, [r2, #0]
 80080a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	f43f ace2 	beq.w	8007a74 <_dtoa_r+0xa4>
 80080b0:	601d      	str	r5, [r3, #0]
 80080b2:	e4df      	b.n	8007a74 <_dtoa_r+0xa4>
 80080b4:	465f      	mov	r7, fp
 80080b6:	462b      	mov	r3, r5
 80080b8:	461d      	mov	r5, r3
 80080ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080be:	2a39      	cmp	r2, #57	; 0x39
 80080c0:	d106      	bne.n	80080d0 <_dtoa_r+0x700>
 80080c2:	9a00      	ldr	r2, [sp, #0]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d1f7      	bne.n	80080b8 <_dtoa_r+0x6e8>
 80080c8:	9900      	ldr	r1, [sp, #0]
 80080ca:	2230      	movs	r2, #48	; 0x30
 80080cc:	3701      	adds	r7, #1
 80080ce:	700a      	strb	r2, [r1, #0]
 80080d0:	781a      	ldrb	r2, [r3, #0]
 80080d2:	3201      	adds	r2, #1
 80080d4:	701a      	strb	r2, [r3, #0]
 80080d6:	e790      	b.n	8007ffa <_dtoa_r+0x62a>
 80080d8:	4ba3      	ldr	r3, [pc, #652]	; (8008368 <_dtoa_r+0x998>)
 80080da:	2200      	movs	r2, #0
 80080dc:	f7f8 fa94 	bl	8000608 <__aeabi_dmul>
 80080e0:	2200      	movs	r2, #0
 80080e2:	2300      	movs	r3, #0
 80080e4:	4606      	mov	r6, r0
 80080e6:	460f      	mov	r7, r1
 80080e8:	f7f8 fcf6 	bl	8000ad8 <__aeabi_dcmpeq>
 80080ec:	2800      	cmp	r0, #0
 80080ee:	d09e      	beq.n	800802e <_dtoa_r+0x65e>
 80080f0:	e7d0      	b.n	8008094 <_dtoa_r+0x6c4>
 80080f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080f4:	2a00      	cmp	r2, #0
 80080f6:	f000 80ca 	beq.w	800828e <_dtoa_r+0x8be>
 80080fa:	9a07      	ldr	r2, [sp, #28]
 80080fc:	2a01      	cmp	r2, #1
 80080fe:	f300 80ad 	bgt.w	800825c <_dtoa_r+0x88c>
 8008102:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008104:	2a00      	cmp	r2, #0
 8008106:	f000 80a5 	beq.w	8008254 <_dtoa_r+0x884>
 800810a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800810e:	9e08      	ldr	r6, [sp, #32]
 8008110:	9d05      	ldr	r5, [sp, #20]
 8008112:	9a05      	ldr	r2, [sp, #20]
 8008114:	441a      	add	r2, r3
 8008116:	9205      	str	r2, [sp, #20]
 8008118:	9a06      	ldr	r2, [sp, #24]
 800811a:	2101      	movs	r1, #1
 800811c:	441a      	add	r2, r3
 800811e:	4620      	mov	r0, r4
 8008120:	9206      	str	r2, [sp, #24]
 8008122:	f000 fc3d 	bl	80089a0 <__i2b>
 8008126:	4607      	mov	r7, r0
 8008128:	b165      	cbz	r5, 8008144 <_dtoa_r+0x774>
 800812a:	9b06      	ldr	r3, [sp, #24]
 800812c:	2b00      	cmp	r3, #0
 800812e:	dd09      	ble.n	8008144 <_dtoa_r+0x774>
 8008130:	42ab      	cmp	r3, r5
 8008132:	9a05      	ldr	r2, [sp, #20]
 8008134:	bfa8      	it	ge
 8008136:	462b      	movge	r3, r5
 8008138:	1ad2      	subs	r2, r2, r3
 800813a:	9205      	str	r2, [sp, #20]
 800813c:	9a06      	ldr	r2, [sp, #24]
 800813e:	1aed      	subs	r5, r5, r3
 8008140:	1ad3      	subs	r3, r2, r3
 8008142:	9306      	str	r3, [sp, #24]
 8008144:	9b08      	ldr	r3, [sp, #32]
 8008146:	b1f3      	cbz	r3, 8008186 <_dtoa_r+0x7b6>
 8008148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800814a:	2b00      	cmp	r3, #0
 800814c:	f000 80a3 	beq.w	8008296 <_dtoa_r+0x8c6>
 8008150:	2e00      	cmp	r6, #0
 8008152:	dd10      	ble.n	8008176 <_dtoa_r+0x7a6>
 8008154:	4639      	mov	r1, r7
 8008156:	4632      	mov	r2, r6
 8008158:	4620      	mov	r0, r4
 800815a:	f000 fce1 	bl	8008b20 <__pow5mult>
 800815e:	4652      	mov	r2, sl
 8008160:	4601      	mov	r1, r0
 8008162:	4607      	mov	r7, r0
 8008164:	4620      	mov	r0, r4
 8008166:	f000 fc31 	bl	80089cc <__multiply>
 800816a:	4651      	mov	r1, sl
 800816c:	4680      	mov	r8, r0
 800816e:	4620      	mov	r0, r4
 8008170:	f000 fb60 	bl	8008834 <_Bfree>
 8008174:	46c2      	mov	sl, r8
 8008176:	9b08      	ldr	r3, [sp, #32]
 8008178:	1b9a      	subs	r2, r3, r6
 800817a:	d004      	beq.n	8008186 <_dtoa_r+0x7b6>
 800817c:	4651      	mov	r1, sl
 800817e:	4620      	mov	r0, r4
 8008180:	f000 fcce 	bl	8008b20 <__pow5mult>
 8008184:	4682      	mov	sl, r0
 8008186:	2101      	movs	r1, #1
 8008188:	4620      	mov	r0, r4
 800818a:	f000 fc09 	bl	80089a0 <__i2b>
 800818e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008190:	2b00      	cmp	r3, #0
 8008192:	4606      	mov	r6, r0
 8008194:	f340 8081 	ble.w	800829a <_dtoa_r+0x8ca>
 8008198:	461a      	mov	r2, r3
 800819a:	4601      	mov	r1, r0
 800819c:	4620      	mov	r0, r4
 800819e:	f000 fcbf 	bl	8008b20 <__pow5mult>
 80081a2:	9b07      	ldr	r3, [sp, #28]
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	4606      	mov	r6, r0
 80081a8:	dd7a      	ble.n	80082a0 <_dtoa_r+0x8d0>
 80081aa:	f04f 0800 	mov.w	r8, #0
 80081ae:	6933      	ldr	r3, [r6, #16]
 80081b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80081b4:	6918      	ldr	r0, [r3, #16]
 80081b6:	f000 fba5 	bl	8008904 <__hi0bits>
 80081ba:	f1c0 0020 	rsb	r0, r0, #32
 80081be:	9b06      	ldr	r3, [sp, #24]
 80081c0:	4418      	add	r0, r3
 80081c2:	f010 001f 	ands.w	r0, r0, #31
 80081c6:	f000 8094 	beq.w	80082f2 <_dtoa_r+0x922>
 80081ca:	f1c0 0320 	rsb	r3, r0, #32
 80081ce:	2b04      	cmp	r3, #4
 80081d0:	f340 8085 	ble.w	80082de <_dtoa_r+0x90e>
 80081d4:	9b05      	ldr	r3, [sp, #20]
 80081d6:	f1c0 001c 	rsb	r0, r0, #28
 80081da:	4403      	add	r3, r0
 80081dc:	9305      	str	r3, [sp, #20]
 80081de:	9b06      	ldr	r3, [sp, #24]
 80081e0:	4403      	add	r3, r0
 80081e2:	4405      	add	r5, r0
 80081e4:	9306      	str	r3, [sp, #24]
 80081e6:	9b05      	ldr	r3, [sp, #20]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	dd05      	ble.n	80081f8 <_dtoa_r+0x828>
 80081ec:	4651      	mov	r1, sl
 80081ee:	461a      	mov	r2, r3
 80081f0:	4620      	mov	r0, r4
 80081f2:	f000 fcef 	bl	8008bd4 <__lshift>
 80081f6:	4682      	mov	sl, r0
 80081f8:	9b06      	ldr	r3, [sp, #24]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	dd05      	ble.n	800820a <_dtoa_r+0x83a>
 80081fe:	4631      	mov	r1, r6
 8008200:	461a      	mov	r2, r3
 8008202:	4620      	mov	r0, r4
 8008204:	f000 fce6 	bl	8008bd4 <__lshift>
 8008208:	4606      	mov	r6, r0
 800820a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800820c:	2b00      	cmp	r3, #0
 800820e:	d072      	beq.n	80082f6 <_dtoa_r+0x926>
 8008210:	4631      	mov	r1, r6
 8008212:	4650      	mov	r0, sl
 8008214:	f000 fd4a 	bl	8008cac <__mcmp>
 8008218:	2800      	cmp	r0, #0
 800821a:	da6c      	bge.n	80082f6 <_dtoa_r+0x926>
 800821c:	2300      	movs	r3, #0
 800821e:	4651      	mov	r1, sl
 8008220:	220a      	movs	r2, #10
 8008222:	4620      	mov	r0, r4
 8008224:	f000 fb28 	bl	8008878 <__multadd>
 8008228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800822a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800822e:	4682      	mov	sl, r0
 8008230:	2b00      	cmp	r3, #0
 8008232:	f000 81b0 	beq.w	8008596 <_dtoa_r+0xbc6>
 8008236:	2300      	movs	r3, #0
 8008238:	4639      	mov	r1, r7
 800823a:	220a      	movs	r2, #10
 800823c:	4620      	mov	r0, r4
 800823e:	f000 fb1b 	bl	8008878 <__multadd>
 8008242:	9b01      	ldr	r3, [sp, #4]
 8008244:	2b00      	cmp	r3, #0
 8008246:	4607      	mov	r7, r0
 8008248:	f300 8096 	bgt.w	8008378 <_dtoa_r+0x9a8>
 800824c:	9b07      	ldr	r3, [sp, #28]
 800824e:	2b02      	cmp	r3, #2
 8008250:	dc59      	bgt.n	8008306 <_dtoa_r+0x936>
 8008252:	e091      	b.n	8008378 <_dtoa_r+0x9a8>
 8008254:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008256:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800825a:	e758      	b.n	800810e <_dtoa_r+0x73e>
 800825c:	9b04      	ldr	r3, [sp, #16]
 800825e:	1e5e      	subs	r6, r3, #1
 8008260:	9b08      	ldr	r3, [sp, #32]
 8008262:	42b3      	cmp	r3, r6
 8008264:	bfbf      	itttt	lt
 8008266:	9b08      	ldrlt	r3, [sp, #32]
 8008268:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800826a:	9608      	strlt	r6, [sp, #32]
 800826c:	1af3      	sublt	r3, r6, r3
 800826e:	bfb4      	ite	lt
 8008270:	18d2      	addlt	r2, r2, r3
 8008272:	1b9e      	subge	r6, r3, r6
 8008274:	9b04      	ldr	r3, [sp, #16]
 8008276:	bfbc      	itt	lt
 8008278:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800827a:	2600      	movlt	r6, #0
 800827c:	2b00      	cmp	r3, #0
 800827e:	bfb7      	itett	lt
 8008280:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008284:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008288:	1a9d      	sublt	r5, r3, r2
 800828a:	2300      	movlt	r3, #0
 800828c:	e741      	b.n	8008112 <_dtoa_r+0x742>
 800828e:	9e08      	ldr	r6, [sp, #32]
 8008290:	9d05      	ldr	r5, [sp, #20]
 8008292:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008294:	e748      	b.n	8008128 <_dtoa_r+0x758>
 8008296:	9a08      	ldr	r2, [sp, #32]
 8008298:	e770      	b.n	800817c <_dtoa_r+0x7ac>
 800829a:	9b07      	ldr	r3, [sp, #28]
 800829c:	2b01      	cmp	r3, #1
 800829e:	dc19      	bgt.n	80082d4 <_dtoa_r+0x904>
 80082a0:	9b02      	ldr	r3, [sp, #8]
 80082a2:	b9bb      	cbnz	r3, 80082d4 <_dtoa_r+0x904>
 80082a4:	9b03      	ldr	r3, [sp, #12]
 80082a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082aa:	b99b      	cbnz	r3, 80082d4 <_dtoa_r+0x904>
 80082ac:	9b03      	ldr	r3, [sp, #12]
 80082ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80082b2:	0d1b      	lsrs	r3, r3, #20
 80082b4:	051b      	lsls	r3, r3, #20
 80082b6:	b183      	cbz	r3, 80082da <_dtoa_r+0x90a>
 80082b8:	9b05      	ldr	r3, [sp, #20]
 80082ba:	3301      	adds	r3, #1
 80082bc:	9305      	str	r3, [sp, #20]
 80082be:	9b06      	ldr	r3, [sp, #24]
 80082c0:	3301      	adds	r3, #1
 80082c2:	9306      	str	r3, [sp, #24]
 80082c4:	f04f 0801 	mov.w	r8, #1
 80082c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	f47f af6f 	bne.w	80081ae <_dtoa_r+0x7de>
 80082d0:	2001      	movs	r0, #1
 80082d2:	e774      	b.n	80081be <_dtoa_r+0x7ee>
 80082d4:	f04f 0800 	mov.w	r8, #0
 80082d8:	e7f6      	b.n	80082c8 <_dtoa_r+0x8f8>
 80082da:	4698      	mov	r8, r3
 80082dc:	e7f4      	b.n	80082c8 <_dtoa_r+0x8f8>
 80082de:	d082      	beq.n	80081e6 <_dtoa_r+0x816>
 80082e0:	9a05      	ldr	r2, [sp, #20]
 80082e2:	331c      	adds	r3, #28
 80082e4:	441a      	add	r2, r3
 80082e6:	9205      	str	r2, [sp, #20]
 80082e8:	9a06      	ldr	r2, [sp, #24]
 80082ea:	441a      	add	r2, r3
 80082ec:	441d      	add	r5, r3
 80082ee:	9206      	str	r2, [sp, #24]
 80082f0:	e779      	b.n	80081e6 <_dtoa_r+0x816>
 80082f2:	4603      	mov	r3, r0
 80082f4:	e7f4      	b.n	80082e0 <_dtoa_r+0x910>
 80082f6:	9b04      	ldr	r3, [sp, #16]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	dc37      	bgt.n	800836c <_dtoa_r+0x99c>
 80082fc:	9b07      	ldr	r3, [sp, #28]
 80082fe:	2b02      	cmp	r3, #2
 8008300:	dd34      	ble.n	800836c <_dtoa_r+0x99c>
 8008302:	9b04      	ldr	r3, [sp, #16]
 8008304:	9301      	str	r3, [sp, #4]
 8008306:	9b01      	ldr	r3, [sp, #4]
 8008308:	b963      	cbnz	r3, 8008324 <_dtoa_r+0x954>
 800830a:	4631      	mov	r1, r6
 800830c:	2205      	movs	r2, #5
 800830e:	4620      	mov	r0, r4
 8008310:	f000 fab2 	bl	8008878 <__multadd>
 8008314:	4601      	mov	r1, r0
 8008316:	4606      	mov	r6, r0
 8008318:	4650      	mov	r0, sl
 800831a:	f000 fcc7 	bl	8008cac <__mcmp>
 800831e:	2800      	cmp	r0, #0
 8008320:	f73f adbb 	bgt.w	8007e9a <_dtoa_r+0x4ca>
 8008324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008326:	9d00      	ldr	r5, [sp, #0]
 8008328:	ea6f 0b03 	mvn.w	fp, r3
 800832c:	f04f 0800 	mov.w	r8, #0
 8008330:	4631      	mov	r1, r6
 8008332:	4620      	mov	r0, r4
 8008334:	f000 fa7e 	bl	8008834 <_Bfree>
 8008338:	2f00      	cmp	r7, #0
 800833a:	f43f aeab 	beq.w	8008094 <_dtoa_r+0x6c4>
 800833e:	f1b8 0f00 	cmp.w	r8, #0
 8008342:	d005      	beq.n	8008350 <_dtoa_r+0x980>
 8008344:	45b8      	cmp	r8, r7
 8008346:	d003      	beq.n	8008350 <_dtoa_r+0x980>
 8008348:	4641      	mov	r1, r8
 800834a:	4620      	mov	r0, r4
 800834c:	f000 fa72 	bl	8008834 <_Bfree>
 8008350:	4639      	mov	r1, r7
 8008352:	4620      	mov	r0, r4
 8008354:	f000 fa6e 	bl	8008834 <_Bfree>
 8008358:	e69c      	b.n	8008094 <_dtoa_r+0x6c4>
 800835a:	2600      	movs	r6, #0
 800835c:	4637      	mov	r7, r6
 800835e:	e7e1      	b.n	8008324 <_dtoa_r+0x954>
 8008360:	46bb      	mov	fp, r7
 8008362:	4637      	mov	r7, r6
 8008364:	e599      	b.n	8007e9a <_dtoa_r+0x4ca>
 8008366:	bf00      	nop
 8008368:	40240000 	.word	0x40240000
 800836c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800836e:	2b00      	cmp	r3, #0
 8008370:	f000 80c8 	beq.w	8008504 <_dtoa_r+0xb34>
 8008374:	9b04      	ldr	r3, [sp, #16]
 8008376:	9301      	str	r3, [sp, #4]
 8008378:	2d00      	cmp	r5, #0
 800837a:	dd05      	ble.n	8008388 <_dtoa_r+0x9b8>
 800837c:	4639      	mov	r1, r7
 800837e:	462a      	mov	r2, r5
 8008380:	4620      	mov	r0, r4
 8008382:	f000 fc27 	bl	8008bd4 <__lshift>
 8008386:	4607      	mov	r7, r0
 8008388:	f1b8 0f00 	cmp.w	r8, #0
 800838c:	d05b      	beq.n	8008446 <_dtoa_r+0xa76>
 800838e:	6879      	ldr	r1, [r7, #4]
 8008390:	4620      	mov	r0, r4
 8008392:	f000 fa0f 	bl	80087b4 <_Balloc>
 8008396:	4605      	mov	r5, r0
 8008398:	b928      	cbnz	r0, 80083a6 <_dtoa_r+0x9d6>
 800839a:	4b83      	ldr	r3, [pc, #524]	; (80085a8 <_dtoa_r+0xbd8>)
 800839c:	4602      	mov	r2, r0
 800839e:	f240 21ef 	movw	r1, #751	; 0x2ef
 80083a2:	f7ff bb2e 	b.w	8007a02 <_dtoa_r+0x32>
 80083a6:	693a      	ldr	r2, [r7, #16]
 80083a8:	3202      	adds	r2, #2
 80083aa:	0092      	lsls	r2, r2, #2
 80083ac:	f107 010c 	add.w	r1, r7, #12
 80083b0:	300c      	adds	r0, #12
 80083b2:	f000 ffab 	bl	800930c <memcpy>
 80083b6:	2201      	movs	r2, #1
 80083b8:	4629      	mov	r1, r5
 80083ba:	4620      	mov	r0, r4
 80083bc:	f000 fc0a 	bl	8008bd4 <__lshift>
 80083c0:	9b00      	ldr	r3, [sp, #0]
 80083c2:	3301      	adds	r3, #1
 80083c4:	9304      	str	r3, [sp, #16]
 80083c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083ca:	4413      	add	r3, r2
 80083cc:	9308      	str	r3, [sp, #32]
 80083ce:	9b02      	ldr	r3, [sp, #8]
 80083d0:	f003 0301 	and.w	r3, r3, #1
 80083d4:	46b8      	mov	r8, r7
 80083d6:	9306      	str	r3, [sp, #24]
 80083d8:	4607      	mov	r7, r0
 80083da:	9b04      	ldr	r3, [sp, #16]
 80083dc:	4631      	mov	r1, r6
 80083de:	3b01      	subs	r3, #1
 80083e0:	4650      	mov	r0, sl
 80083e2:	9301      	str	r3, [sp, #4]
 80083e4:	f7ff fa6b 	bl	80078be <quorem>
 80083e8:	4641      	mov	r1, r8
 80083ea:	9002      	str	r0, [sp, #8]
 80083ec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80083f0:	4650      	mov	r0, sl
 80083f2:	f000 fc5b 	bl	8008cac <__mcmp>
 80083f6:	463a      	mov	r2, r7
 80083f8:	9005      	str	r0, [sp, #20]
 80083fa:	4631      	mov	r1, r6
 80083fc:	4620      	mov	r0, r4
 80083fe:	f000 fc71 	bl	8008ce4 <__mdiff>
 8008402:	68c2      	ldr	r2, [r0, #12]
 8008404:	4605      	mov	r5, r0
 8008406:	bb02      	cbnz	r2, 800844a <_dtoa_r+0xa7a>
 8008408:	4601      	mov	r1, r0
 800840a:	4650      	mov	r0, sl
 800840c:	f000 fc4e 	bl	8008cac <__mcmp>
 8008410:	4602      	mov	r2, r0
 8008412:	4629      	mov	r1, r5
 8008414:	4620      	mov	r0, r4
 8008416:	9209      	str	r2, [sp, #36]	; 0x24
 8008418:	f000 fa0c 	bl	8008834 <_Bfree>
 800841c:	9b07      	ldr	r3, [sp, #28]
 800841e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008420:	9d04      	ldr	r5, [sp, #16]
 8008422:	ea43 0102 	orr.w	r1, r3, r2
 8008426:	9b06      	ldr	r3, [sp, #24]
 8008428:	4319      	orrs	r1, r3
 800842a:	d110      	bne.n	800844e <_dtoa_r+0xa7e>
 800842c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008430:	d029      	beq.n	8008486 <_dtoa_r+0xab6>
 8008432:	9b05      	ldr	r3, [sp, #20]
 8008434:	2b00      	cmp	r3, #0
 8008436:	dd02      	ble.n	800843e <_dtoa_r+0xa6e>
 8008438:	9b02      	ldr	r3, [sp, #8]
 800843a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800843e:	9b01      	ldr	r3, [sp, #4]
 8008440:	f883 9000 	strb.w	r9, [r3]
 8008444:	e774      	b.n	8008330 <_dtoa_r+0x960>
 8008446:	4638      	mov	r0, r7
 8008448:	e7ba      	b.n	80083c0 <_dtoa_r+0x9f0>
 800844a:	2201      	movs	r2, #1
 800844c:	e7e1      	b.n	8008412 <_dtoa_r+0xa42>
 800844e:	9b05      	ldr	r3, [sp, #20]
 8008450:	2b00      	cmp	r3, #0
 8008452:	db04      	blt.n	800845e <_dtoa_r+0xa8e>
 8008454:	9907      	ldr	r1, [sp, #28]
 8008456:	430b      	orrs	r3, r1
 8008458:	9906      	ldr	r1, [sp, #24]
 800845a:	430b      	orrs	r3, r1
 800845c:	d120      	bne.n	80084a0 <_dtoa_r+0xad0>
 800845e:	2a00      	cmp	r2, #0
 8008460:	dded      	ble.n	800843e <_dtoa_r+0xa6e>
 8008462:	4651      	mov	r1, sl
 8008464:	2201      	movs	r2, #1
 8008466:	4620      	mov	r0, r4
 8008468:	f000 fbb4 	bl	8008bd4 <__lshift>
 800846c:	4631      	mov	r1, r6
 800846e:	4682      	mov	sl, r0
 8008470:	f000 fc1c 	bl	8008cac <__mcmp>
 8008474:	2800      	cmp	r0, #0
 8008476:	dc03      	bgt.n	8008480 <_dtoa_r+0xab0>
 8008478:	d1e1      	bne.n	800843e <_dtoa_r+0xa6e>
 800847a:	f019 0f01 	tst.w	r9, #1
 800847e:	d0de      	beq.n	800843e <_dtoa_r+0xa6e>
 8008480:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008484:	d1d8      	bne.n	8008438 <_dtoa_r+0xa68>
 8008486:	9a01      	ldr	r2, [sp, #4]
 8008488:	2339      	movs	r3, #57	; 0x39
 800848a:	7013      	strb	r3, [r2, #0]
 800848c:	462b      	mov	r3, r5
 800848e:	461d      	mov	r5, r3
 8008490:	3b01      	subs	r3, #1
 8008492:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008496:	2a39      	cmp	r2, #57	; 0x39
 8008498:	d06c      	beq.n	8008574 <_dtoa_r+0xba4>
 800849a:	3201      	adds	r2, #1
 800849c:	701a      	strb	r2, [r3, #0]
 800849e:	e747      	b.n	8008330 <_dtoa_r+0x960>
 80084a0:	2a00      	cmp	r2, #0
 80084a2:	dd07      	ble.n	80084b4 <_dtoa_r+0xae4>
 80084a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80084a8:	d0ed      	beq.n	8008486 <_dtoa_r+0xab6>
 80084aa:	9a01      	ldr	r2, [sp, #4]
 80084ac:	f109 0301 	add.w	r3, r9, #1
 80084b0:	7013      	strb	r3, [r2, #0]
 80084b2:	e73d      	b.n	8008330 <_dtoa_r+0x960>
 80084b4:	9b04      	ldr	r3, [sp, #16]
 80084b6:	9a08      	ldr	r2, [sp, #32]
 80084b8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80084bc:	4293      	cmp	r3, r2
 80084be:	d043      	beq.n	8008548 <_dtoa_r+0xb78>
 80084c0:	4651      	mov	r1, sl
 80084c2:	2300      	movs	r3, #0
 80084c4:	220a      	movs	r2, #10
 80084c6:	4620      	mov	r0, r4
 80084c8:	f000 f9d6 	bl	8008878 <__multadd>
 80084cc:	45b8      	cmp	r8, r7
 80084ce:	4682      	mov	sl, r0
 80084d0:	f04f 0300 	mov.w	r3, #0
 80084d4:	f04f 020a 	mov.w	r2, #10
 80084d8:	4641      	mov	r1, r8
 80084da:	4620      	mov	r0, r4
 80084dc:	d107      	bne.n	80084ee <_dtoa_r+0xb1e>
 80084de:	f000 f9cb 	bl	8008878 <__multadd>
 80084e2:	4680      	mov	r8, r0
 80084e4:	4607      	mov	r7, r0
 80084e6:	9b04      	ldr	r3, [sp, #16]
 80084e8:	3301      	adds	r3, #1
 80084ea:	9304      	str	r3, [sp, #16]
 80084ec:	e775      	b.n	80083da <_dtoa_r+0xa0a>
 80084ee:	f000 f9c3 	bl	8008878 <__multadd>
 80084f2:	4639      	mov	r1, r7
 80084f4:	4680      	mov	r8, r0
 80084f6:	2300      	movs	r3, #0
 80084f8:	220a      	movs	r2, #10
 80084fa:	4620      	mov	r0, r4
 80084fc:	f000 f9bc 	bl	8008878 <__multadd>
 8008500:	4607      	mov	r7, r0
 8008502:	e7f0      	b.n	80084e6 <_dtoa_r+0xb16>
 8008504:	9b04      	ldr	r3, [sp, #16]
 8008506:	9301      	str	r3, [sp, #4]
 8008508:	9d00      	ldr	r5, [sp, #0]
 800850a:	4631      	mov	r1, r6
 800850c:	4650      	mov	r0, sl
 800850e:	f7ff f9d6 	bl	80078be <quorem>
 8008512:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008516:	9b00      	ldr	r3, [sp, #0]
 8008518:	f805 9b01 	strb.w	r9, [r5], #1
 800851c:	1aea      	subs	r2, r5, r3
 800851e:	9b01      	ldr	r3, [sp, #4]
 8008520:	4293      	cmp	r3, r2
 8008522:	dd07      	ble.n	8008534 <_dtoa_r+0xb64>
 8008524:	4651      	mov	r1, sl
 8008526:	2300      	movs	r3, #0
 8008528:	220a      	movs	r2, #10
 800852a:	4620      	mov	r0, r4
 800852c:	f000 f9a4 	bl	8008878 <__multadd>
 8008530:	4682      	mov	sl, r0
 8008532:	e7ea      	b.n	800850a <_dtoa_r+0xb3a>
 8008534:	9b01      	ldr	r3, [sp, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	bfc8      	it	gt
 800853a:	461d      	movgt	r5, r3
 800853c:	9b00      	ldr	r3, [sp, #0]
 800853e:	bfd8      	it	le
 8008540:	2501      	movle	r5, #1
 8008542:	441d      	add	r5, r3
 8008544:	f04f 0800 	mov.w	r8, #0
 8008548:	4651      	mov	r1, sl
 800854a:	2201      	movs	r2, #1
 800854c:	4620      	mov	r0, r4
 800854e:	f000 fb41 	bl	8008bd4 <__lshift>
 8008552:	4631      	mov	r1, r6
 8008554:	4682      	mov	sl, r0
 8008556:	f000 fba9 	bl	8008cac <__mcmp>
 800855a:	2800      	cmp	r0, #0
 800855c:	dc96      	bgt.n	800848c <_dtoa_r+0xabc>
 800855e:	d102      	bne.n	8008566 <_dtoa_r+0xb96>
 8008560:	f019 0f01 	tst.w	r9, #1
 8008564:	d192      	bne.n	800848c <_dtoa_r+0xabc>
 8008566:	462b      	mov	r3, r5
 8008568:	461d      	mov	r5, r3
 800856a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800856e:	2a30      	cmp	r2, #48	; 0x30
 8008570:	d0fa      	beq.n	8008568 <_dtoa_r+0xb98>
 8008572:	e6dd      	b.n	8008330 <_dtoa_r+0x960>
 8008574:	9a00      	ldr	r2, [sp, #0]
 8008576:	429a      	cmp	r2, r3
 8008578:	d189      	bne.n	800848e <_dtoa_r+0xabe>
 800857a:	f10b 0b01 	add.w	fp, fp, #1
 800857e:	2331      	movs	r3, #49	; 0x31
 8008580:	e796      	b.n	80084b0 <_dtoa_r+0xae0>
 8008582:	4b0a      	ldr	r3, [pc, #40]	; (80085ac <_dtoa_r+0xbdc>)
 8008584:	f7ff ba99 	b.w	8007aba <_dtoa_r+0xea>
 8008588:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800858a:	2b00      	cmp	r3, #0
 800858c:	f47f aa6d 	bne.w	8007a6a <_dtoa_r+0x9a>
 8008590:	4b07      	ldr	r3, [pc, #28]	; (80085b0 <_dtoa_r+0xbe0>)
 8008592:	f7ff ba92 	b.w	8007aba <_dtoa_r+0xea>
 8008596:	9b01      	ldr	r3, [sp, #4]
 8008598:	2b00      	cmp	r3, #0
 800859a:	dcb5      	bgt.n	8008508 <_dtoa_r+0xb38>
 800859c:	9b07      	ldr	r3, [sp, #28]
 800859e:	2b02      	cmp	r3, #2
 80085a0:	f73f aeb1 	bgt.w	8008306 <_dtoa_r+0x936>
 80085a4:	e7b0      	b.n	8008508 <_dtoa_r+0xb38>
 80085a6:	bf00      	nop
 80085a8:	08009ad0 	.word	0x08009ad0
 80085ac:	08009a30 	.word	0x08009a30
 80085b0:	08009a54 	.word	0x08009a54

080085b4 <_free_r>:
 80085b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085b6:	2900      	cmp	r1, #0
 80085b8:	d044      	beq.n	8008644 <_free_r+0x90>
 80085ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085be:	9001      	str	r0, [sp, #4]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	f1a1 0404 	sub.w	r4, r1, #4
 80085c6:	bfb8      	it	lt
 80085c8:	18e4      	addlt	r4, r4, r3
 80085ca:	f000 f8e7 	bl	800879c <__malloc_lock>
 80085ce:	4a1e      	ldr	r2, [pc, #120]	; (8008648 <_free_r+0x94>)
 80085d0:	9801      	ldr	r0, [sp, #4]
 80085d2:	6813      	ldr	r3, [r2, #0]
 80085d4:	b933      	cbnz	r3, 80085e4 <_free_r+0x30>
 80085d6:	6063      	str	r3, [r4, #4]
 80085d8:	6014      	str	r4, [r2, #0]
 80085da:	b003      	add	sp, #12
 80085dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80085e0:	f000 b8e2 	b.w	80087a8 <__malloc_unlock>
 80085e4:	42a3      	cmp	r3, r4
 80085e6:	d908      	bls.n	80085fa <_free_r+0x46>
 80085e8:	6825      	ldr	r5, [r4, #0]
 80085ea:	1961      	adds	r1, r4, r5
 80085ec:	428b      	cmp	r3, r1
 80085ee:	bf01      	itttt	eq
 80085f0:	6819      	ldreq	r1, [r3, #0]
 80085f2:	685b      	ldreq	r3, [r3, #4]
 80085f4:	1949      	addeq	r1, r1, r5
 80085f6:	6021      	streq	r1, [r4, #0]
 80085f8:	e7ed      	b.n	80085d6 <_free_r+0x22>
 80085fa:	461a      	mov	r2, r3
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	b10b      	cbz	r3, 8008604 <_free_r+0x50>
 8008600:	42a3      	cmp	r3, r4
 8008602:	d9fa      	bls.n	80085fa <_free_r+0x46>
 8008604:	6811      	ldr	r1, [r2, #0]
 8008606:	1855      	adds	r5, r2, r1
 8008608:	42a5      	cmp	r5, r4
 800860a:	d10b      	bne.n	8008624 <_free_r+0x70>
 800860c:	6824      	ldr	r4, [r4, #0]
 800860e:	4421      	add	r1, r4
 8008610:	1854      	adds	r4, r2, r1
 8008612:	42a3      	cmp	r3, r4
 8008614:	6011      	str	r1, [r2, #0]
 8008616:	d1e0      	bne.n	80085da <_free_r+0x26>
 8008618:	681c      	ldr	r4, [r3, #0]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	6053      	str	r3, [r2, #4]
 800861e:	440c      	add	r4, r1
 8008620:	6014      	str	r4, [r2, #0]
 8008622:	e7da      	b.n	80085da <_free_r+0x26>
 8008624:	d902      	bls.n	800862c <_free_r+0x78>
 8008626:	230c      	movs	r3, #12
 8008628:	6003      	str	r3, [r0, #0]
 800862a:	e7d6      	b.n	80085da <_free_r+0x26>
 800862c:	6825      	ldr	r5, [r4, #0]
 800862e:	1961      	adds	r1, r4, r5
 8008630:	428b      	cmp	r3, r1
 8008632:	bf04      	itt	eq
 8008634:	6819      	ldreq	r1, [r3, #0]
 8008636:	685b      	ldreq	r3, [r3, #4]
 8008638:	6063      	str	r3, [r4, #4]
 800863a:	bf04      	itt	eq
 800863c:	1949      	addeq	r1, r1, r5
 800863e:	6021      	streq	r1, [r4, #0]
 8008640:	6054      	str	r4, [r2, #4]
 8008642:	e7ca      	b.n	80085da <_free_r+0x26>
 8008644:	b003      	add	sp, #12
 8008646:	bd30      	pop	{r4, r5, pc}
 8008648:	20000604 	.word	0x20000604

0800864c <malloc>:
 800864c:	4b02      	ldr	r3, [pc, #8]	; (8008658 <malloc+0xc>)
 800864e:	4601      	mov	r1, r0
 8008650:	6818      	ldr	r0, [r3, #0]
 8008652:	f000 b823 	b.w	800869c <_malloc_r>
 8008656:	bf00      	nop
 8008658:	20000068 	.word	0x20000068

0800865c <sbrk_aligned>:
 800865c:	b570      	push	{r4, r5, r6, lr}
 800865e:	4e0e      	ldr	r6, [pc, #56]	; (8008698 <sbrk_aligned+0x3c>)
 8008660:	460c      	mov	r4, r1
 8008662:	6831      	ldr	r1, [r6, #0]
 8008664:	4605      	mov	r5, r0
 8008666:	b911      	cbnz	r1, 800866e <sbrk_aligned+0x12>
 8008668:	f000 fe40 	bl	80092ec <_sbrk_r>
 800866c:	6030      	str	r0, [r6, #0]
 800866e:	4621      	mov	r1, r4
 8008670:	4628      	mov	r0, r5
 8008672:	f000 fe3b 	bl	80092ec <_sbrk_r>
 8008676:	1c43      	adds	r3, r0, #1
 8008678:	d00a      	beq.n	8008690 <sbrk_aligned+0x34>
 800867a:	1cc4      	adds	r4, r0, #3
 800867c:	f024 0403 	bic.w	r4, r4, #3
 8008680:	42a0      	cmp	r0, r4
 8008682:	d007      	beq.n	8008694 <sbrk_aligned+0x38>
 8008684:	1a21      	subs	r1, r4, r0
 8008686:	4628      	mov	r0, r5
 8008688:	f000 fe30 	bl	80092ec <_sbrk_r>
 800868c:	3001      	adds	r0, #1
 800868e:	d101      	bne.n	8008694 <sbrk_aligned+0x38>
 8008690:	f04f 34ff 	mov.w	r4, #4294967295
 8008694:	4620      	mov	r0, r4
 8008696:	bd70      	pop	{r4, r5, r6, pc}
 8008698:	20000608 	.word	0x20000608

0800869c <_malloc_r>:
 800869c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086a0:	1ccd      	adds	r5, r1, #3
 80086a2:	f025 0503 	bic.w	r5, r5, #3
 80086a6:	3508      	adds	r5, #8
 80086a8:	2d0c      	cmp	r5, #12
 80086aa:	bf38      	it	cc
 80086ac:	250c      	movcc	r5, #12
 80086ae:	2d00      	cmp	r5, #0
 80086b0:	4607      	mov	r7, r0
 80086b2:	db01      	blt.n	80086b8 <_malloc_r+0x1c>
 80086b4:	42a9      	cmp	r1, r5
 80086b6:	d905      	bls.n	80086c4 <_malloc_r+0x28>
 80086b8:	230c      	movs	r3, #12
 80086ba:	603b      	str	r3, [r7, #0]
 80086bc:	2600      	movs	r6, #0
 80086be:	4630      	mov	r0, r6
 80086c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008798 <_malloc_r+0xfc>
 80086c8:	f000 f868 	bl	800879c <__malloc_lock>
 80086cc:	f8d8 3000 	ldr.w	r3, [r8]
 80086d0:	461c      	mov	r4, r3
 80086d2:	bb5c      	cbnz	r4, 800872c <_malloc_r+0x90>
 80086d4:	4629      	mov	r1, r5
 80086d6:	4638      	mov	r0, r7
 80086d8:	f7ff ffc0 	bl	800865c <sbrk_aligned>
 80086dc:	1c43      	adds	r3, r0, #1
 80086de:	4604      	mov	r4, r0
 80086e0:	d155      	bne.n	800878e <_malloc_r+0xf2>
 80086e2:	f8d8 4000 	ldr.w	r4, [r8]
 80086e6:	4626      	mov	r6, r4
 80086e8:	2e00      	cmp	r6, #0
 80086ea:	d145      	bne.n	8008778 <_malloc_r+0xdc>
 80086ec:	2c00      	cmp	r4, #0
 80086ee:	d048      	beq.n	8008782 <_malloc_r+0xe6>
 80086f0:	6823      	ldr	r3, [r4, #0]
 80086f2:	4631      	mov	r1, r6
 80086f4:	4638      	mov	r0, r7
 80086f6:	eb04 0903 	add.w	r9, r4, r3
 80086fa:	f000 fdf7 	bl	80092ec <_sbrk_r>
 80086fe:	4581      	cmp	r9, r0
 8008700:	d13f      	bne.n	8008782 <_malloc_r+0xe6>
 8008702:	6821      	ldr	r1, [r4, #0]
 8008704:	1a6d      	subs	r5, r5, r1
 8008706:	4629      	mov	r1, r5
 8008708:	4638      	mov	r0, r7
 800870a:	f7ff ffa7 	bl	800865c <sbrk_aligned>
 800870e:	3001      	adds	r0, #1
 8008710:	d037      	beq.n	8008782 <_malloc_r+0xe6>
 8008712:	6823      	ldr	r3, [r4, #0]
 8008714:	442b      	add	r3, r5
 8008716:	6023      	str	r3, [r4, #0]
 8008718:	f8d8 3000 	ldr.w	r3, [r8]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d038      	beq.n	8008792 <_malloc_r+0xf6>
 8008720:	685a      	ldr	r2, [r3, #4]
 8008722:	42a2      	cmp	r2, r4
 8008724:	d12b      	bne.n	800877e <_malloc_r+0xe2>
 8008726:	2200      	movs	r2, #0
 8008728:	605a      	str	r2, [r3, #4]
 800872a:	e00f      	b.n	800874c <_malloc_r+0xb0>
 800872c:	6822      	ldr	r2, [r4, #0]
 800872e:	1b52      	subs	r2, r2, r5
 8008730:	d41f      	bmi.n	8008772 <_malloc_r+0xd6>
 8008732:	2a0b      	cmp	r2, #11
 8008734:	d917      	bls.n	8008766 <_malloc_r+0xca>
 8008736:	1961      	adds	r1, r4, r5
 8008738:	42a3      	cmp	r3, r4
 800873a:	6025      	str	r5, [r4, #0]
 800873c:	bf18      	it	ne
 800873e:	6059      	strne	r1, [r3, #4]
 8008740:	6863      	ldr	r3, [r4, #4]
 8008742:	bf08      	it	eq
 8008744:	f8c8 1000 	streq.w	r1, [r8]
 8008748:	5162      	str	r2, [r4, r5]
 800874a:	604b      	str	r3, [r1, #4]
 800874c:	4638      	mov	r0, r7
 800874e:	f104 060b 	add.w	r6, r4, #11
 8008752:	f000 f829 	bl	80087a8 <__malloc_unlock>
 8008756:	f026 0607 	bic.w	r6, r6, #7
 800875a:	1d23      	adds	r3, r4, #4
 800875c:	1af2      	subs	r2, r6, r3
 800875e:	d0ae      	beq.n	80086be <_malloc_r+0x22>
 8008760:	1b9b      	subs	r3, r3, r6
 8008762:	50a3      	str	r3, [r4, r2]
 8008764:	e7ab      	b.n	80086be <_malloc_r+0x22>
 8008766:	42a3      	cmp	r3, r4
 8008768:	6862      	ldr	r2, [r4, #4]
 800876a:	d1dd      	bne.n	8008728 <_malloc_r+0x8c>
 800876c:	f8c8 2000 	str.w	r2, [r8]
 8008770:	e7ec      	b.n	800874c <_malloc_r+0xb0>
 8008772:	4623      	mov	r3, r4
 8008774:	6864      	ldr	r4, [r4, #4]
 8008776:	e7ac      	b.n	80086d2 <_malloc_r+0x36>
 8008778:	4634      	mov	r4, r6
 800877a:	6876      	ldr	r6, [r6, #4]
 800877c:	e7b4      	b.n	80086e8 <_malloc_r+0x4c>
 800877e:	4613      	mov	r3, r2
 8008780:	e7cc      	b.n	800871c <_malloc_r+0x80>
 8008782:	230c      	movs	r3, #12
 8008784:	603b      	str	r3, [r7, #0]
 8008786:	4638      	mov	r0, r7
 8008788:	f000 f80e 	bl	80087a8 <__malloc_unlock>
 800878c:	e797      	b.n	80086be <_malloc_r+0x22>
 800878e:	6025      	str	r5, [r4, #0]
 8008790:	e7dc      	b.n	800874c <_malloc_r+0xb0>
 8008792:	605b      	str	r3, [r3, #4]
 8008794:	deff      	udf	#255	; 0xff
 8008796:	bf00      	nop
 8008798:	20000604 	.word	0x20000604

0800879c <__malloc_lock>:
 800879c:	4801      	ldr	r0, [pc, #4]	; (80087a4 <__malloc_lock+0x8>)
 800879e:	f7ff b88c 	b.w	80078ba <__retarget_lock_acquire_recursive>
 80087a2:	bf00      	nop
 80087a4:	20000600 	.word	0x20000600

080087a8 <__malloc_unlock>:
 80087a8:	4801      	ldr	r0, [pc, #4]	; (80087b0 <__malloc_unlock+0x8>)
 80087aa:	f7ff b887 	b.w	80078bc <__retarget_lock_release_recursive>
 80087ae:	bf00      	nop
 80087b0:	20000600 	.word	0x20000600

080087b4 <_Balloc>:
 80087b4:	b570      	push	{r4, r5, r6, lr}
 80087b6:	69c6      	ldr	r6, [r0, #28]
 80087b8:	4604      	mov	r4, r0
 80087ba:	460d      	mov	r5, r1
 80087bc:	b976      	cbnz	r6, 80087dc <_Balloc+0x28>
 80087be:	2010      	movs	r0, #16
 80087c0:	f7ff ff44 	bl	800864c <malloc>
 80087c4:	4602      	mov	r2, r0
 80087c6:	61e0      	str	r0, [r4, #28]
 80087c8:	b920      	cbnz	r0, 80087d4 <_Balloc+0x20>
 80087ca:	4b18      	ldr	r3, [pc, #96]	; (800882c <_Balloc+0x78>)
 80087cc:	4818      	ldr	r0, [pc, #96]	; (8008830 <_Balloc+0x7c>)
 80087ce:	216b      	movs	r1, #107	; 0x6b
 80087d0:	f000 fdaa 	bl	8009328 <__assert_func>
 80087d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087d8:	6006      	str	r6, [r0, #0]
 80087da:	60c6      	str	r6, [r0, #12]
 80087dc:	69e6      	ldr	r6, [r4, #28]
 80087de:	68f3      	ldr	r3, [r6, #12]
 80087e0:	b183      	cbz	r3, 8008804 <_Balloc+0x50>
 80087e2:	69e3      	ldr	r3, [r4, #28]
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80087ea:	b9b8      	cbnz	r0, 800881c <_Balloc+0x68>
 80087ec:	2101      	movs	r1, #1
 80087ee:	fa01 f605 	lsl.w	r6, r1, r5
 80087f2:	1d72      	adds	r2, r6, #5
 80087f4:	0092      	lsls	r2, r2, #2
 80087f6:	4620      	mov	r0, r4
 80087f8:	f000 fdb4 	bl	8009364 <_calloc_r>
 80087fc:	b160      	cbz	r0, 8008818 <_Balloc+0x64>
 80087fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008802:	e00e      	b.n	8008822 <_Balloc+0x6e>
 8008804:	2221      	movs	r2, #33	; 0x21
 8008806:	2104      	movs	r1, #4
 8008808:	4620      	mov	r0, r4
 800880a:	f000 fdab 	bl	8009364 <_calloc_r>
 800880e:	69e3      	ldr	r3, [r4, #28]
 8008810:	60f0      	str	r0, [r6, #12]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d1e4      	bne.n	80087e2 <_Balloc+0x2e>
 8008818:	2000      	movs	r0, #0
 800881a:	bd70      	pop	{r4, r5, r6, pc}
 800881c:	6802      	ldr	r2, [r0, #0]
 800881e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008822:	2300      	movs	r3, #0
 8008824:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008828:	e7f7      	b.n	800881a <_Balloc+0x66>
 800882a:	bf00      	nop
 800882c:	08009a61 	.word	0x08009a61
 8008830:	08009ae1 	.word	0x08009ae1

08008834 <_Bfree>:
 8008834:	b570      	push	{r4, r5, r6, lr}
 8008836:	69c6      	ldr	r6, [r0, #28]
 8008838:	4605      	mov	r5, r0
 800883a:	460c      	mov	r4, r1
 800883c:	b976      	cbnz	r6, 800885c <_Bfree+0x28>
 800883e:	2010      	movs	r0, #16
 8008840:	f7ff ff04 	bl	800864c <malloc>
 8008844:	4602      	mov	r2, r0
 8008846:	61e8      	str	r0, [r5, #28]
 8008848:	b920      	cbnz	r0, 8008854 <_Bfree+0x20>
 800884a:	4b09      	ldr	r3, [pc, #36]	; (8008870 <_Bfree+0x3c>)
 800884c:	4809      	ldr	r0, [pc, #36]	; (8008874 <_Bfree+0x40>)
 800884e:	218f      	movs	r1, #143	; 0x8f
 8008850:	f000 fd6a 	bl	8009328 <__assert_func>
 8008854:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008858:	6006      	str	r6, [r0, #0]
 800885a:	60c6      	str	r6, [r0, #12]
 800885c:	b13c      	cbz	r4, 800886e <_Bfree+0x3a>
 800885e:	69eb      	ldr	r3, [r5, #28]
 8008860:	6862      	ldr	r2, [r4, #4]
 8008862:	68db      	ldr	r3, [r3, #12]
 8008864:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008868:	6021      	str	r1, [r4, #0]
 800886a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800886e:	bd70      	pop	{r4, r5, r6, pc}
 8008870:	08009a61 	.word	0x08009a61
 8008874:	08009ae1 	.word	0x08009ae1

08008878 <__multadd>:
 8008878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800887c:	690d      	ldr	r5, [r1, #16]
 800887e:	4607      	mov	r7, r0
 8008880:	460c      	mov	r4, r1
 8008882:	461e      	mov	r6, r3
 8008884:	f101 0c14 	add.w	ip, r1, #20
 8008888:	2000      	movs	r0, #0
 800888a:	f8dc 3000 	ldr.w	r3, [ip]
 800888e:	b299      	uxth	r1, r3
 8008890:	fb02 6101 	mla	r1, r2, r1, r6
 8008894:	0c1e      	lsrs	r6, r3, #16
 8008896:	0c0b      	lsrs	r3, r1, #16
 8008898:	fb02 3306 	mla	r3, r2, r6, r3
 800889c:	b289      	uxth	r1, r1
 800889e:	3001      	adds	r0, #1
 80088a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80088a4:	4285      	cmp	r5, r0
 80088a6:	f84c 1b04 	str.w	r1, [ip], #4
 80088aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80088ae:	dcec      	bgt.n	800888a <__multadd+0x12>
 80088b0:	b30e      	cbz	r6, 80088f6 <__multadd+0x7e>
 80088b2:	68a3      	ldr	r3, [r4, #8]
 80088b4:	42ab      	cmp	r3, r5
 80088b6:	dc19      	bgt.n	80088ec <__multadd+0x74>
 80088b8:	6861      	ldr	r1, [r4, #4]
 80088ba:	4638      	mov	r0, r7
 80088bc:	3101      	adds	r1, #1
 80088be:	f7ff ff79 	bl	80087b4 <_Balloc>
 80088c2:	4680      	mov	r8, r0
 80088c4:	b928      	cbnz	r0, 80088d2 <__multadd+0x5a>
 80088c6:	4602      	mov	r2, r0
 80088c8:	4b0c      	ldr	r3, [pc, #48]	; (80088fc <__multadd+0x84>)
 80088ca:	480d      	ldr	r0, [pc, #52]	; (8008900 <__multadd+0x88>)
 80088cc:	21ba      	movs	r1, #186	; 0xba
 80088ce:	f000 fd2b 	bl	8009328 <__assert_func>
 80088d2:	6922      	ldr	r2, [r4, #16]
 80088d4:	3202      	adds	r2, #2
 80088d6:	f104 010c 	add.w	r1, r4, #12
 80088da:	0092      	lsls	r2, r2, #2
 80088dc:	300c      	adds	r0, #12
 80088de:	f000 fd15 	bl	800930c <memcpy>
 80088e2:	4621      	mov	r1, r4
 80088e4:	4638      	mov	r0, r7
 80088e6:	f7ff ffa5 	bl	8008834 <_Bfree>
 80088ea:	4644      	mov	r4, r8
 80088ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80088f0:	3501      	adds	r5, #1
 80088f2:	615e      	str	r6, [r3, #20]
 80088f4:	6125      	str	r5, [r4, #16]
 80088f6:	4620      	mov	r0, r4
 80088f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088fc:	08009ad0 	.word	0x08009ad0
 8008900:	08009ae1 	.word	0x08009ae1

08008904 <__hi0bits>:
 8008904:	0c03      	lsrs	r3, r0, #16
 8008906:	041b      	lsls	r3, r3, #16
 8008908:	b9d3      	cbnz	r3, 8008940 <__hi0bits+0x3c>
 800890a:	0400      	lsls	r0, r0, #16
 800890c:	2310      	movs	r3, #16
 800890e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008912:	bf04      	itt	eq
 8008914:	0200      	lsleq	r0, r0, #8
 8008916:	3308      	addeq	r3, #8
 8008918:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800891c:	bf04      	itt	eq
 800891e:	0100      	lsleq	r0, r0, #4
 8008920:	3304      	addeq	r3, #4
 8008922:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008926:	bf04      	itt	eq
 8008928:	0080      	lsleq	r0, r0, #2
 800892a:	3302      	addeq	r3, #2
 800892c:	2800      	cmp	r0, #0
 800892e:	db05      	blt.n	800893c <__hi0bits+0x38>
 8008930:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008934:	f103 0301 	add.w	r3, r3, #1
 8008938:	bf08      	it	eq
 800893a:	2320      	moveq	r3, #32
 800893c:	4618      	mov	r0, r3
 800893e:	4770      	bx	lr
 8008940:	2300      	movs	r3, #0
 8008942:	e7e4      	b.n	800890e <__hi0bits+0xa>

08008944 <__lo0bits>:
 8008944:	6803      	ldr	r3, [r0, #0]
 8008946:	f013 0207 	ands.w	r2, r3, #7
 800894a:	d00c      	beq.n	8008966 <__lo0bits+0x22>
 800894c:	07d9      	lsls	r1, r3, #31
 800894e:	d422      	bmi.n	8008996 <__lo0bits+0x52>
 8008950:	079a      	lsls	r2, r3, #30
 8008952:	bf49      	itett	mi
 8008954:	085b      	lsrmi	r3, r3, #1
 8008956:	089b      	lsrpl	r3, r3, #2
 8008958:	6003      	strmi	r3, [r0, #0]
 800895a:	2201      	movmi	r2, #1
 800895c:	bf5c      	itt	pl
 800895e:	6003      	strpl	r3, [r0, #0]
 8008960:	2202      	movpl	r2, #2
 8008962:	4610      	mov	r0, r2
 8008964:	4770      	bx	lr
 8008966:	b299      	uxth	r1, r3
 8008968:	b909      	cbnz	r1, 800896e <__lo0bits+0x2a>
 800896a:	0c1b      	lsrs	r3, r3, #16
 800896c:	2210      	movs	r2, #16
 800896e:	b2d9      	uxtb	r1, r3
 8008970:	b909      	cbnz	r1, 8008976 <__lo0bits+0x32>
 8008972:	3208      	adds	r2, #8
 8008974:	0a1b      	lsrs	r3, r3, #8
 8008976:	0719      	lsls	r1, r3, #28
 8008978:	bf04      	itt	eq
 800897a:	091b      	lsreq	r3, r3, #4
 800897c:	3204      	addeq	r2, #4
 800897e:	0799      	lsls	r1, r3, #30
 8008980:	bf04      	itt	eq
 8008982:	089b      	lsreq	r3, r3, #2
 8008984:	3202      	addeq	r2, #2
 8008986:	07d9      	lsls	r1, r3, #31
 8008988:	d403      	bmi.n	8008992 <__lo0bits+0x4e>
 800898a:	085b      	lsrs	r3, r3, #1
 800898c:	f102 0201 	add.w	r2, r2, #1
 8008990:	d003      	beq.n	800899a <__lo0bits+0x56>
 8008992:	6003      	str	r3, [r0, #0]
 8008994:	e7e5      	b.n	8008962 <__lo0bits+0x1e>
 8008996:	2200      	movs	r2, #0
 8008998:	e7e3      	b.n	8008962 <__lo0bits+0x1e>
 800899a:	2220      	movs	r2, #32
 800899c:	e7e1      	b.n	8008962 <__lo0bits+0x1e>
	...

080089a0 <__i2b>:
 80089a0:	b510      	push	{r4, lr}
 80089a2:	460c      	mov	r4, r1
 80089a4:	2101      	movs	r1, #1
 80089a6:	f7ff ff05 	bl	80087b4 <_Balloc>
 80089aa:	4602      	mov	r2, r0
 80089ac:	b928      	cbnz	r0, 80089ba <__i2b+0x1a>
 80089ae:	4b05      	ldr	r3, [pc, #20]	; (80089c4 <__i2b+0x24>)
 80089b0:	4805      	ldr	r0, [pc, #20]	; (80089c8 <__i2b+0x28>)
 80089b2:	f240 1145 	movw	r1, #325	; 0x145
 80089b6:	f000 fcb7 	bl	8009328 <__assert_func>
 80089ba:	2301      	movs	r3, #1
 80089bc:	6144      	str	r4, [r0, #20]
 80089be:	6103      	str	r3, [r0, #16]
 80089c0:	bd10      	pop	{r4, pc}
 80089c2:	bf00      	nop
 80089c4:	08009ad0 	.word	0x08009ad0
 80089c8:	08009ae1 	.word	0x08009ae1

080089cc <__multiply>:
 80089cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d0:	4691      	mov	r9, r2
 80089d2:	690a      	ldr	r2, [r1, #16]
 80089d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80089d8:	429a      	cmp	r2, r3
 80089da:	bfb8      	it	lt
 80089dc:	460b      	movlt	r3, r1
 80089de:	460c      	mov	r4, r1
 80089e0:	bfbc      	itt	lt
 80089e2:	464c      	movlt	r4, r9
 80089e4:	4699      	movlt	r9, r3
 80089e6:	6927      	ldr	r7, [r4, #16]
 80089e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80089ec:	68a3      	ldr	r3, [r4, #8]
 80089ee:	6861      	ldr	r1, [r4, #4]
 80089f0:	eb07 060a 	add.w	r6, r7, sl
 80089f4:	42b3      	cmp	r3, r6
 80089f6:	b085      	sub	sp, #20
 80089f8:	bfb8      	it	lt
 80089fa:	3101      	addlt	r1, #1
 80089fc:	f7ff feda 	bl	80087b4 <_Balloc>
 8008a00:	b930      	cbnz	r0, 8008a10 <__multiply+0x44>
 8008a02:	4602      	mov	r2, r0
 8008a04:	4b44      	ldr	r3, [pc, #272]	; (8008b18 <__multiply+0x14c>)
 8008a06:	4845      	ldr	r0, [pc, #276]	; (8008b1c <__multiply+0x150>)
 8008a08:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008a0c:	f000 fc8c 	bl	8009328 <__assert_func>
 8008a10:	f100 0514 	add.w	r5, r0, #20
 8008a14:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008a18:	462b      	mov	r3, r5
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	4543      	cmp	r3, r8
 8008a1e:	d321      	bcc.n	8008a64 <__multiply+0x98>
 8008a20:	f104 0314 	add.w	r3, r4, #20
 8008a24:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008a28:	f109 0314 	add.w	r3, r9, #20
 8008a2c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008a30:	9202      	str	r2, [sp, #8]
 8008a32:	1b3a      	subs	r2, r7, r4
 8008a34:	3a15      	subs	r2, #21
 8008a36:	f022 0203 	bic.w	r2, r2, #3
 8008a3a:	3204      	adds	r2, #4
 8008a3c:	f104 0115 	add.w	r1, r4, #21
 8008a40:	428f      	cmp	r7, r1
 8008a42:	bf38      	it	cc
 8008a44:	2204      	movcc	r2, #4
 8008a46:	9201      	str	r2, [sp, #4]
 8008a48:	9a02      	ldr	r2, [sp, #8]
 8008a4a:	9303      	str	r3, [sp, #12]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d80c      	bhi.n	8008a6a <__multiply+0x9e>
 8008a50:	2e00      	cmp	r6, #0
 8008a52:	dd03      	ble.n	8008a5c <__multiply+0x90>
 8008a54:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d05b      	beq.n	8008b14 <__multiply+0x148>
 8008a5c:	6106      	str	r6, [r0, #16]
 8008a5e:	b005      	add	sp, #20
 8008a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a64:	f843 2b04 	str.w	r2, [r3], #4
 8008a68:	e7d8      	b.n	8008a1c <__multiply+0x50>
 8008a6a:	f8b3 a000 	ldrh.w	sl, [r3]
 8008a6e:	f1ba 0f00 	cmp.w	sl, #0
 8008a72:	d024      	beq.n	8008abe <__multiply+0xf2>
 8008a74:	f104 0e14 	add.w	lr, r4, #20
 8008a78:	46a9      	mov	r9, r5
 8008a7a:	f04f 0c00 	mov.w	ip, #0
 8008a7e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008a82:	f8d9 1000 	ldr.w	r1, [r9]
 8008a86:	fa1f fb82 	uxth.w	fp, r2
 8008a8a:	b289      	uxth	r1, r1
 8008a8c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008a90:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008a94:	f8d9 2000 	ldr.w	r2, [r9]
 8008a98:	4461      	add	r1, ip
 8008a9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008a9e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008aa2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008aa6:	b289      	uxth	r1, r1
 8008aa8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008aac:	4577      	cmp	r7, lr
 8008aae:	f849 1b04 	str.w	r1, [r9], #4
 8008ab2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008ab6:	d8e2      	bhi.n	8008a7e <__multiply+0xb2>
 8008ab8:	9a01      	ldr	r2, [sp, #4]
 8008aba:	f845 c002 	str.w	ip, [r5, r2]
 8008abe:	9a03      	ldr	r2, [sp, #12]
 8008ac0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008ac4:	3304      	adds	r3, #4
 8008ac6:	f1b9 0f00 	cmp.w	r9, #0
 8008aca:	d021      	beq.n	8008b10 <__multiply+0x144>
 8008acc:	6829      	ldr	r1, [r5, #0]
 8008ace:	f104 0c14 	add.w	ip, r4, #20
 8008ad2:	46ae      	mov	lr, r5
 8008ad4:	f04f 0a00 	mov.w	sl, #0
 8008ad8:	f8bc b000 	ldrh.w	fp, [ip]
 8008adc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008ae0:	fb09 220b 	mla	r2, r9, fp, r2
 8008ae4:	4452      	add	r2, sl
 8008ae6:	b289      	uxth	r1, r1
 8008ae8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008aec:	f84e 1b04 	str.w	r1, [lr], #4
 8008af0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008af4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008af8:	f8be 1000 	ldrh.w	r1, [lr]
 8008afc:	fb09 110a 	mla	r1, r9, sl, r1
 8008b00:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008b04:	4567      	cmp	r7, ip
 8008b06:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008b0a:	d8e5      	bhi.n	8008ad8 <__multiply+0x10c>
 8008b0c:	9a01      	ldr	r2, [sp, #4]
 8008b0e:	50a9      	str	r1, [r5, r2]
 8008b10:	3504      	adds	r5, #4
 8008b12:	e799      	b.n	8008a48 <__multiply+0x7c>
 8008b14:	3e01      	subs	r6, #1
 8008b16:	e79b      	b.n	8008a50 <__multiply+0x84>
 8008b18:	08009ad0 	.word	0x08009ad0
 8008b1c:	08009ae1 	.word	0x08009ae1

08008b20 <__pow5mult>:
 8008b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b24:	4615      	mov	r5, r2
 8008b26:	f012 0203 	ands.w	r2, r2, #3
 8008b2a:	4606      	mov	r6, r0
 8008b2c:	460f      	mov	r7, r1
 8008b2e:	d007      	beq.n	8008b40 <__pow5mult+0x20>
 8008b30:	4c25      	ldr	r4, [pc, #148]	; (8008bc8 <__pow5mult+0xa8>)
 8008b32:	3a01      	subs	r2, #1
 8008b34:	2300      	movs	r3, #0
 8008b36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008b3a:	f7ff fe9d 	bl	8008878 <__multadd>
 8008b3e:	4607      	mov	r7, r0
 8008b40:	10ad      	asrs	r5, r5, #2
 8008b42:	d03d      	beq.n	8008bc0 <__pow5mult+0xa0>
 8008b44:	69f4      	ldr	r4, [r6, #28]
 8008b46:	b97c      	cbnz	r4, 8008b68 <__pow5mult+0x48>
 8008b48:	2010      	movs	r0, #16
 8008b4a:	f7ff fd7f 	bl	800864c <malloc>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	61f0      	str	r0, [r6, #28]
 8008b52:	b928      	cbnz	r0, 8008b60 <__pow5mult+0x40>
 8008b54:	4b1d      	ldr	r3, [pc, #116]	; (8008bcc <__pow5mult+0xac>)
 8008b56:	481e      	ldr	r0, [pc, #120]	; (8008bd0 <__pow5mult+0xb0>)
 8008b58:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008b5c:	f000 fbe4 	bl	8009328 <__assert_func>
 8008b60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b64:	6004      	str	r4, [r0, #0]
 8008b66:	60c4      	str	r4, [r0, #12]
 8008b68:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008b6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008b70:	b94c      	cbnz	r4, 8008b86 <__pow5mult+0x66>
 8008b72:	f240 2171 	movw	r1, #625	; 0x271
 8008b76:	4630      	mov	r0, r6
 8008b78:	f7ff ff12 	bl	80089a0 <__i2b>
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008b82:	4604      	mov	r4, r0
 8008b84:	6003      	str	r3, [r0, #0]
 8008b86:	f04f 0900 	mov.w	r9, #0
 8008b8a:	07eb      	lsls	r3, r5, #31
 8008b8c:	d50a      	bpl.n	8008ba4 <__pow5mult+0x84>
 8008b8e:	4639      	mov	r1, r7
 8008b90:	4622      	mov	r2, r4
 8008b92:	4630      	mov	r0, r6
 8008b94:	f7ff ff1a 	bl	80089cc <__multiply>
 8008b98:	4639      	mov	r1, r7
 8008b9a:	4680      	mov	r8, r0
 8008b9c:	4630      	mov	r0, r6
 8008b9e:	f7ff fe49 	bl	8008834 <_Bfree>
 8008ba2:	4647      	mov	r7, r8
 8008ba4:	106d      	asrs	r5, r5, #1
 8008ba6:	d00b      	beq.n	8008bc0 <__pow5mult+0xa0>
 8008ba8:	6820      	ldr	r0, [r4, #0]
 8008baa:	b938      	cbnz	r0, 8008bbc <__pow5mult+0x9c>
 8008bac:	4622      	mov	r2, r4
 8008bae:	4621      	mov	r1, r4
 8008bb0:	4630      	mov	r0, r6
 8008bb2:	f7ff ff0b 	bl	80089cc <__multiply>
 8008bb6:	6020      	str	r0, [r4, #0]
 8008bb8:	f8c0 9000 	str.w	r9, [r0]
 8008bbc:	4604      	mov	r4, r0
 8008bbe:	e7e4      	b.n	8008b8a <__pow5mult+0x6a>
 8008bc0:	4638      	mov	r0, r7
 8008bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bc6:	bf00      	nop
 8008bc8:	08009c30 	.word	0x08009c30
 8008bcc:	08009a61 	.word	0x08009a61
 8008bd0:	08009ae1 	.word	0x08009ae1

08008bd4 <__lshift>:
 8008bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bd8:	460c      	mov	r4, r1
 8008bda:	6849      	ldr	r1, [r1, #4]
 8008bdc:	6923      	ldr	r3, [r4, #16]
 8008bde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008be2:	68a3      	ldr	r3, [r4, #8]
 8008be4:	4607      	mov	r7, r0
 8008be6:	4691      	mov	r9, r2
 8008be8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008bec:	f108 0601 	add.w	r6, r8, #1
 8008bf0:	42b3      	cmp	r3, r6
 8008bf2:	db0b      	blt.n	8008c0c <__lshift+0x38>
 8008bf4:	4638      	mov	r0, r7
 8008bf6:	f7ff fddd 	bl	80087b4 <_Balloc>
 8008bfa:	4605      	mov	r5, r0
 8008bfc:	b948      	cbnz	r0, 8008c12 <__lshift+0x3e>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	4b28      	ldr	r3, [pc, #160]	; (8008ca4 <__lshift+0xd0>)
 8008c02:	4829      	ldr	r0, [pc, #164]	; (8008ca8 <__lshift+0xd4>)
 8008c04:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008c08:	f000 fb8e 	bl	8009328 <__assert_func>
 8008c0c:	3101      	adds	r1, #1
 8008c0e:	005b      	lsls	r3, r3, #1
 8008c10:	e7ee      	b.n	8008bf0 <__lshift+0x1c>
 8008c12:	2300      	movs	r3, #0
 8008c14:	f100 0114 	add.w	r1, r0, #20
 8008c18:	f100 0210 	add.w	r2, r0, #16
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	4553      	cmp	r3, sl
 8008c20:	db33      	blt.n	8008c8a <__lshift+0xb6>
 8008c22:	6920      	ldr	r0, [r4, #16]
 8008c24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c28:	f104 0314 	add.w	r3, r4, #20
 8008c2c:	f019 091f 	ands.w	r9, r9, #31
 8008c30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008c34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008c38:	d02b      	beq.n	8008c92 <__lshift+0xbe>
 8008c3a:	f1c9 0e20 	rsb	lr, r9, #32
 8008c3e:	468a      	mov	sl, r1
 8008c40:	2200      	movs	r2, #0
 8008c42:	6818      	ldr	r0, [r3, #0]
 8008c44:	fa00 f009 	lsl.w	r0, r0, r9
 8008c48:	4310      	orrs	r0, r2
 8008c4a:	f84a 0b04 	str.w	r0, [sl], #4
 8008c4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c52:	459c      	cmp	ip, r3
 8008c54:	fa22 f20e 	lsr.w	r2, r2, lr
 8008c58:	d8f3      	bhi.n	8008c42 <__lshift+0x6e>
 8008c5a:	ebac 0304 	sub.w	r3, ip, r4
 8008c5e:	3b15      	subs	r3, #21
 8008c60:	f023 0303 	bic.w	r3, r3, #3
 8008c64:	3304      	adds	r3, #4
 8008c66:	f104 0015 	add.w	r0, r4, #21
 8008c6a:	4584      	cmp	ip, r0
 8008c6c:	bf38      	it	cc
 8008c6e:	2304      	movcc	r3, #4
 8008c70:	50ca      	str	r2, [r1, r3]
 8008c72:	b10a      	cbz	r2, 8008c78 <__lshift+0xa4>
 8008c74:	f108 0602 	add.w	r6, r8, #2
 8008c78:	3e01      	subs	r6, #1
 8008c7a:	4638      	mov	r0, r7
 8008c7c:	612e      	str	r6, [r5, #16]
 8008c7e:	4621      	mov	r1, r4
 8008c80:	f7ff fdd8 	bl	8008834 <_Bfree>
 8008c84:	4628      	mov	r0, r5
 8008c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008c8e:	3301      	adds	r3, #1
 8008c90:	e7c5      	b.n	8008c1e <__lshift+0x4a>
 8008c92:	3904      	subs	r1, #4
 8008c94:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c98:	f841 2f04 	str.w	r2, [r1, #4]!
 8008c9c:	459c      	cmp	ip, r3
 8008c9e:	d8f9      	bhi.n	8008c94 <__lshift+0xc0>
 8008ca0:	e7ea      	b.n	8008c78 <__lshift+0xa4>
 8008ca2:	bf00      	nop
 8008ca4:	08009ad0 	.word	0x08009ad0
 8008ca8:	08009ae1 	.word	0x08009ae1

08008cac <__mcmp>:
 8008cac:	b530      	push	{r4, r5, lr}
 8008cae:	6902      	ldr	r2, [r0, #16]
 8008cb0:	690c      	ldr	r4, [r1, #16]
 8008cb2:	1b12      	subs	r2, r2, r4
 8008cb4:	d10e      	bne.n	8008cd4 <__mcmp+0x28>
 8008cb6:	f100 0314 	add.w	r3, r0, #20
 8008cba:	3114      	adds	r1, #20
 8008cbc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008cc0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008cc4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008cc8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008ccc:	42a5      	cmp	r5, r4
 8008cce:	d003      	beq.n	8008cd8 <__mcmp+0x2c>
 8008cd0:	d305      	bcc.n	8008cde <__mcmp+0x32>
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	4610      	mov	r0, r2
 8008cd6:	bd30      	pop	{r4, r5, pc}
 8008cd8:	4283      	cmp	r3, r0
 8008cda:	d3f3      	bcc.n	8008cc4 <__mcmp+0x18>
 8008cdc:	e7fa      	b.n	8008cd4 <__mcmp+0x28>
 8008cde:	f04f 32ff 	mov.w	r2, #4294967295
 8008ce2:	e7f7      	b.n	8008cd4 <__mcmp+0x28>

08008ce4 <__mdiff>:
 8008ce4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce8:	460c      	mov	r4, r1
 8008cea:	4606      	mov	r6, r0
 8008cec:	4611      	mov	r1, r2
 8008cee:	4620      	mov	r0, r4
 8008cf0:	4690      	mov	r8, r2
 8008cf2:	f7ff ffdb 	bl	8008cac <__mcmp>
 8008cf6:	1e05      	subs	r5, r0, #0
 8008cf8:	d110      	bne.n	8008d1c <__mdiff+0x38>
 8008cfa:	4629      	mov	r1, r5
 8008cfc:	4630      	mov	r0, r6
 8008cfe:	f7ff fd59 	bl	80087b4 <_Balloc>
 8008d02:	b930      	cbnz	r0, 8008d12 <__mdiff+0x2e>
 8008d04:	4b3a      	ldr	r3, [pc, #232]	; (8008df0 <__mdiff+0x10c>)
 8008d06:	4602      	mov	r2, r0
 8008d08:	f240 2137 	movw	r1, #567	; 0x237
 8008d0c:	4839      	ldr	r0, [pc, #228]	; (8008df4 <__mdiff+0x110>)
 8008d0e:	f000 fb0b 	bl	8009328 <__assert_func>
 8008d12:	2301      	movs	r3, #1
 8008d14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d1c:	bfa4      	itt	ge
 8008d1e:	4643      	movge	r3, r8
 8008d20:	46a0      	movge	r8, r4
 8008d22:	4630      	mov	r0, r6
 8008d24:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008d28:	bfa6      	itte	ge
 8008d2a:	461c      	movge	r4, r3
 8008d2c:	2500      	movge	r5, #0
 8008d2e:	2501      	movlt	r5, #1
 8008d30:	f7ff fd40 	bl	80087b4 <_Balloc>
 8008d34:	b920      	cbnz	r0, 8008d40 <__mdiff+0x5c>
 8008d36:	4b2e      	ldr	r3, [pc, #184]	; (8008df0 <__mdiff+0x10c>)
 8008d38:	4602      	mov	r2, r0
 8008d3a:	f240 2145 	movw	r1, #581	; 0x245
 8008d3e:	e7e5      	b.n	8008d0c <__mdiff+0x28>
 8008d40:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008d44:	6926      	ldr	r6, [r4, #16]
 8008d46:	60c5      	str	r5, [r0, #12]
 8008d48:	f104 0914 	add.w	r9, r4, #20
 8008d4c:	f108 0514 	add.w	r5, r8, #20
 8008d50:	f100 0e14 	add.w	lr, r0, #20
 8008d54:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008d58:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008d5c:	f108 0210 	add.w	r2, r8, #16
 8008d60:	46f2      	mov	sl, lr
 8008d62:	2100      	movs	r1, #0
 8008d64:	f859 3b04 	ldr.w	r3, [r9], #4
 8008d68:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008d6c:	fa11 f88b 	uxtah	r8, r1, fp
 8008d70:	b299      	uxth	r1, r3
 8008d72:	0c1b      	lsrs	r3, r3, #16
 8008d74:	eba8 0801 	sub.w	r8, r8, r1
 8008d78:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008d7c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008d80:	fa1f f888 	uxth.w	r8, r8
 8008d84:	1419      	asrs	r1, r3, #16
 8008d86:	454e      	cmp	r6, r9
 8008d88:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008d8c:	f84a 3b04 	str.w	r3, [sl], #4
 8008d90:	d8e8      	bhi.n	8008d64 <__mdiff+0x80>
 8008d92:	1b33      	subs	r3, r6, r4
 8008d94:	3b15      	subs	r3, #21
 8008d96:	f023 0303 	bic.w	r3, r3, #3
 8008d9a:	3304      	adds	r3, #4
 8008d9c:	3415      	adds	r4, #21
 8008d9e:	42a6      	cmp	r6, r4
 8008da0:	bf38      	it	cc
 8008da2:	2304      	movcc	r3, #4
 8008da4:	441d      	add	r5, r3
 8008da6:	4473      	add	r3, lr
 8008da8:	469e      	mov	lr, r3
 8008daa:	462e      	mov	r6, r5
 8008dac:	4566      	cmp	r6, ip
 8008dae:	d30e      	bcc.n	8008dce <__mdiff+0xea>
 8008db0:	f10c 0203 	add.w	r2, ip, #3
 8008db4:	1b52      	subs	r2, r2, r5
 8008db6:	f022 0203 	bic.w	r2, r2, #3
 8008dba:	3d03      	subs	r5, #3
 8008dbc:	45ac      	cmp	ip, r5
 8008dbe:	bf38      	it	cc
 8008dc0:	2200      	movcc	r2, #0
 8008dc2:	4413      	add	r3, r2
 8008dc4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008dc8:	b17a      	cbz	r2, 8008dea <__mdiff+0x106>
 8008dca:	6107      	str	r7, [r0, #16]
 8008dcc:	e7a4      	b.n	8008d18 <__mdiff+0x34>
 8008dce:	f856 8b04 	ldr.w	r8, [r6], #4
 8008dd2:	fa11 f288 	uxtah	r2, r1, r8
 8008dd6:	1414      	asrs	r4, r2, #16
 8008dd8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008ddc:	b292      	uxth	r2, r2
 8008dde:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008de2:	f84e 2b04 	str.w	r2, [lr], #4
 8008de6:	1421      	asrs	r1, r4, #16
 8008de8:	e7e0      	b.n	8008dac <__mdiff+0xc8>
 8008dea:	3f01      	subs	r7, #1
 8008dec:	e7ea      	b.n	8008dc4 <__mdiff+0xe0>
 8008dee:	bf00      	nop
 8008df0:	08009ad0 	.word	0x08009ad0
 8008df4:	08009ae1 	.word	0x08009ae1

08008df8 <__d2b>:
 8008df8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008dfc:	460f      	mov	r7, r1
 8008dfe:	2101      	movs	r1, #1
 8008e00:	ec59 8b10 	vmov	r8, r9, d0
 8008e04:	4616      	mov	r6, r2
 8008e06:	f7ff fcd5 	bl	80087b4 <_Balloc>
 8008e0a:	4604      	mov	r4, r0
 8008e0c:	b930      	cbnz	r0, 8008e1c <__d2b+0x24>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	4b24      	ldr	r3, [pc, #144]	; (8008ea4 <__d2b+0xac>)
 8008e12:	4825      	ldr	r0, [pc, #148]	; (8008ea8 <__d2b+0xb0>)
 8008e14:	f240 310f 	movw	r1, #783	; 0x30f
 8008e18:	f000 fa86 	bl	8009328 <__assert_func>
 8008e1c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008e20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e24:	bb2d      	cbnz	r5, 8008e72 <__d2b+0x7a>
 8008e26:	9301      	str	r3, [sp, #4]
 8008e28:	f1b8 0300 	subs.w	r3, r8, #0
 8008e2c:	d026      	beq.n	8008e7c <__d2b+0x84>
 8008e2e:	4668      	mov	r0, sp
 8008e30:	9300      	str	r3, [sp, #0]
 8008e32:	f7ff fd87 	bl	8008944 <__lo0bits>
 8008e36:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008e3a:	b1e8      	cbz	r0, 8008e78 <__d2b+0x80>
 8008e3c:	f1c0 0320 	rsb	r3, r0, #32
 8008e40:	fa02 f303 	lsl.w	r3, r2, r3
 8008e44:	430b      	orrs	r3, r1
 8008e46:	40c2      	lsrs	r2, r0
 8008e48:	6163      	str	r3, [r4, #20]
 8008e4a:	9201      	str	r2, [sp, #4]
 8008e4c:	9b01      	ldr	r3, [sp, #4]
 8008e4e:	61a3      	str	r3, [r4, #24]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	bf14      	ite	ne
 8008e54:	2202      	movne	r2, #2
 8008e56:	2201      	moveq	r2, #1
 8008e58:	6122      	str	r2, [r4, #16]
 8008e5a:	b1bd      	cbz	r5, 8008e8c <__d2b+0x94>
 8008e5c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008e60:	4405      	add	r5, r0
 8008e62:	603d      	str	r5, [r7, #0]
 8008e64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008e68:	6030      	str	r0, [r6, #0]
 8008e6a:	4620      	mov	r0, r4
 8008e6c:	b003      	add	sp, #12
 8008e6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e76:	e7d6      	b.n	8008e26 <__d2b+0x2e>
 8008e78:	6161      	str	r1, [r4, #20]
 8008e7a:	e7e7      	b.n	8008e4c <__d2b+0x54>
 8008e7c:	a801      	add	r0, sp, #4
 8008e7e:	f7ff fd61 	bl	8008944 <__lo0bits>
 8008e82:	9b01      	ldr	r3, [sp, #4]
 8008e84:	6163      	str	r3, [r4, #20]
 8008e86:	3020      	adds	r0, #32
 8008e88:	2201      	movs	r2, #1
 8008e8a:	e7e5      	b.n	8008e58 <__d2b+0x60>
 8008e8c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008e90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008e94:	6038      	str	r0, [r7, #0]
 8008e96:	6918      	ldr	r0, [r3, #16]
 8008e98:	f7ff fd34 	bl	8008904 <__hi0bits>
 8008e9c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008ea0:	e7e2      	b.n	8008e68 <__d2b+0x70>
 8008ea2:	bf00      	nop
 8008ea4:	08009ad0 	.word	0x08009ad0
 8008ea8:	08009ae1 	.word	0x08009ae1

08008eac <__ssputs_r>:
 8008eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008eb0:	688e      	ldr	r6, [r1, #8]
 8008eb2:	461f      	mov	r7, r3
 8008eb4:	42be      	cmp	r6, r7
 8008eb6:	680b      	ldr	r3, [r1, #0]
 8008eb8:	4682      	mov	sl, r0
 8008eba:	460c      	mov	r4, r1
 8008ebc:	4690      	mov	r8, r2
 8008ebe:	d82c      	bhi.n	8008f1a <__ssputs_r+0x6e>
 8008ec0:	898a      	ldrh	r2, [r1, #12]
 8008ec2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ec6:	d026      	beq.n	8008f16 <__ssputs_r+0x6a>
 8008ec8:	6965      	ldr	r5, [r4, #20]
 8008eca:	6909      	ldr	r1, [r1, #16]
 8008ecc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ed0:	eba3 0901 	sub.w	r9, r3, r1
 8008ed4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ed8:	1c7b      	adds	r3, r7, #1
 8008eda:	444b      	add	r3, r9
 8008edc:	106d      	asrs	r5, r5, #1
 8008ede:	429d      	cmp	r5, r3
 8008ee0:	bf38      	it	cc
 8008ee2:	461d      	movcc	r5, r3
 8008ee4:	0553      	lsls	r3, r2, #21
 8008ee6:	d527      	bpl.n	8008f38 <__ssputs_r+0x8c>
 8008ee8:	4629      	mov	r1, r5
 8008eea:	f7ff fbd7 	bl	800869c <_malloc_r>
 8008eee:	4606      	mov	r6, r0
 8008ef0:	b360      	cbz	r0, 8008f4c <__ssputs_r+0xa0>
 8008ef2:	6921      	ldr	r1, [r4, #16]
 8008ef4:	464a      	mov	r2, r9
 8008ef6:	f000 fa09 	bl	800930c <memcpy>
 8008efa:	89a3      	ldrh	r3, [r4, #12]
 8008efc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f04:	81a3      	strh	r3, [r4, #12]
 8008f06:	6126      	str	r6, [r4, #16]
 8008f08:	6165      	str	r5, [r4, #20]
 8008f0a:	444e      	add	r6, r9
 8008f0c:	eba5 0509 	sub.w	r5, r5, r9
 8008f10:	6026      	str	r6, [r4, #0]
 8008f12:	60a5      	str	r5, [r4, #8]
 8008f14:	463e      	mov	r6, r7
 8008f16:	42be      	cmp	r6, r7
 8008f18:	d900      	bls.n	8008f1c <__ssputs_r+0x70>
 8008f1a:	463e      	mov	r6, r7
 8008f1c:	6820      	ldr	r0, [r4, #0]
 8008f1e:	4632      	mov	r2, r6
 8008f20:	4641      	mov	r1, r8
 8008f22:	f000 f9c9 	bl	80092b8 <memmove>
 8008f26:	68a3      	ldr	r3, [r4, #8]
 8008f28:	1b9b      	subs	r3, r3, r6
 8008f2a:	60a3      	str	r3, [r4, #8]
 8008f2c:	6823      	ldr	r3, [r4, #0]
 8008f2e:	4433      	add	r3, r6
 8008f30:	6023      	str	r3, [r4, #0]
 8008f32:	2000      	movs	r0, #0
 8008f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f38:	462a      	mov	r2, r5
 8008f3a:	f000 fa3b 	bl	80093b4 <_realloc_r>
 8008f3e:	4606      	mov	r6, r0
 8008f40:	2800      	cmp	r0, #0
 8008f42:	d1e0      	bne.n	8008f06 <__ssputs_r+0x5a>
 8008f44:	6921      	ldr	r1, [r4, #16]
 8008f46:	4650      	mov	r0, sl
 8008f48:	f7ff fb34 	bl	80085b4 <_free_r>
 8008f4c:	230c      	movs	r3, #12
 8008f4e:	f8ca 3000 	str.w	r3, [sl]
 8008f52:	89a3      	ldrh	r3, [r4, #12]
 8008f54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f58:	81a3      	strh	r3, [r4, #12]
 8008f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f5e:	e7e9      	b.n	8008f34 <__ssputs_r+0x88>

08008f60 <_svfiprintf_r>:
 8008f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f64:	4698      	mov	r8, r3
 8008f66:	898b      	ldrh	r3, [r1, #12]
 8008f68:	061b      	lsls	r3, r3, #24
 8008f6a:	b09d      	sub	sp, #116	; 0x74
 8008f6c:	4607      	mov	r7, r0
 8008f6e:	460d      	mov	r5, r1
 8008f70:	4614      	mov	r4, r2
 8008f72:	d50e      	bpl.n	8008f92 <_svfiprintf_r+0x32>
 8008f74:	690b      	ldr	r3, [r1, #16]
 8008f76:	b963      	cbnz	r3, 8008f92 <_svfiprintf_r+0x32>
 8008f78:	2140      	movs	r1, #64	; 0x40
 8008f7a:	f7ff fb8f 	bl	800869c <_malloc_r>
 8008f7e:	6028      	str	r0, [r5, #0]
 8008f80:	6128      	str	r0, [r5, #16]
 8008f82:	b920      	cbnz	r0, 8008f8e <_svfiprintf_r+0x2e>
 8008f84:	230c      	movs	r3, #12
 8008f86:	603b      	str	r3, [r7, #0]
 8008f88:	f04f 30ff 	mov.w	r0, #4294967295
 8008f8c:	e0d0      	b.n	8009130 <_svfiprintf_r+0x1d0>
 8008f8e:	2340      	movs	r3, #64	; 0x40
 8008f90:	616b      	str	r3, [r5, #20]
 8008f92:	2300      	movs	r3, #0
 8008f94:	9309      	str	r3, [sp, #36]	; 0x24
 8008f96:	2320      	movs	r3, #32
 8008f98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fa0:	2330      	movs	r3, #48	; 0x30
 8008fa2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009148 <_svfiprintf_r+0x1e8>
 8008fa6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008faa:	f04f 0901 	mov.w	r9, #1
 8008fae:	4623      	mov	r3, r4
 8008fb0:	469a      	mov	sl, r3
 8008fb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fb6:	b10a      	cbz	r2, 8008fbc <_svfiprintf_r+0x5c>
 8008fb8:	2a25      	cmp	r2, #37	; 0x25
 8008fba:	d1f9      	bne.n	8008fb0 <_svfiprintf_r+0x50>
 8008fbc:	ebba 0b04 	subs.w	fp, sl, r4
 8008fc0:	d00b      	beq.n	8008fda <_svfiprintf_r+0x7a>
 8008fc2:	465b      	mov	r3, fp
 8008fc4:	4622      	mov	r2, r4
 8008fc6:	4629      	mov	r1, r5
 8008fc8:	4638      	mov	r0, r7
 8008fca:	f7ff ff6f 	bl	8008eac <__ssputs_r>
 8008fce:	3001      	adds	r0, #1
 8008fd0:	f000 80a9 	beq.w	8009126 <_svfiprintf_r+0x1c6>
 8008fd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fd6:	445a      	add	r2, fp
 8008fd8:	9209      	str	r2, [sp, #36]	; 0x24
 8008fda:	f89a 3000 	ldrb.w	r3, [sl]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	f000 80a1 	beq.w	8009126 <_svfiprintf_r+0x1c6>
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8008fea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fee:	f10a 0a01 	add.w	sl, sl, #1
 8008ff2:	9304      	str	r3, [sp, #16]
 8008ff4:	9307      	str	r3, [sp, #28]
 8008ff6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ffa:	931a      	str	r3, [sp, #104]	; 0x68
 8008ffc:	4654      	mov	r4, sl
 8008ffe:	2205      	movs	r2, #5
 8009000:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009004:	4850      	ldr	r0, [pc, #320]	; (8009148 <_svfiprintf_r+0x1e8>)
 8009006:	f7f7 f8eb 	bl	80001e0 <memchr>
 800900a:	9a04      	ldr	r2, [sp, #16]
 800900c:	b9d8      	cbnz	r0, 8009046 <_svfiprintf_r+0xe6>
 800900e:	06d0      	lsls	r0, r2, #27
 8009010:	bf44      	itt	mi
 8009012:	2320      	movmi	r3, #32
 8009014:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009018:	0711      	lsls	r1, r2, #28
 800901a:	bf44      	itt	mi
 800901c:	232b      	movmi	r3, #43	; 0x2b
 800901e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009022:	f89a 3000 	ldrb.w	r3, [sl]
 8009026:	2b2a      	cmp	r3, #42	; 0x2a
 8009028:	d015      	beq.n	8009056 <_svfiprintf_r+0xf6>
 800902a:	9a07      	ldr	r2, [sp, #28]
 800902c:	4654      	mov	r4, sl
 800902e:	2000      	movs	r0, #0
 8009030:	f04f 0c0a 	mov.w	ip, #10
 8009034:	4621      	mov	r1, r4
 8009036:	f811 3b01 	ldrb.w	r3, [r1], #1
 800903a:	3b30      	subs	r3, #48	; 0x30
 800903c:	2b09      	cmp	r3, #9
 800903e:	d94d      	bls.n	80090dc <_svfiprintf_r+0x17c>
 8009040:	b1b0      	cbz	r0, 8009070 <_svfiprintf_r+0x110>
 8009042:	9207      	str	r2, [sp, #28]
 8009044:	e014      	b.n	8009070 <_svfiprintf_r+0x110>
 8009046:	eba0 0308 	sub.w	r3, r0, r8
 800904a:	fa09 f303 	lsl.w	r3, r9, r3
 800904e:	4313      	orrs	r3, r2
 8009050:	9304      	str	r3, [sp, #16]
 8009052:	46a2      	mov	sl, r4
 8009054:	e7d2      	b.n	8008ffc <_svfiprintf_r+0x9c>
 8009056:	9b03      	ldr	r3, [sp, #12]
 8009058:	1d19      	adds	r1, r3, #4
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	9103      	str	r1, [sp, #12]
 800905e:	2b00      	cmp	r3, #0
 8009060:	bfbb      	ittet	lt
 8009062:	425b      	neglt	r3, r3
 8009064:	f042 0202 	orrlt.w	r2, r2, #2
 8009068:	9307      	strge	r3, [sp, #28]
 800906a:	9307      	strlt	r3, [sp, #28]
 800906c:	bfb8      	it	lt
 800906e:	9204      	strlt	r2, [sp, #16]
 8009070:	7823      	ldrb	r3, [r4, #0]
 8009072:	2b2e      	cmp	r3, #46	; 0x2e
 8009074:	d10c      	bne.n	8009090 <_svfiprintf_r+0x130>
 8009076:	7863      	ldrb	r3, [r4, #1]
 8009078:	2b2a      	cmp	r3, #42	; 0x2a
 800907a:	d134      	bne.n	80090e6 <_svfiprintf_r+0x186>
 800907c:	9b03      	ldr	r3, [sp, #12]
 800907e:	1d1a      	adds	r2, r3, #4
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	9203      	str	r2, [sp, #12]
 8009084:	2b00      	cmp	r3, #0
 8009086:	bfb8      	it	lt
 8009088:	f04f 33ff 	movlt.w	r3, #4294967295
 800908c:	3402      	adds	r4, #2
 800908e:	9305      	str	r3, [sp, #20]
 8009090:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009158 <_svfiprintf_r+0x1f8>
 8009094:	7821      	ldrb	r1, [r4, #0]
 8009096:	2203      	movs	r2, #3
 8009098:	4650      	mov	r0, sl
 800909a:	f7f7 f8a1 	bl	80001e0 <memchr>
 800909e:	b138      	cbz	r0, 80090b0 <_svfiprintf_r+0x150>
 80090a0:	9b04      	ldr	r3, [sp, #16]
 80090a2:	eba0 000a 	sub.w	r0, r0, sl
 80090a6:	2240      	movs	r2, #64	; 0x40
 80090a8:	4082      	lsls	r2, r0
 80090aa:	4313      	orrs	r3, r2
 80090ac:	3401      	adds	r4, #1
 80090ae:	9304      	str	r3, [sp, #16]
 80090b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090b4:	4825      	ldr	r0, [pc, #148]	; (800914c <_svfiprintf_r+0x1ec>)
 80090b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090ba:	2206      	movs	r2, #6
 80090bc:	f7f7 f890 	bl	80001e0 <memchr>
 80090c0:	2800      	cmp	r0, #0
 80090c2:	d038      	beq.n	8009136 <_svfiprintf_r+0x1d6>
 80090c4:	4b22      	ldr	r3, [pc, #136]	; (8009150 <_svfiprintf_r+0x1f0>)
 80090c6:	bb1b      	cbnz	r3, 8009110 <_svfiprintf_r+0x1b0>
 80090c8:	9b03      	ldr	r3, [sp, #12]
 80090ca:	3307      	adds	r3, #7
 80090cc:	f023 0307 	bic.w	r3, r3, #7
 80090d0:	3308      	adds	r3, #8
 80090d2:	9303      	str	r3, [sp, #12]
 80090d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090d6:	4433      	add	r3, r6
 80090d8:	9309      	str	r3, [sp, #36]	; 0x24
 80090da:	e768      	b.n	8008fae <_svfiprintf_r+0x4e>
 80090dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80090e0:	460c      	mov	r4, r1
 80090e2:	2001      	movs	r0, #1
 80090e4:	e7a6      	b.n	8009034 <_svfiprintf_r+0xd4>
 80090e6:	2300      	movs	r3, #0
 80090e8:	3401      	adds	r4, #1
 80090ea:	9305      	str	r3, [sp, #20]
 80090ec:	4619      	mov	r1, r3
 80090ee:	f04f 0c0a 	mov.w	ip, #10
 80090f2:	4620      	mov	r0, r4
 80090f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090f8:	3a30      	subs	r2, #48	; 0x30
 80090fa:	2a09      	cmp	r2, #9
 80090fc:	d903      	bls.n	8009106 <_svfiprintf_r+0x1a6>
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d0c6      	beq.n	8009090 <_svfiprintf_r+0x130>
 8009102:	9105      	str	r1, [sp, #20]
 8009104:	e7c4      	b.n	8009090 <_svfiprintf_r+0x130>
 8009106:	fb0c 2101 	mla	r1, ip, r1, r2
 800910a:	4604      	mov	r4, r0
 800910c:	2301      	movs	r3, #1
 800910e:	e7f0      	b.n	80090f2 <_svfiprintf_r+0x192>
 8009110:	ab03      	add	r3, sp, #12
 8009112:	9300      	str	r3, [sp, #0]
 8009114:	462a      	mov	r2, r5
 8009116:	4b0f      	ldr	r3, [pc, #60]	; (8009154 <_svfiprintf_r+0x1f4>)
 8009118:	a904      	add	r1, sp, #16
 800911a:	4638      	mov	r0, r7
 800911c:	f7fd fe64 	bl	8006de8 <_printf_float>
 8009120:	1c42      	adds	r2, r0, #1
 8009122:	4606      	mov	r6, r0
 8009124:	d1d6      	bne.n	80090d4 <_svfiprintf_r+0x174>
 8009126:	89ab      	ldrh	r3, [r5, #12]
 8009128:	065b      	lsls	r3, r3, #25
 800912a:	f53f af2d 	bmi.w	8008f88 <_svfiprintf_r+0x28>
 800912e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009130:	b01d      	add	sp, #116	; 0x74
 8009132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009136:	ab03      	add	r3, sp, #12
 8009138:	9300      	str	r3, [sp, #0]
 800913a:	462a      	mov	r2, r5
 800913c:	4b05      	ldr	r3, [pc, #20]	; (8009154 <_svfiprintf_r+0x1f4>)
 800913e:	a904      	add	r1, sp, #16
 8009140:	4638      	mov	r0, r7
 8009142:	f7fe f8f5 	bl	8007330 <_printf_i>
 8009146:	e7eb      	b.n	8009120 <_svfiprintf_r+0x1c0>
 8009148:	08009c3c 	.word	0x08009c3c
 800914c:	08009c46 	.word	0x08009c46
 8009150:	08006de9 	.word	0x08006de9
 8009154:	08008ead 	.word	0x08008ead
 8009158:	08009c42 	.word	0x08009c42

0800915c <__sflush_r>:
 800915c:	898a      	ldrh	r2, [r1, #12]
 800915e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009162:	4605      	mov	r5, r0
 8009164:	0710      	lsls	r0, r2, #28
 8009166:	460c      	mov	r4, r1
 8009168:	d458      	bmi.n	800921c <__sflush_r+0xc0>
 800916a:	684b      	ldr	r3, [r1, #4]
 800916c:	2b00      	cmp	r3, #0
 800916e:	dc05      	bgt.n	800917c <__sflush_r+0x20>
 8009170:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009172:	2b00      	cmp	r3, #0
 8009174:	dc02      	bgt.n	800917c <__sflush_r+0x20>
 8009176:	2000      	movs	r0, #0
 8009178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800917c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800917e:	2e00      	cmp	r6, #0
 8009180:	d0f9      	beq.n	8009176 <__sflush_r+0x1a>
 8009182:	2300      	movs	r3, #0
 8009184:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009188:	682f      	ldr	r7, [r5, #0]
 800918a:	6a21      	ldr	r1, [r4, #32]
 800918c:	602b      	str	r3, [r5, #0]
 800918e:	d032      	beq.n	80091f6 <__sflush_r+0x9a>
 8009190:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009192:	89a3      	ldrh	r3, [r4, #12]
 8009194:	075a      	lsls	r2, r3, #29
 8009196:	d505      	bpl.n	80091a4 <__sflush_r+0x48>
 8009198:	6863      	ldr	r3, [r4, #4]
 800919a:	1ac0      	subs	r0, r0, r3
 800919c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800919e:	b10b      	cbz	r3, 80091a4 <__sflush_r+0x48>
 80091a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80091a2:	1ac0      	subs	r0, r0, r3
 80091a4:	2300      	movs	r3, #0
 80091a6:	4602      	mov	r2, r0
 80091a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091aa:	6a21      	ldr	r1, [r4, #32]
 80091ac:	4628      	mov	r0, r5
 80091ae:	47b0      	blx	r6
 80091b0:	1c43      	adds	r3, r0, #1
 80091b2:	89a3      	ldrh	r3, [r4, #12]
 80091b4:	d106      	bne.n	80091c4 <__sflush_r+0x68>
 80091b6:	6829      	ldr	r1, [r5, #0]
 80091b8:	291d      	cmp	r1, #29
 80091ba:	d82b      	bhi.n	8009214 <__sflush_r+0xb8>
 80091bc:	4a29      	ldr	r2, [pc, #164]	; (8009264 <__sflush_r+0x108>)
 80091be:	410a      	asrs	r2, r1
 80091c0:	07d6      	lsls	r6, r2, #31
 80091c2:	d427      	bmi.n	8009214 <__sflush_r+0xb8>
 80091c4:	2200      	movs	r2, #0
 80091c6:	6062      	str	r2, [r4, #4]
 80091c8:	04d9      	lsls	r1, r3, #19
 80091ca:	6922      	ldr	r2, [r4, #16]
 80091cc:	6022      	str	r2, [r4, #0]
 80091ce:	d504      	bpl.n	80091da <__sflush_r+0x7e>
 80091d0:	1c42      	adds	r2, r0, #1
 80091d2:	d101      	bne.n	80091d8 <__sflush_r+0x7c>
 80091d4:	682b      	ldr	r3, [r5, #0]
 80091d6:	b903      	cbnz	r3, 80091da <__sflush_r+0x7e>
 80091d8:	6560      	str	r0, [r4, #84]	; 0x54
 80091da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091dc:	602f      	str	r7, [r5, #0]
 80091de:	2900      	cmp	r1, #0
 80091e0:	d0c9      	beq.n	8009176 <__sflush_r+0x1a>
 80091e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091e6:	4299      	cmp	r1, r3
 80091e8:	d002      	beq.n	80091f0 <__sflush_r+0x94>
 80091ea:	4628      	mov	r0, r5
 80091ec:	f7ff f9e2 	bl	80085b4 <_free_r>
 80091f0:	2000      	movs	r0, #0
 80091f2:	6360      	str	r0, [r4, #52]	; 0x34
 80091f4:	e7c0      	b.n	8009178 <__sflush_r+0x1c>
 80091f6:	2301      	movs	r3, #1
 80091f8:	4628      	mov	r0, r5
 80091fa:	47b0      	blx	r6
 80091fc:	1c41      	adds	r1, r0, #1
 80091fe:	d1c8      	bne.n	8009192 <__sflush_r+0x36>
 8009200:	682b      	ldr	r3, [r5, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d0c5      	beq.n	8009192 <__sflush_r+0x36>
 8009206:	2b1d      	cmp	r3, #29
 8009208:	d001      	beq.n	800920e <__sflush_r+0xb2>
 800920a:	2b16      	cmp	r3, #22
 800920c:	d101      	bne.n	8009212 <__sflush_r+0xb6>
 800920e:	602f      	str	r7, [r5, #0]
 8009210:	e7b1      	b.n	8009176 <__sflush_r+0x1a>
 8009212:	89a3      	ldrh	r3, [r4, #12]
 8009214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009218:	81a3      	strh	r3, [r4, #12]
 800921a:	e7ad      	b.n	8009178 <__sflush_r+0x1c>
 800921c:	690f      	ldr	r7, [r1, #16]
 800921e:	2f00      	cmp	r7, #0
 8009220:	d0a9      	beq.n	8009176 <__sflush_r+0x1a>
 8009222:	0793      	lsls	r3, r2, #30
 8009224:	680e      	ldr	r6, [r1, #0]
 8009226:	bf08      	it	eq
 8009228:	694b      	ldreq	r3, [r1, #20]
 800922a:	600f      	str	r7, [r1, #0]
 800922c:	bf18      	it	ne
 800922e:	2300      	movne	r3, #0
 8009230:	eba6 0807 	sub.w	r8, r6, r7
 8009234:	608b      	str	r3, [r1, #8]
 8009236:	f1b8 0f00 	cmp.w	r8, #0
 800923a:	dd9c      	ble.n	8009176 <__sflush_r+0x1a>
 800923c:	6a21      	ldr	r1, [r4, #32]
 800923e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009240:	4643      	mov	r3, r8
 8009242:	463a      	mov	r2, r7
 8009244:	4628      	mov	r0, r5
 8009246:	47b0      	blx	r6
 8009248:	2800      	cmp	r0, #0
 800924a:	dc06      	bgt.n	800925a <__sflush_r+0xfe>
 800924c:	89a3      	ldrh	r3, [r4, #12]
 800924e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009252:	81a3      	strh	r3, [r4, #12]
 8009254:	f04f 30ff 	mov.w	r0, #4294967295
 8009258:	e78e      	b.n	8009178 <__sflush_r+0x1c>
 800925a:	4407      	add	r7, r0
 800925c:	eba8 0800 	sub.w	r8, r8, r0
 8009260:	e7e9      	b.n	8009236 <__sflush_r+0xda>
 8009262:	bf00      	nop
 8009264:	dfbffffe 	.word	0xdfbffffe

08009268 <_fflush_r>:
 8009268:	b538      	push	{r3, r4, r5, lr}
 800926a:	690b      	ldr	r3, [r1, #16]
 800926c:	4605      	mov	r5, r0
 800926e:	460c      	mov	r4, r1
 8009270:	b913      	cbnz	r3, 8009278 <_fflush_r+0x10>
 8009272:	2500      	movs	r5, #0
 8009274:	4628      	mov	r0, r5
 8009276:	bd38      	pop	{r3, r4, r5, pc}
 8009278:	b118      	cbz	r0, 8009282 <_fflush_r+0x1a>
 800927a:	6a03      	ldr	r3, [r0, #32]
 800927c:	b90b      	cbnz	r3, 8009282 <_fflush_r+0x1a>
 800927e:	f7fe fa05 	bl	800768c <__sinit>
 8009282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d0f3      	beq.n	8009272 <_fflush_r+0xa>
 800928a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800928c:	07d0      	lsls	r0, r2, #31
 800928e:	d404      	bmi.n	800929a <_fflush_r+0x32>
 8009290:	0599      	lsls	r1, r3, #22
 8009292:	d402      	bmi.n	800929a <_fflush_r+0x32>
 8009294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009296:	f7fe fb10 	bl	80078ba <__retarget_lock_acquire_recursive>
 800929a:	4628      	mov	r0, r5
 800929c:	4621      	mov	r1, r4
 800929e:	f7ff ff5d 	bl	800915c <__sflush_r>
 80092a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80092a4:	07da      	lsls	r2, r3, #31
 80092a6:	4605      	mov	r5, r0
 80092a8:	d4e4      	bmi.n	8009274 <_fflush_r+0xc>
 80092aa:	89a3      	ldrh	r3, [r4, #12]
 80092ac:	059b      	lsls	r3, r3, #22
 80092ae:	d4e1      	bmi.n	8009274 <_fflush_r+0xc>
 80092b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092b2:	f7fe fb03 	bl	80078bc <__retarget_lock_release_recursive>
 80092b6:	e7dd      	b.n	8009274 <_fflush_r+0xc>

080092b8 <memmove>:
 80092b8:	4288      	cmp	r0, r1
 80092ba:	b510      	push	{r4, lr}
 80092bc:	eb01 0402 	add.w	r4, r1, r2
 80092c0:	d902      	bls.n	80092c8 <memmove+0x10>
 80092c2:	4284      	cmp	r4, r0
 80092c4:	4623      	mov	r3, r4
 80092c6:	d807      	bhi.n	80092d8 <memmove+0x20>
 80092c8:	1e43      	subs	r3, r0, #1
 80092ca:	42a1      	cmp	r1, r4
 80092cc:	d008      	beq.n	80092e0 <memmove+0x28>
 80092ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80092d6:	e7f8      	b.n	80092ca <memmove+0x12>
 80092d8:	4402      	add	r2, r0
 80092da:	4601      	mov	r1, r0
 80092dc:	428a      	cmp	r2, r1
 80092de:	d100      	bne.n	80092e2 <memmove+0x2a>
 80092e0:	bd10      	pop	{r4, pc}
 80092e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80092ea:	e7f7      	b.n	80092dc <memmove+0x24>

080092ec <_sbrk_r>:
 80092ec:	b538      	push	{r3, r4, r5, lr}
 80092ee:	4d06      	ldr	r5, [pc, #24]	; (8009308 <_sbrk_r+0x1c>)
 80092f0:	2300      	movs	r3, #0
 80092f2:	4604      	mov	r4, r0
 80092f4:	4608      	mov	r0, r1
 80092f6:	602b      	str	r3, [r5, #0]
 80092f8:	f7f9 fb32 	bl	8002960 <_sbrk>
 80092fc:	1c43      	adds	r3, r0, #1
 80092fe:	d102      	bne.n	8009306 <_sbrk_r+0x1a>
 8009300:	682b      	ldr	r3, [r5, #0]
 8009302:	b103      	cbz	r3, 8009306 <_sbrk_r+0x1a>
 8009304:	6023      	str	r3, [r4, #0]
 8009306:	bd38      	pop	{r3, r4, r5, pc}
 8009308:	200005fc 	.word	0x200005fc

0800930c <memcpy>:
 800930c:	440a      	add	r2, r1
 800930e:	4291      	cmp	r1, r2
 8009310:	f100 33ff 	add.w	r3, r0, #4294967295
 8009314:	d100      	bne.n	8009318 <memcpy+0xc>
 8009316:	4770      	bx	lr
 8009318:	b510      	push	{r4, lr}
 800931a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800931e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009322:	4291      	cmp	r1, r2
 8009324:	d1f9      	bne.n	800931a <memcpy+0xe>
 8009326:	bd10      	pop	{r4, pc}

08009328 <__assert_func>:
 8009328:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800932a:	4614      	mov	r4, r2
 800932c:	461a      	mov	r2, r3
 800932e:	4b09      	ldr	r3, [pc, #36]	; (8009354 <__assert_func+0x2c>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4605      	mov	r5, r0
 8009334:	68d8      	ldr	r0, [r3, #12]
 8009336:	b14c      	cbz	r4, 800934c <__assert_func+0x24>
 8009338:	4b07      	ldr	r3, [pc, #28]	; (8009358 <__assert_func+0x30>)
 800933a:	9100      	str	r1, [sp, #0]
 800933c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009340:	4906      	ldr	r1, [pc, #24]	; (800935c <__assert_func+0x34>)
 8009342:	462b      	mov	r3, r5
 8009344:	f000 f872 	bl	800942c <fiprintf>
 8009348:	f000 f882 	bl	8009450 <abort>
 800934c:	4b04      	ldr	r3, [pc, #16]	; (8009360 <__assert_func+0x38>)
 800934e:	461c      	mov	r4, r3
 8009350:	e7f3      	b.n	800933a <__assert_func+0x12>
 8009352:	bf00      	nop
 8009354:	20000068 	.word	0x20000068
 8009358:	08009c57 	.word	0x08009c57
 800935c:	08009c64 	.word	0x08009c64
 8009360:	08009c92 	.word	0x08009c92

08009364 <_calloc_r>:
 8009364:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009366:	fba1 2402 	umull	r2, r4, r1, r2
 800936a:	b94c      	cbnz	r4, 8009380 <_calloc_r+0x1c>
 800936c:	4611      	mov	r1, r2
 800936e:	9201      	str	r2, [sp, #4]
 8009370:	f7ff f994 	bl	800869c <_malloc_r>
 8009374:	9a01      	ldr	r2, [sp, #4]
 8009376:	4605      	mov	r5, r0
 8009378:	b930      	cbnz	r0, 8009388 <_calloc_r+0x24>
 800937a:	4628      	mov	r0, r5
 800937c:	b003      	add	sp, #12
 800937e:	bd30      	pop	{r4, r5, pc}
 8009380:	220c      	movs	r2, #12
 8009382:	6002      	str	r2, [r0, #0]
 8009384:	2500      	movs	r5, #0
 8009386:	e7f8      	b.n	800937a <_calloc_r+0x16>
 8009388:	4621      	mov	r1, r4
 800938a:	f7fe fa18 	bl	80077be <memset>
 800938e:	e7f4      	b.n	800937a <_calloc_r+0x16>

08009390 <__ascii_mbtowc>:
 8009390:	b082      	sub	sp, #8
 8009392:	b901      	cbnz	r1, 8009396 <__ascii_mbtowc+0x6>
 8009394:	a901      	add	r1, sp, #4
 8009396:	b142      	cbz	r2, 80093aa <__ascii_mbtowc+0x1a>
 8009398:	b14b      	cbz	r3, 80093ae <__ascii_mbtowc+0x1e>
 800939a:	7813      	ldrb	r3, [r2, #0]
 800939c:	600b      	str	r3, [r1, #0]
 800939e:	7812      	ldrb	r2, [r2, #0]
 80093a0:	1e10      	subs	r0, r2, #0
 80093a2:	bf18      	it	ne
 80093a4:	2001      	movne	r0, #1
 80093a6:	b002      	add	sp, #8
 80093a8:	4770      	bx	lr
 80093aa:	4610      	mov	r0, r2
 80093ac:	e7fb      	b.n	80093a6 <__ascii_mbtowc+0x16>
 80093ae:	f06f 0001 	mvn.w	r0, #1
 80093b2:	e7f8      	b.n	80093a6 <__ascii_mbtowc+0x16>

080093b4 <_realloc_r>:
 80093b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093b8:	4680      	mov	r8, r0
 80093ba:	4614      	mov	r4, r2
 80093bc:	460e      	mov	r6, r1
 80093be:	b921      	cbnz	r1, 80093ca <_realloc_r+0x16>
 80093c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093c4:	4611      	mov	r1, r2
 80093c6:	f7ff b969 	b.w	800869c <_malloc_r>
 80093ca:	b92a      	cbnz	r2, 80093d8 <_realloc_r+0x24>
 80093cc:	f7ff f8f2 	bl	80085b4 <_free_r>
 80093d0:	4625      	mov	r5, r4
 80093d2:	4628      	mov	r0, r5
 80093d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093d8:	f000 f841 	bl	800945e <_malloc_usable_size_r>
 80093dc:	4284      	cmp	r4, r0
 80093de:	4607      	mov	r7, r0
 80093e0:	d802      	bhi.n	80093e8 <_realloc_r+0x34>
 80093e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80093e6:	d812      	bhi.n	800940e <_realloc_r+0x5a>
 80093e8:	4621      	mov	r1, r4
 80093ea:	4640      	mov	r0, r8
 80093ec:	f7ff f956 	bl	800869c <_malloc_r>
 80093f0:	4605      	mov	r5, r0
 80093f2:	2800      	cmp	r0, #0
 80093f4:	d0ed      	beq.n	80093d2 <_realloc_r+0x1e>
 80093f6:	42bc      	cmp	r4, r7
 80093f8:	4622      	mov	r2, r4
 80093fa:	4631      	mov	r1, r6
 80093fc:	bf28      	it	cs
 80093fe:	463a      	movcs	r2, r7
 8009400:	f7ff ff84 	bl	800930c <memcpy>
 8009404:	4631      	mov	r1, r6
 8009406:	4640      	mov	r0, r8
 8009408:	f7ff f8d4 	bl	80085b4 <_free_r>
 800940c:	e7e1      	b.n	80093d2 <_realloc_r+0x1e>
 800940e:	4635      	mov	r5, r6
 8009410:	e7df      	b.n	80093d2 <_realloc_r+0x1e>

08009412 <__ascii_wctomb>:
 8009412:	b149      	cbz	r1, 8009428 <__ascii_wctomb+0x16>
 8009414:	2aff      	cmp	r2, #255	; 0xff
 8009416:	bf85      	ittet	hi
 8009418:	238a      	movhi	r3, #138	; 0x8a
 800941a:	6003      	strhi	r3, [r0, #0]
 800941c:	700a      	strbls	r2, [r1, #0]
 800941e:	f04f 30ff 	movhi.w	r0, #4294967295
 8009422:	bf98      	it	ls
 8009424:	2001      	movls	r0, #1
 8009426:	4770      	bx	lr
 8009428:	4608      	mov	r0, r1
 800942a:	4770      	bx	lr

0800942c <fiprintf>:
 800942c:	b40e      	push	{r1, r2, r3}
 800942e:	b503      	push	{r0, r1, lr}
 8009430:	4601      	mov	r1, r0
 8009432:	ab03      	add	r3, sp, #12
 8009434:	4805      	ldr	r0, [pc, #20]	; (800944c <fiprintf+0x20>)
 8009436:	f853 2b04 	ldr.w	r2, [r3], #4
 800943a:	6800      	ldr	r0, [r0, #0]
 800943c:	9301      	str	r3, [sp, #4]
 800943e:	f000 f83f 	bl	80094c0 <_vfiprintf_r>
 8009442:	b002      	add	sp, #8
 8009444:	f85d eb04 	ldr.w	lr, [sp], #4
 8009448:	b003      	add	sp, #12
 800944a:	4770      	bx	lr
 800944c:	20000068 	.word	0x20000068

08009450 <abort>:
 8009450:	b508      	push	{r3, lr}
 8009452:	2006      	movs	r0, #6
 8009454:	f000 fa0c 	bl	8009870 <raise>
 8009458:	2001      	movs	r0, #1
 800945a:	f7f9 fa09 	bl	8002870 <_exit>

0800945e <_malloc_usable_size_r>:
 800945e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009462:	1f18      	subs	r0, r3, #4
 8009464:	2b00      	cmp	r3, #0
 8009466:	bfbc      	itt	lt
 8009468:	580b      	ldrlt	r3, [r1, r0]
 800946a:	18c0      	addlt	r0, r0, r3
 800946c:	4770      	bx	lr

0800946e <__sfputc_r>:
 800946e:	6893      	ldr	r3, [r2, #8]
 8009470:	3b01      	subs	r3, #1
 8009472:	2b00      	cmp	r3, #0
 8009474:	b410      	push	{r4}
 8009476:	6093      	str	r3, [r2, #8]
 8009478:	da08      	bge.n	800948c <__sfputc_r+0x1e>
 800947a:	6994      	ldr	r4, [r2, #24]
 800947c:	42a3      	cmp	r3, r4
 800947e:	db01      	blt.n	8009484 <__sfputc_r+0x16>
 8009480:	290a      	cmp	r1, #10
 8009482:	d103      	bne.n	800948c <__sfputc_r+0x1e>
 8009484:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009488:	f000 b934 	b.w	80096f4 <__swbuf_r>
 800948c:	6813      	ldr	r3, [r2, #0]
 800948e:	1c58      	adds	r0, r3, #1
 8009490:	6010      	str	r0, [r2, #0]
 8009492:	7019      	strb	r1, [r3, #0]
 8009494:	4608      	mov	r0, r1
 8009496:	f85d 4b04 	ldr.w	r4, [sp], #4
 800949a:	4770      	bx	lr

0800949c <__sfputs_r>:
 800949c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800949e:	4606      	mov	r6, r0
 80094a0:	460f      	mov	r7, r1
 80094a2:	4614      	mov	r4, r2
 80094a4:	18d5      	adds	r5, r2, r3
 80094a6:	42ac      	cmp	r4, r5
 80094a8:	d101      	bne.n	80094ae <__sfputs_r+0x12>
 80094aa:	2000      	movs	r0, #0
 80094ac:	e007      	b.n	80094be <__sfputs_r+0x22>
 80094ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094b2:	463a      	mov	r2, r7
 80094b4:	4630      	mov	r0, r6
 80094b6:	f7ff ffda 	bl	800946e <__sfputc_r>
 80094ba:	1c43      	adds	r3, r0, #1
 80094bc:	d1f3      	bne.n	80094a6 <__sfputs_r+0xa>
 80094be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080094c0 <_vfiprintf_r>:
 80094c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094c4:	460d      	mov	r5, r1
 80094c6:	b09d      	sub	sp, #116	; 0x74
 80094c8:	4614      	mov	r4, r2
 80094ca:	4698      	mov	r8, r3
 80094cc:	4606      	mov	r6, r0
 80094ce:	b118      	cbz	r0, 80094d8 <_vfiprintf_r+0x18>
 80094d0:	6a03      	ldr	r3, [r0, #32]
 80094d2:	b90b      	cbnz	r3, 80094d8 <_vfiprintf_r+0x18>
 80094d4:	f7fe f8da 	bl	800768c <__sinit>
 80094d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094da:	07d9      	lsls	r1, r3, #31
 80094dc:	d405      	bmi.n	80094ea <_vfiprintf_r+0x2a>
 80094de:	89ab      	ldrh	r3, [r5, #12]
 80094e0:	059a      	lsls	r2, r3, #22
 80094e2:	d402      	bmi.n	80094ea <_vfiprintf_r+0x2a>
 80094e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094e6:	f7fe f9e8 	bl	80078ba <__retarget_lock_acquire_recursive>
 80094ea:	89ab      	ldrh	r3, [r5, #12]
 80094ec:	071b      	lsls	r3, r3, #28
 80094ee:	d501      	bpl.n	80094f4 <_vfiprintf_r+0x34>
 80094f0:	692b      	ldr	r3, [r5, #16]
 80094f2:	b99b      	cbnz	r3, 800951c <_vfiprintf_r+0x5c>
 80094f4:	4629      	mov	r1, r5
 80094f6:	4630      	mov	r0, r6
 80094f8:	f000 f93a 	bl	8009770 <__swsetup_r>
 80094fc:	b170      	cbz	r0, 800951c <_vfiprintf_r+0x5c>
 80094fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009500:	07dc      	lsls	r4, r3, #31
 8009502:	d504      	bpl.n	800950e <_vfiprintf_r+0x4e>
 8009504:	f04f 30ff 	mov.w	r0, #4294967295
 8009508:	b01d      	add	sp, #116	; 0x74
 800950a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800950e:	89ab      	ldrh	r3, [r5, #12]
 8009510:	0598      	lsls	r0, r3, #22
 8009512:	d4f7      	bmi.n	8009504 <_vfiprintf_r+0x44>
 8009514:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009516:	f7fe f9d1 	bl	80078bc <__retarget_lock_release_recursive>
 800951a:	e7f3      	b.n	8009504 <_vfiprintf_r+0x44>
 800951c:	2300      	movs	r3, #0
 800951e:	9309      	str	r3, [sp, #36]	; 0x24
 8009520:	2320      	movs	r3, #32
 8009522:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009526:	f8cd 800c 	str.w	r8, [sp, #12]
 800952a:	2330      	movs	r3, #48	; 0x30
 800952c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80096e0 <_vfiprintf_r+0x220>
 8009530:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009534:	f04f 0901 	mov.w	r9, #1
 8009538:	4623      	mov	r3, r4
 800953a:	469a      	mov	sl, r3
 800953c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009540:	b10a      	cbz	r2, 8009546 <_vfiprintf_r+0x86>
 8009542:	2a25      	cmp	r2, #37	; 0x25
 8009544:	d1f9      	bne.n	800953a <_vfiprintf_r+0x7a>
 8009546:	ebba 0b04 	subs.w	fp, sl, r4
 800954a:	d00b      	beq.n	8009564 <_vfiprintf_r+0xa4>
 800954c:	465b      	mov	r3, fp
 800954e:	4622      	mov	r2, r4
 8009550:	4629      	mov	r1, r5
 8009552:	4630      	mov	r0, r6
 8009554:	f7ff ffa2 	bl	800949c <__sfputs_r>
 8009558:	3001      	adds	r0, #1
 800955a:	f000 80a9 	beq.w	80096b0 <_vfiprintf_r+0x1f0>
 800955e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009560:	445a      	add	r2, fp
 8009562:	9209      	str	r2, [sp, #36]	; 0x24
 8009564:	f89a 3000 	ldrb.w	r3, [sl]
 8009568:	2b00      	cmp	r3, #0
 800956a:	f000 80a1 	beq.w	80096b0 <_vfiprintf_r+0x1f0>
 800956e:	2300      	movs	r3, #0
 8009570:	f04f 32ff 	mov.w	r2, #4294967295
 8009574:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009578:	f10a 0a01 	add.w	sl, sl, #1
 800957c:	9304      	str	r3, [sp, #16]
 800957e:	9307      	str	r3, [sp, #28]
 8009580:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009584:	931a      	str	r3, [sp, #104]	; 0x68
 8009586:	4654      	mov	r4, sl
 8009588:	2205      	movs	r2, #5
 800958a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800958e:	4854      	ldr	r0, [pc, #336]	; (80096e0 <_vfiprintf_r+0x220>)
 8009590:	f7f6 fe26 	bl	80001e0 <memchr>
 8009594:	9a04      	ldr	r2, [sp, #16]
 8009596:	b9d8      	cbnz	r0, 80095d0 <_vfiprintf_r+0x110>
 8009598:	06d1      	lsls	r1, r2, #27
 800959a:	bf44      	itt	mi
 800959c:	2320      	movmi	r3, #32
 800959e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095a2:	0713      	lsls	r3, r2, #28
 80095a4:	bf44      	itt	mi
 80095a6:	232b      	movmi	r3, #43	; 0x2b
 80095a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095ac:	f89a 3000 	ldrb.w	r3, [sl]
 80095b0:	2b2a      	cmp	r3, #42	; 0x2a
 80095b2:	d015      	beq.n	80095e0 <_vfiprintf_r+0x120>
 80095b4:	9a07      	ldr	r2, [sp, #28]
 80095b6:	4654      	mov	r4, sl
 80095b8:	2000      	movs	r0, #0
 80095ba:	f04f 0c0a 	mov.w	ip, #10
 80095be:	4621      	mov	r1, r4
 80095c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095c4:	3b30      	subs	r3, #48	; 0x30
 80095c6:	2b09      	cmp	r3, #9
 80095c8:	d94d      	bls.n	8009666 <_vfiprintf_r+0x1a6>
 80095ca:	b1b0      	cbz	r0, 80095fa <_vfiprintf_r+0x13a>
 80095cc:	9207      	str	r2, [sp, #28]
 80095ce:	e014      	b.n	80095fa <_vfiprintf_r+0x13a>
 80095d0:	eba0 0308 	sub.w	r3, r0, r8
 80095d4:	fa09 f303 	lsl.w	r3, r9, r3
 80095d8:	4313      	orrs	r3, r2
 80095da:	9304      	str	r3, [sp, #16]
 80095dc:	46a2      	mov	sl, r4
 80095de:	e7d2      	b.n	8009586 <_vfiprintf_r+0xc6>
 80095e0:	9b03      	ldr	r3, [sp, #12]
 80095e2:	1d19      	adds	r1, r3, #4
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	9103      	str	r1, [sp, #12]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	bfbb      	ittet	lt
 80095ec:	425b      	neglt	r3, r3
 80095ee:	f042 0202 	orrlt.w	r2, r2, #2
 80095f2:	9307      	strge	r3, [sp, #28]
 80095f4:	9307      	strlt	r3, [sp, #28]
 80095f6:	bfb8      	it	lt
 80095f8:	9204      	strlt	r2, [sp, #16]
 80095fa:	7823      	ldrb	r3, [r4, #0]
 80095fc:	2b2e      	cmp	r3, #46	; 0x2e
 80095fe:	d10c      	bne.n	800961a <_vfiprintf_r+0x15a>
 8009600:	7863      	ldrb	r3, [r4, #1]
 8009602:	2b2a      	cmp	r3, #42	; 0x2a
 8009604:	d134      	bne.n	8009670 <_vfiprintf_r+0x1b0>
 8009606:	9b03      	ldr	r3, [sp, #12]
 8009608:	1d1a      	adds	r2, r3, #4
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	9203      	str	r2, [sp, #12]
 800960e:	2b00      	cmp	r3, #0
 8009610:	bfb8      	it	lt
 8009612:	f04f 33ff 	movlt.w	r3, #4294967295
 8009616:	3402      	adds	r4, #2
 8009618:	9305      	str	r3, [sp, #20]
 800961a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80096f0 <_vfiprintf_r+0x230>
 800961e:	7821      	ldrb	r1, [r4, #0]
 8009620:	2203      	movs	r2, #3
 8009622:	4650      	mov	r0, sl
 8009624:	f7f6 fddc 	bl	80001e0 <memchr>
 8009628:	b138      	cbz	r0, 800963a <_vfiprintf_r+0x17a>
 800962a:	9b04      	ldr	r3, [sp, #16]
 800962c:	eba0 000a 	sub.w	r0, r0, sl
 8009630:	2240      	movs	r2, #64	; 0x40
 8009632:	4082      	lsls	r2, r0
 8009634:	4313      	orrs	r3, r2
 8009636:	3401      	adds	r4, #1
 8009638:	9304      	str	r3, [sp, #16]
 800963a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800963e:	4829      	ldr	r0, [pc, #164]	; (80096e4 <_vfiprintf_r+0x224>)
 8009640:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009644:	2206      	movs	r2, #6
 8009646:	f7f6 fdcb 	bl	80001e0 <memchr>
 800964a:	2800      	cmp	r0, #0
 800964c:	d03f      	beq.n	80096ce <_vfiprintf_r+0x20e>
 800964e:	4b26      	ldr	r3, [pc, #152]	; (80096e8 <_vfiprintf_r+0x228>)
 8009650:	bb1b      	cbnz	r3, 800969a <_vfiprintf_r+0x1da>
 8009652:	9b03      	ldr	r3, [sp, #12]
 8009654:	3307      	adds	r3, #7
 8009656:	f023 0307 	bic.w	r3, r3, #7
 800965a:	3308      	adds	r3, #8
 800965c:	9303      	str	r3, [sp, #12]
 800965e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009660:	443b      	add	r3, r7
 8009662:	9309      	str	r3, [sp, #36]	; 0x24
 8009664:	e768      	b.n	8009538 <_vfiprintf_r+0x78>
 8009666:	fb0c 3202 	mla	r2, ip, r2, r3
 800966a:	460c      	mov	r4, r1
 800966c:	2001      	movs	r0, #1
 800966e:	e7a6      	b.n	80095be <_vfiprintf_r+0xfe>
 8009670:	2300      	movs	r3, #0
 8009672:	3401      	adds	r4, #1
 8009674:	9305      	str	r3, [sp, #20]
 8009676:	4619      	mov	r1, r3
 8009678:	f04f 0c0a 	mov.w	ip, #10
 800967c:	4620      	mov	r0, r4
 800967e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009682:	3a30      	subs	r2, #48	; 0x30
 8009684:	2a09      	cmp	r2, #9
 8009686:	d903      	bls.n	8009690 <_vfiprintf_r+0x1d0>
 8009688:	2b00      	cmp	r3, #0
 800968a:	d0c6      	beq.n	800961a <_vfiprintf_r+0x15a>
 800968c:	9105      	str	r1, [sp, #20]
 800968e:	e7c4      	b.n	800961a <_vfiprintf_r+0x15a>
 8009690:	fb0c 2101 	mla	r1, ip, r1, r2
 8009694:	4604      	mov	r4, r0
 8009696:	2301      	movs	r3, #1
 8009698:	e7f0      	b.n	800967c <_vfiprintf_r+0x1bc>
 800969a:	ab03      	add	r3, sp, #12
 800969c:	9300      	str	r3, [sp, #0]
 800969e:	462a      	mov	r2, r5
 80096a0:	4b12      	ldr	r3, [pc, #72]	; (80096ec <_vfiprintf_r+0x22c>)
 80096a2:	a904      	add	r1, sp, #16
 80096a4:	4630      	mov	r0, r6
 80096a6:	f7fd fb9f 	bl	8006de8 <_printf_float>
 80096aa:	4607      	mov	r7, r0
 80096ac:	1c78      	adds	r0, r7, #1
 80096ae:	d1d6      	bne.n	800965e <_vfiprintf_r+0x19e>
 80096b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096b2:	07d9      	lsls	r1, r3, #31
 80096b4:	d405      	bmi.n	80096c2 <_vfiprintf_r+0x202>
 80096b6:	89ab      	ldrh	r3, [r5, #12]
 80096b8:	059a      	lsls	r2, r3, #22
 80096ba:	d402      	bmi.n	80096c2 <_vfiprintf_r+0x202>
 80096bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096be:	f7fe f8fd 	bl	80078bc <__retarget_lock_release_recursive>
 80096c2:	89ab      	ldrh	r3, [r5, #12]
 80096c4:	065b      	lsls	r3, r3, #25
 80096c6:	f53f af1d 	bmi.w	8009504 <_vfiprintf_r+0x44>
 80096ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096cc:	e71c      	b.n	8009508 <_vfiprintf_r+0x48>
 80096ce:	ab03      	add	r3, sp, #12
 80096d0:	9300      	str	r3, [sp, #0]
 80096d2:	462a      	mov	r2, r5
 80096d4:	4b05      	ldr	r3, [pc, #20]	; (80096ec <_vfiprintf_r+0x22c>)
 80096d6:	a904      	add	r1, sp, #16
 80096d8:	4630      	mov	r0, r6
 80096da:	f7fd fe29 	bl	8007330 <_printf_i>
 80096de:	e7e4      	b.n	80096aa <_vfiprintf_r+0x1ea>
 80096e0:	08009c3c 	.word	0x08009c3c
 80096e4:	08009c46 	.word	0x08009c46
 80096e8:	08006de9 	.word	0x08006de9
 80096ec:	0800949d 	.word	0x0800949d
 80096f0:	08009c42 	.word	0x08009c42

080096f4 <__swbuf_r>:
 80096f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096f6:	460e      	mov	r6, r1
 80096f8:	4614      	mov	r4, r2
 80096fa:	4605      	mov	r5, r0
 80096fc:	b118      	cbz	r0, 8009706 <__swbuf_r+0x12>
 80096fe:	6a03      	ldr	r3, [r0, #32]
 8009700:	b90b      	cbnz	r3, 8009706 <__swbuf_r+0x12>
 8009702:	f7fd ffc3 	bl	800768c <__sinit>
 8009706:	69a3      	ldr	r3, [r4, #24]
 8009708:	60a3      	str	r3, [r4, #8]
 800970a:	89a3      	ldrh	r3, [r4, #12]
 800970c:	071a      	lsls	r2, r3, #28
 800970e:	d525      	bpl.n	800975c <__swbuf_r+0x68>
 8009710:	6923      	ldr	r3, [r4, #16]
 8009712:	b31b      	cbz	r3, 800975c <__swbuf_r+0x68>
 8009714:	6823      	ldr	r3, [r4, #0]
 8009716:	6922      	ldr	r2, [r4, #16]
 8009718:	1a98      	subs	r0, r3, r2
 800971a:	6963      	ldr	r3, [r4, #20]
 800971c:	b2f6      	uxtb	r6, r6
 800971e:	4283      	cmp	r3, r0
 8009720:	4637      	mov	r7, r6
 8009722:	dc04      	bgt.n	800972e <__swbuf_r+0x3a>
 8009724:	4621      	mov	r1, r4
 8009726:	4628      	mov	r0, r5
 8009728:	f7ff fd9e 	bl	8009268 <_fflush_r>
 800972c:	b9e0      	cbnz	r0, 8009768 <__swbuf_r+0x74>
 800972e:	68a3      	ldr	r3, [r4, #8]
 8009730:	3b01      	subs	r3, #1
 8009732:	60a3      	str	r3, [r4, #8]
 8009734:	6823      	ldr	r3, [r4, #0]
 8009736:	1c5a      	adds	r2, r3, #1
 8009738:	6022      	str	r2, [r4, #0]
 800973a:	701e      	strb	r6, [r3, #0]
 800973c:	6962      	ldr	r2, [r4, #20]
 800973e:	1c43      	adds	r3, r0, #1
 8009740:	429a      	cmp	r2, r3
 8009742:	d004      	beq.n	800974e <__swbuf_r+0x5a>
 8009744:	89a3      	ldrh	r3, [r4, #12]
 8009746:	07db      	lsls	r3, r3, #31
 8009748:	d506      	bpl.n	8009758 <__swbuf_r+0x64>
 800974a:	2e0a      	cmp	r6, #10
 800974c:	d104      	bne.n	8009758 <__swbuf_r+0x64>
 800974e:	4621      	mov	r1, r4
 8009750:	4628      	mov	r0, r5
 8009752:	f7ff fd89 	bl	8009268 <_fflush_r>
 8009756:	b938      	cbnz	r0, 8009768 <__swbuf_r+0x74>
 8009758:	4638      	mov	r0, r7
 800975a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800975c:	4621      	mov	r1, r4
 800975e:	4628      	mov	r0, r5
 8009760:	f000 f806 	bl	8009770 <__swsetup_r>
 8009764:	2800      	cmp	r0, #0
 8009766:	d0d5      	beq.n	8009714 <__swbuf_r+0x20>
 8009768:	f04f 37ff 	mov.w	r7, #4294967295
 800976c:	e7f4      	b.n	8009758 <__swbuf_r+0x64>
	...

08009770 <__swsetup_r>:
 8009770:	b538      	push	{r3, r4, r5, lr}
 8009772:	4b2a      	ldr	r3, [pc, #168]	; (800981c <__swsetup_r+0xac>)
 8009774:	4605      	mov	r5, r0
 8009776:	6818      	ldr	r0, [r3, #0]
 8009778:	460c      	mov	r4, r1
 800977a:	b118      	cbz	r0, 8009784 <__swsetup_r+0x14>
 800977c:	6a03      	ldr	r3, [r0, #32]
 800977e:	b90b      	cbnz	r3, 8009784 <__swsetup_r+0x14>
 8009780:	f7fd ff84 	bl	800768c <__sinit>
 8009784:	89a3      	ldrh	r3, [r4, #12]
 8009786:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800978a:	0718      	lsls	r0, r3, #28
 800978c:	d422      	bmi.n	80097d4 <__swsetup_r+0x64>
 800978e:	06d9      	lsls	r1, r3, #27
 8009790:	d407      	bmi.n	80097a2 <__swsetup_r+0x32>
 8009792:	2309      	movs	r3, #9
 8009794:	602b      	str	r3, [r5, #0]
 8009796:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800979a:	81a3      	strh	r3, [r4, #12]
 800979c:	f04f 30ff 	mov.w	r0, #4294967295
 80097a0:	e034      	b.n	800980c <__swsetup_r+0x9c>
 80097a2:	0758      	lsls	r0, r3, #29
 80097a4:	d512      	bpl.n	80097cc <__swsetup_r+0x5c>
 80097a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097a8:	b141      	cbz	r1, 80097bc <__swsetup_r+0x4c>
 80097aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097ae:	4299      	cmp	r1, r3
 80097b0:	d002      	beq.n	80097b8 <__swsetup_r+0x48>
 80097b2:	4628      	mov	r0, r5
 80097b4:	f7fe fefe 	bl	80085b4 <_free_r>
 80097b8:	2300      	movs	r3, #0
 80097ba:	6363      	str	r3, [r4, #52]	; 0x34
 80097bc:	89a3      	ldrh	r3, [r4, #12]
 80097be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80097c2:	81a3      	strh	r3, [r4, #12]
 80097c4:	2300      	movs	r3, #0
 80097c6:	6063      	str	r3, [r4, #4]
 80097c8:	6923      	ldr	r3, [r4, #16]
 80097ca:	6023      	str	r3, [r4, #0]
 80097cc:	89a3      	ldrh	r3, [r4, #12]
 80097ce:	f043 0308 	orr.w	r3, r3, #8
 80097d2:	81a3      	strh	r3, [r4, #12]
 80097d4:	6923      	ldr	r3, [r4, #16]
 80097d6:	b94b      	cbnz	r3, 80097ec <__swsetup_r+0x7c>
 80097d8:	89a3      	ldrh	r3, [r4, #12]
 80097da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80097de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097e2:	d003      	beq.n	80097ec <__swsetup_r+0x7c>
 80097e4:	4621      	mov	r1, r4
 80097e6:	4628      	mov	r0, r5
 80097e8:	f000 f884 	bl	80098f4 <__smakebuf_r>
 80097ec:	89a0      	ldrh	r0, [r4, #12]
 80097ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097f2:	f010 0301 	ands.w	r3, r0, #1
 80097f6:	d00a      	beq.n	800980e <__swsetup_r+0x9e>
 80097f8:	2300      	movs	r3, #0
 80097fa:	60a3      	str	r3, [r4, #8]
 80097fc:	6963      	ldr	r3, [r4, #20]
 80097fe:	425b      	negs	r3, r3
 8009800:	61a3      	str	r3, [r4, #24]
 8009802:	6923      	ldr	r3, [r4, #16]
 8009804:	b943      	cbnz	r3, 8009818 <__swsetup_r+0xa8>
 8009806:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800980a:	d1c4      	bne.n	8009796 <__swsetup_r+0x26>
 800980c:	bd38      	pop	{r3, r4, r5, pc}
 800980e:	0781      	lsls	r1, r0, #30
 8009810:	bf58      	it	pl
 8009812:	6963      	ldrpl	r3, [r4, #20]
 8009814:	60a3      	str	r3, [r4, #8]
 8009816:	e7f4      	b.n	8009802 <__swsetup_r+0x92>
 8009818:	2000      	movs	r0, #0
 800981a:	e7f7      	b.n	800980c <__swsetup_r+0x9c>
 800981c:	20000068 	.word	0x20000068

08009820 <_raise_r>:
 8009820:	291f      	cmp	r1, #31
 8009822:	b538      	push	{r3, r4, r5, lr}
 8009824:	4604      	mov	r4, r0
 8009826:	460d      	mov	r5, r1
 8009828:	d904      	bls.n	8009834 <_raise_r+0x14>
 800982a:	2316      	movs	r3, #22
 800982c:	6003      	str	r3, [r0, #0]
 800982e:	f04f 30ff 	mov.w	r0, #4294967295
 8009832:	bd38      	pop	{r3, r4, r5, pc}
 8009834:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009836:	b112      	cbz	r2, 800983e <_raise_r+0x1e>
 8009838:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800983c:	b94b      	cbnz	r3, 8009852 <_raise_r+0x32>
 800983e:	4620      	mov	r0, r4
 8009840:	f000 f830 	bl	80098a4 <_getpid_r>
 8009844:	462a      	mov	r2, r5
 8009846:	4601      	mov	r1, r0
 8009848:	4620      	mov	r0, r4
 800984a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800984e:	f000 b817 	b.w	8009880 <_kill_r>
 8009852:	2b01      	cmp	r3, #1
 8009854:	d00a      	beq.n	800986c <_raise_r+0x4c>
 8009856:	1c59      	adds	r1, r3, #1
 8009858:	d103      	bne.n	8009862 <_raise_r+0x42>
 800985a:	2316      	movs	r3, #22
 800985c:	6003      	str	r3, [r0, #0]
 800985e:	2001      	movs	r0, #1
 8009860:	e7e7      	b.n	8009832 <_raise_r+0x12>
 8009862:	2400      	movs	r4, #0
 8009864:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009868:	4628      	mov	r0, r5
 800986a:	4798      	blx	r3
 800986c:	2000      	movs	r0, #0
 800986e:	e7e0      	b.n	8009832 <_raise_r+0x12>

08009870 <raise>:
 8009870:	4b02      	ldr	r3, [pc, #8]	; (800987c <raise+0xc>)
 8009872:	4601      	mov	r1, r0
 8009874:	6818      	ldr	r0, [r3, #0]
 8009876:	f7ff bfd3 	b.w	8009820 <_raise_r>
 800987a:	bf00      	nop
 800987c:	20000068 	.word	0x20000068

08009880 <_kill_r>:
 8009880:	b538      	push	{r3, r4, r5, lr}
 8009882:	4d07      	ldr	r5, [pc, #28]	; (80098a0 <_kill_r+0x20>)
 8009884:	2300      	movs	r3, #0
 8009886:	4604      	mov	r4, r0
 8009888:	4608      	mov	r0, r1
 800988a:	4611      	mov	r1, r2
 800988c:	602b      	str	r3, [r5, #0]
 800988e:	f7f8 ffdf 	bl	8002850 <_kill>
 8009892:	1c43      	adds	r3, r0, #1
 8009894:	d102      	bne.n	800989c <_kill_r+0x1c>
 8009896:	682b      	ldr	r3, [r5, #0]
 8009898:	b103      	cbz	r3, 800989c <_kill_r+0x1c>
 800989a:	6023      	str	r3, [r4, #0]
 800989c:	bd38      	pop	{r3, r4, r5, pc}
 800989e:	bf00      	nop
 80098a0:	200005fc 	.word	0x200005fc

080098a4 <_getpid_r>:
 80098a4:	f7f8 bfcc 	b.w	8002840 <_getpid>

080098a8 <__swhatbuf_r>:
 80098a8:	b570      	push	{r4, r5, r6, lr}
 80098aa:	460c      	mov	r4, r1
 80098ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098b0:	2900      	cmp	r1, #0
 80098b2:	b096      	sub	sp, #88	; 0x58
 80098b4:	4615      	mov	r5, r2
 80098b6:	461e      	mov	r6, r3
 80098b8:	da0d      	bge.n	80098d6 <__swhatbuf_r+0x2e>
 80098ba:	89a3      	ldrh	r3, [r4, #12]
 80098bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80098c0:	f04f 0100 	mov.w	r1, #0
 80098c4:	bf0c      	ite	eq
 80098c6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80098ca:	2340      	movne	r3, #64	; 0x40
 80098cc:	2000      	movs	r0, #0
 80098ce:	6031      	str	r1, [r6, #0]
 80098d0:	602b      	str	r3, [r5, #0]
 80098d2:	b016      	add	sp, #88	; 0x58
 80098d4:	bd70      	pop	{r4, r5, r6, pc}
 80098d6:	466a      	mov	r2, sp
 80098d8:	f000 f848 	bl	800996c <_fstat_r>
 80098dc:	2800      	cmp	r0, #0
 80098de:	dbec      	blt.n	80098ba <__swhatbuf_r+0x12>
 80098e0:	9901      	ldr	r1, [sp, #4]
 80098e2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80098e6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80098ea:	4259      	negs	r1, r3
 80098ec:	4159      	adcs	r1, r3
 80098ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098f2:	e7eb      	b.n	80098cc <__swhatbuf_r+0x24>

080098f4 <__smakebuf_r>:
 80098f4:	898b      	ldrh	r3, [r1, #12]
 80098f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80098f8:	079d      	lsls	r5, r3, #30
 80098fa:	4606      	mov	r6, r0
 80098fc:	460c      	mov	r4, r1
 80098fe:	d507      	bpl.n	8009910 <__smakebuf_r+0x1c>
 8009900:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009904:	6023      	str	r3, [r4, #0]
 8009906:	6123      	str	r3, [r4, #16]
 8009908:	2301      	movs	r3, #1
 800990a:	6163      	str	r3, [r4, #20]
 800990c:	b002      	add	sp, #8
 800990e:	bd70      	pop	{r4, r5, r6, pc}
 8009910:	ab01      	add	r3, sp, #4
 8009912:	466a      	mov	r2, sp
 8009914:	f7ff ffc8 	bl	80098a8 <__swhatbuf_r>
 8009918:	9900      	ldr	r1, [sp, #0]
 800991a:	4605      	mov	r5, r0
 800991c:	4630      	mov	r0, r6
 800991e:	f7fe febd 	bl	800869c <_malloc_r>
 8009922:	b948      	cbnz	r0, 8009938 <__smakebuf_r+0x44>
 8009924:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009928:	059a      	lsls	r2, r3, #22
 800992a:	d4ef      	bmi.n	800990c <__smakebuf_r+0x18>
 800992c:	f023 0303 	bic.w	r3, r3, #3
 8009930:	f043 0302 	orr.w	r3, r3, #2
 8009934:	81a3      	strh	r3, [r4, #12]
 8009936:	e7e3      	b.n	8009900 <__smakebuf_r+0xc>
 8009938:	89a3      	ldrh	r3, [r4, #12]
 800993a:	6020      	str	r0, [r4, #0]
 800993c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009940:	81a3      	strh	r3, [r4, #12]
 8009942:	9b00      	ldr	r3, [sp, #0]
 8009944:	6163      	str	r3, [r4, #20]
 8009946:	9b01      	ldr	r3, [sp, #4]
 8009948:	6120      	str	r0, [r4, #16]
 800994a:	b15b      	cbz	r3, 8009964 <__smakebuf_r+0x70>
 800994c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009950:	4630      	mov	r0, r6
 8009952:	f000 f81d 	bl	8009990 <_isatty_r>
 8009956:	b128      	cbz	r0, 8009964 <__smakebuf_r+0x70>
 8009958:	89a3      	ldrh	r3, [r4, #12]
 800995a:	f023 0303 	bic.w	r3, r3, #3
 800995e:	f043 0301 	orr.w	r3, r3, #1
 8009962:	81a3      	strh	r3, [r4, #12]
 8009964:	89a3      	ldrh	r3, [r4, #12]
 8009966:	431d      	orrs	r5, r3
 8009968:	81a5      	strh	r5, [r4, #12]
 800996a:	e7cf      	b.n	800990c <__smakebuf_r+0x18>

0800996c <_fstat_r>:
 800996c:	b538      	push	{r3, r4, r5, lr}
 800996e:	4d07      	ldr	r5, [pc, #28]	; (800998c <_fstat_r+0x20>)
 8009970:	2300      	movs	r3, #0
 8009972:	4604      	mov	r4, r0
 8009974:	4608      	mov	r0, r1
 8009976:	4611      	mov	r1, r2
 8009978:	602b      	str	r3, [r5, #0]
 800997a:	f7f8 ffc8 	bl	800290e <_fstat>
 800997e:	1c43      	adds	r3, r0, #1
 8009980:	d102      	bne.n	8009988 <_fstat_r+0x1c>
 8009982:	682b      	ldr	r3, [r5, #0]
 8009984:	b103      	cbz	r3, 8009988 <_fstat_r+0x1c>
 8009986:	6023      	str	r3, [r4, #0]
 8009988:	bd38      	pop	{r3, r4, r5, pc}
 800998a:	bf00      	nop
 800998c:	200005fc 	.word	0x200005fc

08009990 <_isatty_r>:
 8009990:	b538      	push	{r3, r4, r5, lr}
 8009992:	4d06      	ldr	r5, [pc, #24]	; (80099ac <_isatty_r+0x1c>)
 8009994:	2300      	movs	r3, #0
 8009996:	4604      	mov	r4, r0
 8009998:	4608      	mov	r0, r1
 800999a:	602b      	str	r3, [r5, #0]
 800999c:	f7f8 ffc7 	bl	800292e <_isatty>
 80099a0:	1c43      	adds	r3, r0, #1
 80099a2:	d102      	bne.n	80099aa <_isatty_r+0x1a>
 80099a4:	682b      	ldr	r3, [r5, #0]
 80099a6:	b103      	cbz	r3, 80099aa <_isatty_r+0x1a>
 80099a8:	6023      	str	r3, [r4, #0]
 80099aa:	bd38      	pop	{r3, r4, r5, pc}
 80099ac:	200005fc 	.word	0x200005fc

080099b0 <_init>:
 80099b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099b2:	bf00      	nop
 80099b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099b6:	bc08      	pop	{r3}
 80099b8:	469e      	mov	lr, r3
 80099ba:	4770      	bx	lr

080099bc <_fini>:
 80099bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099be:	bf00      	nop
 80099c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099c2:	bc08      	pop	{r3}
 80099c4:	469e      	mov	lr, r3
 80099c6:	4770      	bx	lr
