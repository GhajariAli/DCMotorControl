
DCMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009808  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  080099a8  080099a8  000199a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d5c  08009d5c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08009d5c  08009d5c  00019d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d64  08009d64  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d64  08009d64  00019d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d68  08009d68  00019d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08009d6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000434  200001d8  08009f44  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000060c  08009f44  0002060c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000feeb  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002659  00000000  00000000  00030136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee8  00000000  00000000  00032790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b98  00000000  00000000  00033678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018b57  00000000  00000000  00034210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001239f  00000000  00000000  0004cd67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009bea7  00000000  00000000  0005f106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f84  00000000  00000000  000fafb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000fff34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009990 	.word	0x08009990

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08009990 	.word	0x08009990

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <updatePID>:
#include "PID.h"

void updatePID(PID_Controller* pid, double current) {
 8000ef4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ef8:	b08a      	sub	sp, #40	; 0x28
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	60f8      	str	r0, [r7, #12]
 8000efe:	ed87 0b00 	vstr	d0, [r7]
	double error=0;
 8000f02:	f04f 0200 	mov.w	r2, #0
 8000f06:	f04f 0300 	mov.w	r3, #0
 8000f0a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	switch (pid->ControlMode){
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d055      	beq.n	8000fc2 <updatePID+0xce>
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	dc54      	bgt.n	8000fc4 <updatePID+0xd0>
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d002      	beq.n	8000f24 <updatePID+0x30>
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d00c      	beq.n	8000f3c <updatePID+0x48>
 8000f22:	e04f      	b.n	8000fc4 <updatePID+0xd0>
	case Velocity:
		error = pid->target - current;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8000f2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f2e:	f7ff f9b3 	bl	8000298 <__aeabi_dsub>
 8000f32:	4602      	mov	r2, r0
 8000f34:	460b      	mov	r3, r1
 8000f36:	e9c7 2308 	strd	r2, r3, [r7, #32]
		break;
 8000f3a:	e043      	b.n	8000fc4 <updatePID+0xd0>
	case Position:
		error = pid->target - current;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8000f42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f46:	f7ff f9a7 	bl	8000298 <__aeabi_dsub>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	e9c7 2308 	strd	r2, r3, [r7, #32]
		if (error >0){
 8000f52:	f04f 0200 	mov.w	r2, #0
 8000f56:	f04f 0300 	mov.w	r3, #0
 8000f5a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000f5e:	f7ff fde3 	bl	8000b28 <__aeabi_dcmpgt>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d00b      	beq.n	8000f80 <updatePID+0x8c>
			error=(ENCODER_RESOLUTION/2)-error;
 8000f68:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000f6c:	f04f 0000 	mov.w	r0, #0
 8000f70:	4984      	ldr	r1, [pc, #528]	; (8001184 <updatePID+0x290>)
 8000f72:	f7ff f991 	bl	8000298 <__aeabi_dsub>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	e9c7 2308 	strd	r2, r3, [r7, #32]
			error=-((ENCODER_RESOLUTION/2)+error);
		}
		else{
			error= 0;
		}
		break;
 8000f7e:	e021      	b.n	8000fc4 <updatePID+0xd0>
		else if (error<0){
 8000f80:	f04f 0200 	mov.w	r2, #0
 8000f84:	f04f 0300 	mov.w	r3, #0
 8000f88:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000f8c:	f7ff fdae 	bl	8000aec <__aeabi_dcmplt>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d00e      	beq.n	8000fb4 <updatePID+0xc0>
			error=-((ENCODER_RESOLUTION/2)+error);
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	4b7a      	ldr	r3, [pc, #488]	; (8001184 <updatePID+0x290>)
 8000f9c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000fa0:	f7ff f97c 	bl	800029c <__adddf3>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4611      	mov	r1, r2
 8000faa:	6239      	str	r1, [r7, #32]
 8000fac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8000fb2:	e007      	b.n	8000fc4 <updatePID+0xd0>
			error= 0;
 8000fb4:	f04f 0200 	mov.w	r2, #0
 8000fb8:	f04f 0300 	mov.w	r3, #0
 8000fbc:	e9c7 2308 	strd	r2, r3, [r7, #32]
		break;
 8000fc0:	e000      	b.n	8000fc4 <updatePID+0xd0>
	case Torque:

		break;
 8000fc2:	bf00      	nop

	}
	pid->CurrentError=error;
 8000fc4:	68f9      	ldr	r1, [r7, #12]
 8000fc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000fca:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	double P,D;
	if (pid->ControlMode!=Position){
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	f000 8091 	beq.w	80010fa <updatePID+0x206>
		// Proportional
		P = pid->Kp * error;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000fde:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000fe2:	f7ff fb11 	bl	8000608 <__aeabi_dmul>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	e9c7 2306 	strd	r2, r3, [r7, #24]
		// Integral
		pid->integral += pid->Ki * error * (pid->dt/1000);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000ffa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000ffe:	f7ff fb03 	bl	8000608 <__aeabi_dmul>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4690      	mov	r8, r2
 8001008:	4699      	mov	r9, r3
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8001010:	f04f 0200 	mov.w	r2, #0
 8001014:	4b5c      	ldr	r3, [pc, #368]	; (8001188 <updatePID+0x294>)
 8001016:	f7ff fc21 	bl	800085c <__aeabi_ddiv>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	4640      	mov	r0, r8
 8001020:	4649      	mov	r1, r9
 8001022:	f7ff faf1 	bl	8000608 <__aeabi_dmul>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	4620      	mov	r0, r4
 800102c:	4629      	mov	r1, r5
 800102e:	f7ff f935 	bl	800029c <__adddf3>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	68f9      	ldr	r1, [r7, #12]
 8001038:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		// Derivative
		D = pid->Kd * (error - pid->prev_error) / (pid->dt/1000);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001048:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800104c:	f7ff f924 	bl	8000298 <__aeabi_dsub>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4620      	mov	r0, r4
 8001056:	4629      	mov	r1, r5
 8001058:	f7ff fad6 	bl	8000608 <__aeabi_dmul>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4614      	mov	r4, r2
 8001062:	461d      	mov	r5, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800106a:	f04f 0200 	mov.w	r2, #0
 800106e:	4b46      	ldr	r3, [pc, #280]	; (8001188 <updatePID+0x294>)
 8001070:	f7ff fbf4 	bl	800085c <__aeabi_ddiv>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4620      	mov	r0, r4
 800107a:	4629      	mov	r1, r5
 800107c:	f7ff fbee 	bl	800085c <__aeabi_ddiv>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	e9c7 2304 	strd	r2, r3, [r7, #16]
		// Total
		pid->output = P + pid->integral + D;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800108e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001092:	f7ff f903 	bl	800029c <__adddf3>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	4610      	mov	r0, r2
 800109c:	4619      	mov	r1, r3
 800109e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80010a2:	f7ff f8fb 	bl	800029c <__adddf3>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	68f9      	ldr	r1, [r7, #12]
 80010ac:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		// Integral with anti-windup
		if (pid->integral > pid->max_output) {
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80010bc:	f7ff fd34 	bl	8000b28 <__aeabi_dcmpgt>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d006      	beq.n	80010d4 <updatePID+0x1e0>
			pid->integral = pid->max_output;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80010cc:	68f9      	ldr	r1, [r7, #12]
 80010ce:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 80010d2:	e0af      	b.n	8001234 <updatePID+0x340>
		} else if (pid->integral < pid->min_output) {
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80010e0:	f7ff fd04 	bl	8000aec <__aeabi_dcmplt>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f000 80a4 	beq.w	8001234 <updatePID+0x340>
			pid->integral = pid->min_output;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80010f2:	68f9      	ldr	r1, [r7, #12]
 80010f4:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 80010f8:	e09c      	b.n	8001234 <updatePID+0x340>
		}
	}
	else {
		P = pid->Kp * error;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001100:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001104:	f7ff fa80 	bl	8000608 <__aeabi_dmul>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	e9c7 2306 	strd	r2, r3, [r7, #24]
		pid->integral += pid->Ki * error * (pid->dt/1000);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800111c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001120:	f7ff fa72 	bl	8000608 <__aeabi_dmul>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4690      	mov	r8, r2
 800112a:	4699      	mov	r9, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	4b14      	ldr	r3, [pc, #80]	; (8001188 <updatePID+0x294>)
 8001138:	f7ff fb90 	bl	800085c <__aeabi_ddiv>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4640      	mov	r0, r8
 8001142:	4649      	mov	r1, r9
 8001144:	f7ff fa60 	bl	8000608 <__aeabi_dmul>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	4620      	mov	r0, r4
 800114e:	4629      	mov	r1, r5
 8001150:	f7ff f8a4 	bl	800029c <__adddf3>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	68f9      	ldr	r1, [r7, #12]
 800115a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		// Integral with anti-windup
		if (pid->integral > pid->max_Integral) {
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800116a:	f7ff fcdd 	bl	8000b28 <__aeabi_dcmpgt>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d00b      	beq.n	800118c <updatePID+0x298>
			pid->integral = pid->max_Integral;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800117a:	68f9      	ldr	r1, [r7, #12]
 800117c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8001180:	e015      	b.n	80011ae <updatePID+0x2ba>
 8001182:	bf00      	nop
 8001184:	40600000 	.word	0x40600000
 8001188:	408f4000 	.word	0x408f4000
		} else if (pid->integral < pid->min_Integral) {
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001198:	f7ff fca8 	bl	8000aec <__aeabi_dcmplt>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d005      	beq.n	80011ae <updatePID+0x2ba>
			pid->integral = pid->min_Integral;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80011a8:	68f9      	ldr	r1, [r7, #12]
 80011aa:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		}
		D = pid->Kd * (error - pid->prev_error) / (pid->dt/1000);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80011ba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80011be:	f7ff f86b 	bl	8000298 <__aeabi_dsub>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4620      	mov	r0, r4
 80011c8:	4629      	mov	r1, r5
 80011ca:	f7ff fa1d 	bl	8000608 <__aeabi_dmul>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4614      	mov	r4, r2
 80011d4:	461d      	mov	r5, r3
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	4b2b      	ldr	r3, [pc, #172]	; (8001290 <updatePID+0x39c>)
 80011e2:	f7ff fb3b 	bl	800085c <__aeabi_ddiv>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4620      	mov	r0, r4
 80011ec:	4629      	mov	r1, r5
 80011ee:	f7ff fb35 	bl	800085c <__aeabi_ddiv>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	e9c7 2304 	strd	r2, r3, [r7, #16]
		// Total
		pid->output = (PWM_MAXVALUE/2) + P + pid->integral + D;
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	4b25      	ldr	r3, [pc, #148]	; (8001294 <updatePID+0x3a0>)
 8001200:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001204:	f7ff f84a 	bl	800029c <__adddf3>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4610      	mov	r0, r2
 800120e:	4619      	mov	r1, r3
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001216:	f7ff f841 	bl	800029c <__adddf3>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4610      	mov	r0, r2
 8001220:	4619      	mov	r1, r3
 8001222:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001226:	f7ff f839 	bl	800029c <__adddf3>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	68f9      	ldr	r1, [r7, #12]
 8001230:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	}


	// Saturate output within limits
	if (pid->output > pid->max_output) {
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001240:	f7ff fc72 	bl	8000b28 <__aeabi_dcmpgt>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d006      	beq.n	8001258 <updatePID+0x364>
		pid->output = pid->max_output;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001250:	68f9      	ldr	r1, [r7, #12]
 8001252:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8001256:	e010      	b.n	800127a <updatePID+0x386>
	} else if (pid->output < pid->min_output) {
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001264:	f7ff fc42 	bl	8000aec <__aeabi_dcmplt>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d005      	beq.n	800127a <updatePID+0x386>
		pid->output = pid->min_output;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001274:	68f9      	ldr	r1, [r7, #12]
 8001276:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	}
	pid->prev_error = error;
 800127a:	68f9      	ldr	r1, [r7, #12]
 800127c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001280:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8001284:	bf00      	nop
 8001286:	3728      	adds	r7, #40	; 0x28
 8001288:	46bd      	mov	sp, r7
 800128a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800128e:	bf00      	nop
 8001290:	408f4000 	.word	0x408f4000
 8001294:	407f4000 	.word	0x407f4000

08001298 <ParseSBUS>:
#include "Sbus.h"

void ParseSBUS(tsbus* sbus){
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	sbus->ch[0]  = ( (sbus->ReceivedData[1]		| sbus->ReceivedData[2]<<8) 								& 0x07FF );
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	785b      	ldrb	r3, [r3, #1]
 80012a4:	b21a      	sxth	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	789b      	ldrb	r3, [r3, #2]
 80012aa:	021b      	lsls	r3, r3, #8
 80012ac:	b21b      	sxth	r3, r3
 80012ae:	4313      	orrs	r3, r2
 80012b0:	b21b      	sxth	r3, r3
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	835a      	strh	r2, [r3, #26]
	sbus->ch[1]  = ( (sbus->ReceivedData[2]>>3	| sbus->ReceivedData[3]<<5) 								& 0x07FF );
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	789b      	ldrb	r3, [r3, #2]
 80012c2:	08db      	lsrs	r3, r3, #3
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	b21a      	sxth	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	78db      	ldrb	r3, [r3, #3]
 80012cc:	015b      	lsls	r3, r3, #5
 80012ce:	b21b      	sxth	r3, r3
 80012d0:	4313      	orrs	r3, r2
 80012d2:	b21b      	sxth	r3, r3
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012da:	b29a      	uxth	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	839a      	strh	r2, [r3, #28]
	sbus->ch[2]  = ( (sbus->ReceivedData[3]>>6	| sbus->ReceivedData[4]<<2 	| sbus->ReceivedData[5]<<10 ) 	& 0x07FF );
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	78db      	ldrb	r3, [r3, #3]
 80012e4:	099b      	lsrs	r3, r3, #6
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	b21a      	sxth	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	791b      	ldrb	r3, [r3, #4]
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	b21b      	sxth	r3, r3
 80012f2:	4313      	orrs	r3, r2
 80012f4:	b21a      	sxth	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	795b      	ldrb	r3, [r3, #5]
 80012fa:	029b      	lsls	r3, r3, #10
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	4313      	orrs	r3, r2
 8001300:	b21b      	sxth	r3, r3
 8001302:	b29b      	uxth	r3, r3
 8001304:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001308:	b29a      	uxth	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	83da      	strh	r2, [r3, #30]
	sbus->ch[3]  = ( (sbus->ReceivedData[5]>>1	| sbus->ReceivedData[6]<<7) 								& 0x07FF );
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	795b      	ldrb	r3, [r3, #5]
 8001312:	085b      	lsrs	r3, r3, #1
 8001314:	b2db      	uxtb	r3, r3
 8001316:	b21a      	sxth	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	799b      	ldrb	r3, [r3, #6]
 800131c:	01db      	lsls	r3, r3, #7
 800131e:	b21b      	sxth	r3, r3
 8001320:	4313      	orrs	r3, r2
 8001322:	b21b      	sxth	r3, r3
 8001324:	b29b      	uxth	r3, r3
 8001326:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800132a:	b29a      	uxth	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	841a      	strh	r2, [r3, #32]
	sbus->ch[4]  = ( (sbus->ReceivedData[6]>>4	| sbus->ReceivedData[7]<<4) 								& 0x07FF );
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	799b      	ldrb	r3, [r3, #6]
 8001334:	091b      	lsrs	r3, r3, #4
 8001336:	b2db      	uxtb	r3, r3
 8001338:	b21a      	sxth	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	79db      	ldrb	r3, [r3, #7]
 800133e:	011b      	lsls	r3, r3, #4
 8001340:	b21b      	sxth	r3, r3
 8001342:	4313      	orrs	r3, r2
 8001344:	b21b      	sxth	r3, r3
 8001346:	b29b      	uxth	r3, r3
 8001348:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800134c:	b29a      	uxth	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	845a      	strh	r2, [r3, #34]	; 0x22
	sbus->ch[5]  = ( (sbus->ReceivedData[7]>>7	| sbus->ReceivedData[8]<<1	| sbus->ReceivedData[9]<<9 ) 	& 0x07FF );
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	79db      	ldrb	r3, [r3, #7]
 8001356:	09db      	lsrs	r3, r3, #7
 8001358:	b2db      	uxtb	r3, r3
 800135a:	b21a      	sxth	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	7a1b      	ldrb	r3, [r3, #8]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	b21b      	sxth	r3, r3
 8001364:	4313      	orrs	r3, r2
 8001366:	b21a      	sxth	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	7a5b      	ldrb	r3, [r3, #9]
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	b21b      	sxth	r3, r3
 8001370:	4313      	orrs	r3, r2
 8001372:	b21b      	sxth	r3, r3
 8001374:	b29b      	uxth	r3, r3
 8001376:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800137a:	b29a      	uxth	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	849a      	strh	r2, [r3, #36]	; 0x24
	sbus->ch[6]  = ( (sbus->ReceivedData[9]>>2 	| sbus->ReceivedData[10]<<6) 								& 0x07FF );
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	7a5b      	ldrb	r3, [r3, #9]
 8001384:	089b      	lsrs	r3, r3, #2
 8001386:	b2db      	uxtb	r3, r3
 8001388:	b21a      	sxth	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	7a9b      	ldrb	r3, [r3, #10]
 800138e:	019b      	lsls	r3, r3, #6
 8001390:	b21b      	sxth	r3, r3
 8001392:	4313      	orrs	r3, r2
 8001394:	b21b      	sxth	r3, r3
 8001396:	b29b      	uxth	r3, r3
 8001398:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800139c:	b29a      	uxth	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	84da      	strh	r2, [r3, #38]	; 0x26
	sbus->ch[7]  = ( (sbus->ReceivedData[10]>>5 | sbus->ReceivedData[11]<<3) 								& 0x07FF );
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	7a9b      	ldrb	r3, [r3, #10]
 80013a6:	095b      	lsrs	r3, r3, #5
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	b21a      	sxth	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	7adb      	ldrb	r3, [r3, #11]
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	b21b      	sxth	r3, r3
 80013b4:	4313      	orrs	r3, r2
 80013b6:	b21b      	sxth	r3, r3
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013be:	b29a      	uxth	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	851a      	strh	r2, [r3, #40]	; 0x28
	sbus->ch[8]  = ( (sbus->ReceivedData[12]	| sbus->ReceivedData[13]<<8) 								& 0x07FF );
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	7b1b      	ldrb	r3, [r3, #12]
 80013c8:	b21a      	sxth	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	7b5b      	ldrb	r3, [r3, #13]
 80013ce:	021b      	lsls	r3, r3, #8
 80013d0:	b21b      	sxth	r3, r3
 80013d2:	4313      	orrs	r3, r2
 80013d4:	b21b      	sxth	r3, r3
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013dc:	b29a      	uxth	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	855a      	strh	r2, [r3, #42]	; 0x2a
	sbus->ch[9]  = ( (sbus->ReceivedData[13]>>3 | sbus->ReceivedData[14]<<5) 								& 0x07FF );
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	7b5b      	ldrb	r3, [r3, #13]
 80013e6:	08db      	lsrs	r3, r3, #3
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	b21a      	sxth	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	7b9b      	ldrb	r3, [r3, #14]
 80013f0:	015b      	lsls	r3, r3, #5
 80013f2:	b21b      	sxth	r3, r3
 80013f4:	4313      	orrs	r3, r2
 80013f6:	b21b      	sxth	r3, r3
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013fe:	b29a      	uxth	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	859a      	strh	r2, [r3, #44]	; 0x2c
	sbus->ch[10] = ( (sbus->ReceivedData[14]>>6 | sbus->ReceivedData[15]<<2 | sbus->ReceivedData[16]<<10) 	& 0x07FF );
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	7b9b      	ldrb	r3, [r3, #14]
 8001408:	099b      	lsrs	r3, r3, #6
 800140a:	b2db      	uxtb	r3, r3
 800140c:	b21a      	sxth	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7bdb      	ldrb	r3, [r3, #15]
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	b21b      	sxth	r3, r3
 8001416:	4313      	orrs	r3, r2
 8001418:	b21a      	sxth	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	7c1b      	ldrb	r3, [r3, #16]
 800141e:	029b      	lsls	r3, r3, #10
 8001420:	b21b      	sxth	r3, r3
 8001422:	4313      	orrs	r3, r2
 8001424:	b21b      	sxth	r3, r3
 8001426:	b29b      	uxth	r3, r3
 8001428:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800142c:	b29a      	uxth	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	85da      	strh	r2, [r3, #46]	; 0x2e
	sbus->ch[11] = ( (sbus->ReceivedData[16]>>1 | sbus->ReceivedData[17]<<7)								& 0x07FF );
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	7c1b      	ldrb	r3, [r3, #16]
 8001436:	085b      	lsrs	r3, r3, #1
 8001438:	b2db      	uxtb	r3, r3
 800143a:	b21a      	sxth	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	7c5b      	ldrb	r3, [r3, #17]
 8001440:	01db      	lsls	r3, r3, #7
 8001442:	b21b      	sxth	r3, r3
 8001444:	4313      	orrs	r3, r2
 8001446:	b21b      	sxth	r3, r3
 8001448:	b29b      	uxth	r3, r3
 800144a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800144e:	b29a      	uxth	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	861a      	strh	r2, [r3, #48]	; 0x30
	sbus->ch[12] = ( (sbus->ReceivedData[17]>>4 | sbus->ReceivedData[18]<<4)								& 0x07FF );
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	7c5b      	ldrb	r3, [r3, #17]
 8001458:	091b      	lsrs	r3, r3, #4
 800145a:	b2db      	uxtb	r3, r3
 800145c:	b21a      	sxth	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	7c9b      	ldrb	r3, [r3, #18]
 8001462:	011b      	lsls	r3, r3, #4
 8001464:	b21b      	sxth	r3, r3
 8001466:	4313      	orrs	r3, r2
 8001468:	b21b      	sxth	r3, r3
 800146a:	b29b      	uxth	r3, r3
 800146c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001470:	b29a      	uxth	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	865a      	strh	r2, [r3, #50]	; 0x32
	sbus->ch[13] = ( (sbus->ReceivedData[18]>>7 | sbus->ReceivedData[19]<<1 | sbus->ReceivedData[20]<<9) 	& 0x07FF );
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	7c9b      	ldrb	r3, [r3, #18]
 800147a:	09db      	lsrs	r3, r3, #7
 800147c:	b2db      	uxtb	r3, r3
 800147e:	b21a      	sxth	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	7cdb      	ldrb	r3, [r3, #19]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	b21b      	sxth	r3, r3
 8001488:	4313      	orrs	r3, r2
 800148a:	b21a      	sxth	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	7d1b      	ldrb	r3, [r3, #20]
 8001490:	025b      	lsls	r3, r3, #9
 8001492:	b21b      	sxth	r3, r3
 8001494:	4313      	orrs	r3, r2
 8001496:	b21b      	sxth	r3, r3
 8001498:	b29b      	uxth	r3, r3
 800149a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800149e:	b29a      	uxth	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	869a      	strh	r2, [r3, #52]	; 0x34
	sbus->ch[14] = ( (sbus->ReceivedData[20]>>2 | sbus->ReceivedData[21]<<6) 								& 0x07FF );
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	7d1b      	ldrb	r3, [r3, #20]
 80014a8:	089b      	lsrs	r3, r3, #2
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	b21a      	sxth	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	7d5b      	ldrb	r3, [r3, #21]
 80014b2:	019b      	lsls	r3, r3, #6
 80014b4:	b21b      	sxth	r3, r3
 80014b6:	4313      	orrs	r3, r2
 80014b8:	b21b      	sxth	r3, r3
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	86da      	strh	r2, [r3, #54]	; 0x36
	sbus->ch[15] = ( (sbus->ReceivedData[21]>>5 | sbus->ReceivedData[22]<<3) 								& 0x07FF );
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	7d5b      	ldrb	r3, [r3, #21]
 80014ca:	095b      	lsrs	r3, r3, #5
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	b21a      	sxth	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	7d9b      	ldrb	r3, [r3, #22]
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	b21b      	sxth	r3, r3
 80014d8:	4313      	orrs	r3, r2
 80014da:	b21b      	sxth	r3, r3
 80014dc:	b29b      	uxth	r3, r3
 80014de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	871a      	strh	r2, [r3, #56]	; 0x38
	sbus->ch[16] = (  sbus->ReceivedData[23] 	& 0x0001 ) ? 2047: 0;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	7ddb      	ldrb	r3, [r3, #23]
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d002      	beq.n	80014fa <ParseSBUS+0x262>
 80014f4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80014f8:	e000      	b.n	80014fc <ParseSBUS+0x264>
 80014fa:	2200      	movs	r2, #0
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	875a      	strh	r2, [r3, #58]	; 0x3a
	sbus->ch[17] = (  sbus->ReceivedData[23]>>1 & 0x0001 ) ? 2047: 0;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	7ddb      	ldrb	r3, [r3, #23]
 8001504:	085b      	lsrs	r3, r3, #1
 8001506:	b2db      	uxtb	r3, r3
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	2b00      	cmp	r3, #0
 800150e:	d002      	beq.n	8001516 <ParseSBUS+0x27e>
 8001510:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001514:	e000      	b.n	8001518 <ParseSBUS+0x280>
 8001516:	2200      	movs	r2, #0
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <GetEncoderValue>:
#include "encoder.h"
#include "main.h"

void GetEncoderValue(encoder_data *encoder){
 8001528:	b580      	push	{r7, lr}
 800152a:	b096      	sub	sp, #88	; 0x58
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
	  int EncoderGrayConvert[8] ={0,0,0,0,0,0,0,0};
 8001530:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001534:	2220      	movs	r2, #32
 8001536:	2100      	movs	r1, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f006 f92e 	bl	800779a <memset>
	  int GrayCode=0;
 800153e:	2300      	movs	r3, #0
 8001540:	64bb      	str	r3, [r7, #72]	; 0x48
	  int GrayMSBDetected = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	657b      	str	r3, [r7, #84]	; 0x54
	  //reading encoder value as gray code
#ifdef ENCODER_GPIO_MODE
	  //EncoderGrayCode = GrayCodeConvert[(HAL_GPIO_ReadPin(Encoder_A_GPIO_Port, Encoder_A_Pin) <<1 | HAL_GPIO_ReadPin(Encoder_B_GPIO_Port, Encoder_B_Pin)) & 0x03];
	  int b[8];
	  b[0]=!HAL_GPIO_ReadPin(Encoder_0_GPIO_Port, Encoder_0_Pin);
 8001546:	f44f 7180 	mov.w	r1, #256	; 0x100
 800154a:	4883      	ldr	r0, [pc, #524]	; (8001758 <GetEncoderValue+0x230>)
 800154c:	f002 fe68 	bl	8004220 <HAL_GPIO_ReadPin>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	bf0c      	ite	eq
 8001556:	2301      	moveq	r3, #1
 8001558:	2300      	movne	r3, #0
 800155a:	b2db      	uxtb	r3, r3
 800155c:	60bb      	str	r3, [r7, #8]
	  b[1]=!HAL_GPIO_ReadPin(Encoder_1_GPIO_Port, Encoder_1_Pin);
 800155e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001562:	487d      	ldr	r0, [pc, #500]	; (8001758 <GetEncoderValue+0x230>)
 8001564:	f002 fe5c 	bl	8004220 <HAL_GPIO_ReadPin>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	bf0c      	ite	eq
 800156e:	2301      	moveq	r3, #1
 8001570:	2300      	movne	r3, #0
 8001572:	b2db      	uxtb	r3, r3
 8001574:	60fb      	str	r3, [r7, #12]
	  b[2]=!HAL_GPIO_ReadPin(Encoder_2_GPIO_Port, Encoder_2_Pin);
 8001576:	2120      	movs	r1, #32
 8001578:	4878      	ldr	r0, [pc, #480]	; (800175c <GetEncoderValue+0x234>)
 800157a:	f002 fe51 	bl	8004220 <HAL_GPIO_ReadPin>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	bf0c      	ite	eq
 8001584:	2301      	moveq	r3, #1
 8001586:	2300      	movne	r3, #0
 8001588:	b2db      	uxtb	r3, r3
 800158a:	613b      	str	r3, [r7, #16]
	  b[3]=!HAL_GPIO_ReadPin(Encoder_3_GPIO_Port, Encoder_3_Pin);
 800158c:	2140      	movs	r1, #64	; 0x40
 800158e:	4873      	ldr	r0, [pc, #460]	; (800175c <GetEncoderValue+0x234>)
 8001590:	f002 fe46 	bl	8004220 <HAL_GPIO_ReadPin>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	bf0c      	ite	eq
 800159a:	2301      	moveq	r3, #1
 800159c:	2300      	movne	r3, #0
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	617b      	str	r3, [r7, #20]
	  b[4]=!HAL_GPIO_ReadPin(Encoder_4_GPIO_Port, Encoder_4_Pin);
 80015a2:	2180      	movs	r1, #128	; 0x80
 80015a4:	486d      	ldr	r0, [pc, #436]	; (800175c <GetEncoderValue+0x234>)
 80015a6:	f002 fe3b 	bl	8004220 <HAL_GPIO_ReadPin>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	bf0c      	ite	eq
 80015b0:	2301      	moveq	r3, #1
 80015b2:	2300      	movne	r3, #0
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	61bb      	str	r3, [r7, #24]
	  b[5]=!HAL_GPIO_ReadPin(Encoder_5_GPIO_Port, Encoder_5_Pin);
 80015b8:	2140      	movs	r1, #64	; 0x40
 80015ba:	4867      	ldr	r0, [pc, #412]	; (8001758 <GetEncoderValue+0x230>)
 80015bc:	f002 fe30 	bl	8004220 <HAL_GPIO_ReadPin>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	bf0c      	ite	eq
 80015c6:	2301      	moveq	r3, #1
 80015c8:	2300      	movne	r3, #0
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	61fb      	str	r3, [r7, #28]
	  b[6]=!HAL_GPIO_ReadPin(Encoder_6_GPIO_Port, Encoder_6_Pin);
 80015ce:	2180      	movs	r1, #128	; 0x80
 80015d0:	4863      	ldr	r0, [pc, #396]	; (8001760 <GetEncoderValue+0x238>)
 80015d2:	f002 fe25 	bl	8004220 <HAL_GPIO_ReadPin>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	bf0c      	ite	eq
 80015dc:	2301      	moveq	r3, #1
 80015de:	2300      	movne	r3, #0
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	623b      	str	r3, [r7, #32]
	  b[7]=!HAL_GPIO_ReadPin(Encoder_7_GPIO_Port, Encoder_7_Pin);
 80015e4:	2110      	movs	r1, #16
 80015e6:	485c      	ldr	r0, [pc, #368]	; (8001758 <GetEncoderValue+0x230>)
 80015e8:	f002 fe1a 	bl	8004220 <HAL_GPIO_ReadPin>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	bf0c      	ite	eq
 80015f2:	2301      	moveq	r3, #1
 80015f4:	2300      	movne	r3, #0
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
	  encoder->EncoderRawValue =(b[7] <<7 | b[6] <<6 | b[5] <<5 | b[4] <<4 | b[3] <<3 | b[2] <<2 | b[1] <<1 | b[0]) & 0b11111111;
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	01da      	lsls	r2, r3, #7
 80015fe:	6a3b      	ldr	r3, [r7, #32]
 8001600:	019b      	lsls	r3, r3, #6
 8001602:	431a      	orrs	r2, r3
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	015b      	lsls	r3, r3, #5
 8001608:	431a      	orrs	r2, r3
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	011b      	lsls	r3, r3, #4
 800160e:	431a      	orrs	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	431a      	orrs	r2, r3
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	431a      	orrs	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	431a      	orrs	r2, r3
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	4313      	orrs	r3, r2
 8001626:	b2da      	uxtb	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	609a      	str	r2, [r3, #8]
	  //To convert Gray to Binary write the most significant bit MSB then compare the next bit with that if similar put 0 if different put 1
	  for (int index = 7 ; index >= 0 ; index--){
 800162c:	2307      	movs	r3, #7
 800162e:	653b      	str	r3, [r7, #80]	; 0x50
 8001630:	e046      	b.n	80016c0 <GetEncoderValue+0x198>
	          if ((b[index]==1) & ! (GrayMSBDetected)) {
 8001632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	3358      	adds	r3, #88	; 0x58
 8001638:	443b      	add	r3, r7
 800163a:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800163e:	2b01      	cmp	r3, #1
 8001640:	bf0c      	ite	eq
 8001642:	2301      	moveq	r3, #1
 8001644:	2300      	movne	r3, #0
 8001646:	b2da      	uxtb	r2, r3
 8001648:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800164a:	2b00      	cmp	r3, #0
 800164c:	bf0c      	ite	eq
 800164e:	2301      	moveq	r3, #1
 8001650:	2300      	movne	r3, #0
 8001652:	b2db      	uxtb	r3, r3
 8001654:	4013      	ands	r3, r2
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b00      	cmp	r3, #0
 800165a:	d00d      	beq.n	8001678 <GetEncoderValue+0x150>
	        	  EncoderGrayConvert[index]=b[index];
 800165c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	3358      	adds	r3, #88	; 0x58
 8001662:	443b      	add	r3, r7
 8001664:	f853 2c50 	ldr.w	r2, [r3, #-80]
 8001668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	3358      	adds	r3, #88	; 0x58
 800166e:	443b      	add	r3, r7
 8001670:	f843 2c30 	str.w	r2, [r3, #-48]
	              GrayMSBDetected=index;
 8001674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001676:	657b      	str	r3, [r7, #84]	; 0x54
	          }
	          if(GrayMSBDetected){
 8001678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800167a:	2b00      	cmp	r3, #0
 800167c:	d01d      	beq.n	80016ba <GetEncoderValue+0x192>
	              if (EncoderGrayConvert[index+1]==b[index]) EncoderGrayConvert[index]=0;
 800167e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001680:	3301      	adds	r3, #1
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	3358      	adds	r3, #88	; 0x58
 8001686:	443b      	add	r3, r7
 8001688:	f853 2c30 	ldr.w	r2, [r3, #-48]
 800168c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	3358      	adds	r3, #88	; 0x58
 8001692:	443b      	add	r3, r7
 8001694:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8001698:	429a      	cmp	r2, r3
 800169a:	d107      	bne.n	80016ac <GetEncoderValue+0x184>
 800169c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	3358      	adds	r3, #88	; 0x58
 80016a2:	443b      	add	r3, r7
 80016a4:	2200      	movs	r2, #0
 80016a6:	f843 2c30 	str.w	r2, [r3, #-48]
 80016aa:	e006      	b.n	80016ba <GetEncoderValue+0x192>
	              else EncoderGrayConvert[index]=1;
 80016ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	3358      	adds	r3, #88	; 0x58
 80016b2:	443b      	add	r3, r7
 80016b4:	2201      	movs	r2, #1
 80016b6:	f843 2c30 	str.w	r2, [r3, #-48]
	  for (int index = 7 ; index >= 0 ; index--){
 80016ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016bc:	3b01      	subs	r3, #1
 80016be:	653b      	str	r3, [r7, #80]	; 0x50
 80016c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	dab5      	bge.n	8001632 <GetEncoderValue+0x10a>
	          }
	  }
	  encoder->GrayCode  = GrayCode =((   EncoderGrayConvert[7] <<7 |
 80016c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016c8:	01da      	lsls	r2, r3, #7
										  EncoderGrayConvert[6] <<6 |
 80016ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016cc:	019b      	lsls	r3, r3, #6
	  encoder->GrayCode  = GrayCode =((   EncoderGrayConvert[7] <<7 |
 80016ce:	431a      	orrs	r2, r3
										  EncoderGrayConvert[5] <<5 |
 80016d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016d2:	015b      	lsls	r3, r3, #5
										  EncoderGrayConvert[6] <<6 |
 80016d4:	431a      	orrs	r2, r3
										  EncoderGrayConvert[4] <<4 |
 80016d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016d8:	011b      	lsls	r3, r3, #4
										  EncoderGrayConvert[5] <<5 |
 80016da:	431a      	orrs	r2, r3
										  EncoderGrayConvert[3] <<3 |
 80016dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016de:	00db      	lsls	r3, r3, #3
										  EncoderGrayConvert[4] <<4 |
 80016e0:	431a      	orrs	r2, r3
										  EncoderGrayConvert[2] <<2 |
 80016e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016e4:	009b      	lsls	r3, r3, #2
										  EncoderGrayConvert[3] <<3 |
 80016e6:	431a      	orrs	r2, r3
										  EncoderGrayConvert[1] <<1 |
 80016e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ea:	005b      	lsls	r3, r3, #1
										  EncoderGrayConvert[2] <<2 |
 80016ec:	431a      	orrs	r2, r3
										  EncoderGrayConvert[0]) & 0b11111111);
 80016ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
										  EncoderGrayConvert[1] <<1 |
 80016f0:	4313      	orrs	r3, r2
	  encoder->GrayCode  = GrayCode =((   EncoderGrayConvert[7] <<7 |
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80016fa:	611a      	str	r2, [r3, #16]
	  EncoderGrayCode = GrayCodeConvert[(encoder->IT_EncoderChA <<1 | encoder->IT_EncoderChB) & 0x03];
#endif

#ifndef ENCODER_TIMER_MODE //the value will be written in main.c in timer interrupt function
	  //if encoder value updated
	  if (encoder->PreviusGrayCode != GrayCode){
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001702:	429a      	cmp	r2, r3
 8001704:	d024      	beq.n	8001750 <GetEncoderValue+0x228>
		  int EncoderDeltaValue;
		  EncoderDeltaValue = GrayCode-encoder->PreviusGrayCode;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	64fb      	str	r3, [r7, #76]	; 0x4c
		  if (EncoderDeltaValue<0) {EncoderDeltaValue+=4;}
 8001710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001712:	2b00      	cmp	r3, #0
 8001714:	da02      	bge.n	800171c <GetEncoderValue+0x1f4>
 8001716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001718:	3304      	adds	r3, #4
 800171a:	64fb      	str	r3, [r7, #76]	; 0x4c
		  if (EncoderDeltaValue ==1) {
 800171c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800171e:	2b01      	cmp	r3, #1
 8001720:	d108      	bne.n	8001734 <GetEncoderValue+0x20c>
			  encoder->direction=CW;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2201      	movs	r2, #1
 8001726:	751a      	strb	r2, [r3, #20]
			  encoder->EncoderValue++;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	1c5a      	adds	r2, r3, #1
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	619a      	str	r2, [r3, #24]
 8001732:	e00a      	b.n	800174a <GetEncoderValue+0x222>
		  }
		  else if (EncoderDeltaValue ==3){
 8001734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001736:	2b03      	cmp	r3, #3
 8001738:	d107      	bne.n	800174a <GetEncoderValue+0x222>
			  encoder->direction=CCW;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2202      	movs	r2, #2
 800173e:	751a      	strb	r2, [r3, #20]
			  encoder->EncoderValue--;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	1e5a      	subs	r2, r3, #1
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	619a      	str	r2, [r3, #24]
		  }
		  encoder->PreviusGrayCode=GrayCode;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800174e:	60da      	str	r2, [r3, #12]
	 }
#else
	  if (encoder->EncoderValue >=0){ encoder->direction = CW;}
	  else {encoder->direction = CCW;}
#endif
}
 8001750:	bf00      	nop
 8001752:	3758      	adds	r7, #88	; 0x58
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40020400 	.word	0x40020400
 800175c:	40020000 	.word	0x40020000
 8001760:	40020800 	.word	0x40020800

08001764 <HAL_UART_RxCpltCallback>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_usart1_rx;

/* USER CODE BEGIN PV */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	if (huart == &huart1){
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a05      	ldr	r2, [pc, #20]	; (8001784 <HAL_UART_RxCpltCallback+0x20>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d102      	bne.n	800177a <HAL_UART_RxCpltCallback+0x16>
		ParseSBUS(&receivedSBUS);
 8001774:	4804      	ldr	r0, [pc, #16]	; (8001788 <HAL_UART_RxCpltCallback+0x24>)
 8001776:	f7ff fd8f 	bl	8001298 <ParseSBUS>
	}
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200003d0 	.word	0x200003d0
 8001788:	200001f4 	.word	0x200001f4

0800178c <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
	if (huart == &huart2){
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a06      	ldr	r2, [pc, #24]	; (80017b0 <HAL_UART_TxCpltCallback+0x24>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d102      	bne.n	80017a2 <HAL_UART_TxCpltCallback+0x16>
		uart2Free=1;
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <HAL_UART_TxCpltCallback+0x28>)
 800179e:	2201      	movs	r2, #1
 80017a0:	601a      	str	r2, [r3, #0]
	}
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	20000414 	.word	0x20000414
 80017b4:	20000000 	.word	0x20000000

080017b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ba:	b0a3      	sub	sp, #140	; 0x8c
 80017bc:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017be:	f001 f92f 	bl	8002a20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017c2:	f000 fb8f 	bl	8001ee4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017c6:	f000 fda9 	bl	800231c <MX_GPIO_Init>
  MX_DMA_Init();
 80017ca:	f000 fd87 	bl	80022dc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80017ce:	f000 fd5b 	bl	8002288 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80017d2:	f000 fc41 	bl	8002058 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80017d6:	f000 fd2b 	bl	8002230 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80017da:	f000 fbeb 	bl	8001fb4 <MX_ADC1_Init>
  MX_TIM2_Init();
 80017de:	f000 fcdb 	bl	8002198 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1, &receivedSBUS.ReceivedData[0], SBUS_LEN);
 80017e2:	2219      	movs	r2, #25
 80017e4:	4998      	ldr	r1, [pc, #608]	; (8001a48 <main+0x290>)
 80017e6:	4899      	ldr	r0, [pc, #612]	; (8001a4c <main+0x294>)
 80017e8:	f004 f9a2 	bl	8005b30 <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim1);
 80017ec:	4898      	ldr	r0, [pc, #608]	; (8001a50 <main+0x298>)
 80017ee:	f003 fa8b 	bl	8004d08 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim2);
 80017f2:	4898      	ldr	r0, [pc, #608]	; (8001a54 <main+0x29c>)
 80017f4:	f003 fa2e 	bl	8004c54 <HAL_TIM_Base_Start>
  HAL_ADC_Start(&hadc1);
 80017f8:	4897      	ldr	r0, [pc, #604]	; (8001a58 <main+0x2a0>)
 80017fa:	f001 f9c7 	bl	8002b8c <HAL_ADC_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80017fe:	2100      	movs	r1, #0
 8001800:	4893      	ldr	r0, [pc, #588]	; (8001a50 <main+0x298>)
 8001802:	f003 fb3d 	bl	8004e80 <HAL_TIM_PWM_Start>
  SystemTime=HAL_GetTick();
 8001806:	f001 f971 	bl	8002aec <HAL_GetTick>
 800180a:	4603      	mov	r3, r0
 800180c:	4a93      	ldr	r2, [pc, #588]	; (8001a5c <main+0x2a4>)
 800180e:	6013      	str	r3, [r2, #0]
  TestEncoder.PreviusGrayCode=0;
 8001810:	4b93      	ldr	r3, [pc, #588]	; (8001a60 <main+0x2a8>)
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]
  TestEncoder.EncoderValue=0;
 8001816:	4b92      	ldr	r3, [pc, #584]	; (8001a60 <main+0x2a8>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  TestEncoder.PreviousEncoderValue=0;
 800181c:	4b90      	ldr	r3, [pc, #576]	; (8001a60 <main+0x2a8>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
  TestEncoder.SpeedRPM=0;
 8001822:	4b8f      	ldr	r3, [pc, #572]	; (8001a60 <main+0x2a8>)
 8001824:	2200      	movs	r2, #0
 8001826:	621a      	str	r2, [r3, #32]
  TestEncoder.direction=CW;
 8001828:	4b8d      	ldr	r3, [pc, #564]	; (8001a60 <main+0x2a8>)
 800182a:	2201      	movs	r2, #1
 800182c:	751a      	strb	r2, [r3, #20]
  PID.Kp=5;
 800182e:	498d      	ldr	r1, [pc, #564]	; (8001a64 <main+0x2ac>)
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	4b8c      	ldr	r3, [pc, #560]	; (8001a68 <main+0x2b0>)
 8001836:	e9c1 2302 	strd	r2, r3, [r1, #8]
  PID.Ki=0.6;
 800183a:	498a      	ldr	r1, [pc, #552]	; (8001a64 <main+0x2ac>)
 800183c:	a374      	add	r3, pc, #464	; (adr r3, 8001a10 <main+0x258>)
 800183e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001842:	e9c1 2304 	strd	r2, r3, [r1, #16]
  PID.Kd=0.1;
 8001846:	4987      	ldr	r1, [pc, #540]	; (8001a64 <main+0x2ac>)
 8001848:	a373      	add	r3, pc, #460	; (adr r3, 8001a18 <main+0x260>)
 800184a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184e:	e9c1 2306 	strd	r2, r3, [r1, #24]
  PID.dt=10;
 8001852:	4984      	ldr	r1, [pc, #528]	; (8001a64 <main+0x2ac>)
 8001854:	f04f 0200 	mov.w	r2, #0
 8001858:	4b84      	ldr	r3, [pc, #528]	; (8001a6c <main+0x2b4>)
 800185a:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
  PID.integral=0;
 800185e:	4981      	ldr	r1, [pc, #516]	; (8001a64 <main+0x2ac>)
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	f04f 0300 	mov.w	r3, #0
 8001868:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
  PID.min_output= 0;
 800186c:	497d      	ldr	r1, [pc, #500]	; (8001a64 <main+0x2ac>)
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	f04f 0300 	mov.w	r3, #0
 8001876:	e9c1 2308 	strd	r2, r3, [r1, #32]
  PID.max_output= 1000;
 800187a:	497a      	ldr	r1, [pc, #488]	; (8001a64 <main+0x2ac>)
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	4b7b      	ldr	r3, [pc, #492]	; (8001a70 <main+0x2b8>)
 8001882:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  PID.min_Integral= -500;
 8001886:	4977      	ldr	r1, [pc, #476]	; (8001a64 <main+0x2ac>)
 8001888:	a365      	add	r3, pc, #404	; (adr r3, 8001a20 <main+0x268>)
 800188a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
  PID.max_Integral= 500;
 8001892:	4974      	ldr	r1, [pc, #464]	; (8001a64 <main+0x2ac>)
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	4b76      	ldr	r3, [pc, #472]	; (8001a74 <main+0x2bc>)
 800189a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
  PID.output=5000;
 800189e:	4971      	ldr	r1, [pc, #452]	; (8001a64 <main+0x2ac>)
 80018a0:	a361      	add	r3, pc, #388	; (adr r3, 8001a28 <main+0x270>)
 80018a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a6:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
  PID.target=0;
 80018aa:	496e      	ldr	r1, [pc, #440]	; (8001a64 <main+0x2ac>)
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
  HAL_GPIO_WritePin(Motor_Enable_GPIO_Port, Motor_Enable_Pin, GPIO_PIN_SET);
 80018b8:	2201      	movs	r2, #1
 80018ba:	2102      	movs	r1, #2
 80018bc:	486e      	ldr	r0, [pc, #440]	; (8001a78 <main+0x2c0>)
 80018be:	f002 fcc7 	bl	8004250 <HAL_GPIO_WritePin>

  while (1)
  {

	  //read Encoder
	  GetEncoderValue(&TestEncoder);
 80018c2:	4867      	ldr	r0, [pc, #412]	; (8001a60 <main+0x2a8>)
 80018c4:	f7ff fe30 	bl	8001528 <GetEncoderValue>
	  //reading SBUS from remote controller and writing PWM output
	  if (!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){
 80018c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018cc:	486a      	ldr	r0, [pc, #424]	; (8001a78 <main+0x2c0>)
 80018ce:	f002 fca7 	bl	8004220 <HAL_GPIO_ReadPin>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d115      	bne.n	8001904 <main+0x14c>
		  while(!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){}
 80018d8:	bf00      	nop
 80018da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018de:	4866      	ldr	r0, [pc, #408]	; (8001a78 <main+0x2c0>)
 80018e0:	f002 fc9e 	bl	8004220 <HAL_GPIO_ReadPin>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0f7      	beq.n	80018da <main+0x122>
		  if (OperationMode==3){
 80018ea:	4b64      	ldr	r3, [pc, #400]	; (8001a7c <main+0x2c4>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b03      	cmp	r3, #3
 80018f0:	d103      	bne.n	80018fa <main+0x142>
			  OperationMode=0;
 80018f2:	4b62      	ldr	r3, [pc, #392]	; (8001a7c <main+0x2c4>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	e004      	b.n	8001904 <main+0x14c>
		  }
		  else OperationMode++;
 80018fa:	4b60      	ldr	r3, [pc, #384]	; (8001a7c <main+0x2c4>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	3301      	adds	r3, #1
 8001900:	4a5e      	ldr	r2, [pc, #376]	; (8001a7c <main+0x2c4>)
 8001902:	6013      	str	r3, [r2, #0]
	  }
	  switch (OperationMode) {
 8001904:	4b5d      	ldr	r3, [pc, #372]	; (8001a7c <main+0x2c4>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b03      	cmp	r3, #3
 800190a:	f200 81d1 	bhi.w	8001cb0 <main+0x4f8>
 800190e:	a201      	add	r2, pc, #4	; (adr r2, 8001914 <main+0x15c>)
 8001910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001914:	08001925 	.word	0x08001925
 8001918:	08001971 	.word	0x08001971
 800191c:	08001b01 	.word	0x08001b01
 8001920:	08001bb5 	.word	0x08001bb5
	  case 0://get speed command from remote controller
		  PID.Kp=1.2;
 8001924:	494f      	ldr	r1, [pc, #316]	; (8001a64 <main+0x2ac>)
 8001926:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800192a:	4b55      	ldr	r3, [pc, #340]	; (8001a80 <main+0x2c8>)
 800192c:	e9c1 2302 	strd	r2, r3, [r1, #8]
		  PID.Ki=0.8;
 8001930:	494c      	ldr	r1, [pc, #304]	; (8001a64 <main+0x2ac>)
 8001932:	a33f      	add	r3, pc, #252	; (adr r3, 8001a30 <main+0x278>)
 8001934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001938:	e9c1 2304 	strd	r2, r3, [r1, #16]
		  PID.Kd=0;
 800193c:	4949      	ldr	r1, [pc, #292]	; (8001a64 <main+0x2ac>)
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	f04f 0300 	mov.w	r3, #0
 8001946:	e9c1 2306 	strd	r2, r3, [r1, #24]
		  PID.target = 0 ;
 800194a:	4946      	ldr	r1, [pc, #280]	; (8001a64 <main+0x2ac>)
 800194c:	f04f 0200 	mov.w	r2, #0
 8001950:	f04f 0300 	mov.w	r3, #0
 8001954:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		  ProcessValue= TestEncoder.SpeedRPM;
 8001958:	4b41      	ldr	r3, [pc, #260]	; (8001a60 <main+0x2a8>)
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	4a49      	ldr	r2, [pc, #292]	; (8001a84 <main+0x2cc>)
 800195e:	6013      	str	r3, [r2, #0]
		  PID.ControlMode=Velocity;
 8001960:	4b40      	ldr	r3, [pc, #256]	; (8001a64 <main+0x2ac>)
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]
		  PreviousOperationMode=OperationMode;
 8001966:	4b45      	ldr	r3, [pc, #276]	; (8001a7c <main+0x2c4>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a47      	ldr	r2, [pc, #284]	; (8001a88 <main+0x2d0>)
 800196c:	6013      	str	r3, [r2, #0]
		  break;
 800196e:	e19f      	b.n	8001cb0 <main+0x4f8>
	  case 1: //Position control
		  if (PreviousOperationMode!=OperationMode){
 8001970:	4b45      	ldr	r3, [pc, #276]	; (8001a88 <main+0x2d0>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4b41      	ldr	r3, [pc, #260]	; (8001a7c <main+0x2c4>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	d026      	beq.n	80019ca <main+0x212>
			  PID.Kp=0.75;
 800197c:	4939      	ldr	r1, [pc, #228]	; (8001a64 <main+0x2ac>)
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	4b42      	ldr	r3, [pc, #264]	; (8001a8c <main+0x2d4>)
 8001984:	e9c1 2302 	strd	r2, r3, [r1, #8]
			  PID.Ki=0.08;
 8001988:	4936      	ldr	r1, [pc, #216]	; (8001a64 <main+0x2ac>)
 800198a:	a32b      	add	r3, pc, #172	; (adr r3, 8001a38 <main+0x280>)
 800198c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001990:	e9c1 2304 	strd	r2, r3, [r1, #16]
			  PID.Kd=0.16;
 8001994:	4933      	ldr	r1, [pc, #204]	; (8001a64 <main+0x2ac>)
 8001996:	a32a      	add	r3, pc, #168	; (adr r3, 8001a40 <main+0x288>)
 8001998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199c:	e9c1 2306 	strd	r2, r3, [r1, #24]
			  PID.output=0;
 80019a0:	4930      	ldr	r1, [pc, #192]	; (8001a64 <main+0x2ac>)
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	f04f 0300 	mov.w	r3, #0
 80019aa:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
			  PID.target=0;
 80019ae:	492d      	ldr	r1, [pc, #180]	; (8001a64 <main+0x2ac>)
 80019b0:	f04f 0200 	mov.w	r2, #0
 80019b4:	f04f 0300 	mov.w	r3, #0
 80019b8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
			  PID.integral=0;
 80019bc:	4929      	ldr	r1, [pc, #164]	; (8001a64 <main+0x2ac>)
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		  }

		  if (receivedSBUS.ch[2]>200 && receivedSBUS.ch[2]<1800){
 80019ca:	4b1f      	ldr	r3, [pc, #124]	; (8001a48 <main+0x290>)
 80019cc:	8bdb      	ldrh	r3, [r3, #30]
 80019ce:	2bc8      	cmp	r3, #200	; 0xc8
 80019d0:	d914      	bls.n	80019fc <main+0x244>
 80019d2:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <main+0x290>)
 80019d4:	8bdb      	ldrh	r3, [r3, #30]
 80019d6:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80019da:	d20f      	bcs.n	80019fc <main+0x244>
			  ModuloSetpoint = (receivedSBUS.ch[2]-200)*360/1600;
 80019dc:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <main+0x290>)
 80019de:	8bdb      	ldrh	r3, [r3, #30]
 80019e0:	3bc8      	subs	r3, #200	; 0xc8
 80019e2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80019e6:	fb02 f303 	mul.w	r3, r2, r3
 80019ea:	4a29      	ldr	r2, [pc, #164]	; (8001a90 <main+0x2d8>)
 80019ec:	fb82 1203 	smull	r1, r2, r2, r3
 80019f0:	1252      	asrs	r2, r2, #9
 80019f2:	17db      	asrs	r3, r3, #31
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	4a27      	ldr	r2, [pc, #156]	; (8001a94 <main+0x2dc>)
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	e056      	b.n	8001aaa <main+0x2f2>
		  }
		  else if(receivedSBUS.ch[2]<200){
 80019fc:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <main+0x290>)
 80019fe:	8bdb      	ldrh	r3, [r3, #30]
 8001a00:	2bc7      	cmp	r3, #199	; 0xc7
 8001a02:	d849      	bhi.n	8001a98 <main+0x2e0>
			  ModuloSetpoint=0;
 8001a04:	4b23      	ldr	r3, [pc, #140]	; (8001a94 <main+0x2dc>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	e04e      	b.n	8001aaa <main+0x2f2>
 8001a0c:	f3af 8000 	nop.w
 8001a10:	33333333 	.word	0x33333333
 8001a14:	3fe33333 	.word	0x3fe33333
 8001a18:	9999999a 	.word	0x9999999a
 8001a1c:	3fb99999 	.word	0x3fb99999
 8001a20:	00000000 	.word	0x00000000
 8001a24:	c07f4000 	.word	0xc07f4000
 8001a28:	00000000 	.word	0x00000000
 8001a2c:	40b38800 	.word	0x40b38800
 8001a30:	9999999a 	.word	0x9999999a
 8001a34:	3fe99999 	.word	0x3fe99999
 8001a38:	47ae147b 	.word	0x47ae147b
 8001a3c:	3fb47ae1 	.word	0x3fb47ae1
 8001a40:	47ae147b 	.word	0x47ae147b
 8001a44:	3fc47ae1 	.word	0x3fc47ae1
 8001a48:	200001f4 	.word	0x200001f4
 8001a4c:	200003d0 	.word	0x200003d0
 8001a50:	20000340 	.word	0x20000340
 8001a54:	20000388 	.word	0x20000388
 8001a58:	200002f8 	.word	0x200002f8
 8001a5c:	20000234 	.word	0x20000234
 8001a60:	20000238 	.word	0x20000238
 8001a64:	20000260 	.word	0x20000260
 8001a68:	40140000 	.word	0x40140000
 8001a6c:	40240000 	.word	0x40240000
 8001a70:	408f4000 	.word	0x408f4000
 8001a74:	407f4000 	.word	0x407f4000
 8001a78:	40020800 	.word	0x40020800
 8001a7c:	200002d8 	.word	0x200002d8
 8001a80:	3ff33333 	.word	0x3ff33333
 8001a84:	200002ec 	.word	0x200002ec
 8001a88:	200002dc 	.word	0x200002dc
 8001a8c:	3fe80000 	.word	0x3fe80000
 8001a90:	51eb851f 	.word	0x51eb851f
 8001a94:	200002f0 	.word	0x200002f0
		  }
		  else if(receivedSBUS.ch[2]>1800){
 8001a98:	4b69      	ldr	r3, [pc, #420]	; (8001c40 <main+0x488>)
 8001a9a:	8bdb      	ldrh	r3, [r3, #30]
 8001a9c:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001aa0:	d903      	bls.n	8001aaa <main+0x2f2>
			  ModuloSetpoint=360;
 8001aa2:	4b68      	ldr	r3, [pc, #416]	; (8001c44 <main+0x48c>)
 8001aa4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001aa8:	601a      	str	r2, [r3, #0]
		  }
		  PID.target = ModuloSetpoint *256/360;
 8001aaa:	4b66      	ldr	r3, [pc, #408]	; (8001c44 <main+0x48c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	021b      	lsls	r3, r3, #8
 8001ab0:	4a65      	ldr	r2, [pc, #404]	; (8001c48 <main+0x490>)
 8001ab2:	fb82 1203 	smull	r1, r2, r2, r3
 8001ab6:	441a      	add	r2, r3
 8001ab8:	1212      	asrs	r2, r2, #8
 8001aba:	17db      	asrs	r3, r3, #31
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7fe fd38 	bl	8000534 <__aeabi_i2d>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4960      	ldr	r1, [pc, #384]	; (8001c4c <main+0x494>)
 8001aca:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		  PID.ControlMode=Position;
 8001ace:	4b5f      	ldr	r3, [pc, #380]	; (8001c4c <main+0x494>)
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	701a      	strb	r2, [r3, #0]
		  ProcessValue= TestEncoder.GrayCode;
 8001ad4:	4b5e      	ldr	r3, [pc, #376]	; (8001c50 <main+0x498>)
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	4a5e      	ldr	r2, [pc, #376]	; (8001c54 <main+0x49c>)
 8001ada:	6013      	str	r3, [r2, #0]
		  ModuloFeedback= ProcessValue*360/256;
 8001adc:	4b5d      	ldr	r3, [pc, #372]	; (8001c54 <main+0x49c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001ae4:	fb02 f303 	mul.w	r3, r2, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	da00      	bge.n	8001aee <main+0x336>
 8001aec:	33ff      	adds	r3, #255	; 0xff
 8001aee:	121b      	asrs	r3, r3, #8
 8001af0:	461a      	mov	r2, r3
 8001af2:	4b59      	ldr	r3, [pc, #356]	; (8001c58 <main+0x4a0>)
 8001af4:	601a      	str	r2, [r3, #0]
		  PreviousOperationMode=OperationMode;
 8001af6:	4b59      	ldr	r3, [pc, #356]	; (8001c5c <main+0x4a4>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a59      	ldr	r2, [pc, #356]	; (8001c60 <main+0x4a8>)
 8001afc:	6013      	str	r3, [r2, #0]
		  break;
 8001afe:	e0d7      	b.n	8001cb0 <main+0x4f8>
	  case 2:
		  PID.Kp=1.2;
 8001b00:	4952      	ldr	r1, [pc, #328]	; (8001c4c <main+0x494>)
 8001b02:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001b06:	4b57      	ldr	r3, [pc, #348]	; (8001c64 <main+0x4ac>)
 8001b08:	e9c1 2302 	strd	r2, r3, [r1, #8]
		  PID.Ki=0.8;
 8001b0c:	494f      	ldr	r1, [pc, #316]	; (8001c4c <main+0x494>)
 8001b0e:	a348      	add	r3, pc, #288	; (adr r3, 8001c30 <main+0x478>)
 8001b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b14:	e9c1 2304 	strd	r2, r3, [r1, #16]
		  PID.Kd=0;
 8001b18:	494c      	ldr	r1, [pc, #304]	; (8001c4c <main+0x494>)
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	f04f 0300 	mov.w	r3, #0
 8001b22:	e9c1 2306 	strd	r2, r3, [r1, #24]
		  PID.ControlMode=Velocity;
 8001b26:	4b49      	ldr	r3, [pc, #292]	; (8001c4c <main+0x494>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	701a      	strb	r2, [r3, #0]
		  if (receivedSBUS.ch[1]>1000 && receivedSBUS.ch[1]<2000){
 8001b2c:	4b44      	ldr	r3, [pc, #272]	; (8001c40 <main+0x488>)
 8001b2e:	8b9b      	ldrh	r3, [r3, #28]
 8001b30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b34:	d912      	bls.n	8001b5c <main+0x3a4>
 8001b36:	4b42      	ldr	r3, [pc, #264]	; (8001c40 <main+0x488>)
 8001b38:	8b9b      	ldrh	r3, [r3, #28]
 8001b3a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b3e:	d20d      	bcs.n	8001b5c <main+0x3a4>
			  PID.target = 2* ( receivedSBUS.ch[1]-1000);
 8001b40:	4b3f      	ldr	r3, [pc, #252]	; (8001c40 <main+0x488>)
 8001b42:	8b9b      	ldrh	r3, [r3, #28]
 8001b44:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fcf2 	bl	8000534 <__aeabi_i2d>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	493d      	ldr	r1, [pc, #244]	; (8001c4c <main+0x494>)
 8001b56:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8001b5a:	e022      	b.n	8001ba2 <main+0x3ea>
		  }
		  else if (receivedSBUS.ch[1]>0 && receivedSBUS.ch[1]<990){
 8001b5c:	4b38      	ldr	r3, [pc, #224]	; (8001c40 <main+0x488>)
 8001b5e:	8b9b      	ldrh	r3, [r3, #28]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d017      	beq.n	8001b94 <main+0x3dc>
 8001b64:	4b36      	ldr	r3, [pc, #216]	; (8001c40 <main+0x488>)
 8001b66:	8b9b      	ldrh	r3, [r3, #28]
 8001b68:	f240 32dd 	movw	r2, #989	; 0x3dd
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d811      	bhi.n	8001b94 <main+0x3dc>
			  PID.target = -2* (990- receivedSBUS.ch[1]);
 8001b70:	4b33      	ldr	r3, [pc, #204]	; (8001c40 <main+0x488>)
 8001b72:	8b9b      	ldrh	r3, [r3, #28]
 8001b74:	f5c3 7277 	rsb	r2, r3, #988	; 0x3dc
 8001b78:	3202      	adds	r2, #2
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	07db      	lsls	r3, r3, #31
 8001b7e:	1a9b      	subs	r3, r3, r2
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fcd6 	bl	8000534 <__aeabi_i2d>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	492f      	ldr	r1, [pc, #188]	; (8001c4c <main+0x494>)
 8001b8e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8001b92:	e006      	b.n	8001ba2 <main+0x3ea>
		  }
		  else{
			  PID.target=0;
 8001b94:	492d      	ldr	r1, [pc, #180]	; (8001c4c <main+0x494>)
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		  }
		  ProcessValue= TestEncoder.SpeedRPM;
 8001ba2:	4b2b      	ldr	r3, [pc, #172]	; (8001c50 <main+0x498>)
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	4a2b      	ldr	r2, [pc, #172]	; (8001c54 <main+0x49c>)
 8001ba8:	6013      	str	r3, [r2, #0]
		  PreviousOperationMode=OperationMode;
 8001baa:	4b2c      	ldr	r3, [pc, #176]	; (8001c5c <main+0x4a4>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a2c      	ldr	r2, [pc, #176]	; (8001c60 <main+0x4a8>)
 8001bb0:	6013      	str	r3, [r2, #0]
		  break;
 8001bb2:	e07d      	b.n	8001cb0 <main+0x4f8>
	  case 3: // toggle speed automatically
		  if (PreviousOperationMode!=OperationMode){
 8001bb4:	4b2a      	ldr	r3, [pc, #168]	; (8001c60 <main+0x4a8>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b28      	ldr	r3, [pc, #160]	; (8001c5c <main+0x4a4>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d018      	beq.n	8001bf2 <main+0x43a>
			  PID.Kp=1.2;
 8001bc0:	4922      	ldr	r1, [pc, #136]	; (8001c4c <main+0x494>)
 8001bc2:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001bc6:	4b27      	ldr	r3, [pc, #156]	; (8001c64 <main+0x4ac>)
 8001bc8:	e9c1 2302 	strd	r2, r3, [r1, #8]
			  PID.Ki=0.8;
 8001bcc:	491f      	ldr	r1, [pc, #124]	; (8001c4c <main+0x494>)
 8001bce:	a318      	add	r3, pc, #96	; (adr r3, 8001c30 <main+0x478>)
 8001bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd4:	e9c1 2304 	strd	r2, r3, [r1, #16]
			  PID.Kd=0;
 8001bd8:	491c      	ldr	r1, [pc, #112]	; (8001c4c <main+0x494>)
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	f04f 0300 	mov.w	r3, #0
 8001be2:	e9c1 2306 	strd	r2, r3, [r1, #24]
			  PID.target=250;
 8001be6:	4919      	ldr	r1, [pc, #100]	; (8001c4c <main+0x494>)
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	4b1e      	ldr	r3, [pc, #120]	; (8001c68 <main+0x4b0>)
 8001bee:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		  }
		  PID.ControlMode=Velocity;
 8001bf2:	4b16      	ldr	r3, [pc, #88]	; (8001c4c <main+0x494>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]
		  if(HAL_GetTick()-speedUpdateTime>=10000){
 8001bf8:	f000 ff78 	bl	8002aec <HAL_GetTick>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	4a1b      	ldr	r2, [pc, #108]	; (8001c6c <main+0x4b4>)
 8001c00:	6812      	ldr	r2, [r2, #0]
 8001c02:	1a9b      	subs	r3, r3, r2
 8001c04:	f242 720f 	movw	r2, #9999	; 0x270f
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d948      	bls.n	8001c9e <main+0x4e6>
	 		  if(PID.target==-250) PID.target=250;
 8001c0c:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <main+0x494>)
 8001c0e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001c12:	a309      	add	r3, pc, #36	; (adr r3, 8001c38 <main+0x480>)
 8001c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c18:	f7fe ff5e 	bl	8000ad8 <__aeabi_dcmpeq>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d026      	beq.n	8001c70 <main+0x4b8>
 8001c22:	490a      	ldr	r1, [pc, #40]	; (8001c4c <main+0x494>)
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <main+0x4b0>)
 8001c2a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8001c2e:	e030      	b.n	8001c92 <main+0x4da>
 8001c30:	9999999a 	.word	0x9999999a
 8001c34:	3fe99999 	.word	0x3fe99999
 8001c38:	00000000 	.word	0x00000000
 8001c3c:	c06f4000 	.word	0xc06f4000
 8001c40:	200001f4 	.word	0x200001f4
 8001c44:	200002f0 	.word	0x200002f0
 8001c48:	b60b60b7 	.word	0xb60b60b7
 8001c4c:	20000260 	.word	0x20000260
 8001c50:	20000238 	.word	0x20000238
 8001c54:	200002ec 	.word	0x200002ec
 8001c58:	200002f4 	.word	0x200002f4
 8001c5c:	200002d8 	.word	0x200002d8
 8001c60:	200002dc 	.word	0x200002dc
 8001c64:	3ff33333 	.word	0x3ff33333
 8001c68:	406f4000 	.word	0x406f4000
 8001c6c:	200002d4 	.word	0x200002d4
	 		  else if (PID.target==250) PID.target=-250;
 8001c70:	4b83      	ldr	r3, [pc, #524]	; (8001e80 <main+0x6c8>)
 8001c72:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	4b82      	ldr	r3, [pc, #520]	; (8001e84 <main+0x6cc>)
 8001c7c:	f7fe ff2c 	bl	8000ad8 <__aeabi_dcmpeq>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d005      	beq.n	8001c92 <main+0x4da>
 8001c86:	497e      	ldr	r1, [pc, #504]	; (8001e80 <main+0x6c8>)
 8001c88:	a37b      	add	r3, pc, #492	; (adr r3, 8001e78 <main+0x6c0>)
 8001c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	 		  speedUpdateTime=HAL_GetTick();
 8001c92:	f000 ff2b 	bl	8002aec <HAL_GetTick>
 8001c96:	4603      	mov	r3, r0
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4b7b      	ldr	r3, [pc, #492]	; (8001e88 <main+0x6d0>)
 8001c9c:	601a      	str	r2, [r3, #0]

		  }
		  ProcessValue= TestEncoder.SpeedRPM;
 8001c9e:	4b7b      	ldr	r3, [pc, #492]	; (8001e8c <main+0x6d4>)
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	4a7b      	ldr	r2, [pc, #492]	; (8001e90 <main+0x6d8>)
 8001ca4:	6013      	str	r3, [r2, #0]
		  PreviousOperationMode=OperationMode;
 8001ca6:	4b7b      	ldr	r3, [pc, #492]	; (8001e94 <main+0x6dc>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a7b      	ldr	r2, [pc, #492]	; (8001e98 <main+0x6e0>)
 8001cac:	6013      	str	r3, [r2, #0]
		  break;
 8001cae:	bf00      	nop
	  }

	  //Calculate RPM
	  //with motor Voltage

	  Timer2Counter=__HAL_TIM_GET_COUNTER(&htim2);
 8001cb0:	4b7a      	ldr	r3, [pc, #488]	; (8001e9c <main+0x6e4>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb6:	4a7a      	ldr	r2, [pc, #488]	; (8001ea0 <main+0x6e8>)
 8001cb8:	6013      	str	r3, [r2, #0]
	  if (Timer2Counter>=1000000 || ADCReadingInProgress){//every 100 @ 100MHZ will be 1 micro-second so 1000000 will be 10ms
 8001cba:	4b79      	ldr	r3, [pc, #484]	; (8001ea0 <main+0x6e8>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a79      	ldr	r2, [pc, #484]	; (8001ea4 <main+0x6ec>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d803      	bhi.n	8001ccc <main+0x514>
 8001cc4:	4b78      	ldr	r3, [pc, #480]	; (8001ea8 <main+0x6f0>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d038      	beq.n	8001d3e <main+0x586>
		  if (ADCReadingInProgress==0){
 8001ccc:	4b76      	ldr	r3, [pc, #472]	; (8001ea8 <main+0x6f0>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d103      	bne.n	8001cdc <main+0x524>
			  __HAL_TIM_SET_COUNTER(&htim2,0);
 8001cd4:	4b71      	ldr	r3, [pc, #452]	; (8001e9c <main+0x6e4>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	625a      	str	r2, [r3, #36]	; 0x24
		  }
		  ADCReadingInProgress= __HAL_TIM_GET_COUNTER(&htim2);
 8001cdc:	4b6f      	ldr	r3, [pc, #444]	; (8001e9c <main+0x6e4>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	4b70      	ldr	r3, [pc, #448]	; (8001ea8 <main+0x6f0>)
 8001ce6:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(Motor_Enable_GPIO_Port, Motor_Enable_Pin, GPIO_PIN_RESET);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2102      	movs	r1, #2
 8001cec:	486f      	ldr	r0, [pc, #444]	; (8001eac <main+0x6f4>)
 8001cee:	f002 faaf 	bl	8004250 <HAL_GPIO_WritePin>
		  if (ADCReadingInProgress>=15000){//wait 150 usec before reading ADC
 8001cf2:	4b6d      	ldr	r3, [pc, #436]	; (8001ea8 <main+0x6f0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f643 2297 	movw	r2, #14999	; 0x3a97
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	dd1f      	ble.n	8001d3e <main+0x586>
			  int ADCStatus=10;
 8001cfe:	230a      	movs	r3, #10
 8001d00:	66fb      	str	r3, [r7, #108]	; 0x6c
			  ADCStatus=HAL_ADC_PollForConversion(&hadc1,1);
 8001d02:	2101      	movs	r1, #1
 8001d04:	486a      	ldr	r0, [pc, #424]	; (8001eb0 <main+0x6f8>)
 8001d06:	f000 fff5 	bl	8002cf4 <HAL_ADC_PollForConversion>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	66fb      	str	r3, [r7, #108]	; 0x6c
			  if(ADCStatus==0){
 8001d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d114      	bne.n	8001d3e <main+0x586>
				  MotorVoltageRaw=HAL_ADC_GetValue(&hadc1);
 8001d14:	4866      	ldr	r0, [pc, #408]	; (8001eb0 <main+0x6f8>)
 8001d16:	f001 f988 	bl	800302a <HAL_ADC_GetValue>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	4a65      	ldr	r2, [pc, #404]	; (8001eb4 <main+0x6fc>)
 8001d1e:	6013      	str	r3, [r2, #0]
				  HAL_ADC_Start(&hadc1);
 8001d20:	4863      	ldr	r0, [pc, #396]	; (8001eb0 <main+0x6f8>)
 8001d22:	f000 ff33 	bl	8002b8c <HAL_ADC_Start>
				  __HAL_TIM_SET_COUNTER(&htim2,0);
 8001d26:	4b5d      	ldr	r3, [pc, #372]	; (8001e9c <main+0x6e4>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	625a      	str	r2, [r3, #36]	; 0x24
				  HAL_GPIO_WritePin(Motor_Enable_GPIO_Port, Motor_Enable_Pin, GPIO_PIN_SET);
 8001d2e:	2201      	movs	r2, #1
 8001d30:	2102      	movs	r1, #2
 8001d32:	485e      	ldr	r0, [pc, #376]	; (8001eac <main+0x6f4>)
 8001d34:	f002 fa8c 	bl	8004250 <HAL_GPIO_WritePin>
				  ADCReadingInProgress=0;
 8001d38:	4b5b      	ldr	r3, [pc, #364]	; (8001ea8 <main+0x6f0>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
		  }


	  }
	  //with Encoder
	  if (HAL_GetTick()-SystemTime>=(PID.dt)){
 8001d3e:	f000 fed5 	bl	8002aec <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	4b5c      	ldr	r3, [pc, #368]	; (8001eb8 <main+0x700>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fbe2 	bl	8000514 <__aeabi_ui2d>
 8001d50:	4b4b      	ldr	r3, [pc, #300]	; (8001e80 <main+0x6c8>)
 8001d52:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001d56:	f7fe fedd 	bl	8000b14 <__aeabi_dcmpge>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d052      	beq.n	8001e06 <main+0x64e>
		  TestEncoder.SpeedRPM=(TestEncoder.EncoderValue-TestEncoder.PreviousEncoderValue)*(1000/PID.dt)*60/256;//1000/dt for converting to pulse per second - 60 for 1sec to 1min - 256 for pules/rev - for gray code to pulse
 8001d60:	4b4a      	ldr	r3, [pc, #296]	; (8001e8c <main+0x6d4>)
 8001d62:	699a      	ldr	r2, [r3, #24]
 8001d64:	4b49      	ldr	r3, [pc, #292]	; (8001e8c <main+0x6d4>)
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fbe2 	bl	8000534 <__aeabi_i2d>
 8001d70:	4604      	mov	r4, r0
 8001d72:	460d      	mov	r5, r1
 8001d74:	4b42      	ldr	r3, [pc, #264]	; (8001e80 <main+0x6c8>)
 8001d76:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001d7a:	f04f 0000 	mov.w	r0, #0
 8001d7e:	494f      	ldr	r1, [pc, #316]	; (8001ebc <main+0x704>)
 8001d80:	f7fe fd6c 	bl	800085c <__aeabi_ddiv>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4620      	mov	r0, r4
 8001d8a:	4629      	mov	r1, r5
 8001d8c:	f7fe fc3c 	bl	8000608 <__aeabi_dmul>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4610      	mov	r0, r2
 8001d96:	4619      	mov	r1, r3
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	4b48      	ldr	r3, [pc, #288]	; (8001ec0 <main+0x708>)
 8001d9e:	f7fe fc33 	bl	8000608 <__aeabi_dmul>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	4610      	mov	r0, r2
 8001da8:	4619      	mov	r1, r3
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	4b45      	ldr	r3, [pc, #276]	; (8001ec4 <main+0x70c>)
 8001db0:	f7fe fd54 	bl	800085c <__aeabi_ddiv>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4610      	mov	r0, r2
 8001dba:	4619      	mov	r1, r3
 8001dbc:	f7fe fed4 	bl	8000b68 <__aeabi_d2iz>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	4a32      	ldr	r2, [pc, #200]	; (8001e8c <main+0x6d4>)
 8001dc4:	6213      	str	r3, [r2, #32]
		  TestEncoder.PreviousEncoderValue=TestEncoder.EncoderValue;
 8001dc6:	4b31      	ldr	r3, [pc, #196]	; (8001e8c <main+0x6d4>)
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	4a30      	ldr	r2, [pc, #192]	; (8001e8c <main+0x6d4>)
 8001dcc:	61d3      	str	r3, [r2, #28]
		  SystemTime=HAL_GetTick();
 8001dce:	f000 fe8d 	bl	8002aec <HAL_GetTick>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	4a38      	ldr	r2, [pc, #224]	; (8001eb8 <main+0x700>)
 8001dd6:	6013      	str	r3, [r2, #0]
		  updatePID(&PID, ProcessValue);
 8001dd8:	4b2d      	ldr	r3, [pc, #180]	; (8001e90 <main+0x6d8>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7fe fba9 	bl	8000534 <__aeabi_i2d>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	ec43 2b10 	vmov	d0, r2, r3
 8001dea:	4825      	ldr	r0, [pc, #148]	; (8001e80 <main+0x6c8>)
 8001dec:	f7ff f882 	bl	8000ef4 <updatePID>
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,PID.output);
 8001df0:	4b23      	ldr	r3, [pc, #140]	; (8001e80 <main+0x6c8>)
 8001df2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001df6:	4934      	ldr	r1, [pc, #208]	; (8001ec8 <main+0x710>)
 8001df8:	680c      	ldr	r4, [r1, #0]
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f7fe fedb 	bl	8000bb8 <__aeabi_d2uiz>
 8001e02:	4603      	mov	r3, r0
 8001e04:	6363      	str	r3, [r4, #52]	; 0x34
	  }
	  if (HAL_GetTick()-messageUpdateTime>=50){
 8001e06:	f000 fe71 	bl	8002aec <HAL_GetTick>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	4a2f      	ldr	r2, [pc, #188]	; (8001ecc <main+0x714>)
 8001e0e:	6812      	ldr	r2, [r2, #0]
 8001e10:	1a9b      	subs	r3, r3, r2
 8001e12:	2b31      	cmp	r3, #49	; 0x31
 8001e14:	f67f ad55 	bls.w	80018c2 <main+0x10a>
		  char message[100];
		  int messagaLen=0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	66bb      	str	r3, [r7, #104]	; 0x68
		  messagaLen=sprintf(&message,"G1=%ld, G2=%f,G3=%d, G4=%d T1=%d ,\n",ProcessValue,PID.target,ModuloSetpoint,ModuloFeedback,messageUpdateTime);
 8001e1c:	4b1c      	ldr	r3, [pc, #112]	; (8001e90 <main+0x6d8>)
 8001e1e:	681e      	ldr	r6, [r3, #0]
 8001e20:	4b17      	ldr	r3, [pc, #92]	; (8001e80 <main+0x6c8>)
 8001e22:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001e26:	492a      	ldr	r1, [pc, #168]	; (8001ed0 <main+0x718>)
 8001e28:	6809      	ldr	r1, [r1, #0]
 8001e2a:	482a      	ldr	r0, [pc, #168]	; (8001ed4 <main+0x71c>)
 8001e2c:	6800      	ldr	r0, [r0, #0]
 8001e2e:	4c27      	ldr	r4, [pc, #156]	; (8001ecc <main+0x714>)
 8001e30:	6824      	ldr	r4, [r4, #0]
 8001e32:	1d3d      	adds	r5, r7, #4
 8001e34:	9404      	str	r4, [sp, #16]
 8001e36:	9003      	str	r0, [sp, #12]
 8001e38:	9102      	str	r1, [sp, #8]
 8001e3a:	e9cd 2300 	strd	r2, r3, [sp]
 8001e3e:	4632      	mov	r2, r6
 8001e40:	4925      	ldr	r1, [pc, #148]	; (8001ed8 <main+0x720>)
 8001e42:	4628      	mov	r0, r5
 8001e44:	f005 fc46 	bl	80076d4 <siprintf>
 8001e48:	66b8      	str	r0, [r7, #104]	; 0x68
		  if (uart2Free==1){
 8001e4a:	4b24      	ldr	r3, [pc, #144]	; (8001edc <main+0x724>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d109      	bne.n	8001e66 <main+0x6ae>
			  HAL_UART_Transmit_IT(&huart2, message, messagaLen);
 8001e52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	1d3b      	adds	r3, r7, #4
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4821      	ldr	r0, [pc, #132]	; (8001ee0 <main+0x728>)
 8001e5c:	f003 fe23 	bl	8005aa6 <HAL_UART_Transmit_IT>
			  uart2Free=0;
 8001e60:	4b1e      	ldr	r3, [pc, #120]	; (8001edc <main+0x724>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
		  }
		  messageUpdateTime=HAL_GetTick();
 8001e66:	f000 fe41 	bl	8002aec <HAL_GetTick>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <main+0x714>)
 8001e70:	601a      	str	r2, [r3, #0]
	  GetEncoderValue(&TestEncoder);
 8001e72:	e526      	b.n	80018c2 <main+0x10a>
 8001e74:	f3af 8000 	nop.w
 8001e78:	00000000 	.word	0x00000000
 8001e7c:	c06f4000 	.word	0xc06f4000
 8001e80:	20000260 	.word	0x20000260
 8001e84:	406f4000 	.word	0x406f4000
 8001e88:	200002d4 	.word	0x200002d4
 8001e8c:	20000238 	.word	0x20000238
 8001e90:	200002ec 	.word	0x200002ec
 8001e94:	200002d8 	.word	0x200002d8
 8001e98:	200002dc 	.word	0x200002dc
 8001e9c:	20000388 	.word	0x20000388
 8001ea0:	200002e0 	.word	0x200002e0
 8001ea4:	000f423f 	.word	0x000f423f
 8001ea8:	200002e4 	.word	0x200002e4
 8001eac:	40020800 	.word	0x40020800
 8001eb0:	200002f8 	.word	0x200002f8
 8001eb4:	200002e8 	.word	0x200002e8
 8001eb8:	20000234 	.word	0x20000234
 8001ebc:	408f4000 	.word	0x408f4000
 8001ec0:	404e0000 	.word	0x404e0000
 8001ec4:	40700000 	.word	0x40700000
 8001ec8:	20000340 	.word	0x20000340
 8001ecc:	200002d0 	.word	0x200002d0
 8001ed0:	200002f0 	.word	0x200002f0
 8001ed4:	200002f4 	.word	0x200002f4
 8001ed8:	080099a8 	.word	0x080099a8
 8001edc:	20000000 	.word	0x20000000
 8001ee0:	20000414 	.word	0x20000414

08001ee4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b094      	sub	sp, #80	; 0x50
 8001ee8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eea:	f107 0320 	add.w	r3, r7, #32
 8001eee:	2230      	movs	r2, #48	; 0x30
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f005 fc51 	bl	800779a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ef8:	f107 030c 	add.w	r3, r7, #12
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f08:	2300      	movs	r3, #0
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	4b27      	ldr	r3, [pc, #156]	; (8001fac <SystemClock_Config+0xc8>)
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	4a26      	ldr	r2, [pc, #152]	; (8001fac <SystemClock_Config+0xc8>)
 8001f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f16:	6413      	str	r3, [r2, #64]	; 0x40
 8001f18:	4b24      	ldr	r3, [pc, #144]	; (8001fac <SystemClock_Config+0xc8>)
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f24:	2300      	movs	r3, #0
 8001f26:	607b      	str	r3, [r7, #4]
 8001f28:	4b21      	ldr	r3, [pc, #132]	; (8001fb0 <SystemClock_Config+0xcc>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a20      	ldr	r2, [pc, #128]	; (8001fb0 <SystemClock_Config+0xcc>)
 8001f2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <SystemClock_Config+0xcc>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f3c:	607b      	str	r3, [r7, #4]
 8001f3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f40:	2302      	movs	r3, #2
 8001f42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f44:	2301      	movs	r3, #1
 8001f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f48:	2310      	movs	r3, #16
 8001f4a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f50:	2300      	movs	r3, #0
 8001f52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f54:	2308      	movs	r3, #8
 8001f56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001f58:	2364      	movs	r3, #100	; 0x64
 8001f5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f60:	2304      	movs	r3, #4
 8001f62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f64:	f107 0320 	add.w	r3, r7, #32
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f002 f98b 	bl	8004284 <HAL_RCC_OscConfig>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f74:	f000 fa68 	bl	8002448 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f78:	230f      	movs	r3, #15
 8001f7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001f8e:	f107 030c 	add.w	r3, r7, #12
 8001f92:	2103      	movs	r1, #3
 8001f94:	4618      	mov	r0, r3
 8001f96:	f002 fbed 	bl	8004774 <HAL_RCC_ClockConfig>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001fa0:	f000 fa52 	bl	8002448 <Error_Handler>
  }
}
 8001fa4:	bf00      	nop
 8001fa6:	3750      	adds	r7, #80	; 0x50
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40007000 	.word	0x40007000

08001fb4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001fba:	463b      	mov	r3, r7
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001fc6:	4b21      	ldr	r3, [pc, #132]	; (800204c <MX_ADC1_Init+0x98>)
 8001fc8:	4a21      	ldr	r2, [pc, #132]	; (8002050 <MX_ADC1_Init+0x9c>)
 8001fca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001fcc:	4b1f      	ldr	r3, [pc, #124]	; (800204c <MX_ADC1_Init+0x98>)
 8001fce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001fd2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001fd4:	4b1d      	ldr	r3, [pc, #116]	; (800204c <MX_ADC1_Init+0x98>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001fda:	4b1c      	ldr	r3, [pc, #112]	; (800204c <MX_ADC1_Init+0x98>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	; (800204c <MX_ADC1_Init+0x98>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fe6:	4b19      	ldr	r3, [pc, #100]	; (800204c <MX_ADC1_Init+0x98>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fee:	4b17      	ldr	r3, [pc, #92]	; (800204c <MX_ADC1_Init+0x98>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ff4:	4b15      	ldr	r3, [pc, #84]	; (800204c <MX_ADC1_Init+0x98>)
 8001ff6:	4a17      	ldr	r2, [pc, #92]	; (8002054 <MX_ADC1_Init+0xa0>)
 8001ff8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ffa:	4b14      	ldr	r3, [pc, #80]	; (800204c <MX_ADC1_Init+0x98>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002000:	4b12      	ldr	r3, [pc, #72]	; (800204c <MX_ADC1_Init+0x98>)
 8002002:	2201      	movs	r2, #1
 8002004:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002006:	4b11      	ldr	r3, [pc, #68]	; (800204c <MX_ADC1_Init+0x98>)
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800200e:	4b0f      	ldr	r3, [pc, #60]	; (800204c <MX_ADC1_Init+0x98>)
 8002010:	2201      	movs	r2, #1
 8002012:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002014:	480d      	ldr	r0, [pc, #52]	; (800204c <MX_ADC1_Init+0x98>)
 8002016:	f000 fd75 	bl	8002b04 <HAL_ADC_Init>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002020:	f000 fa12 	bl	8002448 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002024:	2301      	movs	r3, #1
 8002026:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002028:	2301      	movs	r3, #1
 800202a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800202c:	2300      	movs	r3, #0
 800202e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002030:	463b      	mov	r3, r7
 8002032:	4619      	mov	r1, r3
 8002034:	4805      	ldr	r0, [pc, #20]	; (800204c <MX_ADC1_Init+0x98>)
 8002036:	f001 f823 	bl	8003080 <HAL_ADC_ConfigChannel>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002040:	f000 fa02 	bl	8002448 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002044:	bf00      	nop
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	200002f8 	.word	0x200002f8
 8002050:	40012000 	.word	0x40012000
 8002054:	0f000001 	.word	0x0f000001

08002058 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b096      	sub	sp, #88	; 0x58
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800205e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]
 8002068:	609a      	str	r2, [r3, #8]
 800206a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800206c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	605a      	str	r2, [r3, #4]
 8002080:	609a      	str	r2, [r3, #8]
 8002082:	60da      	str	r2, [r3, #12]
 8002084:	611a      	str	r2, [r3, #16]
 8002086:	615a      	str	r2, [r3, #20]
 8002088:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800208a:	1d3b      	adds	r3, r7, #4
 800208c:	2220      	movs	r2, #32
 800208e:	2100      	movs	r1, #0
 8002090:	4618      	mov	r0, r3
 8002092:	f005 fb82 	bl	800779a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002096:	4b3e      	ldr	r3, [pc, #248]	; (8002190 <MX_TIM1_Init+0x138>)
 8002098:	4a3e      	ldr	r2, [pc, #248]	; (8002194 <MX_TIM1_Init+0x13c>)
 800209a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 800209c:	4b3c      	ldr	r3, [pc, #240]	; (8002190 <MX_TIM1_Init+0x138>)
 800209e:	2203      	movs	r2, #3
 80020a0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a2:	4b3b      	ldr	r3, [pc, #236]	; (8002190 <MX_TIM1_Init+0x138>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80020a8:	4b39      	ldr	r3, [pc, #228]	; (8002190 <MX_TIM1_Init+0x138>)
 80020aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b0:	4b37      	ldr	r3, [pc, #220]	; (8002190 <MX_TIM1_Init+0x138>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020b6:	4b36      	ldr	r3, [pc, #216]	; (8002190 <MX_TIM1_Init+0x138>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020bc:	4b34      	ldr	r3, [pc, #208]	; (8002190 <MX_TIM1_Init+0x138>)
 80020be:	2200      	movs	r2, #0
 80020c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020c2:	4833      	ldr	r0, [pc, #204]	; (8002190 <MX_TIM1_Init+0x138>)
 80020c4:	f002 fd76 	bl	8004bb4 <HAL_TIM_Base_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80020ce:	f000 f9bb 	bl	8002448 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020d6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020dc:	4619      	mov	r1, r3
 80020de:	482c      	ldr	r0, [pc, #176]	; (8002190 <MX_TIM1_Init+0x138>)
 80020e0:	f003 f840 	bl	8005164 <HAL_TIM_ConfigClockSource>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80020ea:	f000 f9ad 	bl	8002448 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80020ee:	4828      	ldr	r0, [pc, #160]	; (8002190 <MX_TIM1_Init+0x138>)
 80020f0:	f002 fe6c 	bl	8004dcc <HAL_TIM_PWM_Init>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80020fa:	f000 f9a5 	bl	8002448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020fe:	2300      	movs	r3, #0
 8002100:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002102:	2300      	movs	r3, #0
 8002104:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002106:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800210a:	4619      	mov	r1, r3
 800210c:	4820      	ldr	r0, [pc, #128]	; (8002190 <MX_TIM1_Init+0x138>)
 800210e:	f003 fbbd 	bl	800588c <HAL_TIMEx_MasterConfigSynchronization>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002118:	f000 f996 	bl	8002448 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800211c:	2360      	movs	r3, #96	; 0x60
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002120:	2300      	movs	r3, #0
 8002122:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002124:	2300      	movs	r3, #0
 8002126:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002128:	2300      	movs	r3, #0
 800212a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800212c:	2304      	movs	r3, #4
 800212e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002130:	2300      	movs	r3, #0
 8002132:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002134:	2300      	movs	r3, #0
 8002136:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800213c:	2200      	movs	r2, #0
 800213e:	4619      	mov	r1, r3
 8002140:	4813      	ldr	r0, [pc, #76]	; (8002190 <MX_TIM1_Init+0x138>)
 8002142:	f002 ff4d 	bl	8004fe0 <HAL_TIM_PWM_ConfigChannel>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800214c:	f000 f97c 	bl	8002448 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002150:	2300      	movs	r3, #0
 8002152:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002154:	2300      	movs	r3, #0
 8002156:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002158:	2300      	movs	r3, #0
 800215a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800215c:	2300      	movs	r3, #0
 800215e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002164:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002168:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800216a:	2300      	movs	r3, #0
 800216c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800216e:	1d3b      	adds	r3, r7, #4
 8002170:	4619      	mov	r1, r3
 8002172:	4807      	ldr	r0, [pc, #28]	; (8002190 <MX_TIM1_Init+0x138>)
 8002174:	f003 fbf8 	bl	8005968 <HAL_TIMEx_ConfigBreakDeadTime>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800217e:	f000 f963 	bl	8002448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002182:	4803      	ldr	r0, [pc, #12]	; (8002190 <MX_TIM1_Init+0x138>)
 8002184:	f000 fa10 	bl	80025a8 <HAL_TIM_MspPostInit>

}
 8002188:	bf00      	nop
 800218a:	3758      	adds	r7, #88	; 0x58
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20000340 	.word	0x20000340
 8002194:	40010000 	.word	0x40010000

08002198 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800219e:	f107 0308 	add.w	r3, r7, #8
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	605a      	str	r2, [r3, #4]
 80021a8:	609a      	str	r2, [r3, #8]
 80021aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ac:	463b      	mov	r3, r7
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021b4:	4b1d      	ldr	r3, [pc, #116]	; (800222c <MX_TIM2_Init+0x94>)
 80021b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80021bc:	4b1b      	ldr	r3, [pc, #108]	; (800222c <MX_TIM2_Init+0x94>)
 80021be:	2200      	movs	r2, #0
 80021c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c2:	4b1a      	ldr	r3, [pc, #104]	; (800222c <MX_TIM2_Init+0x94>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80021c8:	4b18      	ldr	r3, [pc, #96]	; (800222c <MX_TIM2_Init+0x94>)
 80021ca:	f04f 32ff 	mov.w	r2, #4294967295
 80021ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021d0:	4b16      	ldr	r3, [pc, #88]	; (800222c <MX_TIM2_Init+0x94>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021d6:	4b15      	ldr	r3, [pc, #84]	; (800222c <MX_TIM2_Init+0x94>)
 80021d8:	2200      	movs	r2, #0
 80021da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021dc:	4813      	ldr	r0, [pc, #76]	; (800222c <MX_TIM2_Init+0x94>)
 80021de:	f002 fce9 	bl	8004bb4 <HAL_TIM_Base_Init>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80021e8:	f000 f92e 	bl	8002448 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021f2:	f107 0308 	add.w	r3, r7, #8
 80021f6:	4619      	mov	r1, r3
 80021f8:	480c      	ldr	r0, [pc, #48]	; (800222c <MX_TIM2_Init+0x94>)
 80021fa:	f002 ffb3 	bl	8005164 <HAL_TIM_ConfigClockSource>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002204:	f000 f920 	bl	8002448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002208:	2300      	movs	r3, #0
 800220a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800220c:	2300      	movs	r3, #0
 800220e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002210:	463b      	mov	r3, r7
 8002212:	4619      	mov	r1, r3
 8002214:	4805      	ldr	r0, [pc, #20]	; (800222c <MX_TIM2_Init+0x94>)
 8002216:	f003 fb39 	bl	800588c <HAL_TIMEx_MasterConfigSynchronization>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002220:	f000 f912 	bl	8002448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002224:	bf00      	nop
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20000388 	.word	0x20000388

08002230 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002234:	4b11      	ldr	r3, [pc, #68]	; (800227c <MX_USART1_UART_Init+0x4c>)
 8002236:	4a12      	ldr	r2, [pc, #72]	; (8002280 <MX_USART1_UART_Init+0x50>)
 8002238:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <MX_USART1_UART_Init+0x4c>)
 800223c:	4a11      	ldr	r2, [pc, #68]	; (8002284 <MX_USART1_UART_Init+0x54>)
 800223e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002240:	4b0e      	ldr	r3, [pc, #56]	; (800227c <MX_USART1_UART_Init+0x4c>)
 8002242:	2200      	movs	r2, #0
 8002244:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8002246:	4b0d      	ldr	r3, [pc, #52]	; (800227c <MX_USART1_UART_Init+0x4c>)
 8002248:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800224c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 800224e:	4b0b      	ldr	r3, [pc, #44]	; (800227c <MX_USART1_UART_Init+0x4c>)
 8002250:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002254:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8002256:	4b09      	ldr	r3, [pc, #36]	; (800227c <MX_USART1_UART_Init+0x4c>)
 8002258:	2204      	movs	r2, #4
 800225a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800225c:	4b07      	ldr	r3, [pc, #28]	; (800227c <MX_USART1_UART_Init+0x4c>)
 800225e:	2200      	movs	r2, #0
 8002260:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <MX_USART1_UART_Init+0x4c>)
 8002264:	2200      	movs	r2, #0
 8002266:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002268:	4804      	ldr	r0, [pc, #16]	; (800227c <MX_USART1_UART_Init+0x4c>)
 800226a:	f003 fbcf 	bl	8005a0c <HAL_UART_Init>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8002274:	f000 f8e8 	bl	8002448 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}
 800227c:	200003d0 	.word	0x200003d0
 8002280:	40011000 	.word	0x40011000
 8002284:	000186a0 	.word	0x000186a0

08002288 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800228c:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <MX_USART2_UART_Init+0x4c>)
 800228e:	4a12      	ldr	r2, [pc, #72]	; (80022d8 <MX_USART2_UART_Init+0x50>)
 8002290:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002292:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <MX_USART2_UART_Init+0x4c>)
 8002294:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002298:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800229a:	4b0e      	ldr	r3, [pc, #56]	; (80022d4 <MX_USART2_UART_Init+0x4c>)
 800229c:	2200      	movs	r2, #0
 800229e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022a0:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <MX_USART2_UART_Init+0x4c>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022a6:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <MX_USART2_UART_Init+0x4c>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022ac:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <MX_USART2_UART_Init+0x4c>)
 80022ae:	220c      	movs	r2, #12
 80022b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022b2:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <MX_USART2_UART_Init+0x4c>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <MX_USART2_UART_Init+0x4c>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022be:	4805      	ldr	r0, [pc, #20]	; (80022d4 <MX_USART2_UART_Init+0x4c>)
 80022c0:	f003 fba4 	bl	8005a0c <HAL_UART_Init>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80022ca:	f000 f8bd 	bl	8002448 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000414 	.word	0x20000414
 80022d8:	40004400 	.word	0x40004400

080022dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	607b      	str	r3, [r7, #4]
 80022e6:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <MX_DMA_Init+0x3c>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	4a0b      	ldr	r2, [pc, #44]	; (8002318 <MX_DMA_Init+0x3c>)
 80022ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022f0:	6313      	str	r3, [r2, #48]	; 0x30
 80022f2:	4b09      	ldr	r3, [pc, #36]	; (8002318 <MX_DMA_Init+0x3c>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022fa:	607b      	str	r3, [r7, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80022fe:	2200      	movs	r2, #0
 8002300:	2100      	movs	r1, #0
 8002302:	203a      	movs	r0, #58	; 0x3a
 8002304:	f001 f9cf 	bl	80036a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002308:	203a      	movs	r0, #58	; 0x3a
 800230a:	f001 f9e8 	bl	80036de <HAL_NVIC_EnableIRQ>

}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40023800 	.word	0x40023800

0800231c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08a      	sub	sp, #40	; 0x28
 8002320:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002322:	f107 0314 	add.w	r3, r7, #20
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	605a      	str	r2, [r3, #4]
 800232c:	609a      	str	r2, [r3, #8]
 800232e:	60da      	str	r2, [r3, #12]
 8002330:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	4b40      	ldr	r3, [pc, #256]	; (8002438 <MX_GPIO_Init+0x11c>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	4a3f      	ldr	r2, [pc, #252]	; (8002438 <MX_GPIO_Init+0x11c>)
 800233c:	f043 0304 	orr.w	r3, r3, #4
 8002340:	6313      	str	r3, [r2, #48]	; 0x30
 8002342:	4b3d      	ldr	r3, [pc, #244]	; (8002438 <MX_GPIO_Init+0x11c>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	4b39      	ldr	r3, [pc, #228]	; (8002438 <MX_GPIO_Init+0x11c>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	4a38      	ldr	r2, [pc, #224]	; (8002438 <MX_GPIO_Init+0x11c>)
 8002358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800235c:	6313      	str	r3, [r2, #48]	; 0x30
 800235e:	4b36      	ldr	r3, [pc, #216]	; (8002438 <MX_GPIO_Init+0x11c>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	4b32      	ldr	r3, [pc, #200]	; (8002438 <MX_GPIO_Init+0x11c>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	4a31      	ldr	r2, [pc, #196]	; (8002438 <MX_GPIO_Init+0x11c>)
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	6313      	str	r3, [r2, #48]	; 0x30
 800237a:	4b2f      	ldr	r3, [pc, #188]	; (8002438 <MX_GPIO_Init+0x11c>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	60bb      	str	r3, [r7, #8]
 8002384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	607b      	str	r3, [r7, #4]
 800238a:	4b2b      	ldr	r3, [pc, #172]	; (8002438 <MX_GPIO_Init+0x11c>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	4a2a      	ldr	r2, [pc, #168]	; (8002438 <MX_GPIO_Init+0x11c>)
 8002390:	f043 0302 	orr.w	r3, r3, #2
 8002394:	6313      	str	r3, [r2, #48]	; 0x30
 8002396:	4b28      	ldr	r3, [pc, #160]	; (8002438 <MX_GPIO_Init+0x11c>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	607b      	str	r3, [r7, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor_Enable_GPIO_Port, Motor_Enable_Pin, GPIO_PIN_RESET);
 80023a2:	2200      	movs	r2, #0
 80023a4:	2102      	movs	r1, #2
 80023a6:	4825      	ldr	r0, [pc, #148]	; (800243c <MX_GPIO_Init+0x120>)
 80023a8:	f001 ff52 	bl	8004250 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin Encoder_6_Pin */
  GPIO_InitStruct.Pin = B1_Pin|Encoder_6_Pin;
 80023ac:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 80023b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023ba:	f107 0314 	add.w	r3, r7, #20
 80023be:	4619      	mov	r1, r3
 80023c0:	481e      	ldr	r0, [pc, #120]	; (800243c <MX_GPIO_Init+0x120>)
 80023c2:	f001 fda9 	bl	8003f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_Enable_Pin */
  GPIO_InitStruct.Pin = Motor_Enable_Pin;
 80023c6:	2302      	movs	r3, #2
 80023c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ca:	2301      	movs	r3, #1
 80023cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d2:	2300      	movs	r3, #0
 80023d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Motor_Enable_GPIO_Port, &GPIO_InitStruct);
 80023d6:	f107 0314 	add.w	r3, r7, #20
 80023da:	4619      	mov	r1, r3
 80023dc:	4817      	ldr	r0, [pc, #92]	; (800243c <MX_GPIO_Init+0x120>)
 80023de:	f001 fd9b 	bl	8003f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : Encoder_2_Pin Encoder_3_Pin Encoder_4_Pin */
  GPIO_InitStruct.Pin = Encoder_2_Pin|Encoder_3_Pin|Encoder_4_Pin;
 80023e2:	23e0      	movs	r3, #224	; 0xe0
 80023e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023e6:	2300      	movs	r3, #0
 80023e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ee:	f107 0314 	add.w	r3, r7, #20
 80023f2:	4619      	mov	r1, r3
 80023f4:	4812      	ldr	r0, [pc, #72]	; (8002440 <MX_GPIO_Init+0x124>)
 80023f6:	f001 fd8f 	bl	8003f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : Encoder_7_Pin Encoder_5_Pin Encoder_1_Pin */
  GPIO_InitStruct.Pin = Encoder_7_Pin|Encoder_5_Pin|Encoder_1_Pin;
 80023fa:	f44f 7314 	mov.w	r3, #592	; 0x250
 80023fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002400:	2300      	movs	r3, #0
 8002402:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002408:	f107 0314 	add.w	r3, r7, #20
 800240c:	4619      	mov	r1, r3
 800240e:	480d      	ldr	r0, [pc, #52]	; (8002444 <MX_GPIO_Init+0x128>)
 8002410:	f001 fd82 	bl	8003f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder_0_Pin */
  GPIO_InitStruct.Pin = Encoder_0_Pin;
 8002414:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800241a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800241e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Encoder_0_GPIO_Port, &GPIO_InitStruct);
 8002424:	f107 0314 	add.w	r3, r7, #20
 8002428:	4619      	mov	r1, r3
 800242a:	4806      	ldr	r0, [pc, #24]	; (8002444 <MX_GPIO_Init+0x128>)
 800242c:	f001 fd74 	bl	8003f18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002430:	bf00      	nop
 8002432:	3728      	adds	r7, #40	; 0x28
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40023800 	.word	0x40023800
 800243c:	40020800 	.word	0x40020800
 8002440:	40020000 	.word	0x40020000
 8002444:	40020400 	.word	0x40020400

08002448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800244c:	b672      	cpsid	i
}
 800244e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002450:	e7fe      	b.n	8002450 <Error_Handler+0x8>
	...

08002454 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	607b      	str	r3, [r7, #4]
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <HAL_MspInit+0x4c>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	4a0f      	ldr	r2, [pc, #60]	; (80024a0 <HAL_MspInit+0x4c>)
 8002464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002468:	6453      	str	r3, [r2, #68]	; 0x44
 800246a:	4b0d      	ldr	r3, [pc, #52]	; (80024a0 <HAL_MspInit+0x4c>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002472:	607b      	str	r3, [r7, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	603b      	str	r3, [r7, #0]
 800247a:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <HAL_MspInit+0x4c>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	4a08      	ldr	r2, [pc, #32]	; (80024a0 <HAL_MspInit+0x4c>)
 8002480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002484:	6413      	str	r3, [r2, #64]	; 0x40
 8002486:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <HAL_MspInit+0x4c>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248e:	603b      	str	r3, [r7, #0]
 8002490:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002492:	2007      	movs	r0, #7
 8002494:	f001 f8fc 	bl	8003690 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002498:	bf00      	nop
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40023800 	.word	0x40023800

080024a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08a      	sub	sp, #40	; 0x28
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ac:	f107 0314 	add.w	r3, r7, #20
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a1b      	ldr	r2, [pc, #108]	; (8002530 <HAL_ADC_MspInit+0x8c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d12f      	bne.n	8002526 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	613b      	str	r3, [r7, #16]
 80024ca:	4b1a      	ldr	r3, [pc, #104]	; (8002534 <HAL_ADC_MspInit+0x90>)
 80024cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ce:	4a19      	ldr	r2, [pc, #100]	; (8002534 <HAL_ADC_MspInit+0x90>)
 80024d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d4:	6453      	str	r3, [r2, #68]	; 0x44
 80024d6:	4b17      	ldr	r3, [pc, #92]	; (8002534 <HAL_ADC_MspInit+0x90>)
 80024d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024de:	613b      	str	r3, [r7, #16]
 80024e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	4b13      	ldr	r3, [pc, #76]	; (8002534 <HAL_ADC_MspInit+0x90>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	4a12      	ldr	r2, [pc, #72]	; (8002534 <HAL_ADC_MspInit+0x90>)
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	6313      	str	r3, [r2, #48]	; 0x30
 80024f2:	4b10      	ldr	r3, [pc, #64]	; (8002534 <HAL_ADC_MspInit+0x90>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Motor_Voltage_Pin;
 80024fe:	2302      	movs	r3, #2
 8002500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002502:	2303      	movs	r3, #3
 8002504:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002506:	2300      	movs	r3, #0
 8002508:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Motor_Voltage_GPIO_Port, &GPIO_InitStruct);
 800250a:	f107 0314 	add.w	r3, r7, #20
 800250e:	4619      	mov	r1, r3
 8002510:	4809      	ldr	r0, [pc, #36]	; (8002538 <HAL_ADC_MspInit+0x94>)
 8002512:	f001 fd01 	bl	8003f18 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002516:	2200      	movs	r2, #0
 8002518:	2100      	movs	r1, #0
 800251a:	2012      	movs	r0, #18
 800251c:	f001 f8c3 	bl	80036a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002520:	2012      	movs	r0, #18
 8002522:	f001 f8dc 	bl	80036de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002526:	bf00      	nop
 8002528:	3728      	adds	r7, #40	; 0x28
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40012000 	.word	0x40012000
 8002534:	40023800 	.word	0x40023800
 8002538:	40020000 	.word	0x40020000

0800253c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a15      	ldr	r2, [pc, #84]	; (80025a0 <HAL_TIM_Base_MspInit+0x64>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d10e      	bne.n	800256c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <HAL_TIM_Base_MspInit+0x68>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	4a13      	ldr	r2, [pc, #76]	; (80025a4 <HAL_TIM_Base_MspInit+0x68>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	6453      	str	r3, [r2, #68]	; 0x44
 800255e:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <HAL_TIM_Base_MspInit+0x68>)
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800256a:	e012      	b.n	8002592 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002574:	d10d      	bne.n	8002592 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <HAL_TIM_Base_MspInit+0x68>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	4a09      	ldr	r2, [pc, #36]	; (80025a4 <HAL_TIM_Base_MspInit+0x68>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	6413      	str	r3, [r2, #64]	; 0x40
 8002586:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <HAL_TIM_Base_MspInit+0x68>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	60bb      	str	r3, [r7, #8]
 8002590:	68bb      	ldr	r3, [r7, #8]
}
 8002592:	bf00      	nop
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	40010000 	.word	0x40010000
 80025a4:	40023800 	.word	0x40023800

080025a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b0:	f107 030c 	add.w	r3, r7, #12
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	60da      	str	r2, [r3, #12]
 80025be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a12      	ldr	r2, [pc, #72]	; (8002610 <HAL_TIM_MspPostInit+0x68>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d11e      	bne.n	8002608 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	60bb      	str	r3, [r7, #8]
 80025ce:	4b11      	ldr	r3, [pc, #68]	; (8002614 <HAL_TIM_MspPostInit+0x6c>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	4a10      	ldr	r2, [pc, #64]	; (8002614 <HAL_TIM_MspPostInit+0x6c>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	6313      	str	r3, [r2, #48]	; 0x30
 80025da:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <HAL_TIM_MspPostInit+0x6c>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	60bb      	str	r3, [r7, #8]
 80025e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80025e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ec:	2302      	movs	r3, #2
 80025ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f4:	2300      	movs	r3, #0
 80025f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80025f8:	2301      	movs	r3, #1
 80025fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025fc:	f107 030c 	add.w	r3, r7, #12
 8002600:	4619      	mov	r1, r3
 8002602:	4805      	ldr	r0, [pc, #20]	; (8002618 <HAL_TIM_MspPostInit+0x70>)
 8002604:	f001 fc88 	bl	8003f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002608:	bf00      	nop
 800260a:	3720      	adds	r7, #32
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40010000 	.word	0x40010000
 8002614:	40023800 	.word	0x40023800
 8002618:	40020000 	.word	0x40020000

0800261c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b08c      	sub	sp, #48	; 0x30
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002624:	f107 031c 	add.w	r3, r7, #28
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	60da      	str	r2, [r3, #12]
 8002632:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a4e      	ldr	r2, [pc, #312]	; (8002774 <HAL_UART_MspInit+0x158>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d15c      	bne.n	80026f8 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	61bb      	str	r3, [r7, #24]
 8002642:	4b4d      	ldr	r3, [pc, #308]	; (8002778 <HAL_UART_MspInit+0x15c>)
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002646:	4a4c      	ldr	r2, [pc, #304]	; (8002778 <HAL_UART_MspInit+0x15c>)
 8002648:	f043 0310 	orr.w	r3, r3, #16
 800264c:	6453      	str	r3, [r2, #68]	; 0x44
 800264e:	4b4a      	ldr	r3, [pc, #296]	; (8002778 <HAL_UART_MspInit+0x15c>)
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	f003 0310 	and.w	r3, r3, #16
 8002656:	61bb      	str	r3, [r7, #24]
 8002658:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
 800265e:	4b46      	ldr	r3, [pc, #280]	; (8002778 <HAL_UART_MspInit+0x15c>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	4a45      	ldr	r2, [pc, #276]	; (8002778 <HAL_UART_MspInit+0x15c>)
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	6313      	str	r3, [r2, #48]	; 0x30
 800266a:	4b43      	ldr	r3, [pc, #268]	; (8002778 <HAL_UART_MspInit+0x15c>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	617b      	str	r3, [r7, #20]
 8002674:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002676:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800267a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267c:	2302      	movs	r3, #2
 800267e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	2300      	movs	r3, #0
 8002682:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002684:	2303      	movs	r3, #3
 8002686:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002688:	2307      	movs	r3, #7
 800268a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268c:	f107 031c 	add.w	r3, r7, #28
 8002690:	4619      	mov	r1, r3
 8002692:	483a      	ldr	r0, [pc, #232]	; (800277c <HAL_UART_MspInit+0x160>)
 8002694:	f001 fc40 	bl	8003f18 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002698:	4b39      	ldr	r3, [pc, #228]	; (8002780 <HAL_UART_MspInit+0x164>)
 800269a:	4a3a      	ldr	r2, [pc, #232]	; (8002784 <HAL_UART_MspInit+0x168>)
 800269c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800269e:	4b38      	ldr	r3, [pc, #224]	; (8002780 <HAL_UART_MspInit+0x164>)
 80026a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026a4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026a6:	4b36      	ldr	r3, [pc, #216]	; (8002780 <HAL_UART_MspInit+0x164>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ac:	4b34      	ldr	r3, [pc, #208]	; (8002780 <HAL_UART_MspInit+0x164>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026b2:	4b33      	ldr	r3, [pc, #204]	; (8002780 <HAL_UART_MspInit+0x164>)
 80026b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026b8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026ba:	4b31      	ldr	r3, [pc, #196]	; (8002780 <HAL_UART_MspInit+0x164>)
 80026bc:	2200      	movs	r2, #0
 80026be:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026c0:	4b2f      	ldr	r3, [pc, #188]	; (8002780 <HAL_UART_MspInit+0x164>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80026c6:	4b2e      	ldr	r3, [pc, #184]	; (8002780 <HAL_UART_MspInit+0x164>)
 80026c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026cc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026ce:	4b2c      	ldr	r3, [pc, #176]	; (8002780 <HAL_UART_MspInit+0x164>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026d4:	4b2a      	ldr	r3, [pc, #168]	; (8002780 <HAL_UART_MspInit+0x164>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80026da:	4829      	ldr	r0, [pc, #164]	; (8002780 <HAL_UART_MspInit+0x164>)
 80026dc:	f001 f81a 	bl	8003714 <HAL_DMA_Init>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80026e6:	f7ff feaf 	bl	8002448 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a24      	ldr	r2, [pc, #144]	; (8002780 <HAL_UART_MspInit+0x164>)
 80026ee:	639a      	str	r2, [r3, #56]	; 0x38
 80026f0:	4a23      	ldr	r2, [pc, #140]	; (8002780 <HAL_UART_MspInit+0x164>)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026f6:	e038      	b.n	800276a <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a22      	ldr	r2, [pc, #136]	; (8002788 <HAL_UART_MspInit+0x16c>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d133      	bne.n	800276a <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	613b      	str	r3, [r7, #16]
 8002706:	4b1c      	ldr	r3, [pc, #112]	; (8002778 <HAL_UART_MspInit+0x15c>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	4a1b      	ldr	r2, [pc, #108]	; (8002778 <HAL_UART_MspInit+0x15c>)
 800270c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002710:	6413      	str	r3, [r2, #64]	; 0x40
 8002712:	4b19      	ldr	r3, [pc, #100]	; (8002778 <HAL_UART_MspInit+0x15c>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271a:	613b      	str	r3, [r7, #16]
 800271c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	4b15      	ldr	r3, [pc, #84]	; (8002778 <HAL_UART_MspInit+0x15c>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	4a14      	ldr	r2, [pc, #80]	; (8002778 <HAL_UART_MspInit+0x15c>)
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	6313      	str	r3, [r2, #48]	; 0x30
 800272e:	4b12      	ldr	r3, [pc, #72]	; (8002778 <HAL_UART_MspInit+0x15c>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800273a:	230c      	movs	r3, #12
 800273c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273e:	2302      	movs	r3, #2
 8002740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002746:	2303      	movs	r3, #3
 8002748:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800274a:	2307      	movs	r3, #7
 800274c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274e:	f107 031c 	add.w	r3, r7, #28
 8002752:	4619      	mov	r1, r3
 8002754:	4809      	ldr	r0, [pc, #36]	; (800277c <HAL_UART_MspInit+0x160>)
 8002756:	f001 fbdf 	bl	8003f18 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800275a:	2200      	movs	r2, #0
 800275c:	2100      	movs	r1, #0
 800275e:	2026      	movs	r0, #38	; 0x26
 8002760:	f000 ffa1 	bl	80036a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002764:	2026      	movs	r0, #38	; 0x26
 8002766:	f000 ffba 	bl	80036de <HAL_NVIC_EnableIRQ>
}
 800276a:	bf00      	nop
 800276c:	3730      	adds	r7, #48	; 0x30
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40011000 	.word	0x40011000
 8002778:	40023800 	.word	0x40023800
 800277c:	40020000 	.word	0x40020000
 8002780:	20000458 	.word	0x20000458
 8002784:	40026440 	.word	0x40026440
 8002788:	40004400 	.word	0x40004400

0800278c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002790:	e7fe      	b.n	8002790 <NMI_Handler+0x4>

08002792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002792:	b480      	push	{r7}
 8002794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002796:	e7fe      	b.n	8002796 <HardFault_Handler+0x4>

08002798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800279c:	e7fe      	b.n	800279c <MemManage_Handler+0x4>

0800279e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800279e:	b480      	push	{r7}
 80027a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027a2:	e7fe      	b.n	80027a2 <BusFault_Handler+0x4>

080027a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027a8:	e7fe      	b.n	80027a8 <UsageFault_Handler+0x4>

080027aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027aa:	b480      	push	{r7}
 80027ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027bc:	bf00      	nop
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027c6:	b480      	push	{r7}
 80027c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027ca:	bf00      	nop
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027d8:	f000 f974 	bl	8002ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027dc:	bf00      	nop
 80027de:	bd80      	pop	{r7, pc}

080027e0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80027e4:	4802      	ldr	r0, [pc, #8]	; (80027f0 <ADC_IRQHandler+0x10>)
 80027e6:	f000 fb10 	bl	8002e0a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	200002f8 	.word	0x200002f8

080027f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80027f8:	4802      	ldr	r0, [pc, #8]	; (8002804 <USART2_IRQHandler+0x10>)
 80027fa:	f003 f9c9 	bl	8005b90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	20000414 	.word	0x20000414

08002808 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800280c:	4802      	ldr	r0, [pc, #8]	; (8002818 <DMA2_Stream2_IRQHandler+0x10>)
 800280e:	f001 f919 	bl	8003a44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20000458 	.word	0x20000458

0800281c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  return 1;
 8002820:	2301      	movs	r3, #1
}
 8002822:	4618      	mov	r0, r3
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <_kill>:

int _kill(int pid, int sig)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002836:	f005 f803 	bl	8007840 <__errno>
 800283a:	4603      	mov	r3, r0
 800283c:	2216      	movs	r2, #22
 800283e:	601a      	str	r2, [r3, #0]
  return -1;
 8002840:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002844:	4618      	mov	r0, r3
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <_exit>:

void _exit (int status)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002854:	f04f 31ff 	mov.w	r1, #4294967295
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f7ff ffe7 	bl	800282c <_kill>
  while (1) {}    /* Make sure we hang here */
 800285e:	e7fe      	b.n	800285e <_exit+0x12>

08002860 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	e00a      	b.n	8002888 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002872:	f3af 8000 	nop.w
 8002876:	4601      	mov	r1, r0
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	1c5a      	adds	r2, r3, #1
 800287c:	60ba      	str	r2, [r7, #8]
 800287e:	b2ca      	uxtb	r2, r1
 8002880:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	3301      	adds	r3, #1
 8002886:	617b      	str	r3, [r7, #20]
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	429a      	cmp	r2, r3
 800288e:	dbf0      	blt.n	8002872 <_read+0x12>
  }

  return len;
 8002890:	687b      	ldr	r3, [r7, #4]
}
 8002892:	4618      	mov	r0, r3
 8002894:	3718      	adds	r7, #24
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b086      	sub	sp, #24
 800289e:	af00      	add	r7, sp, #0
 80028a0:	60f8      	str	r0, [r7, #12]
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	e009      	b.n	80028c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	1c5a      	adds	r2, r3, #1
 80028b0:	60ba      	str	r2, [r7, #8]
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	3301      	adds	r3, #1
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	dbf1      	blt.n	80028ac <_write+0x12>
  }
  return len;
 80028c8:	687b      	ldr	r3, [r7, #4]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <_close>:

int _close(int file)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028de:	4618      	mov	r0, r3
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
 80028f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028fa:	605a      	str	r2, [r3, #4]
  return 0;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <_isatty>:

int _isatty(int file)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002912:	2301      	movs	r3, #1
}
 8002914:	4618      	mov	r0, r3
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
	...

0800293c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002944:	4a14      	ldr	r2, [pc, #80]	; (8002998 <_sbrk+0x5c>)
 8002946:	4b15      	ldr	r3, [pc, #84]	; (800299c <_sbrk+0x60>)
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002950:	4b13      	ldr	r3, [pc, #76]	; (80029a0 <_sbrk+0x64>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d102      	bne.n	800295e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002958:	4b11      	ldr	r3, [pc, #68]	; (80029a0 <_sbrk+0x64>)
 800295a:	4a12      	ldr	r2, [pc, #72]	; (80029a4 <_sbrk+0x68>)
 800295c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800295e:	4b10      	ldr	r3, [pc, #64]	; (80029a0 <_sbrk+0x64>)
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4413      	add	r3, r2
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	429a      	cmp	r2, r3
 800296a:	d207      	bcs.n	800297c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800296c:	f004 ff68 	bl	8007840 <__errno>
 8002970:	4603      	mov	r3, r0
 8002972:	220c      	movs	r2, #12
 8002974:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002976:	f04f 33ff 	mov.w	r3, #4294967295
 800297a:	e009      	b.n	8002990 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800297c:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <_sbrk+0x64>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002982:	4b07      	ldr	r3, [pc, #28]	; (80029a0 <_sbrk+0x64>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4413      	add	r3, r2
 800298a:	4a05      	ldr	r2, [pc, #20]	; (80029a0 <_sbrk+0x64>)
 800298c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800298e:	68fb      	ldr	r3, [r7, #12]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3718      	adds	r7, #24
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	20020000 	.word	0x20020000
 800299c:	00000400 	.word	0x00000400
 80029a0:	200004b8 	.word	0x200004b8
 80029a4:	20000610 	.word	0x20000610

080029a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029ac:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <SystemInit+0x20>)
 80029ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b2:	4a05      	ldr	r2, [pc, #20]	; (80029c8 <SystemInit+0x20>)
 80029b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029bc:	bf00      	nop
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	e000ed00 	.word	0xe000ed00

080029cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80029cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029d0:	480d      	ldr	r0, [pc, #52]	; (8002a08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029d2:	490e      	ldr	r1, [pc, #56]	; (8002a0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029d4:	4a0e      	ldr	r2, [pc, #56]	; (8002a10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029d8:	e002      	b.n	80029e0 <LoopCopyDataInit>

080029da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029de:	3304      	adds	r3, #4

080029e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029e4:	d3f9      	bcc.n	80029da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029e6:	4a0b      	ldr	r2, [pc, #44]	; (8002a14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029e8:	4c0b      	ldr	r4, [pc, #44]	; (8002a18 <LoopFillZerobss+0x26>)
  movs r3, #0
 80029ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029ec:	e001      	b.n	80029f2 <LoopFillZerobss>

080029ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029f0:	3204      	adds	r2, #4

080029f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029f4:	d3fb      	bcc.n	80029ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029f6:	f7ff ffd7 	bl	80029a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029fa:	f004 ff27 	bl	800784c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029fe:	f7fe fedb 	bl	80017b8 <main>
  bx  lr    
 8002a02:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a0c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002a10:	08009d6c 	.word	0x08009d6c
  ldr r2, =_sbss
 8002a14:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002a18:	2000060c 	.word	0x2000060c

08002a1c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a1c:	e7fe      	b.n	8002a1c <DMA1_Stream0_IRQHandler>
	...

08002a20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a24:	4b0e      	ldr	r3, [pc, #56]	; (8002a60 <HAL_Init+0x40>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a0d      	ldr	r2, [pc, #52]	; (8002a60 <HAL_Init+0x40>)
 8002a2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a30:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <HAL_Init+0x40>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a0a      	ldr	r2, [pc, #40]	; (8002a60 <HAL_Init+0x40>)
 8002a36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a3c:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <HAL_Init+0x40>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a07      	ldr	r2, [pc, #28]	; (8002a60 <HAL_Init+0x40>)
 8002a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a48:	2003      	movs	r0, #3
 8002a4a:	f000 fe21 	bl	8003690 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a4e:	2000      	movs	r0, #0
 8002a50:	f000 f808 	bl	8002a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a54:	f7ff fcfe 	bl	8002454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40023c00 	.word	0x40023c00

08002a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a6c:	4b12      	ldr	r3, [pc, #72]	; (8002ab8 <HAL_InitTick+0x54>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	4b12      	ldr	r3, [pc, #72]	; (8002abc <HAL_InitTick+0x58>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	4619      	mov	r1, r3
 8002a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 fe39 	bl	80036fa <HAL_SYSTICK_Config>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e00e      	b.n	8002ab0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b0f      	cmp	r3, #15
 8002a96:	d80a      	bhi.n	8002aae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a98:	2200      	movs	r2, #0
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002aa0:	f000 fe01 	bl	80036a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002aa4:	4a06      	ldr	r2, [pc, #24]	; (8002ac0 <HAL_InitTick+0x5c>)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	e000      	b.n	8002ab0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	20000004 	.word	0x20000004
 8002abc:	2000000c 	.word	0x2000000c
 8002ac0:	20000008 	.word	0x20000008

08002ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ac8:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <HAL_IncTick+0x20>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	461a      	mov	r2, r3
 8002ace:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <HAL_IncTick+0x24>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	4a04      	ldr	r2, [pc, #16]	; (8002ae8 <HAL_IncTick+0x24>)
 8002ad6:	6013      	str	r3, [r2, #0]
}
 8002ad8:	bf00      	nop
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	2000000c 	.word	0x2000000c
 8002ae8:	200004bc 	.word	0x200004bc

08002aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return uwTick;
 8002af0:	4b03      	ldr	r3, [pc, #12]	; (8002b00 <HAL_GetTick+0x14>)
 8002af2:	681b      	ldr	r3, [r3, #0]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	200004bc 	.word	0x200004bc

08002b04 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e033      	b.n	8002b82 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d109      	bne.n	8002b36 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7ff fcbe 	bl	80024a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f003 0310 	and.w	r3, r3, #16
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d118      	bne.n	8002b74 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b4a:	f023 0302 	bic.w	r3, r3, #2
 8002b4e:	f043 0202 	orr.w	r2, r3, #2
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 fbc4 	bl	80032e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	f023 0303 	bic.w	r3, r3, #3
 8002b6a:	f043 0201 	orr.w	r2, r3, #1
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	641a      	str	r2, [r3, #64]	; 0x40
 8002b72:	e001      	b.n	8002b78 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
	...

08002b8c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d101      	bne.n	8002ba6 <HAL_ADC_Start+0x1a>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	e097      	b.n	8002cd6 <HAL_ADC_Start+0x14a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d018      	beq.n	8002bee <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0201 	orr.w	r2, r2, #1
 8002bca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bcc:	4b45      	ldr	r3, [pc, #276]	; (8002ce4 <HAL_ADC_Start+0x158>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a45      	ldr	r2, [pc, #276]	; (8002ce8 <HAL_ADC_Start+0x15c>)
 8002bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd6:	0c9a      	lsrs	r2, r3, #18
 8002bd8:	4613      	mov	r3, r2
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	4413      	add	r3, r2
 8002bde:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002be0:	e002      	b.n	8002be8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	3b01      	subs	r3, #1
 8002be6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f9      	bne.n	8002be2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d15f      	bne.n	8002cbc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c04:	f023 0301 	bic.w	r3, r3, #1
 8002c08:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d007      	beq.n	8002c2e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c26:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c3a:	d106      	bne.n	8002c4a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c40:	f023 0206 	bic.w	r2, r3, #6
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	645a      	str	r2, [r3, #68]	; 0x44
 8002c48:	e002      	b.n	8002c50 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c58:	4b24      	ldr	r3, [pc, #144]	; (8002cec <HAL_ADC_Start+0x160>)
 8002c5a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002c64:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f003 031f 	and.w	r3, r3, #31
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10f      	bne.n	8002c92 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d129      	bne.n	8002cd4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c8e:	609a      	str	r2, [r3, #8]
 8002c90:	e020      	b.n	8002cd4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a16      	ldr	r2, [pc, #88]	; (8002cf0 <HAL_ADC_Start+0x164>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d11b      	bne.n	8002cd4 <HAL_ADC_Start+0x148>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d114      	bne.n	8002cd4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002cb8:	609a      	str	r2, [r3, #8]
 8002cba:	e00b      	b.n	8002cd4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	f043 0210 	orr.w	r2, r3, #16
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ccc:	f043 0201 	orr.w	r2, r3, #1
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	20000004 	.word	0x20000004
 8002ce8:	431bde83 	.word	0x431bde83
 8002cec:	40012300 	.word	0x40012300
 8002cf0:	40012000 	.word	0x40012000

08002cf4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d10:	d113      	bne.n	8002d3a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d20:	d10b      	bne.n	8002d3a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	f043 0220 	orr.w	r2, r3, #32
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e063      	b.n	8002e02 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002d3a:	f7ff fed7 	bl	8002aec <HAL_GetTick>
 8002d3e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d40:	e021      	b.n	8002d86 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d48:	d01d      	beq.n	8002d86 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d007      	beq.n	8002d60 <HAL_ADC_PollForConversion+0x6c>
 8002d50:	f7ff fecc 	bl	8002aec <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d212      	bcs.n	8002d86 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d00b      	beq.n	8002d86 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	f043 0204 	orr.w	r2, r3, #4
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e03d      	b.n	8002e02 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d1d6      	bne.n	8002d42 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f06f 0212 	mvn.w	r2, #18
 8002d9c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d123      	bne.n	8002e00 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d11f      	bne.n	8002e00 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d006      	beq.n	8002ddc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d111      	bne.n	8002e00 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d105      	bne.n	8002e00 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	f043 0201 	orr.w	r2, r3, #1
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b086      	sub	sp, #24
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	617b      	str	r3, [r7, #20]
 8002e16:	2300      	movs	r3, #0
 8002e18:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	f003 0320 	and.w	r3, r3, #32
 8002e38:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d049      	beq.n	8002ed4 <HAL_ADC_IRQHandler+0xca>
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d046      	beq.n	8002ed4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	f003 0310 	and.w	r3, r3, #16
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d105      	bne.n	8002e5e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d12b      	bne.n	8002ec4 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d127      	bne.n	8002ec4 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d006      	beq.n	8002e90 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d119      	bne.n	8002ec4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0220 	bic.w	r2, r2, #32
 8002e9e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d105      	bne.n	8002ec4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	f043 0201 	orr.w	r2, r3, #1
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f8bd 	bl	8003044 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f06f 0212 	mvn.w	r2, #18
 8002ed2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f003 0304 	and.w	r3, r3, #4
 8002eda:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d057      	beq.n	8002f9a <HAL_ADC_IRQHandler+0x190>
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d054      	beq.n	8002f9a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	f003 0310 	and.w	r3, r3, #16
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d105      	bne.n	8002f08 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d139      	bne.n	8002f8a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d006      	beq.n	8002f32 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d12b      	bne.n	8002f8a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d124      	bne.n	8002f8a <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d11d      	bne.n	8002f8a <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d119      	bne.n	8002f8a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f64:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d105      	bne.n	8002f8a <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	f043 0201 	orr.w	r2, r3, #1
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 faa6 	bl	80034dc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f06f 020c 	mvn.w	r2, #12
 8002f98:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d017      	beq.n	8002fe0 <HAL_ADC_IRQHandler+0x1d6>
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d014      	beq.n	8002fe0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d10d      	bne.n	8002fe0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 f841 	bl	8003058 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f06f 0201 	mvn.w	r2, #1
 8002fde:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f003 0320 	and.w	r3, r3, #32
 8002fe6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fee:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d015      	beq.n	8003022 <HAL_ADC_IRQHandler+0x218>
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d012      	beq.n	8003022 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003000:	f043 0202 	orr.w	r2, r3, #2
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f06f 0220 	mvn.w	r2, #32
 8003010:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f82a 	bl	800306c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f06f 0220 	mvn.w	r2, #32
 8003020:	601a      	str	r2, [r3, #0]
  }
}
 8003022:	bf00      	nop
 8003024:	3718      	adds	r7, #24
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800302a:	b480      	push	{r7}
 800302c:	b083      	sub	sp, #12
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003038:	4618      	mov	r0, r3
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800308a:	2300      	movs	r3, #0
 800308c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003094:	2b01      	cmp	r3, #1
 8003096:	d101      	bne.n	800309c <HAL_ADC_ConfigChannel+0x1c>
 8003098:	2302      	movs	r3, #2
 800309a:	e113      	b.n	80032c4 <HAL_ADC_ConfigChannel+0x244>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2b09      	cmp	r3, #9
 80030aa:	d925      	bls.n	80030f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68d9      	ldr	r1, [r3, #12]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	461a      	mov	r2, r3
 80030ba:	4613      	mov	r3, r2
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	4413      	add	r3, r2
 80030c0:	3b1e      	subs	r3, #30
 80030c2:	2207      	movs	r2, #7
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	43da      	mvns	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	400a      	ands	r2, r1
 80030d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68d9      	ldr	r1, [r3, #12]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	4618      	mov	r0, r3
 80030e4:	4603      	mov	r3, r0
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	4403      	add	r3, r0
 80030ea:	3b1e      	subs	r3, #30
 80030ec:	409a      	lsls	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	60da      	str	r2, [r3, #12]
 80030f6:	e022      	b.n	800313e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6919      	ldr	r1, [r3, #16]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	b29b      	uxth	r3, r3
 8003104:	461a      	mov	r2, r3
 8003106:	4613      	mov	r3, r2
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	4413      	add	r3, r2
 800310c:	2207      	movs	r2, #7
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	43da      	mvns	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	400a      	ands	r2, r1
 800311a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6919      	ldr	r1, [r3, #16]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	b29b      	uxth	r3, r3
 800312c:	4618      	mov	r0, r3
 800312e:	4603      	mov	r3, r0
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	4403      	add	r3, r0
 8003134:	409a      	lsls	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b06      	cmp	r3, #6
 8003144:	d824      	bhi.n	8003190 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	3b05      	subs	r3, #5
 8003158:	221f      	movs	r2, #31
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43da      	mvns	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	400a      	ands	r2, r1
 8003166:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	b29b      	uxth	r3, r3
 8003174:	4618      	mov	r0, r3
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	3b05      	subs	r3, #5
 8003182:	fa00 f203 	lsl.w	r2, r0, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	635a      	str	r2, [r3, #52]	; 0x34
 800318e:	e04c      	b.n	800322a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b0c      	cmp	r3, #12
 8003196:	d824      	bhi.n	80031e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4413      	add	r3, r2
 80031a8:	3b23      	subs	r3, #35	; 0x23
 80031aa:	221f      	movs	r2, #31
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	43da      	mvns	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	400a      	ands	r2, r1
 80031b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	4618      	mov	r0, r3
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	3b23      	subs	r3, #35	; 0x23
 80031d4:	fa00 f203 	lsl.w	r2, r0, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	631a      	str	r2, [r3, #48]	; 0x30
 80031e0:	e023      	b.n	800322a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	3b41      	subs	r3, #65	; 0x41
 80031f4:	221f      	movs	r2, #31
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	43da      	mvns	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	400a      	ands	r2, r1
 8003202:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	b29b      	uxth	r3, r3
 8003210:	4618      	mov	r0, r3
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	3b41      	subs	r3, #65	; 0x41
 800321e:	fa00 f203 	lsl.w	r2, r0, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800322a:	4b29      	ldr	r3, [pc, #164]	; (80032d0 <HAL_ADC_ConfigChannel+0x250>)
 800322c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a28      	ldr	r2, [pc, #160]	; (80032d4 <HAL_ADC_ConfigChannel+0x254>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d10f      	bne.n	8003258 <HAL_ADC_ConfigChannel+0x1d8>
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b12      	cmp	r3, #18
 800323e:	d10b      	bne.n	8003258 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a1d      	ldr	r2, [pc, #116]	; (80032d4 <HAL_ADC_ConfigChannel+0x254>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d12b      	bne.n	80032ba <HAL_ADC_ConfigChannel+0x23a>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a1c      	ldr	r2, [pc, #112]	; (80032d8 <HAL_ADC_ConfigChannel+0x258>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d003      	beq.n	8003274 <HAL_ADC_ConfigChannel+0x1f4>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b11      	cmp	r3, #17
 8003272:	d122      	bne.n	80032ba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a11      	ldr	r2, [pc, #68]	; (80032d8 <HAL_ADC_ConfigChannel+0x258>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d111      	bne.n	80032ba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003296:	4b11      	ldr	r3, [pc, #68]	; (80032dc <HAL_ADC_ConfigChannel+0x25c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a11      	ldr	r2, [pc, #68]	; (80032e0 <HAL_ADC_ConfigChannel+0x260>)
 800329c:	fba2 2303 	umull	r2, r3, r2, r3
 80032a0:	0c9a      	lsrs	r2, r3, #18
 80032a2:	4613      	mov	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4413      	add	r3, r2
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80032ac:	e002      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	3b01      	subs	r3, #1
 80032b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f9      	bne.n	80032ae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3714      	adds	r7, #20
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	40012300 	.word	0x40012300
 80032d4:	40012000 	.word	0x40012000
 80032d8:	10000012 	.word	0x10000012
 80032dc:	20000004 	.word	0x20000004
 80032e0:	431bde83 	.word	0x431bde83

080032e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032ec:	4b79      	ldr	r3, [pc, #484]	; (80034d4 <ADC_Init+0x1f0>)
 80032ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	431a      	orrs	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003318:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6859      	ldr	r1, [r3, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	021a      	lsls	r2, r3, #8
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800333c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6859      	ldr	r1, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800335e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6899      	ldr	r1, [r3, #8]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68da      	ldr	r2, [r3, #12]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003376:	4a58      	ldr	r2, [pc, #352]	; (80034d8 <ADC_Init+0x1f4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d022      	beq.n	80033c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800338a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6899      	ldr	r1, [r3, #8]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6899      	ldr	r1, [r3, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	609a      	str	r2, [r3, #8]
 80033c0:	e00f      	b.n	80033e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0202 	bic.w	r2, r2, #2
 80033f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6899      	ldr	r1, [r3, #8]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	7e1b      	ldrb	r3, [r3, #24]
 80033fc:	005a      	lsls	r2, r3, #1
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 3020 	ldrb.w	r3, [r3, #32]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d01b      	beq.n	8003448 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800341e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800342e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6859      	ldr	r1, [r3, #4]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	3b01      	subs	r3, #1
 800343c:	035a      	lsls	r2, r3, #13
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	605a      	str	r2, [r3, #4]
 8003446:	e007      	b.n	8003458 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003456:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003466:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	3b01      	subs	r3, #1
 8003474:	051a      	lsls	r2, r3, #20
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800348c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6899      	ldr	r1, [r3, #8]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800349a:	025a      	lsls	r2, r3, #9
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6899      	ldr	r1, [r3, #8]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	029a      	lsls	r2, r3, #10
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	609a      	str	r2, [r3, #8]
}
 80034c8:	bf00      	nop
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	40012300 	.word	0x40012300
 80034d8:	0f000001 	.word	0x0f000001

080034dc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003500:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <__NVIC_SetPriorityGrouping+0x44>)
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800350c:	4013      	ands	r3, r2
 800350e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003518:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800351c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003522:	4a04      	ldr	r2, [pc, #16]	; (8003534 <__NVIC_SetPriorityGrouping+0x44>)
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	60d3      	str	r3, [r2, #12]
}
 8003528:	bf00      	nop
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	e000ed00 	.word	0xe000ed00

08003538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800353c:	4b04      	ldr	r3, [pc, #16]	; (8003550 <__NVIC_GetPriorityGrouping+0x18>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	0a1b      	lsrs	r3, r3, #8
 8003542:	f003 0307 	and.w	r3, r3, #7
}
 8003546:	4618      	mov	r0, r3
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	e000ed00 	.word	0xe000ed00

08003554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	4603      	mov	r3, r0
 800355c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800355e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003562:	2b00      	cmp	r3, #0
 8003564:	db0b      	blt.n	800357e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003566:	79fb      	ldrb	r3, [r7, #7]
 8003568:	f003 021f 	and.w	r2, r3, #31
 800356c:	4907      	ldr	r1, [pc, #28]	; (800358c <__NVIC_EnableIRQ+0x38>)
 800356e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003572:	095b      	lsrs	r3, r3, #5
 8003574:	2001      	movs	r0, #1
 8003576:	fa00 f202 	lsl.w	r2, r0, r2
 800357a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	e000e100 	.word	0xe000e100

08003590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	4603      	mov	r3, r0
 8003598:	6039      	str	r1, [r7, #0]
 800359a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800359c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	db0a      	blt.n	80035ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	490c      	ldr	r1, [pc, #48]	; (80035dc <__NVIC_SetPriority+0x4c>)
 80035aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ae:	0112      	lsls	r2, r2, #4
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	440b      	add	r3, r1
 80035b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035b8:	e00a      	b.n	80035d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	4908      	ldr	r1, [pc, #32]	; (80035e0 <__NVIC_SetPriority+0x50>)
 80035c0:	79fb      	ldrb	r3, [r7, #7]
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	3b04      	subs	r3, #4
 80035c8:	0112      	lsls	r2, r2, #4
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	440b      	add	r3, r1
 80035ce:	761a      	strb	r2, [r3, #24]
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	e000e100 	.word	0xe000e100
 80035e0:	e000ed00 	.word	0xe000ed00

080035e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b089      	sub	sp, #36	; 0x24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	f1c3 0307 	rsb	r3, r3, #7
 80035fe:	2b04      	cmp	r3, #4
 8003600:	bf28      	it	cs
 8003602:	2304      	movcs	r3, #4
 8003604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	3304      	adds	r3, #4
 800360a:	2b06      	cmp	r3, #6
 800360c:	d902      	bls.n	8003614 <NVIC_EncodePriority+0x30>
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	3b03      	subs	r3, #3
 8003612:	e000      	b.n	8003616 <NVIC_EncodePriority+0x32>
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003618:	f04f 32ff 	mov.w	r2, #4294967295
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	43da      	mvns	r2, r3
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	401a      	ands	r2, r3
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800362c:	f04f 31ff 	mov.w	r1, #4294967295
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	fa01 f303 	lsl.w	r3, r1, r3
 8003636:	43d9      	mvns	r1, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800363c:	4313      	orrs	r3, r2
         );
}
 800363e:	4618      	mov	r0, r3
 8003640:	3724      	adds	r7, #36	; 0x24
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
	...

0800364c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3b01      	subs	r3, #1
 8003658:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800365c:	d301      	bcc.n	8003662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800365e:	2301      	movs	r3, #1
 8003660:	e00f      	b.n	8003682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003662:	4a0a      	ldr	r2, [pc, #40]	; (800368c <SysTick_Config+0x40>)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	3b01      	subs	r3, #1
 8003668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800366a:	210f      	movs	r1, #15
 800366c:	f04f 30ff 	mov.w	r0, #4294967295
 8003670:	f7ff ff8e 	bl	8003590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003674:	4b05      	ldr	r3, [pc, #20]	; (800368c <SysTick_Config+0x40>)
 8003676:	2200      	movs	r2, #0
 8003678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800367a:	4b04      	ldr	r3, [pc, #16]	; (800368c <SysTick_Config+0x40>)
 800367c:	2207      	movs	r2, #7
 800367e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	e000e010 	.word	0xe000e010

08003690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7ff ff29 	bl	80034f0 <__NVIC_SetPriorityGrouping>
}
 800369e:	bf00      	nop
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b086      	sub	sp, #24
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	4603      	mov	r3, r0
 80036ae:	60b9      	str	r1, [r7, #8]
 80036b0:	607a      	str	r2, [r7, #4]
 80036b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036b8:	f7ff ff3e 	bl	8003538 <__NVIC_GetPriorityGrouping>
 80036bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	68b9      	ldr	r1, [r7, #8]
 80036c2:	6978      	ldr	r0, [r7, #20]
 80036c4:	f7ff ff8e 	bl	80035e4 <NVIC_EncodePriority>
 80036c8:	4602      	mov	r2, r0
 80036ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ce:	4611      	mov	r1, r2
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff ff5d 	bl	8003590 <__NVIC_SetPriority>
}
 80036d6:	bf00      	nop
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b082      	sub	sp, #8
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	4603      	mov	r3, r0
 80036e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff ff31 	bl	8003554 <__NVIC_EnableIRQ>
}
 80036f2:	bf00      	nop
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b082      	sub	sp, #8
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff ffa2 	bl	800364c <SysTick_Config>
 8003708:	4603      	mov	r3, r0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
	...

08003714 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003720:	f7ff f9e4 	bl	8002aec <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e099      	b.n	8003864 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2202      	movs	r2, #2
 8003734:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0201 	bic.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003750:	e00f      	b.n	8003772 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003752:	f7ff f9cb 	bl	8002aec <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b05      	cmp	r3, #5
 800375e:	d908      	bls.n	8003772 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2220      	movs	r2, #32
 8003764:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2203      	movs	r2, #3
 800376a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e078      	b.n	8003864 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1e8      	bne.n	8003752 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	4b38      	ldr	r3, [pc, #224]	; (800386c <HAL_DMA_Init+0x158>)
 800378c:	4013      	ands	r3, r2
 800378e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800379e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	2b04      	cmp	r3, #4
 80037ca:	d107      	bne.n	80037dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d4:	4313      	orrs	r3, r2
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	4313      	orrs	r3, r2
 80037da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f023 0307 	bic.w	r3, r3, #7
 80037f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003802:	2b04      	cmp	r3, #4
 8003804:	d117      	bne.n	8003836 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	4313      	orrs	r3, r2
 800380e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00e      	beq.n	8003836 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 fb01 	bl	8003e20 <DMA_CheckFifoParam>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2240      	movs	r2, #64	; 0x40
 8003828:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003832:	2301      	movs	r3, #1
 8003834:	e016      	b.n	8003864 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fab8 	bl	8003db4 <DMA_CalcBaseAndBitshift>
 8003844:	4603      	mov	r3, r0
 8003846:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384c:	223f      	movs	r2, #63	; 0x3f
 800384e:	409a      	lsls	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3718      	adds	r7, #24
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	f010803f 	.word	0xf010803f

08003870 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800387e:	2300      	movs	r3, #0
 8003880:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003886:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800388e:	2b01      	cmp	r3, #1
 8003890:	d101      	bne.n	8003896 <HAL_DMA_Start_IT+0x26>
 8003892:	2302      	movs	r3, #2
 8003894:	e040      	b.n	8003918 <HAL_DMA_Start_IT+0xa8>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d12f      	bne.n	800390a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2202      	movs	r2, #2
 80038ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	68b9      	ldr	r1, [r7, #8]
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 fa4a 	bl	8003d58 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c8:	223f      	movs	r2, #63	; 0x3f
 80038ca:	409a      	lsls	r2, r3
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0216 	orr.w	r2, r2, #22
 80038de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d007      	beq.n	80038f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0208 	orr.w	r2, r2, #8
 80038f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f042 0201 	orr.w	r2, r2, #1
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	e005      	b.n	8003916 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003912:	2302      	movs	r3, #2
 8003914:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003916:	7dfb      	ldrb	r3, [r7, #23]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3718      	adds	r7, #24
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800392e:	f7ff f8dd 	bl	8002aec <HAL_GetTick>
 8003932:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d008      	beq.n	8003952 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2280      	movs	r2, #128	; 0x80
 8003944:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e052      	b.n	80039f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 0216 	bic.w	r2, r2, #22
 8003960:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	695a      	ldr	r2, [r3, #20]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003970:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	2b00      	cmp	r3, #0
 8003978:	d103      	bne.n	8003982 <HAL_DMA_Abort+0x62>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800397e:	2b00      	cmp	r3, #0
 8003980:	d007      	beq.n	8003992 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0208 	bic.w	r2, r2, #8
 8003990:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 0201 	bic.w	r2, r2, #1
 80039a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039a2:	e013      	b.n	80039cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039a4:	f7ff f8a2 	bl	8002aec <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b05      	cmp	r3, #5
 80039b0:	d90c      	bls.n	80039cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2220      	movs	r2, #32
 80039b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2203      	movs	r2, #3
 80039bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e015      	b.n	80039f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1e4      	bne.n	80039a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039de:	223f      	movs	r2, #63	; 0x3f
 80039e0:	409a      	lsls	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d004      	beq.n	8003a1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2280      	movs	r2, #128	; 0x80
 8003a18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e00c      	b.n	8003a38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2205      	movs	r2, #5
 8003a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 0201 	bic.w	r2, r2, #1
 8003a34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a50:	4b8e      	ldr	r3, [pc, #568]	; (8003c8c <HAL_DMA_IRQHandler+0x248>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a8e      	ldr	r2, [pc, #568]	; (8003c90 <HAL_DMA_IRQHandler+0x24c>)
 8003a56:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5a:	0a9b      	lsrs	r3, r3, #10
 8003a5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6e:	2208      	movs	r2, #8
 8003a70:	409a      	lsls	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	4013      	ands	r3, r2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d01a      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d013      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0204 	bic.w	r2, r2, #4
 8003a96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a9c:	2208      	movs	r2, #8
 8003a9e:	409a      	lsls	r2, r3
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa8:	f043 0201 	orr.w	r2, r3, #1
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	409a      	lsls	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	4013      	ands	r3, r2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d012      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00b      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	409a      	lsls	r2, r3
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ade:	f043 0202 	orr.w	r2, r3, #2
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aea:	2204      	movs	r2, #4
 8003aec:	409a      	lsls	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	4013      	ands	r3, r2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d012      	beq.n	8003b1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00b      	beq.n	8003b1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b08:	2204      	movs	r2, #4
 8003b0a:	409a      	lsls	r2, r3
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b14:	f043 0204 	orr.w	r2, r3, #4
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b20:	2210      	movs	r2, #16
 8003b22:	409a      	lsls	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4013      	ands	r3, r2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d043      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d03c      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b3e:	2210      	movs	r2, #16
 8003b40:	409a      	lsls	r2, r3
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d018      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d108      	bne.n	8003b74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d024      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	4798      	blx	r3
 8003b72:	e01f      	b.n	8003bb4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d01b      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	4798      	blx	r3
 8003b84:	e016      	b.n	8003bb4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d107      	bne.n	8003ba4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0208 	bic.w	r2, r2, #8
 8003ba2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb8:	2220      	movs	r2, #32
 8003bba:	409a      	lsls	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 808f 	beq.w	8003ce4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0310 	and.w	r3, r3, #16
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 8087 	beq.w	8003ce4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bda:	2220      	movs	r2, #32
 8003bdc:	409a      	lsls	r2, r3
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b05      	cmp	r3, #5
 8003bec:	d136      	bne.n	8003c5c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 0216 	bic.w	r2, r2, #22
 8003bfc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	695a      	ldr	r2, [r3, #20]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d103      	bne.n	8003c1e <HAL_DMA_IRQHandler+0x1da>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d007      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0208 	bic.w	r2, r2, #8
 8003c2c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c32:	223f      	movs	r2, #63	; 0x3f
 8003c34:	409a      	lsls	r2, r3
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d07e      	beq.n	8003d50 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	4798      	blx	r3
        }
        return;
 8003c5a:	e079      	b.n	8003d50 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d01d      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10d      	bne.n	8003c94 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d031      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	4798      	blx	r3
 8003c88:	e02c      	b.n	8003ce4 <HAL_DMA_IRQHandler+0x2a0>
 8003c8a:	bf00      	nop
 8003c8c:	20000004 	.word	0x20000004
 8003c90:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d023      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	4798      	blx	r3
 8003ca4:	e01e      	b.n	8003ce4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10f      	bne.n	8003cd4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0210 	bic.w	r2, r2, #16
 8003cc2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d003      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d032      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d022      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2205      	movs	r2, #5
 8003cfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 0201 	bic.w	r2, r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	3301      	adds	r3, #1
 8003d14:	60bb      	str	r3, [r7, #8]
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d307      	bcc.n	8003d2c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1f2      	bne.n	8003d10 <HAL_DMA_IRQHandler+0x2cc>
 8003d2a:	e000      	b.n	8003d2e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003d2c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d005      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	4798      	blx	r3
 8003d4e:	e000      	b.n	8003d52 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003d50:	bf00      	nop
    }
  }
}
 8003d52:	3718      	adds	r7, #24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
 8003d64:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d74:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	2b40      	cmp	r3, #64	; 0x40
 8003d84:	d108      	bne.n	8003d98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d96:	e007      	b.n	8003da8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	60da      	str	r2, [r3, #12]
}
 8003da8:	bf00      	nop
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	3b10      	subs	r3, #16
 8003dc4:	4a14      	ldr	r2, [pc, #80]	; (8003e18 <DMA_CalcBaseAndBitshift+0x64>)
 8003dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dca:	091b      	lsrs	r3, r3, #4
 8003dcc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003dce:	4a13      	ldr	r2, [pc, #76]	; (8003e1c <DMA_CalcBaseAndBitshift+0x68>)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2b03      	cmp	r3, #3
 8003de0:	d909      	bls.n	8003df6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003dea:	f023 0303 	bic.w	r3, r3, #3
 8003dee:	1d1a      	adds	r2, r3, #4
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	659a      	str	r2, [r3, #88]	; 0x58
 8003df4:	e007      	b.n	8003e06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003dfe:	f023 0303 	bic.w	r3, r3, #3
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	aaaaaaab 	.word	0xaaaaaaab
 8003e1c:	080099e4 	.word	0x080099e4

08003e20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d11f      	bne.n	8003e7a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	2b03      	cmp	r3, #3
 8003e3e:	d856      	bhi.n	8003eee <DMA_CheckFifoParam+0xce>
 8003e40:	a201      	add	r2, pc, #4	; (adr r2, 8003e48 <DMA_CheckFifoParam+0x28>)
 8003e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e46:	bf00      	nop
 8003e48:	08003e59 	.word	0x08003e59
 8003e4c:	08003e6b 	.word	0x08003e6b
 8003e50:	08003e59 	.word	0x08003e59
 8003e54:	08003eef 	.word	0x08003eef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d046      	beq.n	8003ef2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e68:	e043      	b.n	8003ef2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e72:	d140      	bne.n	8003ef6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e78:	e03d      	b.n	8003ef6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e82:	d121      	bne.n	8003ec8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2b03      	cmp	r3, #3
 8003e88:	d837      	bhi.n	8003efa <DMA_CheckFifoParam+0xda>
 8003e8a:	a201      	add	r2, pc, #4	; (adr r2, 8003e90 <DMA_CheckFifoParam+0x70>)
 8003e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e90:	08003ea1 	.word	0x08003ea1
 8003e94:	08003ea7 	.word	0x08003ea7
 8003e98:	08003ea1 	.word	0x08003ea1
 8003e9c:	08003eb9 	.word	0x08003eb9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ea4:	e030      	b.n	8003f08 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d025      	beq.n	8003efe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eb6:	e022      	b.n	8003efe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ec0:	d11f      	bne.n	8003f02 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003ec6:	e01c      	b.n	8003f02 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d903      	bls.n	8003ed6 <DMA_CheckFifoParam+0xb6>
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2b03      	cmp	r3, #3
 8003ed2:	d003      	beq.n	8003edc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ed4:	e018      	b.n	8003f08 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	73fb      	strb	r3, [r7, #15]
      break;
 8003eda:	e015      	b.n	8003f08 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00e      	beq.n	8003f06 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	73fb      	strb	r3, [r7, #15]
      break;
 8003eec:	e00b      	b.n	8003f06 <DMA_CheckFifoParam+0xe6>
      break;
 8003eee:	bf00      	nop
 8003ef0:	e00a      	b.n	8003f08 <DMA_CheckFifoParam+0xe8>
      break;
 8003ef2:	bf00      	nop
 8003ef4:	e008      	b.n	8003f08 <DMA_CheckFifoParam+0xe8>
      break;
 8003ef6:	bf00      	nop
 8003ef8:	e006      	b.n	8003f08 <DMA_CheckFifoParam+0xe8>
      break;
 8003efa:	bf00      	nop
 8003efc:	e004      	b.n	8003f08 <DMA_CheckFifoParam+0xe8>
      break;
 8003efe:	bf00      	nop
 8003f00:	e002      	b.n	8003f08 <DMA_CheckFifoParam+0xe8>
      break;   
 8003f02:	bf00      	nop
 8003f04:	e000      	b.n	8003f08 <DMA_CheckFifoParam+0xe8>
      break;
 8003f06:	bf00      	nop
    }
  } 
  
  return status; 
 8003f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3714      	adds	r7, #20
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop

08003f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b089      	sub	sp, #36	; 0x24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f26:	2300      	movs	r3, #0
 8003f28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f2e:	2300      	movs	r3, #0
 8003f30:	61fb      	str	r3, [r7, #28]
 8003f32:	e159      	b.n	80041e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f34:	2201      	movs	r2, #1
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	4013      	ands	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	f040 8148 	bne.w	80041e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d005      	beq.n	8003f6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d130      	bne.n	8003fcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	2203      	movs	r2, #3
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	43db      	mvns	r3, r3
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	4013      	ands	r3, r2
 8003f80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	68da      	ldr	r2, [r3, #12]
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	69ba      	ldr	r2, [r7, #24]
 8003f98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa8:	43db      	mvns	r3, r3
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	4013      	ands	r3, r2
 8003fae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	091b      	lsrs	r3, r3, #4
 8003fb6:	f003 0201 	and.w	r2, r3, #1
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f003 0303 	and.w	r3, r3, #3
 8003fd4:	2b03      	cmp	r3, #3
 8003fd6:	d017      	beq.n	8004008 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	2203      	movs	r2, #3
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	4013      	ands	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f003 0303 	and.w	r3, r3, #3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d123      	bne.n	800405c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	08da      	lsrs	r2, r3, #3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	3208      	adds	r2, #8
 800401c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004020:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	220f      	movs	r2, #15
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	43db      	mvns	r3, r3
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	4013      	ands	r3, r2
 8004036:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	691a      	ldr	r2, [r3, #16]
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	f003 0307 	and.w	r3, r3, #7
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	4313      	orrs	r3, r2
 800404c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	08da      	lsrs	r2, r3, #3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	3208      	adds	r2, #8
 8004056:	69b9      	ldr	r1, [r7, #24]
 8004058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	2203      	movs	r2, #3
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	43db      	mvns	r3, r3
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	4013      	ands	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f003 0203 	and.w	r2, r3, #3
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	fa02 f303 	lsl.w	r3, r2, r3
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	4313      	orrs	r3, r2
 8004088:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 80a2 	beq.w	80041e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800409e:	2300      	movs	r3, #0
 80040a0:	60fb      	str	r3, [r7, #12]
 80040a2:	4b57      	ldr	r3, [pc, #348]	; (8004200 <HAL_GPIO_Init+0x2e8>)
 80040a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a6:	4a56      	ldr	r2, [pc, #344]	; (8004200 <HAL_GPIO_Init+0x2e8>)
 80040a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040ac:	6453      	str	r3, [r2, #68]	; 0x44
 80040ae:	4b54      	ldr	r3, [pc, #336]	; (8004200 <HAL_GPIO_Init+0x2e8>)
 80040b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040b6:	60fb      	str	r3, [r7, #12]
 80040b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040ba:	4a52      	ldr	r2, [pc, #328]	; (8004204 <HAL_GPIO_Init+0x2ec>)
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	089b      	lsrs	r3, r3, #2
 80040c0:	3302      	adds	r3, #2
 80040c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	f003 0303 	and.w	r3, r3, #3
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	220f      	movs	r2, #15
 80040d2:	fa02 f303 	lsl.w	r3, r2, r3
 80040d6:	43db      	mvns	r3, r3
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	4013      	ands	r3, r2
 80040dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a49      	ldr	r2, [pc, #292]	; (8004208 <HAL_GPIO_Init+0x2f0>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d019      	beq.n	800411a <HAL_GPIO_Init+0x202>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a48      	ldr	r2, [pc, #288]	; (800420c <HAL_GPIO_Init+0x2f4>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d013      	beq.n	8004116 <HAL_GPIO_Init+0x1fe>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a47      	ldr	r2, [pc, #284]	; (8004210 <HAL_GPIO_Init+0x2f8>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d00d      	beq.n	8004112 <HAL_GPIO_Init+0x1fa>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a46      	ldr	r2, [pc, #280]	; (8004214 <HAL_GPIO_Init+0x2fc>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d007      	beq.n	800410e <HAL_GPIO_Init+0x1f6>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a45      	ldr	r2, [pc, #276]	; (8004218 <HAL_GPIO_Init+0x300>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d101      	bne.n	800410a <HAL_GPIO_Init+0x1f2>
 8004106:	2304      	movs	r3, #4
 8004108:	e008      	b.n	800411c <HAL_GPIO_Init+0x204>
 800410a:	2307      	movs	r3, #7
 800410c:	e006      	b.n	800411c <HAL_GPIO_Init+0x204>
 800410e:	2303      	movs	r3, #3
 8004110:	e004      	b.n	800411c <HAL_GPIO_Init+0x204>
 8004112:	2302      	movs	r3, #2
 8004114:	e002      	b.n	800411c <HAL_GPIO_Init+0x204>
 8004116:	2301      	movs	r3, #1
 8004118:	e000      	b.n	800411c <HAL_GPIO_Init+0x204>
 800411a:	2300      	movs	r3, #0
 800411c:	69fa      	ldr	r2, [r7, #28]
 800411e:	f002 0203 	and.w	r2, r2, #3
 8004122:	0092      	lsls	r2, r2, #2
 8004124:	4093      	lsls	r3, r2
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	4313      	orrs	r3, r2
 800412a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800412c:	4935      	ldr	r1, [pc, #212]	; (8004204 <HAL_GPIO_Init+0x2ec>)
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	089b      	lsrs	r3, r3, #2
 8004132:	3302      	adds	r3, #2
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800413a:	4b38      	ldr	r3, [pc, #224]	; (800421c <HAL_GPIO_Init+0x304>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	43db      	mvns	r3, r3
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	4013      	ands	r3, r2
 8004148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	4313      	orrs	r3, r2
 800415c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800415e:	4a2f      	ldr	r2, [pc, #188]	; (800421c <HAL_GPIO_Init+0x304>)
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004164:	4b2d      	ldr	r3, [pc, #180]	; (800421c <HAL_GPIO_Init+0x304>)
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	43db      	mvns	r3, r3
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	4013      	ands	r3, r2
 8004172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d003      	beq.n	8004188 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	4313      	orrs	r3, r2
 8004186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004188:	4a24      	ldr	r2, [pc, #144]	; (800421c <HAL_GPIO_Init+0x304>)
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800418e:	4b23      	ldr	r3, [pc, #140]	; (800421c <HAL_GPIO_Init+0x304>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	43db      	mvns	r3, r3
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	4013      	ands	r3, r2
 800419c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041b2:	4a1a      	ldr	r2, [pc, #104]	; (800421c <HAL_GPIO_Init+0x304>)
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041b8:	4b18      	ldr	r3, [pc, #96]	; (800421c <HAL_GPIO_Init+0x304>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	43db      	mvns	r3, r3
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	4013      	ands	r3, r2
 80041c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d003      	beq.n	80041dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	4313      	orrs	r3, r2
 80041da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041dc:	4a0f      	ldr	r2, [pc, #60]	; (800421c <HAL_GPIO_Init+0x304>)
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	3301      	adds	r3, #1
 80041e6:	61fb      	str	r3, [r7, #28]
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	2b0f      	cmp	r3, #15
 80041ec:	f67f aea2 	bls.w	8003f34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041f0:	bf00      	nop
 80041f2:	bf00      	nop
 80041f4:	3724      	adds	r7, #36	; 0x24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	40023800 	.word	0x40023800
 8004204:	40013800 	.word	0x40013800
 8004208:	40020000 	.word	0x40020000
 800420c:	40020400 	.word	0x40020400
 8004210:	40020800 	.word	0x40020800
 8004214:	40020c00 	.word	0x40020c00
 8004218:	40021000 	.word	0x40021000
 800421c:	40013c00 	.word	0x40013c00

08004220 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	460b      	mov	r3, r1
 800422a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691a      	ldr	r2, [r3, #16]
 8004230:	887b      	ldrh	r3, [r7, #2]
 8004232:	4013      	ands	r3, r2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d002      	beq.n	800423e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004238:	2301      	movs	r3, #1
 800423a:	73fb      	strb	r3, [r7, #15]
 800423c:	e001      	b.n	8004242 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800423e:	2300      	movs	r3, #0
 8004240:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004242:	7bfb      	ldrb	r3, [r7, #15]
}
 8004244:	4618      	mov	r0, r3
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	460b      	mov	r3, r1
 800425a:	807b      	strh	r3, [r7, #2]
 800425c:	4613      	mov	r3, r2
 800425e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004260:	787b      	ldrb	r3, [r7, #1]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004266:	887a      	ldrh	r2, [r7, #2]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800426c:	e003      	b.n	8004276 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800426e:	887b      	ldrh	r3, [r7, #2]
 8004270:	041a      	lsls	r2, r3, #16
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	619a      	str	r2, [r3, #24]
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
	...

08004284 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e267      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d075      	beq.n	800438e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042a2:	4b88      	ldr	r3, [pc, #544]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 030c 	and.w	r3, r3, #12
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	d00c      	beq.n	80042c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ae:	4b85      	ldr	r3, [pc, #532]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042b6:	2b08      	cmp	r3, #8
 80042b8:	d112      	bne.n	80042e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ba:	4b82      	ldr	r3, [pc, #520]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042c6:	d10b      	bne.n	80042e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c8:	4b7e      	ldr	r3, [pc, #504]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d05b      	beq.n	800438c <HAL_RCC_OscConfig+0x108>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d157      	bne.n	800438c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e242      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e8:	d106      	bne.n	80042f8 <HAL_RCC_OscConfig+0x74>
 80042ea:	4b76      	ldr	r3, [pc, #472]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a75      	ldr	r2, [pc, #468]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 80042f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	e01d      	b.n	8004334 <HAL_RCC_OscConfig+0xb0>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004300:	d10c      	bne.n	800431c <HAL_RCC_OscConfig+0x98>
 8004302:	4b70      	ldr	r3, [pc, #448]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a6f      	ldr	r2, [pc, #444]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 8004308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	4b6d      	ldr	r3, [pc, #436]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a6c      	ldr	r2, [pc, #432]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 8004314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004318:	6013      	str	r3, [r2, #0]
 800431a:	e00b      	b.n	8004334 <HAL_RCC_OscConfig+0xb0>
 800431c:	4b69      	ldr	r3, [pc, #420]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a68      	ldr	r2, [pc, #416]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 8004322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004326:	6013      	str	r3, [r2, #0]
 8004328:	4b66      	ldr	r3, [pc, #408]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a65      	ldr	r2, [pc, #404]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 800432e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004332:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d013      	beq.n	8004364 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433c:	f7fe fbd6 	bl	8002aec <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004344:	f7fe fbd2 	bl	8002aec <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b64      	cmp	r3, #100	; 0x64
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e207      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004356:	4b5b      	ldr	r3, [pc, #364]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0f0      	beq.n	8004344 <HAL_RCC_OscConfig+0xc0>
 8004362:	e014      	b.n	800438e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004364:	f7fe fbc2 	bl	8002aec <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800436c:	f7fe fbbe 	bl	8002aec <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b64      	cmp	r3, #100	; 0x64
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e1f3      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800437e:	4b51      	ldr	r3, [pc, #324]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1f0      	bne.n	800436c <HAL_RCC_OscConfig+0xe8>
 800438a:	e000      	b.n	800438e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800438c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d063      	beq.n	8004462 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800439a:	4b4a      	ldr	r3, [pc, #296]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 030c 	and.w	r3, r3, #12
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00b      	beq.n	80043be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043a6:	4b47      	ldr	r3, [pc, #284]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043ae:	2b08      	cmp	r3, #8
 80043b0:	d11c      	bne.n	80043ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043b2:	4b44      	ldr	r3, [pc, #272]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d116      	bne.n	80043ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043be:	4b41      	ldr	r3, [pc, #260]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d005      	beq.n	80043d6 <HAL_RCC_OscConfig+0x152>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d001      	beq.n	80043d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e1c7      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043d6:	4b3b      	ldr	r3, [pc, #236]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	4937      	ldr	r1, [pc, #220]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ea:	e03a      	b.n	8004462 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d020      	beq.n	8004436 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043f4:	4b34      	ldr	r3, [pc, #208]	; (80044c8 <HAL_RCC_OscConfig+0x244>)
 80043f6:	2201      	movs	r2, #1
 80043f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fa:	f7fe fb77 	bl	8002aec <HAL_GetTick>
 80043fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004400:	e008      	b.n	8004414 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004402:	f7fe fb73 	bl	8002aec <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d901      	bls.n	8004414 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e1a8      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004414:	4b2b      	ldr	r3, [pc, #172]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0f0      	beq.n	8004402 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004420:	4b28      	ldr	r3, [pc, #160]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	00db      	lsls	r3, r3, #3
 800442e:	4925      	ldr	r1, [pc, #148]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 8004430:	4313      	orrs	r3, r2
 8004432:	600b      	str	r3, [r1, #0]
 8004434:	e015      	b.n	8004462 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004436:	4b24      	ldr	r3, [pc, #144]	; (80044c8 <HAL_RCC_OscConfig+0x244>)
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443c:	f7fe fb56 	bl	8002aec <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004444:	f7fe fb52 	bl	8002aec <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e187      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004456:	4b1b      	ldr	r3, [pc, #108]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1f0      	bne.n	8004444 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0308 	and.w	r3, r3, #8
 800446a:	2b00      	cmp	r3, #0
 800446c:	d036      	beq.n	80044dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d016      	beq.n	80044a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004476:	4b15      	ldr	r3, [pc, #84]	; (80044cc <HAL_RCC_OscConfig+0x248>)
 8004478:	2201      	movs	r2, #1
 800447a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447c:	f7fe fb36 	bl	8002aec <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004484:	f7fe fb32 	bl	8002aec <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e167      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004496:	4b0b      	ldr	r3, [pc, #44]	; (80044c4 <HAL_RCC_OscConfig+0x240>)
 8004498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0f0      	beq.n	8004484 <HAL_RCC_OscConfig+0x200>
 80044a2:	e01b      	b.n	80044dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044a4:	4b09      	ldr	r3, [pc, #36]	; (80044cc <HAL_RCC_OscConfig+0x248>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044aa:	f7fe fb1f 	bl	8002aec <HAL_GetTick>
 80044ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044b0:	e00e      	b.n	80044d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044b2:	f7fe fb1b 	bl	8002aec <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d907      	bls.n	80044d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e150      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
 80044c4:	40023800 	.word	0x40023800
 80044c8:	42470000 	.word	0x42470000
 80044cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044d0:	4b88      	ldr	r3, [pc, #544]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 80044d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1ea      	bne.n	80044b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 8097 	beq.w	8004618 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ea:	2300      	movs	r3, #0
 80044ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ee:	4b81      	ldr	r3, [pc, #516]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10f      	bne.n	800451a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044fa:	2300      	movs	r3, #0
 80044fc:	60bb      	str	r3, [r7, #8]
 80044fe:	4b7d      	ldr	r3, [pc, #500]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	4a7c      	ldr	r2, [pc, #496]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 8004504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004508:	6413      	str	r3, [r2, #64]	; 0x40
 800450a:	4b7a      	ldr	r3, [pc, #488]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004512:	60bb      	str	r3, [r7, #8]
 8004514:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004516:	2301      	movs	r3, #1
 8004518:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800451a:	4b77      	ldr	r3, [pc, #476]	; (80046f8 <HAL_RCC_OscConfig+0x474>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004522:	2b00      	cmp	r3, #0
 8004524:	d118      	bne.n	8004558 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004526:	4b74      	ldr	r3, [pc, #464]	; (80046f8 <HAL_RCC_OscConfig+0x474>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a73      	ldr	r2, [pc, #460]	; (80046f8 <HAL_RCC_OscConfig+0x474>)
 800452c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004530:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004532:	f7fe fadb 	bl	8002aec <HAL_GetTick>
 8004536:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004538:	e008      	b.n	800454c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800453a:	f7fe fad7 	bl	8002aec <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b02      	cmp	r3, #2
 8004546:	d901      	bls.n	800454c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e10c      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800454c:	4b6a      	ldr	r3, [pc, #424]	; (80046f8 <HAL_RCC_OscConfig+0x474>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0f0      	beq.n	800453a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d106      	bne.n	800456e <HAL_RCC_OscConfig+0x2ea>
 8004560:	4b64      	ldr	r3, [pc, #400]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 8004562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004564:	4a63      	ldr	r2, [pc, #396]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 8004566:	f043 0301 	orr.w	r3, r3, #1
 800456a:	6713      	str	r3, [r2, #112]	; 0x70
 800456c:	e01c      	b.n	80045a8 <HAL_RCC_OscConfig+0x324>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	2b05      	cmp	r3, #5
 8004574:	d10c      	bne.n	8004590 <HAL_RCC_OscConfig+0x30c>
 8004576:	4b5f      	ldr	r3, [pc, #380]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 8004578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457a:	4a5e      	ldr	r2, [pc, #376]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 800457c:	f043 0304 	orr.w	r3, r3, #4
 8004580:	6713      	str	r3, [r2, #112]	; 0x70
 8004582:	4b5c      	ldr	r3, [pc, #368]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 8004584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004586:	4a5b      	ldr	r2, [pc, #364]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 8004588:	f043 0301 	orr.w	r3, r3, #1
 800458c:	6713      	str	r3, [r2, #112]	; 0x70
 800458e:	e00b      	b.n	80045a8 <HAL_RCC_OscConfig+0x324>
 8004590:	4b58      	ldr	r3, [pc, #352]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 8004592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004594:	4a57      	ldr	r2, [pc, #348]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 8004596:	f023 0301 	bic.w	r3, r3, #1
 800459a:	6713      	str	r3, [r2, #112]	; 0x70
 800459c:	4b55      	ldr	r3, [pc, #340]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 800459e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a0:	4a54      	ldr	r2, [pc, #336]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 80045a2:	f023 0304 	bic.w	r3, r3, #4
 80045a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d015      	beq.n	80045dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b0:	f7fe fa9c 	bl	8002aec <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b6:	e00a      	b.n	80045ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045b8:	f7fe fa98 	bl	8002aec <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e0cb      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ce:	4b49      	ldr	r3, [pc, #292]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 80045d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d0ee      	beq.n	80045b8 <HAL_RCC_OscConfig+0x334>
 80045da:	e014      	b.n	8004606 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045dc:	f7fe fa86 	bl	8002aec <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045e2:	e00a      	b.n	80045fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045e4:	f7fe fa82 	bl	8002aec <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e0b5      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045fa:	4b3e      	ldr	r3, [pc, #248]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 80045fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1ee      	bne.n	80045e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004606:	7dfb      	ldrb	r3, [r7, #23]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d105      	bne.n	8004618 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800460c:	4b39      	ldr	r3, [pc, #228]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 800460e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004610:	4a38      	ldr	r2, [pc, #224]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 8004612:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004616:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 80a1 	beq.w	8004764 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004622:	4b34      	ldr	r3, [pc, #208]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 030c 	and.w	r3, r3, #12
 800462a:	2b08      	cmp	r3, #8
 800462c:	d05c      	beq.n	80046e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	2b02      	cmp	r3, #2
 8004634:	d141      	bne.n	80046ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004636:	4b31      	ldr	r3, [pc, #196]	; (80046fc <HAL_RCC_OscConfig+0x478>)
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800463c:	f7fe fa56 	bl	8002aec <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004644:	f7fe fa52 	bl	8002aec <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e087      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004656:	4b27      	ldr	r3, [pc, #156]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1f0      	bne.n	8004644 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	69da      	ldr	r2, [r3, #28]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	431a      	orrs	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004670:	019b      	lsls	r3, r3, #6
 8004672:	431a      	orrs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004678:	085b      	lsrs	r3, r3, #1
 800467a:	3b01      	subs	r3, #1
 800467c:	041b      	lsls	r3, r3, #16
 800467e:	431a      	orrs	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004684:	061b      	lsls	r3, r3, #24
 8004686:	491b      	ldr	r1, [pc, #108]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 8004688:	4313      	orrs	r3, r2
 800468a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800468c:	4b1b      	ldr	r3, [pc, #108]	; (80046fc <HAL_RCC_OscConfig+0x478>)
 800468e:	2201      	movs	r2, #1
 8004690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004692:	f7fe fa2b 	bl	8002aec <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800469a:	f7fe fa27 	bl	8002aec <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e05c      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ac:	4b11      	ldr	r3, [pc, #68]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d0f0      	beq.n	800469a <HAL_RCC_OscConfig+0x416>
 80046b8:	e054      	b.n	8004764 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ba:	4b10      	ldr	r3, [pc, #64]	; (80046fc <HAL_RCC_OscConfig+0x478>)
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c0:	f7fe fa14 	bl	8002aec <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046c8:	f7fe fa10 	bl	8002aec <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e045      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046da:	4b06      	ldr	r3, [pc, #24]	; (80046f4 <HAL_RCC_OscConfig+0x470>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1f0      	bne.n	80046c8 <HAL_RCC_OscConfig+0x444>
 80046e6:	e03d      	b.n	8004764 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d107      	bne.n	8004700 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e038      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
 80046f4:	40023800 	.word	0x40023800
 80046f8:	40007000 	.word	0x40007000
 80046fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004700:	4b1b      	ldr	r3, [pc, #108]	; (8004770 <HAL_RCC_OscConfig+0x4ec>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d028      	beq.n	8004760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004718:	429a      	cmp	r2, r3
 800471a:	d121      	bne.n	8004760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004726:	429a      	cmp	r2, r3
 8004728:	d11a      	bne.n	8004760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004730:	4013      	ands	r3, r2
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004736:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004738:	4293      	cmp	r3, r2
 800473a:	d111      	bne.n	8004760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004746:	085b      	lsrs	r3, r3, #1
 8004748:	3b01      	subs	r3, #1
 800474a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800474c:	429a      	cmp	r2, r3
 800474e:	d107      	bne.n	8004760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800475c:	429a      	cmp	r2, r3
 800475e:	d001      	beq.n	8004764 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e000      	b.n	8004766 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3718      	adds	r7, #24
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	40023800 	.word	0x40023800

08004774 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e0cc      	b.n	8004922 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004788:	4b68      	ldr	r3, [pc, #416]	; (800492c <HAL_RCC_ClockConfig+0x1b8>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	429a      	cmp	r2, r3
 8004794:	d90c      	bls.n	80047b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004796:	4b65      	ldr	r3, [pc, #404]	; (800492c <HAL_RCC_ClockConfig+0x1b8>)
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	b2d2      	uxtb	r2, r2
 800479c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800479e:	4b63      	ldr	r3, [pc, #396]	; (800492c <HAL_RCC_ClockConfig+0x1b8>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d001      	beq.n	80047b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e0b8      	b.n	8004922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d020      	beq.n	80047fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d005      	beq.n	80047d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047c8:	4b59      	ldr	r3, [pc, #356]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	4a58      	ldr	r2, [pc, #352]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80047ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0308 	and.w	r3, r3, #8
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d005      	beq.n	80047ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047e0:	4b53      	ldr	r3, [pc, #332]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	4a52      	ldr	r2, [pc, #328]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80047e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047ec:	4b50      	ldr	r3, [pc, #320]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	494d      	ldr	r1, [pc, #308]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d044      	beq.n	8004894 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d107      	bne.n	8004822 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004812:	4b47      	ldr	r3, [pc, #284]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d119      	bne.n	8004852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e07f      	b.n	8004922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2b02      	cmp	r3, #2
 8004828:	d003      	beq.n	8004832 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800482e:	2b03      	cmp	r3, #3
 8004830:	d107      	bne.n	8004842 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004832:	4b3f      	ldr	r3, [pc, #252]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d109      	bne.n	8004852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e06f      	b.n	8004922 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004842:	4b3b      	ldr	r3, [pc, #236]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e067      	b.n	8004922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004852:	4b37      	ldr	r3, [pc, #220]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f023 0203 	bic.w	r2, r3, #3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	4934      	ldr	r1, [pc, #208]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 8004860:	4313      	orrs	r3, r2
 8004862:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004864:	f7fe f942 	bl	8002aec <HAL_GetTick>
 8004868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800486a:	e00a      	b.n	8004882 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800486c:	f7fe f93e 	bl	8002aec <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	f241 3288 	movw	r2, #5000	; 0x1388
 800487a:	4293      	cmp	r3, r2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e04f      	b.n	8004922 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004882:	4b2b      	ldr	r3, [pc, #172]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f003 020c 	and.w	r2, r3, #12
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	429a      	cmp	r2, r3
 8004892:	d1eb      	bne.n	800486c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004894:	4b25      	ldr	r3, [pc, #148]	; (800492c <HAL_RCC_ClockConfig+0x1b8>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0307 	and.w	r3, r3, #7
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d20c      	bcs.n	80048bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048a2:	4b22      	ldr	r3, [pc, #136]	; (800492c <HAL_RCC_ClockConfig+0x1b8>)
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048aa:	4b20      	ldr	r3, [pc, #128]	; (800492c <HAL_RCC_ClockConfig+0x1b8>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0307 	and.w	r3, r3, #7
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d001      	beq.n	80048bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e032      	b.n	8004922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d008      	beq.n	80048da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048c8:	4b19      	ldr	r3, [pc, #100]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	4916      	ldr	r1, [pc, #88]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0308 	and.w	r3, r3, #8
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d009      	beq.n	80048fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048e6:	4b12      	ldr	r3, [pc, #72]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	00db      	lsls	r3, r3, #3
 80048f4:	490e      	ldr	r1, [pc, #56]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048fa:	f000 f821 	bl	8004940 <HAL_RCC_GetSysClockFreq>
 80048fe:	4602      	mov	r2, r0
 8004900:	4b0b      	ldr	r3, [pc, #44]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	091b      	lsrs	r3, r3, #4
 8004906:	f003 030f 	and.w	r3, r3, #15
 800490a:	490a      	ldr	r1, [pc, #40]	; (8004934 <HAL_RCC_ClockConfig+0x1c0>)
 800490c:	5ccb      	ldrb	r3, [r1, r3]
 800490e:	fa22 f303 	lsr.w	r3, r2, r3
 8004912:	4a09      	ldr	r2, [pc, #36]	; (8004938 <HAL_RCC_ClockConfig+0x1c4>)
 8004914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004916:	4b09      	ldr	r3, [pc, #36]	; (800493c <HAL_RCC_ClockConfig+0x1c8>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4618      	mov	r0, r3
 800491c:	f7fe f8a2 	bl	8002a64 <HAL_InitTick>

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	40023c00 	.word	0x40023c00
 8004930:	40023800 	.word	0x40023800
 8004934:	080099cc 	.word	0x080099cc
 8004938:	20000004 	.word	0x20000004
 800493c:	20000008 	.word	0x20000008

08004940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004944:	b094      	sub	sp, #80	; 0x50
 8004946:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004948:	2300      	movs	r3, #0
 800494a:	647b      	str	r3, [r7, #68]	; 0x44
 800494c:	2300      	movs	r3, #0
 800494e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004950:	2300      	movs	r3, #0
 8004952:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004954:	2300      	movs	r3, #0
 8004956:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004958:	4b79      	ldr	r3, [pc, #484]	; (8004b40 <HAL_RCC_GetSysClockFreq+0x200>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f003 030c 	and.w	r3, r3, #12
 8004960:	2b08      	cmp	r3, #8
 8004962:	d00d      	beq.n	8004980 <HAL_RCC_GetSysClockFreq+0x40>
 8004964:	2b08      	cmp	r3, #8
 8004966:	f200 80e1 	bhi.w	8004b2c <HAL_RCC_GetSysClockFreq+0x1ec>
 800496a:	2b00      	cmp	r3, #0
 800496c:	d002      	beq.n	8004974 <HAL_RCC_GetSysClockFreq+0x34>
 800496e:	2b04      	cmp	r3, #4
 8004970:	d003      	beq.n	800497a <HAL_RCC_GetSysClockFreq+0x3a>
 8004972:	e0db      	b.n	8004b2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004974:	4b73      	ldr	r3, [pc, #460]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x204>)
 8004976:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004978:	e0db      	b.n	8004b32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800497a:	4b73      	ldr	r3, [pc, #460]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x208>)
 800497c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800497e:	e0d8      	b.n	8004b32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004980:	4b6f      	ldr	r3, [pc, #444]	; (8004b40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004988:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800498a:	4b6d      	ldr	r3, [pc, #436]	; (8004b40 <HAL_RCC_GetSysClockFreq+0x200>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d063      	beq.n	8004a5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004996:	4b6a      	ldr	r3, [pc, #424]	; (8004b40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	099b      	lsrs	r3, r3, #6
 800499c:	2200      	movs	r2, #0
 800499e:	63bb      	str	r3, [r7, #56]	; 0x38
 80049a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80049a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a8:	633b      	str	r3, [r7, #48]	; 0x30
 80049aa:	2300      	movs	r3, #0
 80049ac:	637b      	str	r3, [r7, #52]	; 0x34
 80049ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80049b2:	4622      	mov	r2, r4
 80049b4:	462b      	mov	r3, r5
 80049b6:	f04f 0000 	mov.w	r0, #0
 80049ba:	f04f 0100 	mov.w	r1, #0
 80049be:	0159      	lsls	r1, r3, #5
 80049c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049c4:	0150      	lsls	r0, r2, #5
 80049c6:	4602      	mov	r2, r0
 80049c8:	460b      	mov	r3, r1
 80049ca:	4621      	mov	r1, r4
 80049cc:	1a51      	subs	r1, r2, r1
 80049ce:	6139      	str	r1, [r7, #16]
 80049d0:	4629      	mov	r1, r5
 80049d2:	eb63 0301 	sbc.w	r3, r3, r1
 80049d6:	617b      	str	r3, [r7, #20]
 80049d8:	f04f 0200 	mov.w	r2, #0
 80049dc:	f04f 0300 	mov.w	r3, #0
 80049e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049e4:	4659      	mov	r1, fp
 80049e6:	018b      	lsls	r3, r1, #6
 80049e8:	4651      	mov	r1, sl
 80049ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049ee:	4651      	mov	r1, sl
 80049f0:	018a      	lsls	r2, r1, #6
 80049f2:	4651      	mov	r1, sl
 80049f4:	ebb2 0801 	subs.w	r8, r2, r1
 80049f8:	4659      	mov	r1, fp
 80049fa:	eb63 0901 	sbc.w	r9, r3, r1
 80049fe:	f04f 0200 	mov.w	r2, #0
 8004a02:	f04f 0300 	mov.w	r3, #0
 8004a06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a12:	4690      	mov	r8, r2
 8004a14:	4699      	mov	r9, r3
 8004a16:	4623      	mov	r3, r4
 8004a18:	eb18 0303 	adds.w	r3, r8, r3
 8004a1c:	60bb      	str	r3, [r7, #8]
 8004a1e:	462b      	mov	r3, r5
 8004a20:	eb49 0303 	adc.w	r3, r9, r3
 8004a24:	60fb      	str	r3, [r7, #12]
 8004a26:	f04f 0200 	mov.w	r2, #0
 8004a2a:	f04f 0300 	mov.w	r3, #0
 8004a2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a32:	4629      	mov	r1, r5
 8004a34:	024b      	lsls	r3, r1, #9
 8004a36:	4621      	mov	r1, r4
 8004a38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a3c:	4621      	mov	r1, r4
 8004a3e:	024a      	lsls	r2, r1, #9
 8004a40:	4610      	mov	r0, r2
 8004a42:	4619      	mov	r1, r3
 8004a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a46:	2200      	movs	r2, #0
 8004a48:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a50:	f7fc f8d2 	bl	8000bf8 <__aeabi_uldivmod>
 8004a54:	4602      	mov	r2, r0
 8004a56:	460b      	mov	r3, r1
 8004a58:	4613      	mov	r3, r2
 8004a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a5c:	e058      	b.n	8004b10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a5e:	4b38      	ldr	r3, [pc, #224]	; (8004b40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	099b      	lsrs	r3, r3, #6
 8004a64:	2200      	movs	r2, #0
 8004a66:	4618      	mov	r0, r3
 8004a68:	4611      	mov	r1, r2
 8004a6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a6e:	623b      	str	r3, [r7, #32]
 8004a70:	2300      	movs	r3, #0
 8004a72:	627b      	str	r3, [r7, #36]	; 0x24
 8004a74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a78:	4642      	mov	r2, r8
 8004a7a:	464b      	mov	r3, r9
 8004a7c:	f04f 0000 	mov.w	r0, #0
 8004a80:	f04f 0100 	mov.w	r1, #0
 8004a84:	0159      	lsls	r1, r3, #5
 8004a86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a8a:	0150      	lsls	r0, r2, #5
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4641      	mov	r1, r8
 8004a92:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a96:	4649      	mov	r1, r9
 8004a98:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a9c:	f04f 0200 	mov.w	r2, #0
 8004aa0:	f04f 0300 	mov.w	r3, #0
 8004aa4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004aa8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004aac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ab0:	ebb2 040a 	subs.w	r4, r2, sl
 8004ab4:	eb63 050b 	sbc.w	r5, r3, fp
 8004ab8:	f04f 0200 	mov.w	r2, #0
 8004abc:	f04f 0300 	mov.w	r3, #0
 8004ac0:	00eb      	lsls	r3, r5, #3
 8004ac2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ac6:	00e2      	lsls	r2, r4, #3
 8004ac8:	4614      	mov	r4, r2
 8004aca:	461d      	mov	r5, r3
 8004acc:	4643      	mov	r3, r8
 8004ace:	18e3      	adds	r3, r4, r3
 8004ad0:	603b      	str	r3, [r7, #0]
 8004ad2:	464b      	mov	r3, r9
 8004ad4:	eb45 0303 	adc.w	r3, r5, r3
 8004ad8:	607b      	str	r3, [r7, #4]
 8004ada:	f04f 0200 	mov.w	r2, #0
 8004ade:	f04f 0300 	mov.w	r3, #0
 8004ae2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ae6:	4629      	mov	r1, r5
 8004ae8:	028b      	lsls	r3, r1, #10
 8004aea:	4621      	mov	r1, r4
 8004aec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004af0:	4621      	mov	r1, r4
 8004af2:	028a      	lsls	r2, r1, #10
 8004af4:	4610      	mov	r0, r2
 8004af6:	4619      	mov	r1, r3
 8004af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004afa:	2200      	movs	r2, #0
 8004afc:	61bb      	str	r3, [r7, #24]
 8004afe:	61fa      	str	r2, [r7, #28]
 8004b00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b04:	f7fc f878 	bl	8000bf8 <__aeabi_uldivmod>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b10:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	0c1b      	lsrs	r3, r3, #16
 8004b16:	f003 0303 	and.w	r3, r3, #3
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004b20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b2a:	e002      	b.n	8004b32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b2c:	4b05      	ldr	r3, [pc, #20]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3750      	adds	r7, #80	; 0x50
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b3e:	bf00      	nop
 8004b40:	40023800 	.word	0x40023800
 8004b44:	00f42400 	.word	0x00f42400
 8004b48:	007a1200 	.word	0x007a1200

08004b4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b50:	4b03      	ldr	r3, [pc, #12]	; (8004b60 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b52:	681b      	ldr	r3, [r3, #0]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	20000004 	.word	0x20000004

08004b64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b68:	f7ff fff0 	bl	8004b4c <HAL_RCC_GetHCLKFreq>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	4b05      	ldr	r3, [pc, #20]	; (8004b84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	0a9b      	lsrs	r3, r3, #10
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	4903      	ldr	r1, [pc, #12]	; (8004b88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b7a:	5ccb      	ldrb	r3, [r1, r3]
 8004b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	40023800 	.word	0x40023800
 8004b88:	080099dc 	.word	0x080099dc

08004b8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b90:	f7ff ffdc 	bl	8004b4c <HAL_RCC_GetHCLKFreq>
 8004b94:	4602      	mov	r2, r0
 8004b96:	4b05      	ldr	r3, [pc, #20]	; (8004bac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	0b5b      	lsrs	r3, r3, #13
 8004b9c:	f003 0307 	and.w	r3, r3, #7
 8004ba0:	4903      	ldr	r1, [pc, #12]	; (8004bb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ba2:	5ccb      	ldrb	r3, [r1, r3]
 8004ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	40023800 	.word	0x40023800
 8004bb0:	080099dc 	.word	0x080099dc

08004bb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e041      	b.n	8004c4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d106      	bne.n	8004be0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7fd fcae 	bl	800253c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2202      	movs	r2, #2
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	3304      	adds	r3, #4
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	4610      	mov	r0, r2
 8004bf4:	f000 fb7e 	bl	80052f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
	...

08004c54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d001      	beq.n	8004c6c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e03c      	b.n	8004ce6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a1e      	ldr	r2, [pc, #120]	; (8004cf4 <HAL_TIM_Base_Start+0xa0>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d018      	beq.n	8004cb0 <HAL_TIM_Base_Start+0x5c>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c86:	d013      	beq.n	8004cb0 <HAL_TIM_Base_Start+0x5c>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a1a      	ldr	r2, [pc, #104]	; (8004cf8 <HAL_TIM_Base_Start+0xa4>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d00e      	beq.n	8004cb0 <HAL_TIM_Base_Start+0x5c>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a19      	ldr	r2, [pc, #100]	; (8004cfc <HAL_TIM_Base_Start+0xa8>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d009      	beq.n	8004cb0 <HAL_TIM_Base_Start+0x5c>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a17      	ldr	r2, [pc, #92]	; (8004d00 <HAL_TIM_Base_Start+0xac>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d004      	beq.n	8004cb0 <HAL_TIM_Base_Start+0x5c>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a16      	ldr	r2, [pc, #88]	; (8004d04 <HAL_TIM_Base_Start+0xb0>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d111      	bne.n	8004cd4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f003 0307 	and.w	r3, r3, #7
 8004cba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2b06      	cmp	r3, #6
 8004cc0:	d010      	beq.n	8004ce4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f042 0201 	orr.w	r2, r2, #1
 8004cd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd2:	e007      	b.n	8004ce4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f042 0201 	orr.w	r2, r2, #1
 8004ce2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3714      	adds	r7, #20
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	40010000 	.word	0x40010000
 8004cf8:	40000400 	.word	0x40000400
 8004cfc:	40000800 	.word	0x40000800
 8004d00:	40000c00 	.word	0x40000c00
 8004d04:	40014000 	.word	0x40014000

08004d08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d001      	beq.n	8004d20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e044      	b.n	8004daa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2202      	movs	r2, #2
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68da      	ldr	r2, [r3, #12]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f042 0201 	orr.w	r2, r2, #1
 8004d36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a1e      	ldr	r2, [pc, #120]	; (8004db8 <HAL_TIM_Base_Start_IT+0xb0>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d018      	beq.n	8004d74 <HAL_TIM_Base_Start_IT+0x6c>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d4a:	d013      	beq.n	8004d74 <HAL_TIM_Base_Start_IT+0x6c>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a1a      	ldr	r2, [pc, #104]	; (8004dbc <HAL_TIM_Base_Start_IT+0xb4>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d00e      	beq.n	8004d74 <HAL_TIM_Base_Start_IT+0x6c>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a19      	ldr	r2, [pc, #100]	; (8004dc0 <HAL_TIM_Base_Start_IT+0xb8>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d009      	beq.n	8004d74 <HAL_TIM_Base_Start_IT+0x6c>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a17      	ldr	r2, [pc, #92]	; (8004dc4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d004      	beq.n	8004d74 <HAL_TIM_Base_Start_IT+0x6c>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a16      	ldr	r2, [pc, #88]	; (8004dc8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d111      	bne.n	8004d98 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f003 0307 	and.w	r3, r3, #7
 8004d7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2b06      	cmp	r3, #6
 8004d84:	d010      	beq.n	8004da8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f042 0201 	orr.w	r2, r2, #1
 8004d94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d96:	e007      	b.n	8004da8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f042 0201 	orr.w	r2, r2, #1
 8004da6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	40010000 	.word	0x40010000
 8004dbc:	40000400 	.word	0x40000400
 8004dc0:	40000800 	.word	0x40000800
 8004dc4:	40000c00 	.word	0x40000c00
 8004dc8:	40014000 	.word	0x40014000

08004dcc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e041      	b.n	8004e62 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d106      	bne.n	8004df8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f839 	bl	8004e6a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	3304      	adds	r3, #4
 8004e08:	4619      	mov	r1, r3
 8004e0a:	4610      	mov	r0, r2
 8004e0c:	f000 fa72 	bl	80052f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e72:	bf00      	nop
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
	...

08004e80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d109      	bne.n	8004ea4 <HAL_TIM_PWM_Start+0x24>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	bf14      	ite	ne
 8004e9c:	2301      	movne	r3, #1
 8004e9e:	2300      	moveq	r3, #0
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	e022      	b.n	8004eea <HAL_TIM_PWM_Start+0x6a>
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	d109      	bne.n	8004ebe <HAL_TIM_PWM_Start+0x3e>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	bf14      	ite	ne
 8004eb6:	2301      	movne	r3, #1
 8004eb8:	2300      	moveq	r3, #0
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	e015      	b.n	8004eea <HAL_TIM_PWM_Start+0x6a>
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	2b08      	cmp	r3, #8
 8004ec2:	d109      	bne.n	8004ed8 <HAL_TIM_PWM_Start+0x58>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	bf14      	ite	ne
 8004ed0:	2301      	movne	r3, #1
 8004ed2:	2300      	moveq	r3, #0
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	e008      	b.n	8004eea <HAL_TIM_PWM_Start+0x6a>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	bf14      	ite	ne
 8004ee4:	2301      	movne	r3, #1
 8004ee6:	2300      	moveq	r3, #0
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e068      	b.n	8004fc4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d104      	bne.n	8004f02 <HAL_TIM_PWM_Start+0x82>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2202      	movs	r2, #2
 8004efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f00:	e013      	b.n	8004f2a <HAL_TIM_PWM_Start+0xaa>
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	2b04      	cmp	r3, #4
 8004f06:	d104      	bne.n	8004f12 <HAL_TIM_PWM_Start+0x92>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f10:	e00b      	b.n	8004f2a <HAL_TIM_PWM_Start+0xaa>
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	2b08      	cmp	r3, #8
 8004f16:	d104      	bne.n	8004f22 <HAL_TIM_PWM_Start+0xa2>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f20:	e003      	b.n	8004f2a <HAL_TIM_PWM_Start+0xaa>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2202      	movs	r2, #2
 8004f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	6839      	ldr	r1, [r7, #0]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 fc84 	bl	8005840 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a23      	ldr	r2, [pc, #140]	; (8004fcc <HAL_TIM_PWM_Start+0x14c>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d107      	bne.n	8004f52 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a1d      	ldr	r2, [pc, #116]	; (8004fcc <HAL_TIM_PWM_Start+0x14c>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d018      	beq.n	8004f8e <HAL_TIM_PWM_Start+0x10e>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f64:	d013      	beq.n	8004f8e <HAL_TIM_PWM_Start+0x10e>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a19      	ldr	r2, [pc, #100]	; (8004fd0 <HAL_TIM_PWM_Start+0x150>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d00e      	beq.n	8004f8e <HAL_TIM_PWM_Start+0x10e>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a17      	ldr	r2, [pc, #92]	; (8004fd4 <HAL_TIM_PWM_Start+0x154>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d009      	beq.n	8004f8e <HAL_TIM_PWM_Start+0x10e>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a16      	ldr	r2, [pc, #88]	; (8004fd8 <HAL_TIM_PWM_Start+0x158>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d004      	beq.n	8004f8e <HAL_TIM_PWM_Start+0x10e>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a14      	ldr	r2, [pc, #80]	; (8004fdc <HAL_TIM_PWM_Start+0x15c>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d111      	bne.n	8004fb2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f003 0307 	and.w	r3, r3, #7
 8004f98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2b06      	cmp	r3, #6
 8004f9e:	d010      	beq.n	8004fc2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f042 0201 	orr.w	r2, r2, #1
 8004fae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fb0:	e007      	b.n	8004fc2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f042 0201 	orr.w	r2, r2, #1
 8004fc0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	40010000 	.word	0x40010000
 8004fd0:	40000400 	.word	0x40000400
 8004fd4:	40000800 	.word	0x40000800
 8004fd8:	40000c00 	.word	0x40000c00
 8004fdc:	40014000 	.word	0x40014000

08004fe0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fec:	2300      	movs	r3, #0
 8004fee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d101      	bne.n	8004ffe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	e0ae      	b.n	800515c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b0c      	cmp	r3, #12
 800500a:	f200 809f 	bhi.w	800514c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800500e:	a201      	add	r2, pc, #4	; (adr r2, 8005014 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005014:	08005049 	.word	0x08005049
 8005018:	0800514d 	.word	0x0800514d
 800501c:	0800514d 	.word	0x0800514d
 8005020:	0800514d 	.word	0x0800514d
 8005024:	08005089 	.word	0x08005089
 8005028:	0800514d 	.word	0x0800514d
 800502c:	0800514d 	.word	0x0800514d
 8005030:	0800514d 	.word	0x0800514d
 8005034:	080050cb 	.word	0x080050cb
 8005038:	0800514d 	.word	0x0800514d
 800503c:	0800514d 	.word	0x0800514d
 8005040:	0800514d 	.word	0x0800514d
 8005044:	0800510b 	.word	0x0800510b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68b9      	ldr	r1, [r7, #8]
 800504e:	4618      	mov	r0, r3
 8005050:	f000 f9d0 	bl	80053f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	699a      	ldr	r2, [r3, #24]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f042 0208 	orr.w	r2, r2, #8
 8005062:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	699a      	ldr	r2, [r3, #24]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 0204 	bic.w	r2, r2, #4
 8005072:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6999      	ldr	r1, [r3, #24]
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	691a      	ldr	r2, [r3, #16]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	619a      	str	r2, [r3, #24]
      break;
 8005086:	e064      	b.n	8005152 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68b9      	ldr	r1, [r7, #8]
 800508e:	4618      	mov	r0, r3
 8005090:	f000 fa16 	bl	80054c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699a      	ldr	r2, [r3, #24]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699a      	ldr	r2, [r3, #24]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6999      	ldr	r1, [r3, #24]
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	021a      	lsls	r2, r3, #8
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	430a      	orrs	r2, r1
 80050c6:	619a      	str	r2, [r3, #24]
      break;
 80050c8:	e043      	b.n	8005152 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68b9      	ldr	r1, [r7, #8]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f000 fa61 	bl	8005598 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	69da      	ldr	r2, [r3, #28]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f042 0208 	orr.w	r2, r2, #8
 80050e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	69da      	ldr	r2, [r3, #28]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 0204 	bic.w	r2, r2, #4
 80050f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	69d9      	ldr	r1, [r3, #28]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	691a      	ldr	r2, [r3, #16]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	430a      	orrs	r2, r1
 8005106:	61da      	str	r2, [r3, #28]
      break;
 8005108:	e023      	b.n	8005152 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68b9      	ldr	r1, [r7, #8]
 8005110:	4618      	mov	r0, r3
 8005112:	f000 faab 	bl	800566c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	69da      	ldr	r2, [r3, #28]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005124:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	69da      	ldr	r2, [r3, #28]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005134:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	69d9      	ldr	r1, [r3, #28]
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	021a      	lsls	r2, r3, #8
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	430a      	orrs	r2, r1
 8005148:	61da      	str	r2, [r3, #28]
      break;
 800514a:	e002      	b.n	8005152 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	75fb      	strb	r3, [r7, #23]
      break;
 8005150:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800515a:	7dfb      	ldrb	r3, [r7, #23]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3718      	adds	r7, #24
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800516e:	2300      	movs	r3, #0
 8005170:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005178:	2b01      	cmp	r3, #1
 800517a:	d101      	bne.n	8005180 <HAL_TIM_ConfigClockSource+0x1c>
 800517c:	2302      	movs	r3, #2
 800517e:	e0b4      	b.n	80052ea <HAL_TIM_ConfigClockSource+0x186>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2202      	movs	r2, #2
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800519e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051b8:	d03e      	beq.n	8005238 <HAL_TIM_ConfigClockSource+0xd4>
 80051ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051be:	f200 8087 	bhi.w	80052d0 <HAL_TIM_ConfigClockSource+0x16c>
 80051c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c6:	f000 8086 	beq.w	80052d6 <HAL_TIM_ConfigClockSource+0x172>
 80051ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ce:	d87f      	bhi.n	80052d0 <HAL_TIM_ConfigClockSource+0x16c>
 80051d0:	2b70      	cmp	r3, #112	; 0x70
 80051d2:	d01a      	beq.n	800520a <HAL_TIM_ConfigClockSource+0xa6>
 80051d4:	2b70      	cmp	r3, #112	; 0x70
 80051d6:	d87b      	bhi.n	80052d0 <HAL_TIM_ConfigClockSource+0x16c>
 80051d8:	2b60      	cmp	r3, #96	; 0x60
 80051da:	d050      	beq.n	800527e <HAL_TIM_ConfigClockSource+0x11a>
 80051dc:	2b60      	cmp	r3, #96	; 0x60
 80051de:	d877      	bhi.n	80052d0 <HAL_TIM_ConfigClockSource+0x16c>
 80051e0:	2b50      	cmp	r3, #80	; 0x50
 80051e2:	d03c      	beq.n	800525e <HAL_TIM_ConfigClockSource+0xfa>
 80051e4:	2b50      	cmp	r3, #80	; 0x50
 80051e6:	d873      	bhi.n	80052d0 <HAL_TIM_ConfigClockSource+0x16c>
 80051e8:	2b40      	cmp	r3, #64	; 0x40
 80051ea:	d058      	beq.n	800529e <HAL_TIM_ConfigClockSource+0x13a>
 80051ec:	2b40      	cmp	r3, #64	; 0x40
 80051ee:	d86f      	bhi.n	80052d0 <HAL_TIM_ConfigClockSource+0x16c>
 80051f0:	2b30      	cmp	r3, #48	; 0x30
 80051f2:	d064      	beq.n	80052be <HAL_TIM_ConfigClockSource+0x15a>
 80051f4:	2b30      	cmp	r3, #48	; 0x30
 80051f6:	d86b      	bhi.n	80052d0 <HAL_TIM_ConfigClockSource+0x16c>
 80051f8:	2b20      	cmp	r3, #32
 80051fa:	d060      	beq.n	80052be <HAL_TIM_ConfigClockSource+0x15a>
 80051fc:	2b20      	cmp	r3, #32
 80051fe:	d867      	bhi.n	80052d0 <HAL_TIM_ConfigClockSource+0x16c>
 8005200:	2b00      	cmp	r3, #0
 8005202:	d05c      	beq.n	80052be <HAL_TIM_ConfigClockSource+0x15a>
 8005204:	2b10      	cmp	r3, #16
 8005206:	d05a      	beq.n	80052be <HAL_TIM_ConfigClockSource+0x15a>
 8005208:	e062      	b.n	80052d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6818      	ldr	r0, [r3, #0]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	6899      	ldr	r1, [r3, #8]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	685a      	ldr	r2, [r3, #4]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	f000 faf1 	bl	8005800 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800522c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	609a      	str	r2, [r3, #8]
      break;
 8005236:	e04f      	b.n	80052d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6818      	ldr	r0, [r3, #0]
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	6899      	ldr	r1, [r3, #8]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f000 fada 	bl	8005800 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689a      	ldr	r2, [r3, #8]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800525a:	609a      	str	r2, [r3, #8]
      break;
 800525c:	e03c      	b.n	80052d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6818      	ldr	r0, [r3, #0]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	6859      	ldr	r1, [r3, #4]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	461a      	mov	r2, r3
 800526c:	f000 fa4e 	bl	800570c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2150      	movs	r1, #80	; 0x50
 8005276:	4618      	mov	r0, r3
 8005278:	f000 faa7 	bl	80057ca <TIM_ITRx_SetConfig>
      break;
 800527c:	e02c      	b.n	80052d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6818      	ldr	r0, [r3, #0]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	6859      	ldr	r1, [r3, #4]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	461a      	mov	r2, r3
 800528c:	f000 fa6d 	bl	800576a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2160      	movs	r1, #96	; 0x60
 8005296:	4618      	mov	r0, r3
 8005298:	f000 fa97 	bl	80057ca <TIM_ITRx_SetConfig>
      break;
 800529c:	e01c      	b.n	80052d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6818      	ldr	r0, [r3, #0]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	6859      	ldr	r1, [r3, #4]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	461a      	mov	r2, r3
 80052ac:	f000 fa2e 	bl	800570c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2140      	movs	r1, #64	; 0x40
 80052b6:	4618      	mov	r0, r3
 80052b8:	f000 fa87 	bl	80057ca <TIM_ITRx_SetConfig>
      break;
 80052bc:	e00c      	b.n	80052d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4619      	mov	r1, r3
 80052c8:	4610      	mov	r0, r2
 80052ca:	f000 fa7e 	bl	80057ca <TIM_ITRx_SetConfig>
      break;
 80052ce:	e003      	b.n	80052d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	73fb      	strb	r3, [r7, #15]
      break;
 80052d4:	e000      	b.n	80052d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80052d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
	...

080052f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a34      	ldr	r2, [pc, #208]	; (80053d8 <TIM_Base_SetConfig+0xe4>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d00f      	beq.n	800532c <TIM_Base_SetConfig+0x38>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005312:	d00b      	beq.n	800532c <TIM_Base_SetConfig+0x38>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a31      	ldr	r2, [pc, #196]	; (80053dc <TIM_Base_SetConfig+0xe8>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d007      	beq.n	800532c <TIM_Base_SetConfig+0x38>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a30      	ldr	r2, [pc, #192]	; (80053e0 <TIM_Base_SetConfig+0xec>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d003      	beq.n	800532c <TIM_Base_SetConfig+0x38>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a2f      	ldr	r2, [pc, #188]	; (80053e4 <TIM_Base_SetConfig+0xf0>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d108      	bne.n	800533e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	4313      	orrs	r3, r2
 800533c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a25      	ldr	r2, [pc, #148]	; (80053d8 <TIM_Base_SetConfig+0xe4>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d01b      	beq.n	800537e <TIM_Base_SetConfig+0x8a>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800534c:	d017      	beq.n	800537e <TIM_Base_SetConfig+0x8a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a22      	ldr	r2, [pc, #136]	; (80053dc <TIM_Base_SetConfig+0xe8>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d013      	beq.n	800537e <TIM_Base_SetConfig+0x8a>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a21      	ldr	r2, [pc, #132]	; (80053e0 <TIM_Base_SetConfig+0xec>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d00f      	beq.n	800537e <TIM_Base_SetConfig+0x8a>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a20      	ldr	r2, [pc, #128]	; (80053e4 <TIM_Base_SetConfig+0xf0>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d00b      	beq.n	800537e <TIM_Base_SetConfig+0x8a>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a1f      	ldr	r2, [pc, #124]	; (80053e8 <TIM_Base_SetConfig+0xf4>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d007      	beq.n	800537e <TIM_Base_SetConfig+0x8a>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a1e      	ldr	r2, [pc, #120]	; (80053ec <TIM_Base_SetConfig+0xf8>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d003      	beq.n	800537e <TIM_Base_SetConfig+0x8a>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a1d      	ldr	r2, [pc, #116]	; (80053f0 <TIM_Base_SetConfig+0xfc>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d108      	bne.n	8005390 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005384:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	4313      	orrs	r3, r2
 800538e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	4313      	orrs	r3, r2
 800539c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a08      	ldr	r2, [pc, #32]	; (80053d8 <TIM_Base_SetConfig+0xe4>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d103      	bne.n	80053c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	691a      	ldr	r2, [r3, #16]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	615a      	str	r2, [r3, #20]
}
 80053ca:	bf00      	nop
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	40010000 	.word	0x40010000
 80053dc:	40000400 	.word	0x40000400
 80053e0:	40000800 	.word	0x40000800
 80053e4:	40000c00 	.word	0x40000c00
 80053e8:	40014000 	.word	0x40014000
 80053ec:	40014400 	.word	0x40014400
 80053f0:	40014800 	.word	0x40014800

080053f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b087      	sub	sp, #28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	f023 0201 	bic.w	r2, r3, #1
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f023 0303 	bic.w	r3, r3, #3
 800542a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	4313      	orrs	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f023 0302 	bic.w	r3, r3, #2
 800543c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	4313      	orrs	r3, r2
 8005446:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a1c      	ldr	r2, [pc, #112]	; (80054bc <TIM_OC1_SetConfig+0xc8>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d10c      	bne.n	800546a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f023 0308 	bic.w	r3, r3, #8
 8005456:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	4313      	orrs	r3, r2
 8005460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f023 0304 	bic.w	r3, r3, #4
 8005468:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a13      	ldr	r2, [pc, #76]	; (80054bc <TIM_OC1_SetConfig+0xc8>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d111      	bne.n	8005496 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005478:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005480:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	4313      	orrs	r3, r2
 800548a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	4313      	orrs	r3, r2
 8005494:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	621a      	str	r2, [r3, #32]
}
 80054b0:	bf00      	nop
 80054b2:	371c      	adds	r7, #28
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	40010000 	.word	0x40010000

080054c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b087      	sub	sp, #28
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	f023 0210 	bic.w	r2, r3, #16
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	021b      	lsls	r3, r3, #8
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	4313      	orrs	r3, r2
 8005502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	f023 0320 	bic.w	r3, r3, #32
 800550a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	011b      	lsls	r3, r3, #4
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	4313      	orrs	r3, r2
 8005516:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a1e      	ldr	r2, [pc, #120]	; (8005594 <TIM_OC2_SetConfig+0xd4>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d10d      	bne.n	800553c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005526:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	011b      	lsls	r3, r3, #4
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	4313      	orrs	r3, r2
 8005532:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800553a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a15      	ldr	r2, [pc, #84]	; (8005594 <TIM_OC2_SetConfig+0xd4>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d113      	bne.n	800556c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800554a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005552:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	695b      	ldr	r3, [r3, #20]
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	4313      	orrs	r3, r2
 800555e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	4313      	orrs	r3, r2
 800556a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	621a      	str	r2, [r3, #32]
}
 8005586:	bf00      	nop
 8005588:	371c      	adds	r7, #28
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	40010000 	.word	0x40010000

08005598 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005598:	b480      	push	{r7}
 800559a:	b087      	sub	sp, #28
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 0303 	bic.w	r3, r3, #3
 80055ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	021b      	lsls	r3, r3, #8
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a1d      	ldr	r2, [pc, #116]	; (8005668 <TIM_OC3_SetConfig+0xd0>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d10d      	bne.n	8005612 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	021b      	lsls	r3, r3, #8
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	4313      	orrs	r3, r2
 8005608:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005610:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a14      	ldr	r2, [pc, #80]	; (8005668 <TIM_OC3_SetConfig+0xd0>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d113      	bne.n	8005642 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	011b      	lsls	r3, r3, #4
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	4313      	orrs	r3, r2
 8005634:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	011b      	lsls	r3, r3, #4
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	4313      	orrs	r3, r2
 8005640:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	621a      	str	r2, [r3, #32]
}
 800565c:	bf00      	nop
 800565e:	371c      	adds	r7, #28
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	40010000 	.word	0x40010000

0800566c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800566c:	b480      	push	{r7}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800569a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	021b      	lsls	r3, r3, #8
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	031b      	lsls	r3, r3, #12
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a10      	ldr	r2, [pc, #64]	; (8005708 <TIM_OC4_SetConfig+0x9c>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d109      	bne.n	80056e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	019b      	lsls	r3, r3, #6
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	4313      	orrs	r3, r2
 80056de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	621a      	str	r2, [r3, #32]
}
 80056fa:	bf00      	nop
 80056fc:	371c      	adds	r7, #28
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	40010000 	.word	0x40010000

0800570c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800570c:	b480      	push	{r7}
 800570e:	b087      	sub	sp, #28
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6a1b      	ldr	r3, [r3, #32]
 800571c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	f023 0201 	bic.w	r2, r3, #1
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005736:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	011b      	lsls	r3, r3, #4
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	4313      	orrs	r3, r2
 8005740:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f023 030a 	bic.w	r3, r3, #10
 8005748:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	4313      	orrs	r3, r2
 8005750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	621a      	str	r2, [r3, #32]
}
 800575e:	bf00      	nop
 8005760:	371c      	adds	r7, #28
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800576a:	b480      	push	{r7}
 800576c:	b087      	sub	sp, #28
 800576e:	af00      	add	r7, sp, #0
 8005770:	60f8      	str	r0, [r7, #12]
 8005772:	60b9      	str	r1, [r7, #8]
 8005774:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	f023 0210 	bic.w	r2, r3, #16
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005794:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	031b      	lsls	r3, r3, #12
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	4313      	orrs	r3, r2
 800579e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	011b      	lsls	r3, r3, #4
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	621a      	str	r2, [r3, #32]
}
 80057be:	bf00      	nop
 80057c0:	371c      	adds	r7, #28
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b085      	sub	sp, #20
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
 80057d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	f043 0307 	orr.w	r3, r3, #7
 80057ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	609a      	str	r2, [r3, #8]
}
 80057f4:	bf00      	nop
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
 800580c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800581a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	021a      	lsls	r2, r3, #8
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	431a      	orrs	r2, r3
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	4313      	orrs	r3, r2
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	4313      	orrs	r3, r2
 800582c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	609a      	str	r2, [r3, #8]
}
 8005834:	bf00      	nop
 8005836:	371c      	adds	r7, #28
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005840:	b480      	push	{r7}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f003 031f 	and.w	r3, r3, #31
 8005852:	2201      	movs	r2, #1
 8005854:	fa02 f303 	lsl.w	r3, r2, r3
 8005858:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6a1a      	ldr	r2, [r3, #32]
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	43db      	mvns	r3, r3
 8005862:	401a      	ands	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6a1a      	ldr	r2, [r3, #32]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f003 031f 	and.w	r3, r3, #31
 8005872:	6879      	ldr	r1, [r7, #4]
 8005874:	fa01 f303 	lsl.w	r3, r1, r3
 8005878:	431a      	orrs	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	621a      	str	r2, [r3, #32]
}
 800587e:	bf00      	nop
 8005880:	371c      	adds	r7, #28
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
	...

0800588c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800589c:	2b01      	cmp	r3, #1
 800589e:	d101      	bne.n	80058a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058a0:	2302      	movs	r3, #2
 80058a2:	e050      	b.n	8005946 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a1c      	ldr	r2, [pc, #112]	; (8005954 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d018      	beq.n	800591a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058f0:	d013      	beq.n	800591a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a18      	ldr	r2, [pc, #96]	; (8005958 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d00e      	beq.n	800591a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a16      	ldr	r2, [pc, #88]	; (800595c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d009      	beq.n	800591a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a15      	ldr	r2, [pc, #84]	; (8005960 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d004      	beq.n	800591a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a13      	ldr	r2, [pc, #76]	; (8005964 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d10c      	bne.n	8005934 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005920:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	4313      	orrs	r3, r2
 800592a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3714      	adds	r7, #20
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	40010000 	.word	0x40010000
 8005958:	40000400 	.word	0x40000400
 800595c:	40000800 	.word	0x40000800
 8005960:	40000c00 	.word	0x40000c00
 8005964:	40014000 	.word	0x40014000

08005968 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005972:	2300      	movs	r3, #0
 8005974:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800597c:	2b01      	cmp	r3, #1
 800597e:	d101      	bne.n	8005984 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005980:	2302      	movs	r3, #2
 8005982:	e03d      	b.n	8005a00 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	4313      	orrs	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	4313      	orrs	r3, r2
 80059de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	69db      	ldr	r3, [r3, #28]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3714      	adds	r7, #20
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d101      	bne.n	8005a1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e03f      	b.n	8005a9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d106      	bne.n	8005a38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7fc fdf2 	bl	800261c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2224      	movs	r2, #36	; 0x24
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68da      	ldr	r2, [r3, #12]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 fea3 	bl	800679c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	691a      	ldr	r2, [r3, #16]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	695a      	ldr	r2, [r3, #20]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68da      	ldr	r2, [r3, #12]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2220      	movs	r2, #32
 8005a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2220      	movs	r2, #32
 8005a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b085      	sub	sp, #20
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	60f8      	str	r0, [r7, #12]
 8005aae:	60b9      	str	r1, [r7, #8]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b20      	cmp	r3, #32
 8005abe:	d130      	bne.n	8005b22 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d002      	beq.n	8005acc <HAL_UART_Transmit_IT+0x26>
 8005ac6:	88fb      	ldrh	r3, [r7, #6]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e029      	b.n	8005b24 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d101      	bne.n	8005ade <HAL_UART_Transmit_IT+0x38>
 8005ada:	2302      	movs	r3, #2
 8005adc:	e022      	b.n	8005b24 <HAL_UART_Transmit_IT+0x7e>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	88fa      	ldrh	r2, [r7, #6]
 8005af0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	88fa      	ldrh	r2, [r7, #6]
 8005af6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2221      	movs	r2, #33	; 0x21
 8005b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68da      	ldr	r2, [r3, #12]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b1c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	e000      	b.n	8005b24 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005b22:	2302      	movs	r3, #2
  }
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3714      	adds	r7, #20
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b20      	cmp	r3, #32
 8005b48:	d11d      	bne.n	8005b86 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d002      	beq.n	8005b56 <HAL_UART_Receive_DMA+0x26>
 8005b50:	88fb      	ldrh	r3, [r7, #6]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d101      	bne.n	8005b5a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e016      	b.n	8005b88 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d101      	bne.n	8005b68 <HAL_UART_Receive_DMA+0x38>
 8005b64:	2302      	movs	r3, #2
 8005b66:	e00f      	b.n	8005b88 <HAL_UART_Receive_DMA+0x58>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005b76:	88fb      	ldrh	r3, [r7, #6]
 8005b78:	461a      	mov	r2, r3
 8005b7a:	68b9      	ldr	r1, [r7, #8]
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f000 fbad 	bl	80062dc <UART_Start_Receive_DMA>
 8005b82:	4603      	mov	r3, r0
 8005b84:	e000      	b.n	8005b88 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005b86:	2302      	movs	r3, #2
  }
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b0ba      	sub	sp, #232	; 0xe8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bc6:	f003 030f 	and.w	r3, r3, #15
 8005bca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005bce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d10f      	bne.n	8005bf6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bda:	f003 0320 	and.w	r3, r3, #32
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d009      	beq.n	8005bf6 <HAL_UART_IRQHandler+0x66>
 8005be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005be6:	f003 0320 	and.w	r3, r3, #32
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d003      	beq.n	8005bf6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 fd19 	bl	8006626 <UART_Receive_IT>
      return;
 8005bf4:	e256      	b.n	80060a4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005bf6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f000 80de 	beq.w	8005dbc <HAL_UART_IRQHandler+0x22c>
 8005c00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d106      	bne.n	8005c1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c10:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f000 80d1 	beq.w	8005dbc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00b      	beq.n	8005c3e <HAL_UART_IRQHandler+0xae>
 8005c26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d005      	beq.n	8005c3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c36:	f043 0201 	orr.w	r2, r3, #1
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c42:	f003 0304 	and.w	r3, r3, #4
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00b      	beq.n	8005c62 <HAL_UART_IRQHandler+0xd2>
 8005c4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d005      	beq.n	8005c62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5a:	f043 0202 	orr.w	r2, r3, #2
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00b      	beq.n	8005c86 <HAL_UART_IRQHandler+0xf6>
 8005c6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d005      	beq.n	8005c86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7e:	f043 0204 	orr.w	r2, r3, #4
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c8a:	f003 0308 	and.w	r3, r3, #8
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d011      	beq.n	8005cb6 <HAL_UART_IRQHandler+0x126>
 8005c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c96:	f003 0320 	and.w	r3, r3, #32
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d105      	bne.n	8005caa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d005      	beq.n	8005cb6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cae:	f043 0208 	orr.w	r2, r3, #8
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f000 81ed 	beq.w	800609a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cc4:	f003 0320 	and.w	r3, r3, #32
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d008      	beq.n	8005cde <HAL_UART_IRQHandler+0x14e>
 8005ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cd0:	f003 0320 	and.w	r3, r3, #32
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d002      	beq.n	8005cde <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 fca4 	bl	8006626 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce8:	2b40      	cmp	r3, #64	; 0x40
 8005cea:	bf0c      	ite	eq
 8005cec:	2301      	moveq	r3, #1
 8005cee:	2300      	movne	r3, #0
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfa:	f003 0308 	and.w	r3, r3, #8
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d103      	bne.n	8005d0a <HAL_UART_IRQHandler+0x17a>
 8005d02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d04f      	beq.n	8005daa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 fbac 	bl	8006468 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d1a:	2b40      	cmp	r3, #64	; 0x40
 8005d1c:	d141      	bne.n	8005da2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	3314      	adds	r3, #20
 8005d24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d2c:	e853 3f00 	ldrex	r3, [r3]
 8005d30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	3314      	adds	r3, #20
 8005d46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d5a:	e841 2300 	strex	r3, r2, [r1]
 8005d5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1d9      	bne.n	8005d1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d013      	beq.n	8005d9a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d76:	4a7d      	ldr	r2, [pc, #500]	; (8005f6c <HAL_UART_IRQHandler+0x3dc>)
 8005d78:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f7fd fe3e 	bl	8003a00 <HAL_DMA_Abort_IT>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d016      	beq.n	8005db8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d94:	4610      	mov	r0, r2
 8005d96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d98:	e00e      	b.n	8005db8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f990 	bl	80060c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da0:	e00a      	b.n	8005db8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f98c 	bl	80060c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da8:	e006      	b.n	8005db8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f988 	bl	80060c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005db6:	e170      	b.n	800609a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005db8:	bf00      	nop
    return;
 8005dba:	e16e      	b.n	800609a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	f040 814a 	bne.w	800605a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dca:	f003 0310 	and.w	r3, r3, #16
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f000 8143 	beq.w	800605a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dd8:	f003 0310 	and.w	r3, r3, #16
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f000 813c 	beq.w	800605a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005de2:	2300      	movs	r3, #0
 8005de4:	60bb      	str	r3, [r7, #8]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	60bb      	str	r3, [r7, #8]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	60bb      	str	r3, [r7, #8]
 8005df6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e02:	2b40      	cmp	r3, #64	; 0x40
 8005e04:	f040 80b4 	bne.w	8005f70 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f000 8140 	beq.w	800609e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e26:	429a      	cmp	r2, r3
 8005e28:	f080 8139 	bcs.w	800609e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e32:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e3e:	f000 8088 	beq.w	8005f52 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	330c      	adds	r3, #12
 8005e48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e50:	e853 3f00 	ldrex	r3, [r3]
 8005e54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	330c      	adds	r3, #12
 8005e6a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005e6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e76:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e7e:	e841 2300 	strex	r3, r2, [r1]
 8005e82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1d9      	bne.n	8005e42 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	3314      	adds	r3, #20
 8005e94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e98:	e853 3f00 	ldrex	r3, [r3]
 8005e9c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ea0:	f023 0301 	bic.w	r3, r3, #1
 8005ea4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	3314      	adds	r3, #20
 8005eae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005eb2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005eb6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005eba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005ebe:	e841 2300 	strex	r3, r2, [r1]
 8005ec2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ec4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1e1      	bne.n	8005e8e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	3314      	adds	r3, #20
 8005ed0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ed4:	e853 3f00 	ldrex	r3, [r3]
 8005ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005eda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005edc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ee0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	3314      	adds	r3, #20
 8005eea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005eee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ef0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ef4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ef6:	e841 2300 	strex	r3, r2, [r1]
 8005efa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005efc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1e3      	bne.n	8005eca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2220      	movs	r2, #32
 8005f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	330c      	adds	r3, #12
 8005f16:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f1a:	e853 3f00 	ldrex	r3, [r3]
 8005f1e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f22:	f023 0310 	bic.w	r3, r3, #16
 8005f26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	330c      	adds	r3, #12
 8005f30:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005f34:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f36:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f3c:	e841 2300 	strex	r3, r2, [r1]
 8005f40:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1e3      	bne.n	8005f10 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7fd fce7 	bl	8003920 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	4619      	mov	r1, r3
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 f8b6 	bl	80060d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f68:	e099      	b.n	800609e <HAL_UART_IRQHandler+0x50e>
 8005f6a:	bf00      	nop
 8005f6c:	0800652f 	.word	0x0800652f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f000 808b 	beq.w	80060a2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005f8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f000 8086 	beq.w	80060a2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	330c      	adds	r3, #12
 8005f9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa0:	e853 3f00 	ldrex	r3, [r3]
 8005fa4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	330c      	adds	r3, #12
 8005fb6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005fba:	647a      	str	r2, [r7, #68]	; 0x44
 8005fbc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fc2:	e841 2300 	strex	r3, r2, [r1]
 8005fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1e3      	bne.n	8005f96 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	3314      	adds	r3, #20
 8005fd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd8:	e853 3f00 	ldrex	r3, [r3]
 8005fdc:	623b      	str	r3, [r7, #32]
   return(result);
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	f023 0301 	bic.w	r3, r3, #1
 8005fe4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	3314      	adds	r3, #20
 8005fee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005ff2:	633a      	str	r2, [r7, #48]	; 0x30
 8005ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ffa:	e841 2300 	strex	r3, r2, [r1]
 8005ffe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1e3      	bne.n	8005fce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2220      	movs	r2, #32
 800600a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	330c      	adds	r3, #12
 800601a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	e853 3f00 	ldrex	r3, [r3]
 8006022:	60fb      	str	r3, [r7, #12]
   return(result);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f023 0310 	bic.w	r3, r3, #16
 800602a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	330c      	adds	r3, #12
 8006034:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006038:	61fa      	str	r2, [r7, #28]
 800603a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603c:	69b9      	ldr	r1, [r7, #24]
 800603e:	69fa      	ldr	r2, [r7, #28]
 8006040:	e841 2300 	strex	r3, r2, [r1]
 8006044:	617b      	str	r3, [r7, #20]
   return(result);
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1e3      	bne.n	8006014 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800604c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006050:	4619      	mov	r1, r3
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 f83e 	bl	80060d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006058:	e023      	b.n	80060a2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800605a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800605e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006062:	2b00      	cmp	r3, #0
 8006064:	d009      	beq.n	800607a <HAL_UART_IRQHandler+0x4ea>
 8006066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800606a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800606e:	2b00      	cmp	r3, #0
 8006070:	d003      	beq.n	800607a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 fa6f 	bl	8006556 <UART_Transmit_IT>
    return;
 8006078:	e014      	b.n	80060a4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800607a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800607e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00e      	beq.n	80060a4 <HAL_UART_IRQHandler+0x514>
 8006086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800608a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800608e:	2b00      	cmp	r3, #0
 8006090:	d008      	beq.n	80060a4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 faaf 	bl	80065f6 <UART_EndTransmit_IT>
    return;
 8006098:	e004      	b.n	80060a4 <HAL_UART_IRQHandler+0x514>
    return;
 800609a:	bf00      	nop
 800609c:	e002      	b.n	80060a4 <HAL_UART_IRQHandler+0x514>
      return;
 800609e:	bf00      	nop
 80060a0:	e000      	b.n	80060a4 <HAL_UART_IRQHandler+0x514>
      return;
 80060a2:	bf00      	nop
  }
}
 80060a4:	37e8      	adds	r7, #232	; 0xe8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop

080060ac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	460b      	mov	r3, r1
 80060de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b09c      	sub	sp, #112	; 0x70
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006104:	2b00      	cmp	r3, #0
 8006106:	d172      	bne.n	80061ee <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800610a:	2200      	movs	r2, #0
 800610c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800610e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	330c      	adds	r3, #12
 8006114:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006118:	e853 3f00 	ldrex	r3, [r3]
 800611c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800611e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006120:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006124:	66bb      	str	r3, [r7, #104]	; 0x68
 8006126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	330c      	adds	r3, #12
 800612c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800612e:	65ba      	str	r2, [r7, #88]	; 0x58
 8006130:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006132:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006134:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006136:	e841 2300 	strex	r3, r2, [r1]
 800613a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800613c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1e5      	bne.n	800610e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	3314      	adds	r3, #20
 8006148:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614c:	e853 3f00 	ldrex	r3, [r3]
 8006150:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006154:	f023 0301 	bic.w	r3, r3, #1
 8006158:	667b      	str	r3, [r7, #100]	; 0x64
 800615a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	3314      	adds	r3, #20
 8006160:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006162:	647a      	str	r2, [r7, #68]	; 0x44
 8006164:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006166:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006168:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800616a:	e841 2300 	strex	r3, r2, [r1]
 800616e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1e5      	bne.n	8006142 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	3314      	adds	r3, #20
 800617c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006180:	e853 3f00 	ldrex	r3, [r3]
 8006184:	623b      	str	r3, [r7, #32]
   return(result);
 8006186:	6a3b      	ldr	r3, [r7, #32]
 8006188:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800618c:	663b      	str	r3, [r7, #96]	; 0x60
 800618e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	3314      	adds	r3, #20
 8006194:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006196:	633a      	str	r2, [r7, #48]	; 0x30
 8006198:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800619c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800619e:	e841 2300 	strex	r3, r2, [r1]
 80061a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1e5      	bne.n	8006176 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80061aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061ac:	2220      	movs	r2, #32
 80061ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d119      	bne.n	80061ee <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	330c      	adds	r3, #12
 80061c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	e853 3f00 	ldrex	r3, [r3]
 80061c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f023 0310 	bic.w	r3, r3, #16
 80061d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	330c      	adds	r3, #12
 80061d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80061da:	61fa      	str	r2, [r7, #28]
 80061dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061de:	69b9      	ldr	r1, [r7, #24]
 80061e0:	69fa      	ldr	r2, [r7, #28]
 80061e2:	e841 2300 	strex	r3, r2, [r1]
 80061e6:	617b      	str	r3, [r7, #20]
   return(result);
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1e5      	bne.n	80061ba <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d106      	bne.n	8006204 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061fa:	4619      	mov	r1, r3
 80061fc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80061fe:	f7ff ff69 	bl	80060d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006202:	e002      	b.n	800620a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006204:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006206:	f7fb faad 	bl	8001764 <HAL_UART_RxCpltCallback>
}
 800620a:	bf00      	nop
 800620c:	3770      	adds	r7, #112	; 0x70
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006212:	b580      	push	{r7, lr}
 8006214:	b084      	sub	sp, #16
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006224:	2b01      	cmp	r3, #1
 8006226:	d108      	bne.n	800623a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800622c:	085b      	lsrs	r3, r3, #1
 800622e:	b29b      	uxth	r3, r3
 8006230:	4619      	mov	r1, r3
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f7ff ff4e 	bl	80060d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006238:	e002      	b.n	8006240 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f7ff ff36 	bl	80060ac <HAL_UART_RxHalfCpltCallback>
}
 8006240:	bf00      	nop
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006250:	2300      	movs	r3, #0
 8006252:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006258:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	695b      	ldr	r3, [r3, #20]
 8006260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006264:	2b80      	cmp	r3, #128	; 0x80
 8006266:	bf0c      	ite	eq
 8006268:	2301      	moveq	r3, #1
 800626a:	2300      	movne	r3, #0
 800626c:	b2db      	uxtb	r3, r3
 800626e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006276:	b2db      	uxtb	r3, r3
 8006278:	2b21      	cmp	r3, #33	; 0x21
 800627a:	d108      	bne.n	800628e <UART_DMAError+0x46>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d005      	beq.n	800628e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	2200      	movs	r2, #0
 8006286:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006288:	68b8      	ldr	r0, [r7, #8]
 800628a:	f000 f8c5 	bl	8006418 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	695b      	ldr	r3, [r3, #20]
 8006294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006298:	2b40      	cmp	r3, #64	; 0x40
 800629a:	bf0c      	ite	eq
 800629c:	2301      	moveq	r3, #1
 800629e:	2300      	movne	r3, #0
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b22      	cmp	r3, #34	; 0x22
 80062ae:	d108      	bne.n	80062c2 <UART_DMAError+0x7a>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d005      	beq.n	80062c2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	2200      	movs	r2, #0
 80062ba:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80062bc:	68b8      	ldr	r0, [r7, #8]
 80062be:	f000 f8d3 	bl	8006468 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c6:	f043 0210 	orr.w	r2, r3, #16
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062ce:	68b8      	ldr	r0, [r7, #8]
 80062d0:	f7ff fef6 	bl	80060c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062d4:	bf00      	nop
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b098      	sub	sp, #96	; 0x60
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	4613      	mov	r3, r2
 80062e8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	88fa      	ldrh	r2, [r7, #6]
 80062f4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2222      	movs	r2, #34	; 0x22
 8006300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006308:	4a40      	ldr	r2, [pc, #256]	; (800640c <UART_Start_Receive_DMA+0x130>)
 800630a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006310:	4a3f      	ldr	r2, [pc, #252]	; (8006410 <UART_Start_Receive_DMA+0x134>)
 8006312:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006318:	4a3e      	ldr	r2, [pc, #248]	; (8006414 <UART_Start_Receive_DMA+0x138>)
 800631a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006320:	2200      	movs	r2, #0
 8006322:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006324:	f107 0308 	add.w	r3, r7, #8
 8006328:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3304      	adds	r3, #4
 8006334:	4619      	mov	r1, r3
 8006336:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	88fb      	ldrh	r3, [r7, #6]
 800633c:	f7fd fa98 	bl	8003870 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006340:	2300      	movs	r3, #0
 8006342:	613b      	str	r3, [r7, #16]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	613b      	str	r3, [r7, #16]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	613b      	str	r3, [r7, #16]
 8006354:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d019      	beq.n	800639a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	330c      	adds	r3, #12
 800636c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006370:	e853 3f00 	ldrex	r3, [r3]
 8006374:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800637c:	65bb      	str	r3, [r7, #88]	; 0x58
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	330c      	adds	r3, #12
 8006384:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006386:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006388:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800638c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800638e:	e841 2300 	strex	r3, r2, [r1]
 8006392:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1e5      	bne.n	8006366 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	3314      	adds	r3, #20
 80063a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a4:	e853 3f00 	ldrex	r3, [r3]
 80063a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ac:	f043 0301 	orr.w	r3, r3, #1
 80063b0:	657b      	str	r3, [r7, #84]	; 0x54
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	3314      	adds	r3, #20
 80063b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80063ba:	63ba      	str	r2, [r7, #56]	; 0x38
 80063bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80063c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063c2:	e841 2300 	strex	r3, r2, [r1]
 80063c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80063c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1e5      	bne.n	800639a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	3314      	adds	r3, #20
 80063d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	e853 3f00 	ldrex	r3, [r3]
 80063dc:	617b      	str	r3, [r7, #20]
   return(result);
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063e4:	653b      	str	r3, [r7, #80]	; 0x50
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	3314      	adds	r3, #20
 80063ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80063ee:	627a      	str	r2, [r7, #36]	; 0x24
 80063f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f2:	6a39      	ldr	r1, [r7, #32]
 80063f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063f6:	e841 2300 	strex	r3, r2, [r1]
 80063fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1e5      	bne.n	80063ce <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3760      	adds	r7, #96	; 0x60
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	080060ed 	.word	0x080060ed
 8006410:	08006213 	.word	0x08006213
 8006414:	08006249 	.word	0x08006249

08006418 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006418:	b480      	push	{r7}
 800641a:	b089      	sub	sp, #36	; 0x24
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	330c      	adds	r3, #12
 8006426:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	e853 3f00 	ldrex	r3, [r3]
 800642e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006436:	61fb      	str	r3, [r7, #28]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	330c      	adds	r3, #12
 800643e:	69fa      	ldr	r2, [r7, #28]
 8006440:	61ba      	str	r2, [r7, #24]
 8006442:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006444:	6979      	ldr	r1, [r7, #20]
 8006446:	69ba      	ldr	r2, [r7, #24]
 8006448:	e841 2300 	strex	r3, r2, [r1]
 800644c:	613b      	str	r3, [r7, #16]
   return(result);
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1e5      	bne.n	8006420 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2220      	movs	r2, #32
 8006458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800645c:	bf00      	nop
 800645e:	3724      	adds	r7, #36	; 0x24
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006468:	b480      	push	{r7}
 800646a:	b095      	sub	sp, #84	; 0x54
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	330c      	adds	r3, #12
 8006476:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800647a:	e853 3f00 	ldrex	r3, [r3]
 800647e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006482:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006486:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	330c      	adds	r3, #12
 800648e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006490:	643a      	str	r2, [r7, #64]	; 0x40
 8006492:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006494:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006496:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006498:	e841 2300 	strex	r3, r2, [r1]
 800649c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800649e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1e5      	bne.n	8006470 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	3314      	adds	r3, #20
 80064aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ac:	6a3b      	ldr	r3, [r7, #32]
 80064ae:	e853 3f00 	ldrex	r3, [r3]
 80064b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	f023 0301 	bic.w	r3, r3, #1
 80064ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	3314      	adds	r3, #20
 80064c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064cc:	e841 2300 	strex	r3, r2, [r1]
 80064d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1e5      	bne.n	80064a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d119      	bne.n	8006514 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	330c      	adds	r3, #12
 80064e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	e853 3f00 	ldrex	r3, [r3]
 80064ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	f023 0310 	bic.w	r3, r3, #16
 80064f6:	647b      	str	r3, [r7, #68]	; 0x44
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	330c      	adds	r3, #12
 80064fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006500:	61ba      	str	r2, [r7, #24]
 8006502:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006504:	6979      	ldr	r1, [r7, #20]
 8006506:	69ba      	ldr	r2, [r7, #24]
 8006508:	e841 2300 	strex	r3, r2, [r1]
 800650c:	613b      	str	r3, [r7, #16]
   return(result);
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1e5      	bne.n	80064e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2220      	movs	r2, #32
 8006518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006522:	bf00      	nop
 8006524:	3754      	adds	r7, #84	; 0x54
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b084      	sub	sp, #16
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f7ff fdb9 	bl	80060c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800654e:	bf00      	nop
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006556:	b480      	push	{r7}
 8006558:	b085      	sub	sp, #20
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b21      	cmp	r3, #33	; 0x21
 8006568:	d13e      	bne.n	80065e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006572:	d114      	bne.n	800659e <UART_Transmit_IT+0x48>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d110      	bne.n	800659e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a1b      	ldr	r3, [r3, #32]
 8006580:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	881b      	ldrh	r3, [r3, #0]
 8006586:	461a      	mov	r2, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006590:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a1b      	ldr	r3, [r3, #32]
 8006596:	1c9a      	adds	r2, r3, #2
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	621a      	str	r2, [r3, #32]
 800659c:	e008      	b.n	80065b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	1c59      	adds	r1, r3, #1
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	6211      	str	r1, [r2, #32]
 80065a8:	781a      	ldrb	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	3b01      	subs	r3, #1
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	4619      	mov	r1, r3
 80065be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10f      	bne.n	80065e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68da      	ldr	r2, [r3, #12]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80065e4:	2300      	movs	r3, #0
 80065e6:	e000      	b.n	80065ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80065e8:	2302      	movs	r3, #2
  }
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3714      	adds	r7, #20
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b082      	sub	sp, #8
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68da      	ldr	r2, [r3, #12]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800660c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2220      	movs	r2, #32
 8006612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7fb f8b8 	bl	800178c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3708      	adds	r7, #8
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b08c      	sub	sp, #48	; 0x30
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b22      	cmp	r3, #34	; 0x22
 8006638:	f040 80ab 	bne.w	8006792 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006644:	d117      	bne.n	8006676 <UART_Receive_IT+0x50>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d113      	bne.n	8006676 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800664e:	2300      	movs	r3, #0
 8006650:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006656:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	b29b      	uxth	r3, r3
 8006660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006664:	b29a      	uxth	r2, r3
 8006666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006668:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666e:	1c9a      	adds	r2, r3, #2
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	629a      	str	r2, [r3, #40]	; 0x28
 8006674:	e026      	b.n	80066c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800667a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800667c:	2300      	movs	r3, #0
 800667e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006688:	d007      	beq.n	800669a <UART_Receive_IT+0x74>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10a      	bne.n	80066a8 <UART_Receive_IT+0x82>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d106      	bne.n	80066a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	b2da      	uxtb	r2, r3
 80066a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a4:	701a      	strb	r2, [r3, #0]
 80066a6:	e008      	b.n	80066ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066be:	1c5a      	adds	r2, r3, #1
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	3b01      	subs	r3, #1
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	4619      	mov	r1, r3
 80066d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d15a      	bne.n	800678e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68da      	ldr	r2, [r3, #12]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f022 0220 	bic.w	r2, r2, #32
 80066e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68da      	ldr	r2, [r3, #12]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	695a      	ldr	r2, [r3, #20]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f022 0201 	bic.w	r2, r2, #1
 8006706:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2220      	movs	r2, #32
 800670c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006714:	2b01      	cmp	r3, #1
 8006716:	d135      	bne.n	8006784 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	330c      	adds	r3, #12
 8006724:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	e853 3f00 	ldrex	r3, [r3]
 800672c:	613b      	str	r3, [r7, #16]
   return(result);
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	f023 0310 	bic.w	r3, r3, #16
 8006734:	627b      	str	r3, [r7, #36]	; 0x24
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	330c      	adds	r3, #12
 800673c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800673e:	623a      	str	r2, [r7, #32]
 8006740:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006742:	69f9      	ldr	r1, [r7, #28]
 8006744:	6a3a      	ldr	r2, [r7, #32]
 8006746:	e841 2300 	strex	r3, r2, [r1]
 800674a:	61bb      	str	r3, [r7, #24]
   return(result);
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1e5      	bne.n	800671e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0310 	and.w	r3, r3, #16
 800675c:	2b10      	cmp	r3, #16
 800675e:	d10a      	bne.n	8006776 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006760:	2300      	movs	r3, #0
 8006762:	60fb      	str	r3, [r7, #12]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	60fb      	str	r3, [r7, #12]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	60fb      	str	r3, [r7, #12]
 8006774:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800677a:	4619      	mov	r1, r3
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f7ff fca9 	bl	80060d4 <HAL_UARTEx_RxEventCallback>
 8006782:	e002      	b.n	800678a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f7fa ffed 	bl	8001764 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800678a:	2300      	movs	r3, #0
 800678c:	e002      	b.n	8006794 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800678e:	2300      	movs	r3, #0
 8006790:	e000      	b.n	8006794 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006792:	2302      	movs	r3, #2
  }
}
 8006794:	4618      	mov	r0, r3
 8006796:	3730      	adds	r7, #48	; 0x30
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800679c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067a0:	b0c0      	sub	sp, #256	; 0x100
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80067b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067b8:	68d9      	ldr	r1, [r3, #12]
 80067ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	ea40 0301 	orr.w	r3, r0, r1
 80067c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ca:	689a      	ldr	r2, [r3, #8]
 80067cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	431a      	orrs	r2, r3
 80067d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d8:	695b      	ldr	r3, [r3, #20]
 80067da:	431a      	orrs	r2, r3
 80067dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e0:	69db      	ldr	r3, [r3, #28]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80067e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80067f4:	f021 010c 	bic.w	r1, r1, #12
 80067f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006802:	430b      	orrs	r3, r1
 8006804:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006816:	6999      	ldr	r1, [r3, #24]
 8006818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	ea40 0301 	orr.w	r3, r0, r1
 8006822:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	4b8f      	ldr	r3, [pc, #572]	; (8006a68 <UART_SetConfig+0x2cc>)
 800682c:	429a      	cmp	r2, r3
 800682e:	d005      	beq.n	800683c <UART_SetConfig+0xa0>
 8006830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	4b8d      	ldr	r3, [pc, #564]	; (8006a6c <UART_SetConfig+0x2d0>)
 8006838:	429a      	cmp	r2, r3
 800683a:	d104      	bne.n	8006846 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800683c:	f7fe f9a6 	bl	8004b8c <HAL_RCC_GetPCLK2Freq>
 8006840:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006844:	e003      	b.n	800684e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006846:	f7fe f98d 	bl	8004b64 <HAL_RCC_GetPCLK1Freq>
 800684a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800684e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006852:	69db      	ldr	r3, [r3, #28]
 8006854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006858:	f040 810c 	bne.w	8006a74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800685c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006860:	2200      	movs	r2, #0
 8006862:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006866:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800686a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800686e:	4622      	mov	r2, r4
 8006870:	462b      	mov	r3, r5
 8006872:	1891      	adds	r1, r2, r2
 8006874:	65b9      	str	r1, [r7, #88]	; 0x58
 8006876:	415b      	adcs	r3, r3
 8006878:	65fb      	str	r3, [r7, #92]	; 0x5c
 800687a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800687e:	4621      	mov	r1, r4
 8006880:	eb12 0801 	adds.w	r8, r2, r1
 8006884:	4629      	mov	r1, r5
 8006886:	eb43 0901 	adc.w	r9, r3, r1
 800688a:	f04f 0200 	mov.w	r2, #0
 800688e:	f04f 0300 	mov.w	r3, #0
 8006892:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006896:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800689a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800689e:	4690      	mov	r8, r2
 80068a0:	4699      	mov	r9, r3
 80068a2:	4623      	mov	r3, r4
 80068a4:	eb18 0303 	adds.w	r3, r8, r3
 80068a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80068ac:	462b      	mov	r3, r5
 80068ae:	eb49 0303 	adc.w	r3, r9, r3
 80068b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80068b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80068c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80068c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80068ca:	460b      	mov	r3, r1
 80068cc:	18db      	adds	r3, r3, r3
 80068ce:	653b      	str	r3, [r7, #80]	; 0x50
 80068d0:	4613      	mov	r3, r2
 80068d2:	eb42 0303 	adc.w	r3, r2, r3
 80068d6:	657b      	str	r3, [r7, #84]	; 0x54
 80068d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80068dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80068e0:	f7fa f98a 	bl	8000bf8 <__aeabi_uldivmod>
 80068e4:	4602      	mov	r2, r0
 80068e6:	460b      	mov	r3, r1
 80068e8:	4b61      	ldr	r3, [pc, #388]	; (8006a70 <UART_SetConfig+0x2d4>)
 80068ea:	fba3 2302 	umull	r2, r3, r3, r2
 80068ee:	095b      	lsrs	r3, r3, #5
 80068f0:	011c      	lsls	r4, r3, #4
 80068f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068f6:	2200      	movs	r2, #0
 80068f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006900:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006904:	4642      	mov	r2, r8
 8006906:	464b      	mov	r3, r9
 8006908:	1891      	adds	r1, r2, r2
 800690a:	64b9      	str	r1, [r7, #72]	; 0x48
 800690c:	415b      	adcs	r3, r3
 800690e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006910:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006914:	4641      	mov	r1, r8
 8006916:	eb12 0a01 	adds.w	sl, r2, r1
 800691a:	4649      	mov	r1, r9
 800691c:	eb43 0b01 	adc.w	fp, r3, r1
 8006920:	f04f 0200 	mov.w	r2, #0
 8006924:	f04f 0300 	mov.w	r3, #0
 8006928:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800692c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006930:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006934:	4692      	mov	sl, r2
 8006936:	469b      	mov	fp, r3
 8006938:	4643      	mov	r3, r8
 800693a:	eb1a 0303 	adds.w	r3, sl, r3
 800693e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006942:	464b      	mov	r3, r9
 8006944:	eb4b 0303 	adc.w	r3, fp, r3
 8006948:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800694c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006958:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800695c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006960:	460b      	mov	r3, r1
 8006962:	18db      	adds	r3, r3, r3
 8006964:	643b      	str	r3, [r7, #64]	; 0x40
 8006966:	4613      	mov	r3, r2
 8006968:	eb42 0303 	adc.w	r3, r2, r3
 800696c:	647b      	str	r3, [r7, #68]	; 0x44
 800696e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006972:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006976:	f7fa f93f 	bl	8000bf8 <__aeabi_uldivmod>
 800697a:	4602      	mov	r2, r0
 800697c:	460b      	mov	r3, r1
 800697e:	4611      	mov	r1, r2
 8006980:	4b3b      	ldr	r3, [pc, #236]	; (8006a70 <UART_SetConfig+0x2d4>)
 8006982:	fba3 2301 	umull	r2, r3, r3, r1
 8006986:	095b      	lsrs	r3, r3, #5
 8006988:	2264      	movs	r2, #100	; 0x64
 800698a:	fb02 f303 	mul.w	r3, r2, r3
 800698e:	1acb      	subs	r3, r1, r3
 8006990:	00db      	lsls	r3, r3, #3
 8006992:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006996:	4b36      	ldr	r3, [pc, #216]	; (8006a70 <UART_SetConfig+0x2d4>)
 8006998:	fba3 2302 	umull	r2, r3, r3, r2
 800699c:	095b      	lsrs	r3, r3, #5
 800699e:	005b      	lsls	r3, r3, #1
 80069a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069a4:	441c      	add	r4, r3
 80069a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069aa:	2200      	movs	r2, #0
 80069ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80069b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80069b8:	4642      	mov	r2, r8
 80069ba:	464b      	mov	r3, r9
 80069bc:	1891      	adds	r1, r2, r2
 80069be:	63b9      	str	r1, [r7, #56]	; 0x38
 80069c0:	415b      	adcs	r3, r3
 80069c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80069c8:	4641      	mov	r1, r8
 80069ca:	1851      	adds	r1, r2, r1
 80069cc:	6339      	str	r1, [r7, #48]	; 0x30
 80069ce:	4649      	mov	r1, r9
 80069d0:	414b      	adcs	r3, r1
 80069d2:	637b      	str	r3, [r7, #52]	; 0x34
 80069d4:	f04f 0200 	mov.w	r2, #0
 80069d8:	f04f 0300 	mov.w	r3, #0
 80069dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80069e0:	4659      	mov	r1, fp
 80069e2:	00cb      	lsls	r3, r1, #3
 80069e4:	4651      	mov	r1, sl
 80069e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069ea:	4651      	mov	r1, sl
 80069ec:	00ca      	lsls	r2, r1, #3
 80069ee:	4610      	mov	r0, r2
 80069f0:	4619      	mov	r1, r3
 80069f2:	4603      	mov	r3, r0
 80069f4:	4642      	mov	r2, r8
 80069f6:	189b      	adds	r3, r3, r2
 80069f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069fc:	464b      	mov	r3, r9
 80069fe:	460a      	mov	r2, r1
 8006a00:	eb42 0303 	adc.w	r3, r2, r3
 8006a04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a14:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006a18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	18db      	adds	r3, r3, r3
 8006a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a22:	4613      	mov	r3, r2
 8006a24:	eb42 0303 	adc.w	r3, r2, r3
 8006a28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006a32:	f7fa f8e1 	bl	8000bf8 <__aeabi_uldivmod>
 8006a36:	4602      	mov	r2, r0
 8006a38:	460b      	mov	r3, r1
 8006a3a:	4b0d      	ldr	r3, [pc, #52]	; (8006a70 <UART_SetConfig+0x2d4>)
 8006a3c:	fba3 1302 	umull	r1, r3, r3, r2
 8006a40:	095b      	lsrs	r3, r3, #5
 8006a42:	2164      	movs	r1, #100	; 0x64
 8006a44:	fb01 f303 	mul.w	r3, r1, r3
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	00db      	lsls	r3, r3, #3
 8006a4c:	3332      	adds	r3, #50	; 0x32
 8006a4e:	4a08      	ldr	r2, [pc, #32]	; (8006a70 <UART_SetConfig+0x2d4>)
 8006a50:	fba2 2303 	umull	r2, r3, r2, r3
 8006a54:	095b      	lsrs	r3, r3, #5
 8006a56:	f003 0207 	and.w	r2, r3, #7
 8006a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4422      	add	r2, r4
 8006a62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a64:	e106      	b.n	8006c74 <UART_SetConfig+0x4d8>
 8006a66:	bf00      	nop
 8006a68:	40011000 	.word	0x40011000
 8006a6c:	40011400 	.word	0x40011400
 8006a70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006a7e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006a82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006a86:	4642      	mov	r2, r8
 8006a88:	464b      	mov	r3, r9
 8006a8a:	1891      	adds	r1, r2, r2
 8006a8c:	6239      	str	r1, [r7, #32]
 8006a8e:	415b      	adcs	r3, r3
 8006a90:	627b      	str	r3, [r7, #36]	; 0x24
 8006a92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a96:	4641      	mov	r1, r8
 8006a98:	1854      	adds	r4, r2, r1
 8006a9a:	4649      	mov	r1, r9
 8006a9c:	eb43 0501 	adc.w	r5, r3, r1
 8006aa0:	f04f 0200 	mov.w	r2, #0
 8006aa4:	f04f 0300 	mov.w	r3, #0
 8006aa8:	00eb      	lsls	r3, r5, #3
 8006aaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006aae:	00e2      	lsls	r2, r4, #3
 8006ab0:	4614      	mov	r4, r2
 8006ab2:	461d      	mov	r5, r3
 8006ab4:	4643      	mov	r3, r8
 8006ab6:	18e3      	adds	r3, r4, r3
 8006ab8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006abc:	464b      	mov	r3, r9
 8006abe:	eb45 0303 	adc.w	r3, r5, r3
 8006ac2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ad2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006ad6:	f04f 0200 	mov.w	r2, #0
 8006ada:	f04f 0300 	mov.w	r3, #0
 8006ade:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006ae2:	4629      	mov	r1, r5
 8006ae4:	008b      	lsls	r3, r1, #2
 8006ae6:	4621      	mov	r1, r4
 8006ae8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006aec:	4621      	mov	r1, r4
 8006aee:	008a      	lsls	r2, r1, #2
 8006af0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006af4:	f7fa f880 	bl	8000bf8 <__aeabi_uldivmod>
 8006af8:	4602      	mov	r2, r0
 8006afa:	460b      	mov	r3, r1
 8006afc:	4b60      	ldr	r3, [pc, #384]	; (8006c80 <UART_SetConfig+0x4e4>)
 8006afe:	fba3 2302 	umull	r2, r3, r3, r2
 8006b02:	095b      	lsrs	r3, r3, #5
 8006b04:	011c      	lsls	r4, r3, #4
 8006b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006b14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006b18:	4642      	mov	r2, r8
 8006b1a:	464b      	mov	r3, r9
 8006b1c:	1891      	adds	r1, r2, r2
 8006b1e:	61b9      	str	r1, [r7, #24]
 8006b20:	415b      	adcs	r3, r3
 8006b22:	61fb      	str	r3, [r7, #28]
 8006b24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b28:	4641      	mov	r1, r8
 8006b2a:	1851      	adds	r1, r2, r1
 8006b2c:	6139      	str	r1, [r7, #16]
 8006b2e:	4649      	mov	r1, r9
 8006b30:	414b      	adcs	r3, r1
 8006b32:	617b      	str	r3, [r7, #20]
 8006b34:	f04f 0200 	mov.w	r2, #0
 8006b38:	f04f 0300 	mov.w	r3, #0
 8006b3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b40:	4659      	mov	r1, fp
 8006b42:	00cb      	lsls	r3, r1, #3
 8006b44:	4651      	mov	r1, sl
 8006b46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b4a:	4651      	mov	r1, sl
 8006b4c:	00ca      	lsls	r2, r1, #3
 8006b4e:	4610      	mov	r0, r2
 8006b50:	4619      	mov	r1, r3
 8006b52:	4603      	mov	r3, r0
 8006b54:	4642      	mov	r2, r8
 8006b56:	189b      	adds	r3, r3, r2
 8006b58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b5c:	464b      	mov	r3, r9
 8006b5e:	460a      	mov	r2, r1
 8006b60:	eb42 0303 	adc.w	r3, r2, r3
 8006b64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b72:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006b74:	f04f 0200 	mov.w	r2, #0
 8006b78:	f04f 0300 	mov.w	r3, #0
 8006b7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006b80:	4649      	mov	r1, r9
 8006b82:	008b      	lsls	r3, r1, #2
 8006b84:	4641      	mov	r1, r8
 8006b86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b8a:	4641      	mov	r1, r8
 8006b8c:	008a      	lsls	r2, r1, #2
 8006b8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006b92:	f7fa f831 	bl	8000bf8 <__aeabi_uldivmod>
 8006b96:	4602      	mov	r2, r0
 8006b98:	460b      	mov	r3, r1
 8006b9a:	4611      	mov	r1, r2
 8006b9c:	4b38      	ldr	r3, [pc, #224]	; (8006c80 <UART_SetConfig+0x4e4>)
 8006b9e:	fba3 2301 	umull	r2, r3, r3, r1
 8006ba2:	095b      	lsrs	r3, r3, #5
 8006ba4:	2264      	movs	r2, #100	; 0x64
 8006ba6:	fb02 f303 	mul.w	r3, r2, r3
 8006baa:	1acb      	subs	r3, r1, r3
 8006bac:	011b      	lsls	r3, r3, #4
 8006bae:	3332      	adds	r3, #50	; 0x32
 8006bb0:	4a33      	ldr	r2, [pc, #204]	; (8006c80 <UART_SetConfig+0x4e4>)
 8006bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb6:	095b      	lsrs	r3, r3, #5
 8006bb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bbc:	441c      	add	r4, r3
 8006bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	673b      	str	r3, [r7, #112]	; 0x70
 8006bc6:	677a      	str	r2, [r7, #116]	; 0x74
 8006bc8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006bcc:	4642      	mov	r2, r8
 8006bce:	464b      	mov	r3, r9
 8006bd0:	1891      	adds	r1, r2, r2
 8006bd2:	60b9      	str	r1, [r7, #8]
 8006bd4:	415b      	adcs	r3, r3
 8006bd6:	60fb      	str	r3, [r7, #12]
 8006bd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006bdc:	4641      	mov	r1, r8
 8006bde:	1851      	adds	r1, r2, r1
 8006be0:	6039      	str	r1, [r7, #0]
 8006be2:	4649      	mov	r1, r9
 8006be4:	414b      	adcs	r3, r1
 8006be6:	607b      	str	r3, [r7, #4]
 8006be8:	f04f 0200 	mov.w	r2, #0
 8006bec:	f04f 0300 	mov.w	r3, #0
 8006bf0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006bf4:	4659      	mov	r1, fp
 8006bf6:	00cb      	lsls	r3, r1, #3
 8006bf8:	4651      	mov	r1, sl
 8006bfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bfe:	4651      	mov	r1, sl
 8006c00:	00ca      	lsls	r2, r1, #3
 8006c02:	4610      	mov	r0, r2
 8006c04:	4619      	mov	r1, r3
 8006c06:	4603      	mov	r3, r0
 8006c08:	4642      	mov	r2, r8
 8006c0a:	189b      	adds	r3, r3, r2
 8006c0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c0e:	464b      	mov	r3, r9
 8006c10:	460a      	mov	r2, r1
 8006c12:	eb42 0303 	adc.w	r3, r2, r3
 8006c16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	663b      	str	r3, [r7, #96]	; 0x60
 8006c22:	667a      	str	r2, [r7, #100]	; 0x64
 8006c24:	f04f 0200 	mov.w	r2, #0
 8006c28:	f04f 0300 	mov.w	r3, #0
 8006c2c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006c30:	4649      	mov	r1, r9
 8006c32:	008b      	lsls	r3, r1, #2
 8006c34:	4641      	mov	r1, r8
 8006c36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c3a:	4641      	mov	r1, r8
 8006c3c:	008a      	lsls	r2, r1, #2
 8006c3e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006c42:	f7f9 ffd9 	bl	8000bf8 <__aeabi_uldivmod>
 8006c46:	4602      	mov	r2, r0
 8006c48:	460b      	mov	r3, r1
 8006c4a:	4b0d      	ldr	r3, [pc, #52]	; (8006c80 <UART_SetConfig+0x4e4>)
 8006c4c:	fba3 1302 	umull	r1, r3, r3, r2
 8006c50:	095b      	lsrs	r3, r3, #5
 8006c52:	2164      	movs	r1, #100	; 0x64
 8006c54:	fb01 f303 	mul.w	r3, r1, r3
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	011b      	lsls	r3, r3, #4
 8006c5c:	3332      	adds	r3, #50	; 0x32
 8006c5e:	4a08      	ldr	r2, [pc, #32]	; (8006c80 <UART_SetConfig+0x4e4>)
 8006c60:	fba2 2303 	umull	r2, r3, r2, r3
 8006c64:	095b      	lsrs	r3, r3, #5
 8006c66:	f003 020f 	and.w	r2, r3, #15
 8006c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4422      	add	r2, r4
 8006c72:	609a      	str	r2, [r3, #8]
}
 8006c74:	bf00      	nop
 8006c76:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c80:	51eb851f 	.word	0x51eb851f

08006c84 <__cvt>:
 8006c84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c88:	ec55 4b10 	vmov	r4, r5, d0
 8006c8c:	2d00      	cmp	r5, #0
 8006c8e:	460e      	mov	r6, r1
 8006c90:	4619      	mov	r1, r3
 8006c92:	462b      	mov	r3, r5
 8006c94:	bfbb      	ittet	lt
 8006c96:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006c9a:	461d      	movlt	r5, r3
 8006c9c:	2300      	movge	r3, #0
 8006c9e:	232d      	movlt	r3, #45	; 0x2d
 8006ca0:	700b      	strb	r3, [r1, #0]
 8006ca2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ca4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006ca8:	4691      	mov	r9, r2
 8006caa:	f023 0820 	bic.w	r8, r3, #32
 8006cae:	bfbc      	itt	lt
 8006cb0:	4622      	movlt	r2, r4
 8006cb2:	4614      	movlt	r4, r2
 8006cb4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006cb8:	d005      	beq.n	8006cc6 <__cvt+0x42>
 8006cba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006cbe:	d100      	bne.n	8006cc2 <__cvt+0x3e>
 8006cc0:	3601      	adds	r6, #1
 8006cc2:	2102      	movs	r1, #2
 8006cc4:	e000      	b.n	8006cc8 <__cvt+0x44>
 8006cc6:	2103      	movs	r1, #3
 8006cc8:	ab03      	add	r3, sp, #12
 8006cca:	9301      	str	r3, [sp, #4]
 8006ccc:	ab02      	add	r3, sp, #8
 8006cce:	9300      	str	r3, [sp, #0]
 8006cd0:	ec45 4b10 	vmov	d0, r4, r5
 8006cd4:	4653      	mov	r3, sl
 8006cd6:	4632      	mov	r2, r6
 8006cd8:	f000 fe6a 	bl	80079b0 <_dtoa_r>
 8006cdc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006ce0:	4607      	mov	r7, r0
 8006ce2:	d102      	bne.n	8006cea <__cvt+0x66>
 8006ce4:	f019 0f01 	tst.w	r9, #1
 8006ce8:	d022      	beq.n	8006d30 <__cvt+0xac>
 8006cea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006cee:	eb07 0906 	add.w	r9, r7, r6
 8006cf2:	d110      	bne.n	8006d16 <__cvt+0x92>
 8006cf4:	783b      	ldrb	r3, [r7, #0]
 8006cf6:	2b30      	cmp	r3, #48	; 0x30
 8006cf8:	d10a      	bne.n	8006d10 <__cvt+0x8c>
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	4620      	mov	r0, r4
 8006d00:	4629      	mov	r1, r5
 8006d02:	f7f9 fee9 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d06:	b918      	cbnz	r0, 8006d10 <__cvt+0x8c>
 8006d08:	f1c6 0601 	rsb	r6, r6, #1
 8006d0c:	f8ca 6000 	str.w	r6, [sl]
 8006d10:	f8da 3000 	ldr.w	r3, [sl]
 8006d14:	4499      	add	r9, r3
 8006d16:	2200      	movs	r2, #0
 8006d18:	2300      	movs	r3, #0
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	4629      	mov	r1, r5
 8006d1e:	f7f9 fedb 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d22:	b108      	cbz	r0, 8006d28 <__cvt+0xa4>
 8006d24:	f8cd 900c 	str.w	r9, [sp, #12]
 8006d28:	2230      	movs	r2, #48	; 0x30
 8006d2a:	9b03      	ldr	r3, [sp, #12]
 8006d2c:	454b      	cmp	r3, r9
 8006d2e:	d307      	bcc.n	8006d40 <__cvt+0xbc>
 8006d30:	9b03      	ldr	r3, [sp, #12]
 8006d32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d34:	1bdb      	subs	r3, r3, r7
 8006d36:	4638      	mov	r0, r7
 8006d38:	6013      	str	r3, [r2, #0]
 8006d3a:	b004      	add	sp, #16
 8006d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d40:	1c59      	adds	r1, r3, #1
 8006d42:	9103      	str	r1, [sp, #12]
 8006d44:	701a      	strb	r2, [r3, #0]
 8006d46:	e7f0      	b.n	8006d2a <__cvt+0xa6>

08006d48 <__exponent>:
 8006d48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2900      	cmp	r1, #0
 8006d4e:	bfb8      	it	lt
 8006d50:	4249      	neglt	r1, r1
 8006d52:	f803 2b02 	strb.w	r2, [r3], #2
 8006d56:	bfb4      	ite	lt
 8006d58:	222d      	movlt	r2, #45	; 0x2d
 8006d5a:	222b      	movge	r2, #43	; 0x2b
 8006d5c:	2909      	cmp	r1, #9
 8006d5e:	7042      	strb	r2, [r0, #1]
 8006d60:	dd2a      	ble.n	8006db8 <__exponent+0x70>
 8006d62:	f10d 0207 	add.w	r2, sp, #7
 8006d66:	4617      	mov	r7, r2
 8006d68:	260a      	movs	r6, #10
 8006d6a:	4694      	mov	ip, r2
 8006d6c:	fb91 f5f6 	sdiv	r5, r1, r6
 8006d70:	fb06 1415 	mls	r4, r6, r5, r1
 8006d74:	3430      	adds	r4, #48	; 0x30
 8006d76:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006d7a:	460c      	mov	r4, r1
 8006d7c:	2c63      	cmp	r4, #99	; 0x63
 8006d7e:	f102 32ff 	add.w	r2, r2, #4294967295
 8006d82:	4629      	mov	r1, r5
 8006d84:	dcf1      	bgt.n	8006d6a <__exponent+0x22>
 8006d86:	3130      	adds	r1, #48	; 0x30
 8006d88:	f1ac 0402 	sub.w	r4, ip, #2
 8006d8c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006d90:	1c41      	adds	r1, r0, #1
 8006d92:	4622      	mov	r2, r4
 8006d94:	42ba      	cmp	r2, r7
 8006d96:	d30a      	bcc.n	8006dae <__exponent+0x66>
 8006d98:	f10d 0209 	add.w	r2, sp, #9
 8006d9c:	eba2 020c 	sub.w	r2, r2, ip
 8006da0:	42bc      	cmp	r4, r7
 8006da2:	bf88      	it	hi
 8006da4:	2200      	movhi	r2, #0
 8006da6:	4413      	add	r3, r2
 8006da8:	1a18      	subs	r0, r3, r0
 8006daa:	b003      	add	sp, #12
 8006dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dae:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006db2:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006db6:	e7ed      	b.n	8006d94 <__exponent+0x4c>
 8006db8:	2330      	movs	r3, #48	; 0x30
 8006dba:	3130      	adds	r1, #48	; 0x30
 8006dbc:	7083      	strb	r3, [r0, #2]
 8006dbe:	70c1      	strb	r1, [r0, #3]
 8006dc0:	1d03      	adds	r3, r0, #4
 8006dc2:	e7f1      	b.n	8006da8 <__exponent+0x60>

08006dc4 <_printf_float>:
 8006dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dc8:	ed2d 8b02 	vpush	{d8}
 8006dcc:	b08d      	sub	sp, #52	; 0x34
 8006dce:	460c      	mov	r4, r1
 8006dd0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006dd4:	4616      	mov	r6, r2
 8006dd6:	461f      	mov	r7, r3
 8006dd8:	4605      	mov	r5, r0
 8006dda:	f000 fce7 	bl	80077ac <_localeconv_r>
 8006dde:	f8d0 a000 	ldr.w	sl, [r0]
 8006de2:	4650      	mov	r0, sl
 8006de4:	f7f9 fa4c 	bl	8000280 <strlen>
 8006de8:	2300      	movs	r3, #0
 8006dea:	930a      	str	r3, [sp, #40]	; 0x28
 8006dec:	6823      	ldr	r3, [r4, #0]
 8006dee:	9305      	str	r3, [sp, #20]
 8006df0:	f8d8 3000 	ldr.w	r3, [r8]
 8006df4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006df8:	3307      	adds	r3, #7
 8006dfa:	f023 0307 	bic.w	r3, r3, #7
 8006dfe:	f103 0208 	add.w	r2, r3, #8
 8006e02:	f8c8 2000 	str.w	r2, [r8]
 8006e06:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e0a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e0e:	9307      	str	r3, [sp, #28]
 8006e10:	f8cd 8018 	str.w	r8, [sp, #24]
 8006e14:	ee08 0a10 	vmov	s16, r0
 8006e18:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006e1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e20:	4b9e      	ldr	r3, [pc, #632]	; (800709c <_printf_float+0x2d8>)
 8006e22:	f04f 32ff 	mov.w	r2, #4294967295
 8006e26:	f7f9 fe89 	bl	8000b3c <__aeabi_dcmpun>
 8006e2a:	bb88      	cbnz	r0, 8006e90 <_printf_float+0xcc>
 8006e2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e30:	4b9a      	ldr	r3, [pc, #616]	; (800709c <_printf_float+0x2d8>)
 8006e32:	f04f 32ff 	mov.w	r2, #4294967295
 8006e36:	f7f9 fe63 	bl	8000b00 <__aeabi_dcmple>
 8006e3a:	bb48      	cbnz	r0, 8006e90 <_printf_float+0xcc>
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	2300      	movs	r3, #0
 8006e40:	4640      	mov	r0, r8
 8006e42:	4649      	mov	r1, r9
 8006e44:	f7f9 fe52 	bl	8000aec <__aeabi_dcmplt>
 8006e48:	b110      	cbz	r0, 8006e50 <_printf_float+0x8c>
 8006e4a:	232d      	movs	r3, #45	; 0x2d
 8006e4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e50:	4a93      	ldr	r2, [pc, #588]	; (80070a0 <_printf_float+0x2dc>)
 8006e52:	4b94      	ldr	r3, [pc, #592]	; (80070a4 <_printf_float+0x2e0>)
 8006e54:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006e58:	bf94      	ite	ls
 8006e5a:	4690      	movls	r8, r2
 8006e5c:	4698      	movhi	r8, r3
 8006e5e:	2303      	movs	r3, #3
 8006e60:	6123      	str	r3, [r4, #16]
 8006e62:	9b05      	ldr	r3, [sp, #20]
 8006e64:	f023 0304 	bic.w	r3, r3, #4
 8006e68:	6023      	str	r3, [r4, #0]
 8006e6a:	f04f 0900 	mov.w	r9, #0
 8006e6e:	9700      	str	r7, [sp, #0]
 8006e70:	4633      	mov	r3, r6
 8006e72:	aa0b      	add	r2, sp, #44	; 0x2c
 8006e74:	4621      	mov	r1, r4
 8006e76:	4628      	mov	r0, r5
 8006e78:	f000 f9da 	bl	8007230 <_printf_common>
 8006e7c:	3001      	adds	r0, #1
 8006e7e:	f040 8090 	bne.w	8006fa2 <_printf_float+0x1de>
 8006e82:	f04f 30ff 	mov.w	r0, #4294967295
 8006e86:	b00d      	add	sp, #52	; 0x34
 8006e88:	ecbd 8b02 	vpop	{d8}
 8006e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e90:	4642      	mov	r2, r8
 8006e92:	464b      	mov	r3, r9
 8006e94:	4640      	mov	r0, r8
 8006e96:	4649      	mov	r1, r9
 8006e98:	f7f9 fe50 	bl	8000b3c <__aeabi_dcmpun>
 8006e9c:	b140      	cbz	r0, 8006eb0 <_printf_float+0xec>
 8006e9e:	464b      	mov	r3, r9
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	bfbc      	itt	lt
 8006ea4:	232d      	movlt	r3, #45	; 0x2d
 8006ea6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006eaa:	4a7f      	ldr	r2, [pc, #508]	; (80070a8 <_printf_float+0x2e4>)
 8006eac:	4b7f      	ldr	r3, [pc, #508]	; (80070ac <_printf_float+0x2e8>)
 8006eae:	e7d1      	b.n	8006e54 <_printf_float+0x90>
 8006eb0:	6863      	ldr	r3, [r4, #4]
 8006eb2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006eb6:	9206      	str	r2, [sp, #24]
 8006eb8:	1c5a      	adds	r2, r3, #1
 8006eba:	d13f      	bne.n	8006f3c <_printf_float+0x178>
 8006ebc:	2306      	movs	r3, #6
 8006ebe:	6063      	str	r3, [r4, #4]
 8006ec0:	9b05      	ldr	r3, [sp, #20]
 8006ec2:	6861      	ldr	r1, [r4, #4]
 8006ec4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006ec8:	2300      	movs	r3, #0
 8006eca:	9303      	str	r3, [sp, #12]
 8006ecc:	ab0a      	add	r3, sp, #40	; 0x28
 8006ece:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006ed2:	ab09      	add	r3, sp, #36	; 0x24
 8006ed4:	ec49 8b10 	vmov	d0, r8, r9
 8006ed8:	9300      	str	r3, [sp, #0]
 8006eda:	6022      	str	r2, [r4, #0]
 8006edc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	f7ff fecf 	bl	8006c84 <__cvt>
 8006ee6:	9b06      	ldr	r3, [sp, #24]
 8006ee8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006eea:	2b47      	cmp	r3, #71	; 0x47
 8006eec:	4680      	mov	r8, r0
 8006eee:	d108      	bne.n	8006f02 <_printf_float+0x13e>
 8006ef0:	1cc8      	adds	r0, r1, #3
 8006ef2:	db02      	blt.n	8006efa <_printf_float+0x136>
 8006ef4:	6863      	ldr	r3, [r4, #4]
 8006ef6:	4299      	cmp	r1, r3
 8006ef8:	dd41      	ble.n	8006f7e <_printf_float+0x1ba>
 8006efa:	f1ab 0302 	sub.w	r3, fp, #2
 8006efe:	fa5f fb83 	uxtb.w	fp, r3
 8006f02:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f06:	d820      	bhi.n	8006f4a <_printf_float+0x186>
 8006f08:	3901      	subs	r1, #1
 8006f0a:	465a      	mov	r2, fp
 8006f0c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f10:	9109      	str	r1, [sp, #36]	; 0x24
 8006f12:	f7ff ff19 	bl	8006d48 <__exponent>
 8006f16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f18:	1813      	adds	r3, r2, r0
 8006f1a:	2a01      	cmp	r2, #1
 8006f1c:	4681      	mov	r9, r0
 8006f1e:	6123      	str	r3, [r4, #16]
 8006f20:	dc02      	bgt.n	8006f28 <_printf_float+0x164>
 8006f22:	6822      	ldr	r2, [r4, #0]
 8006f24:	07d2      	lsls	r2, r2, #31
 8006f26:	d501      	bpl.n	8006f2c <_printf_float+0x168>
 8006f28:	3301      	adds	r3, #1
 8006f2a:	6123      	str	r3, [r4, #16]
 8006f2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d09c      	beq.n	8006e6e <_printf_float+0xaa>
 8006f34:	232d      	movs	r3, #45	; 0x2d
 8006f36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f3a:	e798      	b.n	8006e6e <_printf_float+0xaa>
 8006f3c:	9a06      	ldr	r2, [sp, #24]
 8006f3e:	2a47      	cmp	r2, #71	; 0x47
 8006f40:	d1be      	bne.n	8006ec0 <_printf_float+0xfc>
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1bc      	bne.n	8006ec0 <_printf_float+0xfc>
 8006f46:	2301      	movs	r3, #1
 8006f48:	e7b9      	b.n	8006ebe <_printf_float+0xfa>
 8006f4a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006f4e:	d118      	bne.n	8006f82 <_printf_float+0x1be>
 8006f50:	2900      	cmp	r1, #0
 8006f52:	6863      	ldr	r3, [r4, #4]
 8006f54:	dd0b      	ble.n	8006f6e <_printf_float+0x1aa>
 8006f56:	6121      	str	r1, [r4, #16]
 8006f58:	b913      	cbnz	r3, 8006f60 <_printf_float+0x19c>
 8006f5a:	6822      	ldr	r2, [r4, #0]
 8006f5c:	07d0      	lsls	r0, r2, #31
 8006f5e:	d502      	bpl.n	8006f66 <_printf_float+0x1a2>
 8006f60:	3301      	adds	r3, #1
 8006f62:	440b      	add	r3, r1
 8006f64:	6123      	str	r3, [r4, #16]
 8006f66:	65a1      	str	r1, [r4, #88]	; 0x58
 8006f68:	f04f 0900 	mov.w	r9, #0
 8006f6c:	e7de      	b.n	8006f2c <_printf_float+0x168>
 8006f6e:	b913      	cbnz	r3, 8006f76 <_printf_float+0x1b2>
 8006f70:	6822      	ldr	r2, [r4, #0]
 8006f72:	07d2      	lsls	r2, r2, #31
 8006f74:	d501      	bpl.n	8006f7a <_printf_float+0x1b6>
 8006f76:	3302      	adds	r3, #2
 8006f78:	e7f4      	b.n	8006f64 <_printf_float+0x1a0>
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e7f2      	b.n	8006f64 <_printf_float+0x1a0>
 8006f7e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006f82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f84:	4299      	cmp	r1, r3
 8006f86:	db05      	blt.n	8006f94 <_printf_float+0x1d0>
 8006f88:	6823      	ldr	r3, [r4, #0]
 8006f8a:	6121      	str	r1, [r4, #16]
 8006f8c:	07d8      	lsls	r0, r3, #31
 8006f8e:	d5ea      	bpl.n	8006f66 <_printf_float+0x1a2>
 8006f90:	1c4b      	adds	r3, r1, #1
 8006f92:	e7e7      	b.n	8006f64 <_printf_float+0x1a0>
 8006f94:	2900      	cmp	r1, #0
 8006f96:	bfd4      	ite	le
 8006f98:	f1c1 0202 	rsble	r2, r1, #2
 8006f9c:	2201      	movgt	r2, #1
 8006f9e:	4413      	add	r3, r2
 8006fa0:	e7e0      	b.n	8006f64 <_printf_float+0x1a0>
 8006fa2:	6823      	ldr	r3, [r4, #0]
 8006fa4:	055a      	lsls	r2, r3, #21
 8006fa6:	d407      	bmi.n	8006fb8 <_printf_float+0x1f4>
 8006fa8:	6923      	ldr	r3, [r4, #16]
 8006faa:	4642      	mov	r2, r8
 8006fac:	4631      	mov	r1, r6
 8006fae:	4628      	mov	r0, r5
 8006fb0:	47b8      	blx	r7
 8006fb2:	3001      	adds	r0, #1
 8006fb4:	d12c      	bne.n	8007010 <_printf_float+0x24c>
 8006fb6:	e764      	b.n	8006e82 <_printf_float+0xbe>
 8006fb8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006fbc:	f240 80e0 	bls.w	8007180 <_printf_float+0x3bc>
 8006fc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	f7f9 fd86 	bl	8000ad8 <__aeabi_dcmpeq>
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	d034      	beq.n	800703a <_printf_float+0x276>
 8006fd0:	4a37      	ldr	r2, [pc, #220]	; (80070b0 <_printf_float+0x2ec>)
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	4631      	mov	r1, r6
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	47b8      	blx	r7
 8006fda:	3001      	adds	r0, #1
 8006fdc:	f43f af51 	beq.w	8006e82 <_printf_float+0xbe>
 8006fe0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	db02      	blt.n	8006fee <_printf_float+0x22a>
 8006fe8:	6823      	ldr	r3, [r4, #0]
 8006fea:	07d8      	lsls	r0, r3, #31
 8006fec:	d510      	bpl.n	8007010 <_printf_float+0x24c>
 8006fee:	ee18 3a10 	vmov	r3, s16
 8006ff2:	4652      	mov	r2, sl
 8006ff4:	4631      	mov	r1, r6
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	47b8      	blx	r7
 8006ffa:	3001      	adds	r0, #1
 8006ffc:	f43f af41 	beq.w	8006e82 <_printf_float+0xbe>
 8007000:	f04f 0800 	mov.w	r8, #0
 8007004:	f104 091a 	add.w	r9, r4, #26
 8007008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800700a:	3b01      	subs	r3, #1
 800700c:	4543      	cmp	r3, r8
 800700e:	dc09      	bgt.n	8007024 <_printf_float+0x260>
 8007010:	6823      	ldr	r3, [r4, #0]
 8007012:	079b      	lsls	r3, r3, #30
 8007014:	f100 8107 	bmi.w	8007226 <_printf_float+0x462>
 8007018:	68e0      	ldr	r0, [r4, #12]
 800701a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800701c:	4298      	cmp	r0, r3
 800701e:	bfb8      	it	lt
 8007020:	4618      	movlt	r0, r3
 8007022:	e730      	b.n	8006e86 <_printf_float+0xc2>
 8007024:	2301      	movs	r3, #1
 8007026:	464a      	mov	r2, r9
 8007028:	4631      	mov	r1, r6
 800702a:	4628      	mov	r0, r5
 800702c:	47b8      	blx	r7
 800702e:	3001      	adds	r0, #1
 8007030:	f43f af27 	beq.w	8006e82 <_printf_float+0xbe>
 8007034:	f108 0801 	add.w	r8, r8, #1
 8007038:	e7e6      	b.n	8007008 <_printf_float+0x244>
 800703a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800703c:	2b00      	cmp	r3, #0
 800703e:	dc39      	bgt.n	80070b4 <_printf_float+0x2f0>
 8007040:	4a1b      	ldr	r2, [pc, #108]	; (80070b0 <_printf_float+0x2ec>)
 8007042:	2301      	movs	r3, #1
 8007044:	4631      	mov	r1, r6
 8007046:	4628      	mov	r0, r5
 8007048:	47b8      	blx	r7
 800704a:	3001      	adds	r0, #1
 800704c:	f43f af19 	beq.w	8006e82 <_printf_float+0xbe>
 8007050:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007054:	4313      	orrs	r3, r2
 8007056:	d102      	bne.n	800705e <_printf_float+0x29a>
 8007058:	6823      	ldr	r3, [r4, #0]
 800705a:	07d9      	lsls	r1, r3, #31
 800705c:	d5d8      	bpl.n	8007010 <_printf_float+0x24c>
 800705e:	ee18 3a10 	vmov	r3, s16
 8007062:	4652      	mov	r2, sl
 8007064:	4631      	mov	r1, r6
 8007066:	4628      	mov	r0, r5
 8007068:	47b8      	blx	r7
 800706a:	3001      	adds	r0, #1
 800706c:	f43f af09 	beq.w	8006e82 <_printf_float+0xbe>
 8007070:	f04f 0900 	mov.w	r9, #0
 8007074:	f104 0a1a 	add.w	sl, r4, #26
 8007078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800707a:	425b      	negs	r3, r3
 800707c:	454b      	cmp	r3, r9
 800707e:	dc01      	bgt.n	8007084 <_printf_float+0x2c0>
 8007080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007082:	e792      	b.n	8006faa <_printf_float+0x1e6>
 8007084:	2301      	movs	r3, #1
 8007086:	4652      	mov	r2, sl
 8007088:	4631      	mov	r1, r6
 800708a:	4628      	mov	r0, r5
 800708c:	47b8      	blx	r7
 800708e:	3001      	adds	r0, #1
 8007090:	f43f aef7 	beq.w	8006e82 <_printf_float+0xbe>
 8007094:	f109 0901 	add.w	r9, r9, #1
 8007098:	e7ee      	b.n	8007078 <_printf_float+0x2b4>
 800709a:	bf00      	nop
 800709c:	7fefffff 	.word	0x7fefffff
 80070a0:	080099ec 	.word	0x080099ec
 80070a4:	080099f0 	.word	0x080099f0
 80070a8:	080099f4 	.word	0x080099f4
 80070ac:	080099f8 	.word	0x080099f8
 80070b0:	080099fc 	.word	0x080099fc
 80070b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070b8:	429a      	cmp	r2, r3
 80070ba:	bfa8      	it	ge
 80070bc:	461a      	movge	r2, r3
 80070be:	2a00      	cmp	r2, #0
 80070c0:	4691      	mov	r9, r2
 80070c2:	dc37      	bgt.n	8007134 <_printf_float+0x370>
 80070c4:	f04f 0b00 	mov.w	fp, #0
 80070c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070cc:	f104 021a 	add.w	r2, r4, #26
 80070d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070d2:	9305      	str	r3, [sp, #20]
 80070d4:	eba3 0309 	sub.w	r3, r3, r9
 80070d8:	455b      	cmp	r3, fp
 80070da:	dc33      	bgt.n	8007144 <_printf_float+0x380>
 80070dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070e0:	429a      	cmp	r2, r3
 80070e2:	db3b      	blt.n	800715c <_printf_float+0x398>
 80070e4:	6823      	ldr	r3, [r4, #0]
 80070e6:	07da      	lsls	r2, r3, #31
 80070e8:	d438      	bmi.n	800715c <_printf_float+0x398>
 80070ea:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80070ee:	eba2 0903 	sub.w	r9, r2, r3
 80070f2:	9b05      	ldr	r3, [sp, #20]
 80070f4:	1ad2      	subs	r2, r2, r3
 80070f6:	4591      	cmp	r9, r2
 80070f8:	bfa8      	it	ge
 80070fa:	4691      	movge	r9, r2
 80070fc:	f1b9 0f00 	cmp.w	r9, #0
 8007100:	dc35      	bgt.n	800716e <_printf_float+0x3aa>
 8007102:	f04f 0800 	mov.w	r8, #0
 8007106:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800710a:	f104 0a1a 	add.w	sl, r4, #26
 800710e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007112:	1a9b      	subs	r3, r3, r2
 8007114:	eba3 0309 	sub.w	r3, r3, r9
 8007118:	4543      	cmp	r3, r8
 800711a:	f77f af79 	ble.w	8007010 <_printf_float+0x24c>
 800711e:	2301      	movs	r3, #1
 8007120:	4652      	mov	r2, sl
 8007122:	4631      	mov	r1, r6
 8007124:	4628      	mov	r0, r5
 8007126:	47b8      	blx	r7
 8007128:	3001      	adds	r0, #1
 800712a:	f43f aeaa 	beq.w	8006e82 <_printf_float+0xbe>
 800712e:	f108 0801 	add.w	r8, r8, #1
 8007132:	e7ec      	b.n	800710e <_printf_float+0x34a>
 8007134:	4613      	mov	r3, r2
 8007136:	4631      	mov	r1, r6
 8007138:	4642      	mov	r2, r8
 800713a:	4628      	mov	r0, r5
 800713c:	47b8      	blx	r7
 800713e:	3001      	adds	r0, #1
 8007140:	d1c0      	bne.n	80070c4 <_printf_float+0x300>
 8007142:	e69e      	b.n	8006e82 <_printf_float+0xbe>
 8007144:	2301      	movs	r3, #1
 8007146:	4631      	mov	r1, r6
 8007148:	4628      	mov	r0, r5
 800714a:	9205      	str	r2, [sp, #20]
 800714c:	47b8      	blx	r7
 800714e:	3001      	adds	r0, #1
 8007150:	f43f ae97 	beq.w	8006e82 <_printf_float+0xbe>
 8007154:	9a05      	ldr	r2, [sp, #20]
 8007156:	f10b 0b01 	add.w	fp, fp, #1
 800715a:	e7b9      	b.n	80070d0 <_printf_float+0x30c>
 800715c:	ee18 3a10 	vmov	r3, s16
 8007160:	4652      	mov	r2, sl
 8007162:	4631      	mov	r1, r6
 8007164:	4628      	mov	r0, r5
 8007166:	47b8      	blx	r7
 8007168:	3001      	adds	r0, #1
 800716a:	d1be      	bne.n	80070ea <_printf_float+0x326>
 800716c:	e689      	b.n	8006e82 <_printf_float+0xbe>
 800716e:	9a05      	ldr	r2, [sp, #20]
 8007170:	464b      	mov	r3, r9
 8007172:	4442      	add	r2, r8
 8007174:	4631      	mov	r1, r6
 8007176:	4628      	mov	r0, r5
 8007178:	47b8      	blx	r7
 800717a:	3001      	adds	r0, #1
 800717c:	d1c1      	bne.n	8007102 <_printf_float+0x33e>
 800717e:	e680      	b.n	8006e82 <_printf_float+0xbe>
 8007180:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007182:	2a01      	cmp	r2, #1
 8007184:	dc01      	bgt.n	800718a <_printf_float+0x3c6>
 8007186:	07db      	lsls	r3, r3, #31
 8007188:	d53a      	bpl.n	8007200 <_printf_float+0x43c>
 800718a:	2301      	movs	r3, #1
 800718c:	4642      	mov	r2, r8
 800718e:	4631      	mov	r1, r6
 8007190:	4628      	mov	r0, r5
 8007192:	47b8      	blx	r7
 8007194:	3001      	adds	r0, #1
 8007196:	f43f ae74 	beq.w	8006e82 <_printf_float+0xbe>
 800719a:	ee18 3a10 	vmov	r3, s16
 800719e:	4652      	mov	r2, sl
 80071a0:	4631      	mov	r1, r6
 80071a2:	4628      	mov	r0, r5
 80071a4:	47b8      	blx	r7
 80071a6:	3001      	adds	r0, #1
 80071a8:	f43f ae6b 	beq.w	8006e82 <_printf_float+0xbe>
 80071ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071b0:	2200      	movs	r2, #0
 80071b2:	2300      	movs	r3, #0
 80071b4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80071b8:	f7f9 fc8e 	bl	8000ad8 <__aeabi_dcmpeq>
 80071bc:	b9d8      	cbnz	r0, 80071f6 <_printf_float+0x432>
 80071be:	f10a 33ff 	add.w	r3, sl, #4294967295
 80071c2:	f108 0201 	add.w	r2, r8, #1
 80071c6:	4631      	mov	r1, r6
 80071c8:	4628      	mov	r0, r5
 80071ca:	47b8      	blx	r7
 80071cc:	3001      	adds	r0, #1
 80071ce:	d10e      	bne.n	80071ee <_printf_float+0x42a>
 80071d0:	e657      	b.n	8006e82 <_printf_float+0xbe>
 80071d2:	2301      	movs	r3, #1
 80071d4:	4652      	mov	r2, sl
 80071d6:	4631      	mov	r1, r6
 80071d8:	4628      	mov	r0, r5
 80071da:	47b8      	blx	r7
 80071dc:	3001      	adds	r0, #1
 80071de:	f43f ae50 	beq.w	8006e82 <_printf_float+0xbe>
 80071e2:	f108 0801 	add.w	r8, r8, #1
 80071e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071e8:	3b01      	subs	r3, #1
 80071ea:	4543      	cmp	r3, r8
 80071ec:	dcf1      	bgt.n	80071d2 <_printf_float+0x40e>
 80071ee:	464b      	mov	r3, r9
 80071f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80071f4:	e6da      	b.n	8006fac <_printf_float+0x1e8>
 80071f6:	f04f 0800 	mov.w	r8, #0
 80071fa:	f104 0a1a 	add.w	sl, r4, #26
 80071fe:	e7f2      	b.n	80071e6 <_printf_float+0x422>
 8007200:	2301      	movs	r3, #1
 8007202:	4642      	mov	r2, r8
 8007204:	e7df      	b.n	80071c6 <_printf_float+0x402>
 8007206:	2301      	movs	r3, #1
 8007208:	464a      	mov	r2, r9
 800720a:	4631      	mov	r1, r6
 800720c:	4628      	mov	r0, r5
 800720e:	47b8      	blx	r7
 8007210:	3001      	adds	r0, #1
 8007212:	f43f ae36 	beq.w	8006e82 <_printf_float+0xbe>
 8007216:	f108 0801 	add.w	r8, r8, #1
 800721a:	68e3      	ldr	r3, [r4, #12]
 800721c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800721e:	1a5b      	subs	r3, r3, r1
 8007220:	4543      	cmp	r3, r8
 8007222:	dcf0      	bgt.n	8007206 <_printf_float+0x442>
 8007224:	e6f8      	b.n	8007018 <_printf_float+0x254>
 8007226:	f04f 0800 	mov.w	r8, #0
 800722a:	f104 0919 	add.w	r9, r4, #25
 800722e:	e7f4      	b.n	800721a <_printf_float+0x456>

08007230 <_printf_common>:
 8007230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007234:	4616      	mov	r6, r2
 8007236:	4699      	mov	r9, r3
 8007238:	688a      	ldr	r2, [r1, #8]
 800723a:	690b      	ldr	r3, [r1, #16]
 800723c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007240:	4293      	cmp	r3, r2
 8007242:	bfb8      	it	lt
 8007244:	4613      	movlt	r3, r2
 8007246:	6033      	str	r3, [r6, #0]
 8007248:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800724c:	4607      	mov	r7, r0
 800724e:	460c      	mov	r4, r1
 8007250:	b10a      	cbz	r2, 8007256 <_printf_common+0x26>
 8007252:	3301      	adds	r3, #1
 8007254:	6033      	str	r3, [r6, #0]
 8007256:	6823      	ldr	r3, [r4, #0]
 8007258:	0699      	lsls	r1, r3, #26
 800725a:	bf42      	ittt	mi
 800725c:	6833      	ldrmi	r3, [r6, #0]
 800725e:	3302      	addmi	r3, #2
 8007260:	6033      	strmi	r3, [r6, #0]
 8007262:	6825      	ldr	r5, [r4, #0]
 8007264:	f015 0506 	ands.w	r5, r5, #6
 8007268:	d106      	bne.n	8007278 <_printf_common+0x48>
 800726a:	f104 0a19 	add.w	sl, r4, #25
 800726e:	68e3      	ldr	r3, [r4, #12]
 8007270:	6832      	ldr	r2, [r6, #0]
 8007272:	1a9b      	subs	r3, r3, r2
 8007274:	42ab      	cmp	r3, r5
 8007276:	dc26      	bgt.n	80072c6 <_printf_common+0x96>
 8007278:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800727c:	1e13      	subs	r3, r2, #0
 800727e:	6822      	ldr	r2, [r4, #0]
 8007280:	bf18      	it	ne
 8007282:	2301      	movne	r3, #1
 8007284:	0692      	lsls	r2, r2, #26
 8007286:	d42b      	bmi.n	80072e0 <_printf_common+0xb0>
 8007288:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800728c:	4649      	mov	r1, r9
 800728e:	4638      	mov	r0, r7
 8007290:	47c0      	blx	r8
 8007292:	3001      	adds	r0, #1
 8007294:	d01e      	beq.n	80072d4 <_printf_common+0xa4>
 8007296:	6823      	ldr	r3, [r4, #0]
 8007298:	6922      	ldr	r2, [r4, #16]
 800729a:	f003 0306 	and.w	r3, r3, #6
 800729e:	2b04      	cmp	r3, #4
 80072a0:	bf02      	ittt	eq
 80072a2:	68e5      	ldreq	r5, [r4, #12]
 80072a4:	6833      	ldreq	r3, [r6, #0]
 80072a6:	1aed      	subeq	r5, r5, r3
 80072a8:	68a3      	ldr	r3, [r4, #8]
 80072aa:	bf0c      	ite	eq
 80072ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072b0:	2500      	movne	r5, #0
 80072b2:	4293      	cmp	r3, r2
 80072b4:	bfc4      	itt	gt
 80072b6:	1a9b      	subgt	r3, r3, r2
 80072b8:	18ed      	addgt	r5, r5, r3
 80072ba:	2600      	movs	r6, #0
 80072bc:	341a      	adds	r4, #26
 80072be:	42b5      	cmp	r5, r6
 80072c0:	d11a      	bne.n	80072f8 <_printf_common+0xc8>
 80072c2:	2000      	movs	r0, #0
 80072c4:	e008      	b.n	80072d8 <_printf_common+0xa8>
 80072c6:	2301      	movs	r3, #1
 80072c8:	4652      	mov	r2, sl
 80072ca:	4649      	mov	r1, r9
 80072cc:	4638      	mov	r0, r7
 80072ce:	47c0      	blx	r8
 80072d0:	3001      	adds	r0, #1
 80072d2:	d103      	bne.n	80072dc <_printf_common+0xac>
 80072d4:	f04f 30ff 	mov.w	r0, #4294967295
 80072d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072dc:	3501      	adds	r5, #1
 80072de:	e7c6      	b.n	800726e <_printf_common+0x3e>
 80072e0:	18e1      	adds	r1, r4, r3
 80072e2:	1c5a      	adds	r2, r3, #1
 80072e4:	2030      	movs	r0, #48	; 0x30
 80072e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072ea:	4422      	add	r2, r4
 80072ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072f4:	3302      	adds	r3, #2
 80072f6:	e7c7      	b.n	8007288 <_printf_common+0x58>
 80072f8:	2301      	movs	r3, #1
 80072fa:	4622      	mov	r2, r4
 80072fc:	4649      	mov	r1, r9
 80072fe:	4638      	mov	r0, r7
 8007300:	47c0      	blx	r8
 8007302:	3001      	adds	r0, #1
 8007304:	d0e6      	beq.n	80072d4 <_printf_common+0xa4>
 8007306:	3601      	adds	r6, #1
 8007308:	e7d9      	b.n	80072be <_printf_common+0x8e>
	...

0800730c <_printf_i>:
 800730c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007310:	7e0f      	ldrb	r7, [r1, #24]
 8007312:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007314:	2f78      	cmp	r7, #120	; 0x78
 8007316:	4691      	mov	r9, r2
 8007318:	4680      	mov	r8, r0
 800731a:	460c      	mov	r4, r1
 800731c:	469a      	mov	sl, r3
 800731e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007322:	d807      	bhi.n	8007334 <_printf_i+0x28>
 8007324:	2f62      	cmp	r7, #98	; 0x62
 8007326:	d80a      	bhi.n	800733e <_printf_i+0x32>
 8007328:	2f00      	cmp	r7, #0
 800732a:	f000 80d4 	beq.w	80074d6 <_printf_i+0x1ca>
 800732e:	2f58      	cmp	r7, #88	; 0x58
 8007330:	f000 80c0 	beq.w	80074b4 <_printf_i+0x1a8>
 8007334:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007338:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800733c:	e03a      	b.n	80073b4 <_printf_i+0xa8>
 800733e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007342:	2b15      	cmp	r3, #21
 8007344:	d8f6      	bhi.n	8007334 <_printf_i+0x28>
 8007346:	a101      	add	r1, pc, #4	; (adr r1, 800734c <_printf_i+0x40>)
 8007348:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800734c:	080073a5 	.word	0x080073a5
 8007350:	080073b9 	.word	0x080073b9
 8007354:	08007335 	.word	0x08007335
 8007358:	08007335 	.word	0x08007335
 800735c:	08007335 	.word	0x08007335
 8007360:	08007335 	.word	0x08007335
 8007364:	080073b9 	.word	0x080073b9
 8007368:	08007335 	.word	0x08007335
 800736c:	08007335 	.word	0x08007335
 8007370:	08007335 	.word	0x08007335
 8007374:	08007335 	.word	0x08007335
 8007378:	080074bd 	.word	0x080074bd
 800737c:	080073e5 	.word	0x080073e5
 8007380:	08007477 	.word	0x08007477
 8007384:	08007335 	.word	0x08007335
 8007388:	08007335 	.word	0x08007335
 800738c:	080074df 	.word	0x080074df
 8007390:	08007335 	.word	0x08007335
 8007394:	080073e5 	.word	0x080073e5
 8007398:	08007335 	.word	0x08007335
 800739c:	08007335 	.word	0x08007335
 80073a0:	0800747f 	.word	0x0800747f
 80073a4:	682b      	ldr	r3, [r5, #0]
 80073a6:	1d1a      	adds	r2, r3, #4
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	602a      	str	r2, [r5, #0]
 80073ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073b4:	2301      	movs	r3, #1
 80073b6:	e09f      	b.n	80074f8 <_printf_i+0x1ec>
 80073b8:	6820      	ldr	r0, [r4, #0]
 80073ba:	682b      	ldr	r3, [r5, #0]
 80073bc:	0607      	lsls	r7, r0, #24
 80073be:	f103 0104 	add.w	r1, r3, #4
 80073c2:	6029      	str	r1, [r5, #0]
 80073c4:	d501      	bpl.n	80073ca <_printf_i+0xbe>
 80073c6:	681e      	ldr	r6, [r3, #0]
 80073c8:	e003      	b.n	80073d2 <_printf_i+0xc6>
 80073ca:	0646      	lsls	r6, r0, #25
 80073cc:	d5fb      	bpl.n	80073c6 <_printf_i+0xba>
 80073ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 80073d2:	2e00      	cmp	r6, #0
 80073d4:	da03      	bge.n	80073de <_printf_i+0xd2>
 80073d6:	232d      	movs	r3, #45	; 0x2d
 80073d8:	4276      	negs	r6, r6
 80073da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073de:	485a      	ldr	r0, [pc, #360]	; (8007548 <_printf_i+0x23c>)
 80073e0:	230a      	movs	r3, #10
 80073e2:	e012      	b.n	800740a <_printf_i+0xfe>
 80073e4:	682b      	ldr	r3, [r5, #0]
 80073e6:	6820      	ldr	r0, [r4, #0]
 80073e8:	1d19      	adds	r1, r3, #4
 80073ea:	6029      	str	r1, [r5, #0]
 80073ec:	0605      	lsls	r5, r0, #24
 80073ee:	d501      	bpl.n	80073f4 <_printf_i+0xe8>
 80073f0:	681e      	ldr	r6, [r3, #0]
 80073f2:	e002      	b.n	80073fa <_printf_i+0xee>
 80073f4:	0641      	lsls	r1, r0, #25
 80073f6:	d5fb      	bpl.n	80073f0 <_printf_i+0xe4>
 80073f8:	881e      	ldrh	r6, [r3, #0]
 80073fa:	4853      	ldr	r0, [pc, #332]	; (8007548 <_printf_i+0x23c>)
 80073fc:	2f6f      	cmp	r7, #111	; 0x6f
 80073fe:	bf0c      	ite	eq
 8007400:	2308      	moveq	r3, #8
 8007402:	230a      	movne	r3, #10
 8007404:	2100      	movs	r1, #0
 8007406:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800740a:	6865      	ldr	r5, [r4, #4]
 800740c:	60a5      	str	r5, [r4, #8]
 800740e:	2d00      	cmp	r5, #0
 8007410:	bfa2      	ittt	ge
 8007412:	6821      	ldrge	r1, [r4, #0]
 8007414:	f021 0104 	bicge.w	r1, r1, #4
 8007418:	6021      	strge	r1, [r4, #0]
 800741a:	b90e      	cbnz	r6, 8007420 <_printf_i+0x114>
 800741c:	2d00      	cmp	r5, #0
 800741e:	d04b      	beq.n	80074b8 <_printf_i+0x1ac>
 8007420:	4615      	mov	r5, r2
 8007422:	fbb6 f1f3 	udiv	r1, r6, r3
 8007426:	fb03 6711 	mls	r7, r3, r1, r6
 800742a:	5dc7      	ldrb	r7, [r0, r7]
 800742c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007430:	4637      	mov	r7, r6
 8007432:	42bb      	cmp	r3, r7
 8007434:	460e      	mov	r6, r1
 8007436:	d9f4      	bls.n	8007422 <_printf_i+0x116>
 8007438:	2b08      	cmp	r3, #8
 800743a:	d10b      	bne.n	8007454 <_printf_i+0x148>
 800743c:	6823      	ldr	r3, [r4, #0]
 800743e:	07de      	lsls	r6, r3, #31
 8007440:	d508      	bpl.n	8007454 <_printf_i+0x148>
 8007442:	6923      	ldr	r3, [r4, #16]
 8007444:	6861      	ldr	r1, [r4, #4]
 8007446:	4299      	cmp	r1, r3
 8007448:	bfde      	ittt	le
 800744a:	2330      	movle	r3, #48	; 0x30
 800744c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007450:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007454:	1b52      	subs	r2, r2, r5
 8007456:	6122      	str	r2, [r4, #16]
 8007458:	f8cd a000 	str.w	sl, [sp]
 800745c:	464b      	mov	r3, r9
 800745e:	aa03      	add	r2, sp, #12
 8007460:	4621      	mov	r1, r4
 8007462:	4640      	mov	r0, r8
 8007464:	f7ff fee4 	bl	8007230 <_printf_common>
 8007468:	3001      	adds	r0, #1
 800746a:	d14a      	bne.n	8007502 <_printf_i+0x1f6>
 800746c:	f04f 30ff 	mov.w	r0, #4294967295
 8007470:	b004      	add	sp, #16
 8007472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007476:	6823      	ldr	r3, [r4, #0]
 8007478:	f043 0320 	orr.w	r3, r3, #32
 800747c:	6023      	str	r3, [r4, #0]
 800747e:	4833      	ldr	r0, [pc, #204]	; (800754c <_printf_i+0x240>)
 8007480:	2778      	movs	r7, #120	; 0x78
 8007482:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007486:	6823      	ldr	r3, [r4, #0]
 8007488:	6829      	ldr	r1, [r5, #0]
 800748a:	061f      	lsls	r7, r3, #24
 800748c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007490:	d402      	bmi.n	8007498 <_printf_i+0x18c>
 8007492:	065f      	lsls	r7, r3, #25
 8007494:	bf48      	it	mi
 8007496:	b2b6      	uxthmi	r6, r6
 8007498:	07df      	lsls	r7, r3, #31
 800749a:	bf48      	it	mi
 800749c:	f043 0320 	orrmi.w	r3, r3, #32
 80074a0:	6029      	str	r1, [r5, #0]
 80074a2:	bf48      	it	mi
 80074a4:	6023      	strmi	r3, [r4, #0]
 80074a6:	b91e      	cbnz	r6, 80074b0 <_printf_i+0x1a4>
 80074a8:	6823      	ldr	r3, [r4, #0]
 80074aa:	f023 0320 	bic.w	r3, r3, #32
 80074ae:	6023      	str	r3, [r4, #0]
 80074b0:	2310      	movs	r3, #16
 80074b2:	e7a7      	b.n	8007404 <_printf_i+0xf8>
 80074b4:	4824      	ldr	r0, [pc, #144]	; (8007548 <_printf_i+0x23c>)
 80074b6:	e7e4      	b.n	8007482 <_printf_i+0x176>
 80074b8:	4615      	mov	r5, r2
 80074ba:	e7bd      	b.n	8007438 <_printf_i+0x12c>
 80074bc:	682b      	ldr	r3, [r5, #0]
 80074be:	6826      	ldr	r6, [r4, #0]
 80074c0:	6961      	ldr	r1, [r4, #20]
 80074c2:	1d18      	adds	r0, r3, #4
 80074c4:	6028      	str	r0, [r5, #0]
 80074c6:	0635      	lsls	r5, r6, #24
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	d501      	bpl.n	80074d0 <_printf_i+0x1c4>
 80074cc:	6019      	str	r1, [r3, #0]
 80074ce:	e002      	b.n	80074d6 <_printf_i+0x1ca>
 80074d0:	0670      	lsls	r0, r6, #25
 80074d2:	d5fb      	bpl.n	80074cc <_printf_i+0x1c0>
 80074d4:	8019      	strh	r1, [r3, #0]
 80074d6:	2300      	movs	r3, #0
 80074d8:	6123      	str	r3, [r4, #16]
 80074da:	4615      	mov	r5, r2
 80074dc:	e7bc      	b.n	8007458 <_printf_i+0x14c>
 80074de:	682b      	ldr	r3, [r5, #0]
 80074e0:	1d1a      	adds	r2, r3, #4
 80074e2:	602a      	str	r2, [r5, #0]
 80074e4:	681d      	ldr	r5, [r3, #0]
 80074e6:	6862      	ldr	r2, [r4, #4]
 80074e8:	2100      	movs	r1, #0
 80074ea:	4628      	mov	r0, r5
 80074ec:	f7f8 fe78 	bl	80001e0 <memchr>
 80074f0:	b108      	cbz	r0, 80074f6 <_printf_i+0x1ea>
 80074f2:	1b40      	subs	r0, r0, r5
 80074f4:	6060      	str	r0, [r4, #4]
 80074f6:	6863      	ldr	r3, [r4, #4]
 80074f8:	6123      	str	r3, [r4, #16]
 80074fa:	2300      	movs	r3, #0
 80074fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007500:	e7aa      	b.n	8007458 <_printf_i+0x14c>
 8007502:	6923      	ldr	r3, [r4, #16]
 8007504:	462a      	mov	r2, r5
 8007506:	4649      	mov	r1, r9
 8007508:	4640      	mov	r0, r8
 800750a:	47d0      	blx	sl
 800750c:	3001      	adds	r0, #1
 800750e:	d0ad      	beq.n	800746c <_printf_i+0x160>
 8007510:	6823      	ldr	r3, [r4, #0]
 8007512:	079b      	lsls	r3, r3, #30
 8007514:	d413      	bmi.n	800753e <_printf_i+0x232>
 8007516:	68e0      	ldr	r0, [r4, #12]
 8007518:	9b03      	ldr	r3, [sp, #12]
 800751a:	4298      	cmp	r0, r3
 800751c:	bfb8      	it	lt
 800751e:	4618      	movlt	r0, r3
 8007520:	e7a6      	b.n	8007470 <_printf_i+0x164>
 8007522:	2301      	movs	r3, #1
 8007524:	4632      	mov	r2, r6
 8007526:	4649      	mov	r1, r9
 8007528:	4640      	mov	r0, r8
 800752a:	47d0      	blx	sl
 800752c:	3001      	adds	r0, #1
 800752e:	d09d      	beq.n	800746c <_printf_i+0x160>
 8007530:	3501      	adds	r5, #1
 8007532:	68e3      	ldr	r3, [r4, #12]
 8007534:	9903      	ldr	r1, [sp, #12]
 8007536:	1a5b      	subs	r3, r3, r1
 8007538:	42ab      	cmp	r3, r5
 800753a:	dcf2      	bgt.n	8007522 <_printf_i+0x216>
 800753c:	e7eb      	b.n	8007516 <_printf_i+0x20a>
 800753e:	2500      	movs	r5, #0
 8007540:	f104 0619 	add.w	r6, r4, #25
 8007544:	e7f5      	b.n	8007532 <_printf_i+0x226>
 8007546:	bf00      	nop
 8007548:	080099fe 	.word	0x080099fe
 800754c:	08009a0f 	.word	0x08009a0f

08007550 <std>:
 8007550:	2300      	movs	r3, #0
 8007552:	b510      	push	{r4, lr}
 8007554:	4604      	mov	r4, r0
 8007556:	e9c0 3300 	strd	r3, r3, [r0]
 800755a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800755e:	6083      	str	r3, [r0, #8]
 8007560:	8181      	strh	r1, [r0, #12]
 8007562:	6643      	str	r3, [r0, #100]	; 0x64
 8007564:	81c2      	strh	r2, [r0, #14]
 8007566:	6183      	str	r3, [r0, #24]
 8007568:	4619      	mov	r1, r3
 800756a:	2208      	movs	r2, #8
 800756c:	305c      	adds	r0, #92	; 0x5c
 800756e:	f000 f914 	bl	800779a <memset>
 8007572:	4b0d      	ldr	r3, [pc, #52]	; (80075a8 <std+0x58>)
 8007574:	6263      	str	r3, [r4, #36]	; 0x24
 8007576:	4b0d      	ldr	r3, [pc, #52]	; (80075ac <std+0x5c>)
 8007578:	62a3      	str	r3, [r4, #40]	; 0x28
 800757a:	4b0d      	ldr	r3, [pc, #52]	; (80075b0 <std+0x60>)
 800757c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800757e:	4b0d      	ldr	r3, [pc, #52]	; (80075b4 <std+0x64>)
 8007580:	6323      	str	r3, [r4, #48]	; 0x30
 8007582:	4b0d      	ldr	r3, [pc, #52]	; (80075b8 <std+0x68>)
 8007584:	6224      	str	r4, [r4, #32]
 8007586:	429c      	cmp	r4, r3
 8007588:	d006      	beq.n	8007598 <std+0x48>
 800758a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800758e:	4294      	cmp	r4, r2
 8007590:	d002      	beq.n	8007598 <std+0x48>
 8007592:	33d0      	adds	r3, #208	; 0xd0
 8007594:	429c      	cmp	r4, r3
 8007596:	d105      	bne.n	80075a4 <std+0x54>
 8007598:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800759c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075a0:	f000 b978 	b.w	8007894 <__retarget_lock_init_recursive>
 80075a4:	bd10      	pop	{r4, pc}
 80075a6:	bf00      	nop
 80075a8:	08007715 	.word	0x08007715
 80075ac:	08007737 	.word	0x08007737
 80075b0:	0800776f 	.word	0x0800776f
 80075b4:	08007793 	.word	0x08007793
 80075b8:	200004c0 	.word	0x200004c0

080075bc <stdio_exit_handler>:
 80075bc:	4a02      	ldr	r2, [pc, #8]	; (80075c8 <stdio_exit_handler+0xc>)
 80075be:	4903      	ldr	r1, [pc, #12]	; (80075cc <stdio_exit_handler+0x10>)
 80075c0:	4803      	ldr	r0, [pc, #12]	; (80075d0 <stdio_exit_handler+0x14>)
 80075c2:	f000 b869 	b.w	8007698 <_fwalk_sglue>
 80075c6:	bf00      	nop
 80075c8:	20000010 	.word	0x20000010
 80075cc:	08009249 	.word	0x08009249
 80075d0:	2000001c 	.word	0x2000001c

080075d4 <cleanup_stdio>:
 80075d4:	6841      	ldr	r1, [r0, #4]
 80075d6:	4b0c      	ldr	r3, [pc, #48]	; (8007608 <cleanup_stdio+0x34>)
 80075d8:	4299      	cmp	r1, r3
 80075da:	b510      	push	{r4, lr}
 80075dc:	4604      	mov	r4, r0
 80075de:	d001      	beq.n	80075e4 <cleanup_stdio+0x10>
 80075e0:	f001 fe32 	bl	8009248 <_fflush_r>
 80075e4:	68a1      	ldr	r1, [r4, #8]
 80075e6:	4b09      	ldr	r3, [pc, #36]	; (800760c <cleanup_stdio+0x38>)
 80075e8:	4299      	cmp	r1, r3
 80075ea:	d002      	beq.n	80075f2 <cleanup_stdio+0x1e>
 80075ec:	4620      	mov	r0, r4
 80075ee:	f001 fe2b 	bl	8009248 <_fflush_r>
 80075f2:	68e1      	ldr	r1, [r4, #12]
 80075f4:	4b06      	ldr	r3, [pc, #24]	; (8007610 <cleanup_stdio+0x3c>)
 80075f6:	4299      	cmp	r1, r3
 80075f8:	d004      	beq.n	8007604 <cleanup_stdio+0x30>
 80075fa:	4620      	mov	r0, r4
 80075fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007600:	f001 be22 	b.w	8009248 <_fflush_r>
 8007604:	bd10      	pop	{r4, pc}
 8007606:	bf00      	nop
 8007608:	200004c0 	.word	0x200004c0
 800760c:	20000528 	.word	0x20000528
 8007610:	20000590 	.word	0x20000590

08007614 <global_stdio_init.part.0>:
 8007614:	b510      	push	{r4, lr}
 8007616:	4b0b      	ldr	r3, [pc, #44]	; (8007644 <global_stdio_init.part.0+0x30>)
 8007618:	4c0b      	ldr	r4, [pc, #44]	; (8007648 <global_stdio_init.part.0+0x34>)
 800761a:	4a0c      	ldr	r2, [pc, #48]	; (800764c <global_stdio_init.part.0+0x38>)
 800761c:	601a      	str	r2, [r3, #0]
 800761e:	4620      	mov	r0, r4
 8007620:	2200      	movs	r2, #0
 8007622:	2104      	movs	r1, #4
 8007624:	f7ff ff94 	bl	8007550 <std>
 8007628:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800762c:	2201      	movs	r2, #1
 800762e:	2109      	movs	r1, #9
 8007630:	f7ff ff8e 	bl	8007550 <std>
 8007634:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007638:	2202      	movs	r2, #2
 800763a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800763e:	2112      	movs	r1, #18
 8007640:	f7ff bf86 	b.w	8007550 <std>
 8007644:	200005f8 	.word	0x200005f8
 8007648:	200004c0 	.word	0x200004c0
 800764c:	080075bd 	.word	0x080075bd

08007650 <__sfp_lock_acquire>:
 8007650:	4801      	ldr	r0, [pc, #4]	; (8007658 <__sfp_lock_acquire+0x8>)
 8007652:	f000 b920 	b.w	8007896 <__retarget_lock_acquire_recursive>
 8007656:	bf00      	nop
 8007658:	20000601 	.word	0x20000601

0800765c <__sfp_lock_release>:
 800765c:	4801      	ldr	r0, [pc, #4]	; (8007664 <__sfp_lock_release+0x8>)
 800765e:	f000 b91b 	b.w	8007898 <__retarget_lock_release_recursive>
 8007662:	bf00      	nop
 8007664:	20000601 	.word	0x20000601

08007668 <__sinit>:
 8007668:	b510      	push	{r4, lr}
 800766a:	4604      	mov	r4, r0
 800766c:	f7ff fff0 	bl	8007650 <__sfp_lock_acquire>
 8007670:	6a23      	ldr	r3, [r4, #32]
 8007672:	b11b      	cbz	r3, 800767c <__sinit+0x14>
 8007674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007678:	f7ff bff0 	b.w	800765c <__sfp_lock_release>
 800767c:	4b04      	ldr	r3, [pc, #16]	; (8007690 <__sinit+0x28>)
 800767e:	6223      	str	r3, [r4, #32]
 8007680:	4b04      	ldr	r3, [pc, #16]	; (8007694 <__sinit+0x2c>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1f5      	bne.n	8007674 <__sinit+0xc>
 8007688:	f7ff ffc4 	bl	8007614 <global_stdio_init.part.0>
 800768c:	e7f2      	b.n	8007674 <__sinit+0xc>
 800768e:	bf00      	nop
 8007690:	080075d5 	.word	0x080075d5
 8007694:	200005f8 	.word	0x200005f8

08007698 <_fwalk_sglue>:
 8007698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800769c:	4607      	mov	r7, r0
 800769e:	4688      	mov	r8, r1
 80076a0:	4614      	mov	r4, r2
 80076a2:	2600      	movs	r6, #0
 80076a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076a8:	f1b9 0901 	subs.w	r9, r9, #1
 80076ac:	d505      	bpl.n	80076ba <_fwalk_sglue+0x22>
 80076ae:	6824      	ldr	r4, [r4, #0]
 80076b0:	2c00      	cmp	r4, #0
 80076b2:	d1f7      	bne.n	80076a4 <_fwalk_sglue+0xc>
 80076b4:	4630      	mov	r0, r6
 80076b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076ba:	89ab      	ldrh	r3, [r5, #12]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d907      	bls.n	80076d0 <_fwalk_sglue+0x38>
 80076c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076c4:	3301      	adds	r3, #1
 80076c6:	d003      	beq.n	80076d0 <_fwalk_sglue+0x38>
 80076c8:	4629      	mov	r1, r5
 80076ca:	4638      	mov	r0, r7
 80076cc:	47c0      	blx	r8
 80076ce:	4306      	orrs	r6, r0
 80076d0:	3568      	adds	r5, #104	; 0x68
 80076d2:	e7e9      	b.n	80076a8 <_fwalk_sglue+0x10>

080076d4 <siprintf>:
 80076d4:	b40e      	push	{r1, r2, r3}
 80076d6:	b500      	push	{lr}
 80076d8:	b09c      	sub	sp, #112	; 0x70
 80076da:	ab1d      	add	r3, sp, #116	; 0x74
 80076dc:	9002      	str	r0, [sp, #8]
 80076de:	9006      	str	r0, [sp, #24]
 80076e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80076e4:	4809      	ldr	r0, [pc, #36]	; (800770c <siprintf+0x38>)
 80076e6:	9107      	str	r1, [sp, #28]
 80076e8:	9104      	str	r1, [sp, #16]
 80076ea:	4909      	ldr	r1, [pc, #36]	; (8007710 <siprintf+0x3c>)
 80076ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80076f0:	9105      	str	r1, [sp, #20]
 80076f2:	6800      	ldr	r0, [r0, #0]
 80076f4:	9301      	str	r3, [sp, #4]
 80076f6:	a902      	add	r1, sp, #8
 80076f8:	f001 fc22 	bl	8008f40 <_svfiprintf_r>
 80076fc:	9b02      	ldr	r3, [sp, #8]
 80076fe:	2200      	movs	r2, #0
 8007700:	701a      	strb	r2, [r3, #0]
 8007702:	b01c      	add	sp, #112	; 0x70
 8007704:	f85d eb04 	ldr.w	lr, [sp], #4
 8007708:	b003      	add	sp, #12
 800770a:	4770      	bx	lr
 800770c:	20000068 	.word	0x20000068
 8007710:	ffff0208 	.word	0xffff0208

08007714 <__sread>:
 8007714:	b510      	push	{r4, lr}
 8007716:	460c      	mov	r4, r1
 8007718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800771c:	f000 f86c 	bl	80077f8 <_read_r>
 8007720:	2800      	cmp	r0, #0
 8007722:	bfab      	itete	ge
 8007724:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007726:	89a3      	ldrhlt	r3, [r4, #12]
 8007728:	181b      	addge	r3, r3, r0
 800772a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800772e:	bfac      	ite	ge
 8007730:	6563      	strge	r3, [r4, #84]	; 0x54
 8007732:	81a3      	strhlt	r3, [r4, #12]
 8007734:	bd10      	pop	{r4, pc}

08007736 <__swrite>:
 8007736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800773a:	461f      	mov	r7, r3
 800773c:	898b      	ldrh	r3, [r1, #12]
 800773e:	05db      	lsls	r3, r3, #23
 8007740:	4605      	mov	r5, r0
 8007742:	460c      	mov	r4, r1
 8007744:	4616      	mov	r6, r2
 8007746:	d505      	bpl.n	8007754 <__swrite+0x1e>
 8007748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800774c:	2302      	movs	r3, #2
 800774e:	2200      	movs	r2, #0
 8007750:	f000 f840 	bl	80077d4 <_lseek_r>
 8007754:	89a3      	ldrh	r3, [r4, #12]
 8007756:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800775a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800775e:	81a3      	strh	r3, [r4, #12]
 8007760:	4632      	mov	r2, r6
 8007762:	463b      	mov	r3, r7
 8007764:	4628      	mov	r0, r5
 8007766:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800776a:	f000 b857 	b.w	800781c <_write_r>

0800776e <__sseek>:
 800776e:	b510      	push	{r4, lr}
 8007770:	460c      	mov	r4, r1
 8007772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007776:	f000 f82d 	bl	80077d4 <_lseek_r>
 800777a:	1c43      	adds	r3, r0, #1
 800777c:	89a3      	ldrh	r3, [r4, #12]
 800777e:	bf15      	itete	ne
 8007780:	6560      	strne	r0, [r4, #84]	; 0x54
 8007782:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007786:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800778a:	81a3      	strheq	r3, [r4, #12]
 800778c:	bf18      	it	ne
 800778e:	81a3      	strhne	r3, [r4, #12]
 8007790:	bd10      	pop	{r4, pc}

08007792 <__sclose>:
 8007792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007796:	f000 b80d 	b.w	80077b4 <_close_r>

0800779a <memset>:
 800779a:	4402      	add	r2, r0
 800779c:	4603      	mov	r3, r0
 800779e:	4293      	cmp	r3, r2
 80077a0:	d100      	bne.n	80077a4 <memset+0xa>
 80077a2:	4770      	bx	lr
 80077a4:	f803 1b01 	strb.w	r1, [r3], #1
 80077a8:	e7f9      	b.n	800779e <memset+0x4>
	...

080077ac <_localeconv_r>:
 80077ac:	4800      	ldr	r0, [pc, #0]	; (80077b0 <_localeconv_r+0x4>)
 80077ae:	4770      	bx	lr
 80077b0:	2000015c 	.word	0x2000015c

080077b4 <_close_r>:
 80077b4:	b538      	push	{r3, r4, r5, lr}
 80077b6:	4d06      	ldr	r5, [pc, #24]	; (80077d0 <_close_r+0x1c>)
 80077b8:	2300      	movs	r3, #0
 80077ba:	4604      	mov	r4, r0
 80077bc:	4608      	mov	r0, r1
 80077be:	602b      	str	r3, [r5, #0]
 80077c0:	f7fb f887 	bl	80028d2 <_close>
 80077c4:	1c43      	adds	r3, r0, #1
 80077c6:	d102      	bne.n	80077ce <_close_r+0x1a>
 80077c8:	682b      	ldr	r3, [r5, #0]
 80077ca:	b103      	cbz	r3, 80077ce <_close_r+0x1a>
 80077cc:	6023      	str	r3, [r4, #0]
 80077ce:	bd38      	pop	{r3, r4, r5, pc}
 80077d0:	200005fc 	.word	0x200005fc

080077d4 <_lseek_r>:
 80077d4:	b538      	push	{r3, r4, r5, lr}
 80077d6:	4d07      	ldr	r5, [pc, #28]	; (80077f4 <_lseek_r+0x20>)
 80077d8:	4604      	mov	r4, r0
 80077da:	4608      	mov	r0, r1
 80077dc:	4611      	mov	r1, r2
 80077de:	2200      	movs	r2, #0
 80077e0:	602a      	str	r2, [r5, #0]
 80077e2:	461a      	mov	r2, r3
 80077e4:	f7fb f89c 	bl	8002920 <_lseek>
 80077e8:	1c43      	adds	r3, r0, #1
 80077ea:	d102      	bne.n	80077f2 <_lseek_r+0x1e>
 80077ec:	682b      	ldr	r3, [r5, #0]
 80077ee:	b103      	cbz	r3, 80077f2 <_lseek_r+0x1e>
 80077f0:	6023      	str	r3, [r4, #0]
 80077f2:	bd38      	pop	{r3, r4, r5, pc}
 80077f4:	200005fc 	.word	0x200005fc

080077f8 <_read_r>:
 80077f8:	b538      	push	{r3, r4, r5, lr}
 80077fa:	4d07      	ldr	r5, [pc, #28]	; (8007818 <_read_r+0x20>)
 80077fc:	4604      	mov	r4, r0
 80077fe:	4608      	mov	r0, r1
 8007800:	4611      	mov	r1, r2
 8007802:	2200      	movs	r2, #0
 8007804:	602a      	str	r2, [r5, #0]
 8007806:	461a      	mov	r2, r3
 8007808:	f7fb f82a 	bl	8002860 <_read>
 800780c:	1c43      	adds	r3, r0, #1
 800780e:	d102      	bne.n	8007816 <_read_r+0x1e>
 8007810:	682b      	ldr	r3, [r5, #0]
 8007812:	b103      	cbz	r3, 8007816 <_read_r+0x1e>
 8007814:	6023      	str	r3, [r4, #0]
 8007816:	bd38      	pop	{r3, r4, r5, pc}
 8007818:	200005fc 	.word	0x200005fc

0800781c <_write_r>:
 800781c:	b538      	push	{r3, r4, r5, lr}
 800781e:	4d07      	ldr	r5, [pc, #28]	; (800783c <_write_r+0x20>)
 8007820:	4604      	mov	r4, r0
 8007822:	4608      	mov	r0, r1
 8007824:	4611      	mov	r1, r2
 8007826:	2200      	movs	r2, #0
 8007828:	602a      	str	r2, [r5, #0]
 800782a:	461a      	mov	r2, r3
 800782c:	f7fb f835 	bl	800289a <_write>
 8007830:	1c43      	adds	r3, r0, #1
 8007832:	d102      	bne.n	800783a <_write_r+0x1e>
 8007834:	682b      	ldr	r3, [r5, #0]
 8007836:	b103      	cbz	r3, 800783a <_write_r+0x1e>
 8007838:	6023      	str	r3, [r4, #0]
 800783a:	bd38      	pop	{r3, r4, r5, pc}
 800783c:	200005fc 	.word	0x200005fc

08007840 <__errno>:
 8007840:	4b01      	ldr	r3, [pc, #4]	; (8007848 <__errno+0x8>)
 8007842:	6818      	ldr	r0, [r3, #0]
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop
 8007848:	20000068 	.word	0x20000068

0800784c <__libc_init_array>:
 800784c:	b570      	push	{r4, r5, r6, lr}
 800784e:	4d0d      	ldr	r5, [pc, #52]	; (8007884 <__libc_init_array+0x38>)
 8007850:	4c0d      	ldr	r4, [pc, #52]	; (8007888 <__libc_init_array+0x3c>)
 8007852:	1b64      	subs	r4, r4, r5
 8007854:	10a4      	asrs	r4, r4, #2
 8007856:	2600      	movs	r6, #0
 8007858:	42a6      	cmp	r6, r4
 800785a:	d109      	bne.n	8007870 <__libc_init_array+0x24>
 800785c:	4d0b      	ldr	r5, [pc, #44]	; (800788c <__libc_init_array+0x40>)
 800785e:	4c0c      	ldr	r4, [pc, #48]	; (8007890 <__libc_init_array+0x44>)
 8007860:	f002 f896 	bl	8009990 <_init>
 8007864:	1b64      	subs	r4, r4, r5
 8007866:	10a4      	asrs	r4, r4, #2
 8007868:	2600      	movs	r6, #0
 800786a:	42a6      	cmp	r6, r4
 800786c:	d105      	bne.n	800787a <__libc_init_array+0x2e>
 800786e:	bd70      	pop	{r4, r5, r6, pc}
 8007870:	f855 3b04 	ldr.w	r3, [r5], #4
 8007874:	4798      	blx	r3
 8007876:	3601      	adds	r6, #1
 8007878:	e7ee      	b.n	8007858 <__libc_init_array+0xc>
 800787a:	f855 3b04 	ldr.w	r3, [r5], #4
 800787e:	4798      	blx	r3
 8007880:	3601      	adds	r6, #1
 8007882:	e7f2      	b.n	800786a <__libc_init_array+0x1e>
 8007884:	08009d64 	.word	0x08009d64
 8007888:	08009d64 	.word	0x08009d64
 800788c:	08009d64 	.word	0x08009d64
 8007890:	08009d68 	.word	0x08009d68

08007894 <__retarget_lock_init_recursive>:
 8007894:	4770      	bx	lr

08007896 <__retarget_lock_acquire_recursive>:
 8007896:	4770      	bx	lr

08007898 <__retarget_lock_release_recursive>:
 8007898:	4770      	bx	lr

0800789a <quorem>:
 800789a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800789e:	6903      	ldr	r3, [r0, #16]
 80078a0:	690c      	ldr	r4, [r1, #16]
 80078a2:	42a3      	cmp	r3, r4
 80078a4:	4607      	mov	r7, r0
 80078a6:	db7e      	blt.n	80079a6 <quorem+0x10c>
 80078a8:	3c01      	subs	r4, #1
 80078aa:	f101 0814 	add.w	r8, r1, #20
 80078ae:	f100 0514 	add.w	r5, r0, #20
 80078b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078b6:	9301      	str	r3, [sp, #4]
 80078b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80078bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078c0:	3301      	adds	r3, #1
 80078c2:	429a      	cmp	r2, r3
 80078c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80078c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80078cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80078d0:	d331      	bcc.n	8007936 <quorem+0x9c>
 80078d2:	f04f 0e00 	mov.w	lr, #0
 80078d6:	4640      	mov	r0, r8
 80078d8:	46ac      	mov	ip, r5
 80078da:	46f2      	mov	sl, lr
 80078dc:	f850 2b04 	ldr.w	r2, [r0], #4
 80078e0:	b293      	uxth	r3, r2
 80078e2:	fb06 e303 	mla	r3, r6, r3, lr
 80078e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80078ea:	0c1a      	lsrs	r2, r3, #16
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	ebaa 0303 	sub.w	r3, sl, r3
 80078f2:	f8dc a000 	ldr.w	sl, [ip]
 80078f6:	fa13 f38a 	uxtah	r3, r3, sl
 80078fa:	fb06 220e 	mla	r2, r6, lr, r2
 80078fe:	9300      	str	r3, [sp, #0]
 8007900:	9b00      	ldr	r3, [sp, #0]
 8007902:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007906:	b292      	uxth	r2, r2
 8007908:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800790c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007910:	f8bd 3000 	ldrh.w	r3, [sp]
 8007914:	4581      	cmp	r9, r0
 8007916:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800791a:	f84c 3b04 	str.w	r3, [ip], #4
 800791e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007922:	d2db      	bcs.n	80078dc <quorem+0x42>
 8007924:	f855 300b 	ldr.w	r3, [r5, fp]
 8007928:	b92b      	cbnz	r3, 8007936 <quorem+0x9c>
 800792a:	9b01      	ldr	r3, [sp, #4]
 800792c:	3b04      	subs	r3, #4
 800792e:	429d      	cmp	r5, r3
 8007930:	461a      	mov	r2, r3
 8007932:	d32c      	bcc.n	800798e <quorem+0xf4>
 8007934:	613c      	str	r4, [r7, #16]
 8007936:	4638      	mov	r0, r7
 8007938:	f001 f9a8 	bl	8008c8c <__mcmp>
 800793c:	2800      	cmp	r0, #0
 800793e:	db22      	blt.n	8007986 <quorem+0xec>
 8007940:	3601      	adds	r6, #1
 8007942:	4629      	mov	r1, r5
 8007944:	2000      	movs	r0, #0
 8007946:	f858 2b04 	ldr.w	r2, [r8], #4
 800794a:	f8d1 c000 	ldr.w	ip, [r1]
 800794e:	b293      	uxth	r3, r2
 8007950:	1ac3      	subs	r3, r0, r3
 8007952:	0c12      	lsrs	r2, r2, #16
 8007954:	fa13 f38c 	uxtah	r3, r3, ip
 8007958:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800795c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007960:	b29b      	uxth	r3, r3
 8007962:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007966:	45c1      	cmp	r9, r8
 8007968:	f841 3b04 	str.w	r3, [r1], #4
 800796c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007970:	d2e9      	bcs.n	8007946 <quorem+0xac>
 8007972:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007976:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800797a:	b922      	cbnz	r2, 8007986 <quorem+0xec>
 800797c:	3b04      	subs	r3, #4
 800797e:	429d      	cmp	r5, r3
 8007980:	461a      	mov	r2, r3
 8007982:	d30a      	bcc.n	800799a <quorem+0x100>
 8007984:	613c      	str	r4, [r7, #16]
 8007986:	4630      	mov	r0, r6
 8007988:	b003      	add	sp, #12
 800798a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800798e:	6812      	ldr	r2, [r2, #0]
 8007990:	3b04      	subs	r3, #4
 8007992:	2a00      	cmp	r2, #0
 8007994:	d1ce      	bne.n	8007934 <quorem+0x9a>
 8007996:	3c01      	subs	r4, #1
 8007998:	e7c9      	b.n	800792e <quorem+0x94>
 800799a:	6812      	ldr	r2, [r2, #0]
 800799c:	3b04      	subs	r3, #4
 800799e:	2a00      	cmp	r2, #0
 80079a0:	d1f0      	bne.n	8007984 <quorem+0xea>
 80079a2:	3c01      	subs	r4, #1
 80079a4:	e7eb      	b.n	800797e <quorem+0xe4>
 80079a6:	2000      	movs	r0, #0
 80079a8:	e7ee      	b.n	8007988 <quorem+0xee>
 80079aa:	0000      	movs	r0, r0
 80079ac:	0000      	movs	r0, r0
	...

080079b0 <_dtoa_r>:
 80079b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b4:	ed2d 8b04 	vpush	{d8-d9}
 80079b8:	69c5      	ldr	r5, [r0, #28]
 80079ba:	b093      	sub	sp, #76	; 0x4c
 80079bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80079c0:	ec57 6b10 	vmov	r6, r7, d0
 80079c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80079c8:	9107      	str	r1, [sp, #28]
 80079ca:	4604      	mov	r4, r0
 80079cc:	920a      	str	r2, [sp, #40]	; 0x28
 80079ce:	930d      	str	r3, [sp, #52]	; 0x34
 80079d0:	b975      	cbnz	r5, 80079f0 <_dtoa_r+0x40>
 80079d2:	2010      	movs	r0, #16
 80079d4:	f000 fe2a 	bl	800862c <malloc>
 80079d8:	4602      	mov	r2, r0
 80079da:	61e0      	str	r0, [r4, #28]
 80079dc:	b920      	cbnz	r0, 80079e8 <_dtoa_r+0x38>
 80079de:	4bae      	ldr	r3, [pc, #696]	; (8007c98 <_dtoa_r+0x2e8>)
 80079e0:	21ef      	movs	r1, #239	; 0xef
 80079e2:	48ae      	ldr	r0, [pc, #696]	; (8007c9c <_dtoa_r+0x2ec>)
 80079e4:	f001 fc90 	bl	8009308 <__assert_func>
 80079e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80079ec:	6005      	str	r5, [r0, #0]
 80079ee:	60c5      	str	r5, [r0, #12]
 80079f0:	69e3      	ldr	r3, [r4, #28]
 80079f2:	6819      	ldr	r1, [r3, #0]
 80079f4:	b151      	cbz	r1, 8007a0c <_dtoa_r+0x5c>
 80079f6:	685a      	ldr	r2, [r3, #4]
 80079f8:	604a      	str	r2, [r1, #4]
 80079fa:	2301      	movs	r3, #1
 80079fc:	4093      	lsls	r3, r2
 80079fe:	608b      	str	r3, [r1, #8]
 8007a00:	4620      	mov	r0, r4
 8007a02:	f000 ff07 	bl	8008814 <_Bfree>
 8007a06:	69e3      	ldr	r3, [r4, #28]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	601a      	str	r2, [r3, #0]
 8007a0c:	1e3b      	subs	r3, r7, #0
 8007a0e:	bfbb      	ittet	lt
 8007a10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007a14:	9303      	strlt	r3, [sp, #12]
 8007a16:	2300      	movge	r3, #0
 8007a18:	2201      	movlt	r2, #1
 8007a1a:	bfac      	ite	ge
 8007a1c:	f8c8 3000 	strge.w	r3, [r8]
 8007a20:	f8c8 2000 	strlt.w	r2, [r8]
 8007a24:	4b9e      	ldr	r3, [pc, #632]	; (8007ca0 <_dtoa_r+0x2f0>)
 8007a26:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007a2a:	ea33 0308 	bics.w	r3, r3, r8
 8007a2e:	d11b      	bne.n	8007a68 <_dtoa_r+0xb8>
 8007a30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a32:	f242 730f 	movw	r3, #9999	; 0x270f
 8007a36:	6013      	str	r3, [r2, #0]
 8007a38:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007a3c:	4333      	orrs	r3, r6
 8007a3e:	f000 8593 	beq.w	8008568 <_dtoa_r+0xbb8>
 8007a42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a44:	b963      	cbnz	r3, 8007a60 <_dtoa_r+0xb0>
 8007a46:	4b97      	ldr	r3, [pc, #604]	; (8007ca4 <_dtoa_r+0x2f4>)
 8007a48:	e027      	b.n	8007a9a <_dtoa_r+0xea>
 8007a4a:	4b97      	ldr	r3, [pc, #604]	; (8007ca8 <_dtoa_r+0x2f8>)
 8007a4c:	9300      	str	r3, [sp, #0]
 8007a4e:	3308      	adds	r3, #8
 8007a50:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007a52:	6013      	str	r3, [r2, #0]
 8007a54:	9800      	ldr	r0, [sp, #0]
 8007a56:	b013      	add	sp, #76	; 0x4c
 8007a58:	ecbd 8b04 	vpop	{d8-d9}
 8007a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a60:	4b90      	ldr	r3, [pc, #576]	; (8007ca4 <_dtoa_r+0x2f4>)
 8007a62:	9300      	str	r3, [sp, #0]
 8007a64:	3303      	adds	r3, #3
 8007a66:	e7f3      	b.n	8007a50 <_dtoa_r+0xa0>
 8007a68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	ec51 0b17 	vmov	r0, r1, d7
 8007a72:	eeb0 8a47 	vmov.f32	s16, s14
 8007a76:	eef0 8a67 	vmov.f32	s17, s15
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	f7f9 f82c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a80:	4681      	mov	r9, r0
 8007a82:	b160      	cbz	r0, 8007a9e <_dtoa_r+0xee>
 8007a84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a86:	2301      	movs	r3, #1
 8007a88:	6013      	str	r3, [r2, #0]
 8007a8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f000 8568 	beq.w	8008562 <_dtoa_r+0xbb2>
 8007a92:	4b86      	ldr	r3, [pc, #536]	; (8007cac <_dtoa_r+0x2fc>)
 8007a94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007a96:	6013      	str	r3, [r2, #0]
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	9300      	str	r3, [sp, #0]
 8007a9c:	e7da      	b.n	8007a54 <_dtoa_r+0xa4>
 8007a9e:	aa10      	add	r2, sp, #64	; 0x40
 8007aa0:	a911      	add	r1, sp, #68	; 0x44
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	eeb0 0a48 	vmov.f32	s0, s16
 8007aa8:	eef0 0a68 	vmov.f32	s1, s17
 8007aac:	f001 f994 	bl	8008dd8 <__d2b>
 8007ab0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007ab4:	4682      	mov	sl, r0
 8007ab6:	2d00      	cmp	r5, #0
 8007ab8:	d07f      	beq.n	8007bba <_dtoa_r+0x20a>
 8007aba:	ee18 3a90 	vmov	r3, s17
 8007abe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ac2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007ac6:	ec51 0b18 	vmov	r0, r1, d8
 8007aca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007ace:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007ad2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	2200      	movs	r2, #0
 8007ada:	4b75      	ldr	r3, [pc, #468]	; (8007cb0 <_dtoa_r+0x300>)
 8007adc:	f7f8 fbdc 	bl	8000298 <__aeabi_dsub>
 8007ae0:	a367      	add	r3, pc, #412	; (adr r3, 8007c80 <_dtoa_r+0x2d0>)
 8007ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae6:	f7f8 fd8f 	bl	8000608 <__aeabi_dmul>
 8007aea:	a367      	add	r3, pc, #412	; (adr r3, 8007c88 <_dtoa_r+0x2d8>)
 8007aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af0:	f7f8 fbd4 	bl	800029c <__adddf3>
 8007af4:	4606      	mov	r6, r0
 8007af6:	4628      	mov	r0, r5
 8007af8:	460f      	mov	r7, r1
 8007afa:	f7f8 fd1b 	bl	8000534 <__aeabi_i2d>
 8007afe:	a364      	add	r3, pc, #400	; (adr r3, 8007c90 <_dtoa_r+0x2e0>)
 8007b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b04:	f7f8 fd80 	bl	8000608 <__aeabi_dmul>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	4639      	mov	r1, r7
 8007b10:	f7f8 fbc4 	bl	800029c <__adddf3>
 8007b14:	4606      	mov	r6, r0
 8007b16:	460f      	mov	r7, r1
 8007b18:	f7f9 f826 	bl	8000b68 <__aeabi_d2iz>
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	4683      	mov	fp, r0
 8007b20:	2300      	movs	r3, #0
 8007b22:	4630      	mov	r0, r6
 8007b24:	4639      	mov	r1, r7
 8007b26:	f7f8 ffe1 	bl	8000aec <__aeabi_dcmplt>
 8007b2a:	b148      	cbz	r0, 8007b40 <_dtoa_r+0x190>
 8007b2c:	4658      	mov	r0, fp
 8007b2e:	f7f8 fd01 	bl	8000534 <__aeabi_i2d>
 8007b32:	4632      	mov	r2, r6
 8007b34:	463b      	mov	r3, r7
 8007b36:	f7f8 ffcf 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b3a:	b908      	cbnz	r0, 8007b40 <_dtoa_r+0x190>
 8007b3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007b40:	f1bb 0f16 	cmp.w	fp, #22
 8007b44:	d857      	bhi.n	8007bf6 <_dtoa_r+0x246>
 8007b46:	4b5b      	ldr	r3, [pc, #364]	; (8007cb4 <_dtoa_r+0x304>)
 8007b48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b50:	ec51 0b18 	vmov	r0, r1, d8
 8007b54:	f7f8 ffca 	bl	8000aec <__aeabi_dcmplt>
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	d04e      	beq.n	8007bfa <_dtoa_r+0x24a>
 8007b5c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007b60:	2300      	movs	r3, #0
 8007b62:	930c      	str	r3, [sp, #48]	; 0x30
 8007b64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b66:	1b5b      	subs	r3, r3, r5
 8007b68:	1e5a      	subs	r2, r3, #1
 8007b6a:	bf45      	ittet	mi
 8007b6c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007b70:	9305      	strmi	r3, [sp, #20]
 8007b72:	2300      	movpl	r3, #0
 8007b74:	2300      	movmi	r3, #0
 8007b76:	9206      	str	r2, [sp, #24]
 8007b78:	bf54      	ite	pl
 8007b7a:	9305      	strpl	r3, [sp, #20]
 8007b7c:	9306      	strmi	r3, [sp, #24]
 8007b7e:	f1bb 0f00 	cmp.w	fp, #0
 8007b82:	db3c      	blt.n	8007bfe <_dtoa_r+0x24e>
 8007b84:	9b06      	ldr	r3, [sp, #24]
 8007b86:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007b8a:	445b      	add	r3, fp
 8007b8c:	9306      	str	r3, [sp, #24]
 8007b8e:	2300      	movs	r3, #0
 8007b90:	9308      	str	r3, [sp, #32]
 8007b92:	9b07      	ldr	r3, [sp, #28]
 8007b94:	2b09      	cmp	r3, #9
 8007b96:	d868      	bhi.n	8007c6a <_dtoa_r+0x2ba>
 8007b98:	2b05      	cmp	r3, #5
 8007b9a:	bfc4      	itt	gt
 8007b9c:	3b04      	subgt	r3, #4
 8007b9e:	9307      	strgt	r3, [sp, #28]
 8007ba0:	9b07      	ldr	r3, [sp, #28]
 8007ba2:	f1a3 0302 	sub.w	r3, r3, #2
 8007ba6:	bfcc      	ite	gt
 8007ba8:	2500      	movgt	r5, #0
 8007baa:	2501      	movle	r5, #1
 8007bac:	2b03      	cmp	r3, #3
 8007bae:	f200 8085 	bhi.w	8007cbc <_dtoa_r+0x30c>
 8007bb2:	e8df f003 	tbb	[pc, r3]
 8007bb6:	3b2e      	.short	0x3b2e
 8007bb8:	5839      	.short	0x5839
 8007bba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007bbe:	441d      	add	r5, r3
 8007bc0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007bc4:	2b20      	cmp	r3, #32
 8007bc6:	bfc1      	itttt	gt
 8007bc8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007bcc:	fa08 f803 	lslgt.w	r8, r8, r3
 8007bd0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007bd4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007bd8:	bfd6      	itet	le
 8007bda:	f1c3 0320 	rsble	r3, r3, #32
 8007bde:	ea48 0003 	orrgt.w	r0, r8, r3
 8007be2:	fa06 f003 	lslle.w	r0, r6, r3
 8007be6:	f7f8 fc95 	bl	8000514 <__aeabi_ui2d>
 8007bea:	2201      	movs	r2, #1
 8007bec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007bf0:	3d01      	subs	r5, #1
 8007bf2:	920e      	str	r2, [sp, #56]	; 0x38
 8007bf4:	e76f      	b.n	8007ad6 <_dtoa_r+0x126>
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e7b3      	b.n	8007b62 <_dtoa_r+0x1b2>
 8007bfa:	900c      	str	r0, [sp, #48]	; 0x30
 8007bfc:	e7b2      	b.n	8007b64 <_dtoa_r+0x1b4>
 8007bfe:	9b05      	ldr	r3, [sp, #20]
 8007c00:	eba3 030b 	sub.w	r3, r3, fp
 8007c04:	9305      	str	r3, [sp, #20]
 8007c06:	f1cb 0300 	rsb	r3, fp, #0
 8007c0a:	9308      	str	r3, [sp, #32]
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c10:	e7bf      	b.n	8007b92 <_dtoa_r+0x1e2>
 8007c12:	2300      	movs	r3, #0
 8007c14:	9309      	str	r3, [sp, #36]	; 0x24
 8007c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	dc52      	bgt.n	8007cc2 <_dtoa_r+0x312>
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	9301      	str	r3, [sp, #4]
 8007c20:	9304      	str	r3, [sp, #16]
 8007c22:	461a      	mov	r2, r3
 8007c24:	920a      	str	r2, [sp, #40]	; 0x28
 8007c26:	e00b      	b.n	8007c40 <_dtoa_r+0x290>
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e7f3      	b.n	8007c14 <_dtoa_r+0x264>
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8007c30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c32:	445b      	add	r3, fp
 8007c34:	9301      	str	r3, [sp, #4]
 8007c36:	3301      	adds	r3, #1
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	9304      	str	r3, [sp, #16]
 8007c3c:	bfb8      	it	lt
 8007c3e:	2301      	movlt	r3, #1
 8007c40:	69e0      	ldr	r0, [r4, #28]
 8007c42:	2100      	movs	r1, #0
 8007c44:	2204      	movs	r2, #4
 8007c46:	f102 0614 	add.w	r6, r2, #20
 8007c4a:	429e      	cmp	r6, r3
 8007c4c:	d93d      	bls.n	8007cca <_dtoa_r+0x31a>
 8007c4e:	6041      	str	r1, [r0, #4]
 8007c50:	4620      	mov	r0, r4
 8007c52:	f000 fd9f 	bl	8008794 <_Balloc>
 8007c56:	9000      	str	r0, [sp, #0]
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	d139      	bne.n	8007cd0 <_dtoa_r+0x320>
 8007c5c:	4b16      	ldr	r3, [pc, #88]	; (8007cb8 <_dtoa_r+0x308>)
 8007c5e:	4602      	mov	r2, r0
 8007c60:	f240 11af 	movw	r1, #431	; 0x1af
 8007c64:	e6bd      	b.n	80079e2 <_dtoa_r+0x32>
 8007c66:	2301      	movs	r3, #1
 8007c68:	e7e1      	b.n	8007c2e <_dtoa_r+0x27e>
 8007c6a:	2501      	movs	r5, #1
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	9307      	str	r3, [sp, #28]
 8007c70:	9509      	str	r5, [sp, #36]	; 0x24
 8007c72:	f04f 33ff 	mov.w	r3, #4294967295
 8007c76:	9301      	str	r3, [sp, #4]
 8007c78:	9304      	str	r3, [sp, #16]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	2312      	movs	r3, #18
 8007c7e:	e7d1      	b.n	8007c24 <_dtoa_r+0x274>
 8007c80:	636f4361 	.word	0x636f4361
 8007c84:	3fd287a7 	.word	0x3fd287a7
 8007c88:	8b60c8b3 	.word	0x8b60c8b3
 8007c8c:	3fc68a28 	.word	0x3fc68a28
 8007c90:	509f79fb 	.word	0x509f79fb
 8007c94:	3fd34413 	.word	0x3fd34413
 8007c98:	08009a2d 	.word	0x08009a2d
 8007c9c:	08009a44 	.word	0x08009a44
 8007ca0:	7ff00000 	.word	0x7ff00000
 8007ca4:	08009a29 	.word	0x08009a29
 8007ca8:	08009a20 	.word	0x08009a20
 8007cac:	080099fd 	.word	0x080099fd
 8007cb0:	3ff80000 	.word	0x3ff80000
 8007cb4:	08009b30 	.word	0x08009b30
 8007cb8:	08009a9c 	.word	0x08009a9c
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	9309      	str	r3, [sp, #36]	; 0x24
 8007cc0:	e7d7      	b.n	8007c72 <_dtoa_r+0x2c2>
 8007cc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cc4:	9301      	str	r3, [sp, #4]
 8007cc6:	9304      	str	r3, [sp, #16]
 8007cc8:	e7ba      	b.n	8007c40 <_dtoa_r+0x290>
 8007cca:	3101      	adds	r1, #1
 8007ccc:	0052      	lsls	r2, r2, #1
 8007cce:	e7ba      	b.n	8007c46 <_dtoa_r+0x296>
 8007cd0:	69e3      	ldr	r3, [r4, #28]
 8007cd2:	9a00      	ldr	r2, [sp, #0]
 8007cd4:	601a      	str	r2, [r3, #0]
 8007cd6:	9b04      	ldr	r3, [sp, #16]
 8007cd8:	2b0e      	cmp	r3, #14
 8007cda:	f200 80a8 	bhi.w	8007e2e <_dtoa_r+0x47e>
 8007cde:	2d00      	cmp	r5, #0
 8007ce0:	f000 80a5 	beq.w	8007e2e <_dtoa_r+0x47e>
 8007ce4:	f1bb 0f00 	cmp.w	fp, #0
 8007ce8:	dd38      	ble.n	8007d5c <_dtoa_r+0x3ac>
 8007cea:	4bc0      	ldr	r3, [pc, #768]	; (8007fec <_dtoa_r+0x63c>)
 8007cec:	f00b 020f 	and.w	r2, fp, #15
 8007cf0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cf4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007cf8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007cfc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007d00:	d019      	beq.n	8007d36 <_dtoa_r+0x386>
 8007d02:	4bbb      	ldr	r3, [pc, #748]	; (8007ff0 <_dtoa_r+0x640>)
 8007d04:	ec51 0b18 	vmov	r0, r1, d8
 8007d08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d0c:	f7f8 fda6 	bl	800085c <__aeabi_ddiv>
 8007d10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d14:	f008 080f 	and.w	r8, r8, #15
 8007d18:	2503      	movs	r5, #3
 8007d1a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007ff0 <_dtoa_r+0x640>
 8007d1e:	f1b8 0f00 	cmp.w	r8, #0
 8007d22:	d10a      	bne.n	8007d3a <_dtoa_r+0x38a>
 8007d24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d28:	4632      	mov	r2, r6
 8007d2a:	463b      	mov	r3, r7
 8007d2c:	f7f8 fd96 	bl	800085c <__aeabi_ddiv>
 8007d30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d34:	e02b      	b.n	8007d8e <_dtoa_r+0x3de>
 8007d36:	2502      	movs	r5, #2
 8007d38:	e7ef      	b.n	8007d1a <_dtoa_r+0x36a>
 8007d3a:	f018 0f01 	tst.w	r8, #1
 8007d3e:	d008      	beq.n	8007d52 <_dtoa_r+0x3a2>
 8007d40:	4630      	mov	r0, r6
 8007d42:	4639      	mov	r1, r7
 8007d44:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007d48:	f7f8 fc5e 	bl	8000608 <__aeabi_dmul>
 8007d4c:	3501      	adds	r5, #1
 8007d4e:	4606      	mov	r6, r0
 8007d50:	460f      	mov	r7, r1
 8007d52:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007d56:	f109 0908 	add.w	r9, r9, #8
 8007d5a:	e7e0      	b.n	8007d1e <_dtoa_r+0x36e>
 8007d5c:	f000 809f 	beq.w	8007e9e <_dtoa_r+0x4ee>
 8007d60:	f1cb 0600 	rsb	r6, fp, #0
 8007d64:	4ba1      	ldr	r3, [pc, #644]	; (8007fec <_dtoa_r+0x63c>)
 8007d66:	4fa2      	ldr	r7, [pc, #648]	; (8007ff0 <_dtoa_r+0x640>)
 8007d68:	f006 020f 	and.w	r2, r6, #15
 8007d6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d74:	ec51 0b18 	vmov	r0, r1, d8
 8007d78:	f7f8 fc46 	bl	8000608 <__aeabi_dmul>
 8007d7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d80:	1136      	asrs	r6, r6, #4
 8007d82:	2300      	movs	r3, #0
 8007d84:	2502      	movs	r5, #2
 8007d86:	2e00      	cmp	r6, #0
 8007d88:	d17e      	bne.n	8007e88 <_dtoa_r+0x4d8>
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1d0      	bne.n	8007d30 <_dtoa_r+0x380>
 8007d8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d90:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f000 8084 	beq.w	8007ea2 <_dtoa_r+0x4f2>
 8007d9a:	4b96      	ldr	r3, [pc, #600]	; (8007ff4 <_dtoa_r+0x644>)
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	4640      	mov	r0, r8
 8007da0:	4649      	mov	r1, r9
 8007da2:	f7f8 fea3 	bl	8000aec <__aeabi_dcmplt>
 8007da6:	2800      	cmp	r0, #0
 8007da8:	d07b      	beq.n	8007ea2 <_dtoa_r+0x4f2>
 8007daa:	9b04      	ldr	r3, [sp, #16]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d078      	beq.n	8007ea2 <_dtoa_r+0x4f2>
 8007db0:	9b01      	ldr	r3, [sp, #4]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	dd39      	ble.n	8007e2a <_dtoa_r+0x47a>
 8007db6:	4b90      	ldr	r3, [pc, #576]	; (8007ff8 <_dtoa_r+0x648>)
 8007db8:	2200      	movs	r2, #0
 8007dba:	4640      	mov	r0, r8
 8007dbc:	4649      	mov	r1, r9
 8007dbe:	f7f8 fc23 	bl	8000608 <__aeabi_dmul>
 8007dc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dc6:	9e01      	ldr	r6, [sp, #4]
 8007dc8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007dcc:	3501      	adds	r5, #1
 8007dce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007dd2:	4628      	mov	r0, r5
 8007dd4:	f7f8 fbae 	bl	8000534 <__aeabi_i2d>
 8007dd8:	4642      	mov	r2, r8
 8007dda:	464b      	mov	r3, r9
 8007ddc:	f7f8 fc14 	bl	8000608 <__aeabi_dmul>
 8007de0:	4b86      	ldr	r3, [pc, #536]	; (8007ffc <_dtoa_r+0x64c>)
 8007de2:	2200      	movs	r2, #0
 8007de4:	f7f8 fa5a 	bl	800029c <__adddf3>
 8007de8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007dec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007df0:	9303      	str	r3, [sp, #12]
 8007df2:	2e00      	cmp	r6, #0
 8007df4:	d158      	bne.n	8007ea8 <_dtoa_r+0x4f8>
 8007df6:	4b82      	ldr	r3, [pc, #520]	; (8008000 <_dtoa_r+0x650>)
 8007df8:	2200      	movs	r2, #0
 8007dfa:	4640      	mov	r0, r8
 8007dfc:	4649      	mov	r1, r9
 8007dfe:	f7f8 fa4b 	bl	8000298 <__aeabi_dsub>
 8007e02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e06:	4680      	mov	r8, r0
 8007e08:	4689      	mov	r9, r1
 8007e0a:	f7f8 fe8d 	bl	8000b28 <__aeabi_dcmpgt>
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	f040 8296 	bne.w	8008340 <_dtoa_r+0x990>
 8007e14:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007e18:	4640      	mov	r0, r8
 8007e1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e1e:	4649      	mov	r1, r9
 8007e20:	f7f8 fe64 	bl	8000aec <__aeabi_dcmplt>
 8007e24:	2800      	cmp	r0, #0
 8007e26:	f040 8289 	bne.w	800833c <_dtoa_r+0x98c>
 8007e2a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007e2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f2c0 814e 	blt.w	80080d2 <_dtoa_r+0x722>
 8007e36:	f1bb 0f0e 	cmp.w	fp, #14
 8007e3a:	f300 814a 	bgt.w	80080d2 <_dtoa_r+0x722>
 8007e3e:	4b6b      	ldr	r3, [pc, #428]	; (8007fec <_dtoa_r+0x63c>)
 8007e40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007e44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	f280 80dc 	bge.w	8008008 <_dtoa_r+0x658>
 8007e50:	9b04      	ldr	r3, [sp, #16]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f300 80d8 	bgt.w	8008008 <_dtoa_r+0x658>
 8007e58:	f040 826f 	bne.w	800833a <_dtoa_r+0x98a>
 8007e5c:	4b68      	ldr	r3, [pc, #416]	; (8008000 <_dtoa_r+0x650>)
 8007e5e:	2200      	movs	r2, #0
 8007e60:	4640      	mov	r0, r8
 8007e62:	4649      	mov	r1, r9
 8007e64:	f7f8 fbd0 	bl	8000608 <__aeabi_dmul>
 8007e68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e6c:	f7f8 fe52 	bl	8000b14 <__aeabi_dcmpge>
 8007e70:	9e04      	ldr	r6, [sp, #16]
 8007e72:	4637      	mov	r7, r6
 8007e74:	2800      	cmp	r0, #0
 8007e76:	f040 8245 	bne.w	8008304 <_dtoa_r+0x954>
 8007e7a:	9d00      	ldr	r5, [sp, #0]
 8007e7c:	2331      	movs	r3, #49	; 0x31
 8007e7e:	f805 3b01 	strb.w	r3, [r5], #1
 8007e82:	f10b 0b01 	add.w	fp, fp, #1
 8007e86:	e241      	b.n	800830c <_dtoa_r+0x95c>
 8007e88:	07f2      	lsls	r2, r6, #31
 8007e8a:	d505      	bpl.n	8007e98 <_dtoa_r+0x4e8>
 8007e8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e90:	f7f8 fbba 	bl	8000608 <__aeabi_dmul>
 8007e94:	3501      	adds	r5, #1
 8007e96:	2301      	movs	r3, #1
 8007e98:	1076      	asrs	r6, r6, #1
 8007e9a:	3708      	adds	r7, #8
 8007e9c:	e773      	b.n	8007d86 <_dtoa_r+0x3d6>
 8007e9e:	2502      	movs	r5, #2
 8007ea0:	e775      	b.n	8007d8e <_dtoa_r+0x3de>
 8007ea2:	9e04      	ldr	r6, [sp, #16]
 8007ea4:	465f      	mov	r7, fp
 8007ea6:	e792      	b.n	8007dce <_dtoa_r+0x41e>
 8007ea8:	9900      	ldr	r1, [sp, #0]
 8007eaa:	4b50      	ldr	r3, [pc, #320]	; (8007fec <_dtoa_r+0x63c>)
 8007eac:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007eb0:	4431      	add	r1, r6
 8007eb2:	9102      	str	r1, [sp, #8]
 8007eb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007eb6:	eeb0 9a47 	vmov.f32	s18, s14
 8007eba:	eef0 9a67 	vmov.f32	s19, s15
 8007ebe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007ec2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ec6:	2900      	cmp	r1, #0
 8007ec8:	d044      	beq.n	8007f54 <_dtoa_r+0x5a4>
 8007eca:	494e      	ldr	r1, [pc, #312]	; (8008004 <_dtoa_r+0x654>)
 8007ecc:	2000      	movs	r0, #0
 8007ece:	f7f8 fcc5 	bl	800085c <__aeabi_ddiv>
 8007ed2:	ec53 2b19 	vmov	r2, r3, d9
 8007ed6:	f7f8 f9df 	bl	8000298 <__aeabi_dsub>
 8007eda:	9d00      	ldr	r5, [sp, #0]
 8007edc:	ec41 0b19 	vmov	d9, r0, r1
 8007ee0:	4649      	mov	r1, r9
 8007ee2:	4640      	mov	r0, r8
 8007ee4:	f7f8 fe40 	bl	8000b68 <__aeabi_d2iz>
 8007ee8:	4606      	mov	r6, r0
 8007eea:	f7f8 fb23 	bl	8000534 <__aeabi_i2d>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	4640      	mov	r0, r8
 8007ef4:	4649      	mov	r1, r9
 8007ef6:	f7f8 f9cf 	bl	8000298 <__aeabi_dsub>
 8007efa:	3630      	adds	r6, #48	; 0x30
 8007efc:	f805 6b01 	strb.w	r6, [r5], #1
 8007f00:	ec53 2b19 	vmov	r2, r3, d9
 8007f04:	4680      	mov	r8, r0
 8007f06:	4689      	mov	r9, r1
 8007f08:	f7f8 fdf0 	bl	8000aec <__aeabi_dcmplt>
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	d164      	bne.n	8007fda <_dtoa_r+0x62a>
 8007f10:	4642      	mov	r2, r8
 8007f12:	464b      	mov	r3, r9
 8007f14:	4937      	ldr	r1, [pc, #220]	; (8007ff4 <_dtoa_r+0x644>)
 8007f16:	2000      	movs	r0, #0
 8007f18:	f7f8 f9be 	bl	8000298 <__aeabi_dsub>
 8007f1c:	ec53 2b19 	vmov	r2, r3, d9
 8007f20:	f7f8 fde4 	bl	8000aec <__aeabi_dcmplt>
 8007f24:	2800      	cmp	r0, #0
 8007f26:	f040 80b6 	bne.w	8008096 <_dtoa_r+0x6e6>
 8007f2a:	9b02      	ldr	r3, [sp, #8]
 8007f2c:	429d      	cmp	r5, r3
 8007f2e:	f43f af7c 	beq.w	8007e2a <_dtoa_r+0x47a>
 8007f32:	4b31      	ldr	r3, [pc, #196]	; (8007ff8 <_dtoa_r+0x648>)
 8007f34:	ec51 0b19 	vmov	r0, r1, d9
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f7f8 fb65 	bl	8000608 <__aeabi_dmul>
 8007f3e:	4b2e      	ldr	r3, [pc, #184]	; (8007ff8 <_dtoa_r+0x648>)
 8007f40:	ec41 0b19 	vmov	d9, r0, r1
 8007f44:	2200      	movs	r2, #0
 8007f46:	4640      	mov	r0, r8
 8007f48:	4649      	mov	r1, r9
 8007f4a:	f7f8 fb5d 	bl	8000608 <__aeabi_dmul>
 8007f4e:	4680      	mov	r8, r0
 8007f50:	4689      	mov	r9, r1
 8007f52:	e7c5      	b.n	8007ee0 <_dtoa_r+0x530>
 8007f54:	ec51 0b17 	vmov	r0, r1, d7
 8007f58:	f7f8 fb56 	bl	8000608 <__aeabi_dmul>
 8007f5c:	9b02      	ldr	r3, [sp, #8]
 8007f5e:	9d00      	ldr	r5, [sp, #0]
 8007f60:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f62:	ec41 0b19 	vmov	d9, r0, r1
 8007f66:	4649      	mov	r1, r9
 8007f68:	4640      	mov	r0, r8
 8007f6a:	f7f8 fdfd 	bl	8000b68 <__aeabi_d2iz>
 8007f6e:	4606      	mov	r6, r0
 8007f70:	f7f8 fae0 	bl	8000534 <__aeabi_i2d>
 8007f74:	3630      	adds	r6, #48	; 0x30
 8007f76:	4602      	mov	r2, r0
 8007f78:	460b      	mov	r3, r1
 8007f7a:	4640      	mov	r0, r8
 8007f7c:	4649      	mov	r1, r9
 8007f7e:	f7f8 f98b 	bl	8000298 <__aeabi_dsub>
 8007f82:	f805 6b01 	strb.w	r6, [r5], #1
 8007f86:	9b02      	ldr	r3, [sp, #8]
 8007f88:	429d      	cmp	r5, r3
 8007f8a:	4680      	mov	r8, r0
 8007f8c:	4689      	mov	r9, r1
 8007f8e:	f04f 0200 	mov.w	r2, #0
 8007f92:	d124      	bne.n	8007fde <_dtoa_r+0x62e>
 8007f94:	4b1b      	ldr	r3, [pc, #108]	; (8008004 <_dtoa_r+0x654>)
 8007f96:	ec51 0b19 	vmov	r0, r1, d9
 8007f9a:	f7f8 f97f 	bl	800029c <__adddf3>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	4640      	mov	r0, r8
 8007fa4:	4649      	mov	r1, r9
 8007fa6:	f7f8 fdbf 	bl	8000b28 <__aeabi_dcmpgt>
 8007faa:	2800      	cmp	r0, #0
 8007fac:	d173      	bne.n	8008096 <_dtoa_r+0x6e6>
 8007fae:	ec53 2b19 	vmov	r2, r3, d9
 8007fb2:	4914      	ldr	r1, [pc, #80]	; (8008004 <_dtoa_r+0x654>)
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	f7f8 f96f 	bl	8000298 <__aeabi_dsub>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	4640      	mov	r0, r8
 8007fc0:	4649      	mov	r1, r9
 8007fc2:	f7f8 fd93 	bl	8000aec <__aeabi_dcmplt>
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	f43f af2f 	beq.w	8007e2a <_dtoa_r+0x47a>
 8007fcc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007fce:	1e6b      	subs	r3, r5, #1
 8007fd0:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fd2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007fd6:	2b30      	cmp	r3, #48	; 0x30
 8007fd8:	d0f8      	beq.n	8007fcc <_dtoa_r+0x61c>
 8007fda:	46bb      	mov	fp, r7
 8007fdc:	e04a      	b.n	8008074 <_dtoa_r+0x6c4>
 8007fde:	4b06      	ldr	r3, [pc, #24]	; (8007ff8 <_dtoa_r+0x648>)
 8007fe0:	f7f8 fb12 	bl	8000608 <__aeabi_dmul>
 8007fe4:	4680      	mov	r8, r0
 8007fe6:	4689      	mov	r9, r1
 8007fe8:	e7bd      	b.n	8007f66 <_dtoa_r+0x5b6>
 8007fea:	bf00      	nop
 8007fec:	08009b30 	.word	0x08009b30
 8007ff0:	08009b08 	.word	0x08009b08
 8007ff4:	3ff00000 	.word	0x3ff00000
 8007ff8:	40240000 	.word	0x40240000
 8007ffc:	401c0000 	.word	0x401c0000
 8008000:	40140000 	.word	0x40140000
 8008004:	3fe00000 	.word	0x3fe00000
 8008008:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800800c:	9d00      	ldr	r5, [sp, #0]
 800800e:	4642      	mov	r2, r8
 8008010:	464b      	mov	r3, r9
 8008012:	4630      	mov	r0, r6
 8008014:	4639      	mov	r1, r7
 8008016:	f7f8 fc21 	bl	800085c <__aeabi_ddiv>
 800801a:	f7f8 fda5 	bl	8000b68 <__aeabi_d2iz>
 800801e:	9001      	str	r0, [sp, #4]
 8008020:	f7f8 fa88 	bl	8000534 <__aeabi_i2d>
 8008024:	4642      	mov	r2, r8
 8008026:	464b      	mov	r3, r9
 8008028:	f7f8 faee 	bl	8000608 <__aeabi_dmul>
 800802c:	4602      	mov	r2, r0
 800802e:	460b      	mov	r3, r1
 8008030:	4630      	mov	r0, r6
 8008032:	4639      	mov	r1, r7
 8008034:	f7f8 f930 	bl	8000298 <__aeabi_dsub>
 8008038:	9e01      	ldr	r6, [sp, #4]
 800803a:	9f04      	ldr	r7, [sp, #16]
 800803c:	3630      	adds	r6, #48	; 0x30
 800803e:	f805 6b01 	strb.w	r6, [r5], #1
 8008042:	9e00      	ldr	r6, [sp, #0]
 8008044:	1bae      	subs	r6, r5, r6
 8008046:	42b7      	cmp	r7, r6
 8008048:	4602      	mov	r2, r0
 800804a:	460b      	mov	r3, r1
 800804c:	d134      	bne.n	80080b8 <_dtoa_r+0x708>
 800804e:	f7f8 f925 	bl	800029c <__adddf3>
 8008052:	4642      	mov	r2, r8
 8008054:	464b      	mov	r3, r9
 8008056:	4606      	mov	r6, r0
 8008058:	460f      	mov	r7, r1
 800805a:	f7f8 fd65 	bl	8000b28 <__aeabi_dcmpgt>
 800805e:	b9c8      	cbnz	r0, 8008094 <_dtoa_r+0x6e4>
 8008060:	4642      	mov	r2, r8
 8008062:	464b      	mov	r3, r9
 8008064:	4630      	mov	r0, r6
 8008066:	4639      	mov	r1, r7
 8008068:	f7f8 fd36 	bl	8000ad8 <__aeabi_dcmpeq>
 800806c:	b110      	cbz	r0, 8008074 <_dtoa_r+0x6c4>
 800806e:	9b01      	ldr	r3, [sp, #4]
 8008070:	07db      	lsls	r3, r3, #31
 8008072:	d40f      	bmi.n	8008094 <_dtoa_r+0x6e4>
 8008074:	4651      	mov	r1, sl
 8008076:	4620      	mov	r0, r4
 8008078:	f000 fbcc 	bl	8008814 <_Bfree>
 800807c:	2300      	movs	r3, #0
 800807e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008080:	702b      	strb	r3, [r5, #0]
 8008082:	f10b 0301 	add.w	r3, fp, #1
 8008086:	6013      	str	r3, [r2, #0]
 8008088:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800808a:	2b00      	cmp	r3, #0
 800808c:	f43f ace2 	beq.w	8007a54 <_dtoa_r+0xa4>
 8008090:	601d      	str	r5, [r3, #0]
 8008092:	e4df      	b.n	8007a54 <_dtoa_r+0xa4>
 8008094:	465f      	mov	r7, fp
 8008096:	462b      	mov	r3, r5
 8008098:	461d      	mov	r5, r3
 800809a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800809e:	2a39      	cmp	r2, #57	; 0x39
 80080a0:	d106      	bne.n	80080b0 <_dtoa_r+0x700>
 80080a2:	9a00      	ldr	r2, [sp, #0]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d1f7      	bne.n	8008098 <_dtoa_r+0x6e8>
 80080a8:	9900      	ldr	r1, [sp, #0]
 80080aa:	2230      	movs	r2, #48	; 0x30
 80080ac:	3701      	adds	r7, #1
 80080ae:	700a      	strb	r2, [r1, #0]
 80080b0:	781a      	ldrb	r2, [r3, #0]
 80080b2:	3201      	adds	r2, #1
 80080b4:	701a      	strb	r2, [r3, #0]
 80080b6:	e790      	b.n	8007fda <_dtoa_r+0x62a>
 80080b8:	4ba3      	ldr	r3, [pc, #652]	; (8008348 <_dtoa_r+0x998>)
 80080ba:	2200      	movs	r2, #0
 80080bc:	f7f8 faa4 	bl	8000608 <__aeabi_dmul>
 80080c0:	2200      	movs	r2, #0
 80080c2:	2300      	movs	r3, #0
 80080c4:	4606      	mov	r6, r0
 80080c6:	460f      	mov	r7, r1
 80080c8:	f7f8 fd06 	bl	8000ad8 <__aeabi_dcmpeq>
 80080cc:	2800      	cmp	r0, #0
 80080ce:	d09e      	beq.n	800800e <_dtoa_r+0x65e>
 80080d0:	e7d0      	b.n	8008074 <_dtoa_r+0x6c4>
 80080d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080d4:	2a00      	cmp	r2, #0
 80080d6:	f000 80ca 	beq.w	800826e <_dtoa_r+0x8be>
 80080da:	9a07      	ldr	r2, [sp, #28]
 80080dc:	2a01      	cmp	r2, #1
 80080de:	f300 80ad 	bgt.w	800823c <_dtoa_r+0x88c>
 80080e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80080e4:	2a00      	cmp	r2, #0
 80080e6:	f000 80a5 	beq.w	8008234 <_dtoa_r+0x884>
 80080ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80080ee:	9e08      	ldr	r6, [sp, #32]
 80080f0:	9d05      	ldr	r5, [sp, #20]
 80080f2:	9a05      	ldr	r2, [sp, #20]
 80080f4:	441a      	add	r2, r3
 80080f6:	9205      	str	r2, [sp, #20]
 80080f8:	9a06      	ldr	r2, [sp, #24]
 80080fa:	2101      	movs	r1, #1
 80080fc:	441a      	add	r2, r3
 80080fe:	4620      	mov	r0, r4
 8008100:	9206      	str	r2, [sp, #24]
 8008102:	f000 fc3d 	bl	8008980 <__i2b>
 8008106:	4607      	mov	r7, r0
 8008108:	b165      	cbz	r5, 8008124 <_dtoa_r+0x774>
 800810a:	9b06      	ldr	r3, [sp, #24]
 800810c:	2b00      	cmp	r3, #0
 800810e:	dd09      	ble.n	8008124 <_dtoa_r+0x774>
 8008110:	42ab      	cmp	r3, r5
 8008112:	9a05      	ldr	r2, [sp, #20]
 8008114:	bfa8      	it	ge
 8008116:	462b      	movge	r3, r5
 8008118:	1ad2      	subs	r2, r2, r3
 800811a:	9205      	str	r2, [sp, #20]
 800811c:	9a06      	ldr	r2, [sp, #24]
 800811e:	1aed      	subs	r5, r5, r3
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	9306      	str	r3, [sp, #24]
 8008124:	9b08      	ldr	r3, [sp, #32]
 8008126:	b1f3      	cbz	r3, 8008166 <_dtoa_r+0x7b6>
 8008128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800812a:	2b00      	cmp	r3, #0
 800812c:	f000 80a3 	beq.w	8008276 <_dtoa_r+0x8c6>
 8008130:	2e00      	cmp	r6, #0
 8008132:	dd10      	ble.n	8008156 <_dtoa_r+0x7a6>
 8008134:	4639      	mov	r1, r7
 8008136:	4632      	mov	r2, r6
 8008138:	4620      	mov	r0, r4
 800813a:	f000 fce1 	bl	8008b00 <__pow5mult>
 800813e:	4652      	mov	r2, sl
 8008140:	4601      	mov	r1, r0
 8008142:	4607      	mov	r7, r0
 8008144:	4620      	mov	r0, r4
 8008146:	f000 fc31 	bl	80089ac <__multiply>
 800814a:	4651      	mov	r1, sl
 800814c:	4680      	mov	r8, r0
 800814e:	4620      	mov	r0, r4
 8008150:	f000 fb60 	bl	8008814 <_Bfree>
 8008154:	46c2      	mov	sl, r8
 8008156:	9b08      	ldr	r3, [sp, #32]
 8008158:	1b9a      	subs	r2, r3, r6
 800815a:	d004      	beq.n	8008166 <_dtoa_r+0x7b6>
 800815c:	4651      	mov	r1, sl
 800815e:	4620      	mov	r0, r4
 8008160:	f000 fcce 	bl	8008b00 <__pow5mult>
 8008164:	4682      	mov	sl, r0
 8008166:	2101      	movs	r1, #1
 8008168:	4620      	mov	r0, r4
 800816a:	f000 fc09 	bl	8008980 <__i2b>
 800816e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008170:	2b00      	cmp	r3, #0
 8008172:	4606      	mov	r6, r0
 8008174:	f340 8081 	ble.w	800827a <_dtoa_r+0x8ca>
 8008178:	461a      	mov	r2, r3
 800817a:	4601      	mov	r1, r0
 800817c:	4620      	mov	r0, r4
 800817e:	f000 fcbf 	bl	8008b00 <__pow5mult>
 8008182:	9b07      	ldr	r3, [sp, #28]
 8008184:	2b01      	cmp	r3, #1
 8008186:	4606      	mov	r6, r0
 8008188:	dd7a      	ble.n	8008280 <_dtoa_r+0x8d0>
 800818a:	f04f 0800 	mov.w	r8, #0
 800818e:	6933      	ldr	r3, [r6, #16]
 8008190:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008194:	6918      	ldr	r0, [r3, #16]
 8008196:	f000 fba5 	bl	80088e4 <__hi0bits>
 800819a:	f1c0 0020 	rsb	r0, r0, #32
 800819e:	9b06      	ldr	r3, [sp, #24]
 80081a0:	4418      	add	r0, r3
 80081a2:	f010 001f 	ands.w	r0, r0, #31
 80081a6:	f000 8094 	beq.w	80082d2 <_dtoa_r+0x922>
 80081aa:	f1c0 0320 	rsb	r3, r0, #32
 80081ae:	2b04      	cmp	r3, #4
 80081b0:	f340 8085 	ble.w	80082be <_dtoa_r+0x90e>
 80081b4:	9b05      	ldr	r3, [sp, #20]
 80081b6:	f1c0 001c 	rsb	r0, r0, #28
 80081ba:	4403      	add	r3, r0
 80081bc:	9305      	str	r3, [sp, #20]
 80081be:	9b06      	ldr	r3, [sp, #24]
 80081c0:	4403      	add	r3, r0
 80081c2:	4405      	add	r5, r0
 80081c4:	9306      	str	r3, [sp, #24]
 80081c6:	9b05      	ldr	r3, [sp, #20]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	dd05      	ble.n	80081d8 <_dtoa_r+0x828>
 80081cc:	4651      	mov	r1, sl
 80081ce:	461a      	mov	r2, r3
 80081d0:	4620      	mov	r0, r4
 80081d2:	f000 fcef 	bl	8008bb4 <__lshift>
 80081d6:	4682      	mov	sl, r0
 80081d8:	9b06      	ldr	r3, [sp, #24]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	dd05      	ble.n	80081ea <_dtoa_r+0x83a>
 80081de:	4631      	mov	r1, r6
 80081e0:	461a      	mov	r2, r3
 80081e2:	4620      	mov	r0, r4
 80081e4:	f000 fce6 	bl	8008bb4 <__lshift>
 80081e8:	4606      	mov	r6, r0
 80081ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d072      	beq.n	80082d6 <_dtoa_r+0x926>
 80081f0:	4631      	mov	r1, r6
 80081f2:	4650      	mov	r0, sl
 80081f4:	f000 fd4a 	bl	8008c8c <__mcmp>
 80081f8:	2800      	cmp	r0, #0
 80081fa:	da6c      	bge.n	80082d6 <_dtoa_r+0x926>
 80081fc:	2300      	movs	r3, #0
 80081fe:	4651      	mov	r1, sl
 8008200:	220a      	movs	r2, #10
 8008202:	4620      	mov	r0, r4
 8008204:	f000 fb28 	bl	8008858 <__multadd>
 8008208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800820a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800820e:	4682      	mov	sl, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	f000 81b0 	beq.w	8008576 <_dtoa_r+0xbc6>
 8008216:	2300      	movs	r3, #0
 8008218:	4639      	mov	r1, r7
 800821a:	220a      	movs	r2, #10
 800821c:	4620      	mov	r0, r4
 800821e:	f000 fb1b 	bl	8008858 <__multadd>
 8008222:	9b01      	ldr	r3, [sp, #4]
 8008224:	2b00      	cmp	r3, #0
 8008226:	4607      	mov	r7, r0
 8008228:	f300 8096 	bgt.w	8008358 <_dtoa_r+0x9a8>
 800822c:	9b07      	ldr	r3, [sp, #28]
 800822e:	2b02      	cmp	r3, #2
 8008230:	dc59      	bgt.n	80082e6 <_dtoa_r+0x936>
 8008232:	e091      	b.n	8008358 <_dtoa_r+0x9a8>
 8008234:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008236:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800823a:	e758      	b.n	80080ee <_dtoa_r+0x73e>
 800823c:	9b04      	ldr	r3, [sp, #16]
 800823e:	1e5e      	subs	r6, r3, #1
 8008240:	9b08      	ldr	r3, [sp, #32]
 8008242:	42b3      	cmp	r3, r6
 8008244:	bfbf      	itttt	lt
 8008246:	9b08      	ldrlt	r3, [sp, #32]
 8008248:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800824a:	9608      	strlt	r6, [sp, #32]
 800824c:	1af3      	sublt	r3, r6, r3
 800824e:	bfb4      	ite	lt
 8008250:	18d2      	addlt	r2, r2, r3
 8008252:	1b9e      	subge	r6, r3, r6
 8008254:	9b04      	ldr	r3, [sp, #16]
 8008256:	bfbc      	itt	lt
 8008258:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800825a:	2600      	movlt	r6, #0
 800825c:	2b00      	cmp	r3, #0
 800825e:	bfb7      	itett	lt
 8008260:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008264:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008268:	1a9d      	sublt	r5, r3, r2
 800826a:	2300      	movlt	r3, #0
 800826c:	e741      	b.n	80080f2 <_dtoa_r+0x742>
 800826e:	9e08      	ldr	r6, [sp, #32]
 8008270:	9d05      	ldr	r5, [sp, #20]
 8008272:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008274:	e748      	b.n	8008108 <_dtoa_r+0x758>
 8008276:	9a08      	ldr	r2, [sp, #32]
 8008278:	e770      	b.n	800815c <_dtoa_r+0x7ac>
 800827a:	9b07      	ldr	r3, [sp, #28]
 800827c:	2b01      	cmp	r3, #1
 800827e:	dc19      	bgt.n	80082b4 <_dtoa_r+0x904>
 8008280:	9b02      	ldr	r3, [sp, #8]
 8008282:	b9bb      	cbnz	r3, 80082b4 <_dtoa_r+0x904>
 8008284:	9b03      	ldr	r3, [sp, #12]
 8008286:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800828a:	b99b      	cbnz	r3, 80082b4 <_dtoa_r+0x904>
 800828c:	9b03      	ldr	r3, [sp, #12]
 800828e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008292:	0d1b      	lsrs	r3, r3, #20
 8008294:	051b      	lsls	r3, r3, #20
 8008296:	b183      	cbz	r3, 80082ba <_dtoa_r+0x90a>
 8008298:	9b05      	ldr	r3, [sp, #20]
 800829a:	3301      	adds	r3, #1
 800829c:	9305      	str	r3, [sp, #20]
 800829e:	9b06      	ldr	r3, [sp, #24]
 80082a0:	3301      	adds	r3, #1
 80082a2:	9306      	str	r3, [sp, #24]
 80082a4:	f04f 0801 	mov.w	r8, #1
 80082a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	f47f af6f 	bne.w	800818e <_dtoa_r+0x7de>
 80082b0:	2001      	movs	r0, #1
 80082b2:	e774      	b.n	800819e <_dtoa_r+0x7ee>
 80082b4:	f04f 0800 	mov.w	r8, #0
 80082b8:	e7f6      	b.n	80082a8 <_dtoa_r+0x8f8>
 80082ba:	4698      	mov	r8, r3
 80082bc:	e7f4      	b.n	80082a8 <_dtoa_r+0x8f8>
 80082be:	d082      	beq.n	80081c6 <_dtoa_r+0x816>
 80082c0:	9a05      	ldr	r2, [sp, #20]
 80082c2:	331c      	adds	r3, #28
 80082c4:	441a      	add	r2, r3
 80082c6:	9205      	str	r2, [sp, #20]
 80082c8:	9a06      	ldr	r2, [sp, #24]
 80082ca:	441a      	add	r2, r3
 80082cc:	441d      	add	r5, r3
 80082ce:	9206      	str	r2, [sp, #24]
 80082d0:	e779      	b.n	80081c6 <_dtoa_r+0x816>
 80082d2:	4603      	mov	r3, r0
 80082d4:	e7f4      	b.n	80082c0 <_dtoa_r+0x910>
 80082d6:	9b04      	ldr	r3, [sp, #16]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	dc37      	bgt.n	800834c <_dtoa_r+0x99c>
 80082dc:	9b07      	ldr	r3, [sp, #28]
 80082de:	2b02      	cmp	r3, #2
 80082e0:	dd34      	ble.n	800834c <_dtoa_r+0x99c>
 80082e2:	9b04      	ldr	r3, [sp, #16]
 80082e4:	9301      	str	r3, [sp, #4]
 80082e6:	9b01      	ldr	r3, [sp, #4]
 80082e8:	b963      	cbnz	r3, 8008304 <_dtoa_r+0x954>
 80082ea:	4631      	mov	r1, r6
 80082ec:	2205      	movs	r2, #5
 80082ee:	4620      	mov	r0, r4
 80082f0:	f000 fab2 	bl	8008858 <__multadd>
 80082f4:	4601      	mov	r1, r0
 80082f6:	4606      	mov	r6, r0
 80082f8:	4650      	mov	r0, sl
 80082fa:	f000 fcc7 	bl	8008c8c <__mcmp>
 80082fe:	2800      	cmp	r0, #0
 8008300:	f73f adbb 	bgt.w	8007e7a <_dtoa_r+0x4ca>
 8008304:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008306:	9d00      	ldr	r5, [sp, #0]
 8008308:	ea6f 0b03 	mvn.w	fp, r3
 800830c:	f04f 0800 	mov.w	r8, #0
 8008310:	4631      	mov	r1, r6
 8008312:	4620      	mov	r0, r4
 8008314:	f000 fa7e 	bl	8008814 <_Bfree>
 8008318:	2f00      	cmp	r7, #0
 800831a:	f43f aeab 	beq.w	8008074 <_dtoa_r+0x6c4>
 800831e:	f1b8 0f00 	cmp.w	r8, #0
 8008322:	d005      	beq.n	8008330 <_dtoa_r+0x980>
 8008324:	45b8      	cmp	r8, r7
 8008326:	d003      	beq.n	8008330 <_dtoa_r+0x980>
 8008328:	4641      	mov	r1, r8
 800832a:	4620      	mov	r0, r4
 800832c:	f000 fa72 	bl	8008814 <_Bfree>
 8008330:	4639      	mov	r1, r7
 8008332:	4620      	mov	r0, r4
 8008334:	f000 fa6e 	bl	8008814 <_Bfree>
 8008338:	e69c      	b.n	8008074 <_dtoa_r+0x6c4>
 800833a:	2600      	movs	r6, #0
 800833c:	4637      	mov	r7, r6
 800833e:	e7e1      	b.n	8008304 <_dtoa_r+0x954>
 8008340:	46bb      	mov	fp, r7
 8008342:	4637      	mov	r7, r6
 8008344:	e599      	b.n	8007e7a <_dtoa_r+0x4ca>
 8008346:	bf00      	nop
 8008348:	40240000 	.word	0x40240000
 800834c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800834e:	2b00      	cmp	r3, #0
 8008350:	f000 80c8 	beq.w	80084e4 <_dtoa_r+0xb34>
 8008354:	9b04      	ldr	r3, [sp, #16]
 8008356:	9301      	str	r3, [sp, #4]
 8008358:	2d00      	cmp	r5, #0
 800835a:	dd05      	ble.n	8008368 <_dtoa_r+0x9b8>
 800835c:	4639      	mov	r1, r7
 800835e:	462a      	mov	r2, r5
 8008360:	4620      	mov	r0, r4
 8008362:	f000 fc27 	bl	8008bb4 <__lshift>
 8008366:	4607      	mov	r7, r0
 8008368:	f1b8 0f00 	cmp.w	r8, #0
 800836c:	d05b      	beq.n	8008426 <_dtoa_r+0xa76>
 800836e:	6879      	ldr	r1, [r7, #4]
 8008370:	4620      	mov	r0, r4
 8008372:	f000 fa0f 	bl	8008794 <_Balloc>
 8008376:	4605      	mov	r5, r0
 8008378:	b928      	cbnz	r0, 8008386 <_dtoa_r+0x9d6>
 800837a:	4b83      	ldr	r3, [pc, #524]	; (8008588 <_dtoa_r+0xbd8>)
 800837c:	4602      	mov	r2, r0
 800837e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008382:	f7ff bb2e 	b.w	80079e2 <_dtoa_r+0x32>
 8008386:	693a      	ldr	r2, [r7, #16]
 8008388:	3202      	adds	r2, #2
 800838a:	0092      	lsls	r2, r2, #2
 800838c:	f107 010c 	add.w	r1, r7, #12
 8008390:	300c      	adds	r0, #12
 8008392:	f000 ffab 	bl	80092ec <memcpy>
 8008396:	2201      	movs	r2, #1
 8008398:	4629      	mov	r1, r5
 800839a:	4620      	mov	r0, r4
 800839c:	f000 fc0a 	bl	8008bb4 <__lshift>
 80083a0:	9b00      	ldr	r3, [sp, #0]
 80083a2:	3301      	adds	r3, #1
 80083a4:	9304      	str	r3, [sp, #16]
 80083a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083aa:	4413      	add	r3, r2
 80083ac:	9308      	str	r3, [sp, #32]
 80083ae:	9b02      	ldr	r3, [sp, #8]
 80083b0:	f003 0301 	and.w	r3, r3, #1
 80083b4:	46b8      	mov	r8, r7
 80083b6:	9306      	str	r3, [sp, #24]
 80083b8:	4607      	mov	r7, r0
 80083ba:	9b04      	ldr	r3, [sp, #16]
 80083bc:	4631      	mov	r1, r6
 80083be:	3b01      	subs	r3, #1
 80083c0:	4650      	mov	r0, sl
 80083c2:	9301      	str	r3, [sp, #4]
 80083c4:	f7ff fa69 	bl	800789a <quorem>
 80083c8:	4641      	mov	r1, r8
 80083ca:	9002      	str	r0, [sp, #8]
 80083cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80083d0:	4650      	mov	r0, sl
 80083d2:	f000 fc5b 	bl	8008c8c <__mcmp>
 80083d6:	463a      	mov	r2, r7
 80083d8:	9005      	str	r0, [sp, #20]
 80083da:	4631      	mov	r1, r6
 80083dc:	4620      	mov	r0, r4
 80083de:	f000 fc71 	bl	8008cc4 <__mdiff>
 80083e2:	68c2      	ldr	r2, [r0, #12]
 80083e4:	4605      	mov	r5, r0
 80083e6:	bb02      	cbnz	r2, 800842a <_dtoa_r+0xa7a>
 80083e8:	4601      	mov	r1, r0
 80083ea:	4650      	mov	r0, sl
 80083ec:	f000 fc4e 	bl	8008c8c <__mcmp>
 80083f0:	4602      	mov	r2, r0
 80083f2:	4629      	mov	r1, r5
 80083f4:	4620      	mov	r0, r4
 80083f6:	9209      	str	r2, [sp, #36]	; 0x24
 80083f8:	f000 fa0c 	bl	8008814 <_Bfree>
 80083fc:	9b07      	ldr	r3, [sp, #28]
 80083fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008400:	9d04      	ldr	r5, [sp, #16]
 8008402:	ea43 0102 	orr.w	r1, r3, r2
 8008406:	9b06      	ldr	r3, [sp, #24]
 8008408:	4319      	orrs	r1, r3
 800840a:	d110      	bne.n	800842e <_dtoa_r+0xa7e>
 800840c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008410:	d029      	beq.n	8008466 <_dtoa_r+0xab6>
 8008412:	9b05      	ldr	r3, [sp, #20]
 8008414:	2b00      	cmp	r3, #0
 8008416:	dd02      	ble.n	800841e <_dtoa_r+0xa6e>
 8008418:	9b02      	ldr	r3, [sp, #8]
 800841a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800841e:	9b01      	ldr	r3, [sp, #4]
 8008420:	f883 9000 	strb.w	r9, [r3]
 8008424:	e774      	b.n	8008310 <_dtoa_r+0x960>
 8008426:	4638      	mov	r0, r7
 8008428:	e7ba      	b.n	80083a0 <_dtoa_r+0x9f0>
 800842a:	2201      	movs	r2, #1
 800842c:	e7e1      	b.n	80083f2 <_dtoa_r+0xa42>
 800842e:	9b05      	ldr	r3, [sp, #20]
 8008430:	2b00      	cmp	r3, #0
 8008432:	db04      	blt.n	800843e <_dtoa_r+0xa8e>
 8008434:	9907      	ldr	r1, [sp, #28]
 8008436:	430b      	orrs	r3, r1
 8008438:	9906      	ldr	r1, [sp, #24]
 800843a:	430b      	orrs	r3, r1
 800843c:	d120      	bne.n	8008480 <_dtoa_r+0xad0>
 800843e:	2a00      	cmp	r2, #0
 8008440:	dded      	ble.n	800841e <_dtoa_r+0xa6e>
 8008442:	4651      	mov	r1, sl
 8008444:	2201      	movs	r2, #1
 8008446:	4620      	mov	r0, r4
 8008448:	f000 fbb4 	bl	8008bb4 <__lshift>
 800844c:	4631      	mov	r1, r6
 800844e:	4682      	mov	sl, r0
 8008450:	f000 fc1c 	bl	8008c8c <__mcmp>
 8008454:	2800      	cmp	r0, #0
 8008456:	dc03      	bgt.n	8008460 <_dtoa_r+0xab0>
 8008458:	d1e1      	bne.n	800841e <_dtoa_r+0xa6e>
 800845a:	f019 0f01 	tst.w	r9, #1
 800845e:	d0de      	beq.n	800841e <_dtoa_r+0xa6e>
 8008460:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008464:	d1d8      	bne.n	8008418 <_dtoa_r+0xa68>
 8008466:	9a01      	ldr	r2, [sp, #4]
 8008468:	2339      	movs	r3, #57	; 0x39
 800846a:	7013      	strb	r3, [r2, #0]
 800846c:	462b      	mov	r3, r5
 800846e:	461d      	mov	r5, r3
 8008470:	3b01      	subs	r3, #1
 8008472:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008476:	2a39      	cmp	r2, #57	; 0x39
 8008478:	d06c      	beq.n	8008554 <_dtoa_r+0xba4>
 800847a:	3201      	adds	r2, #1
 800847c:	701a      	strb	r2, [r3, #0]
 800847e:	e747      	b.n	8008310 <_dtoa_r+0x960>
 8008480:	2a00      	cmp	r2, #0
 8008482:	dd07      	ble.n	8008494 <_dtoa_r+0xae4>
 8008484:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008488:	d0ed      	beq.n	8008466 <_dtoa_r+0xab6>
 800848a:	9a01      	ldr	r2, [sp, #4]
 800848c:	f109 0301 	add.w	r3, r9, #1
 8008490:	7013      	strb	r3, [r2, #0]
 8008492:	e73d      	b.n	8008310 <_dtoa_r+0x960>
 8008494:	9b04      	ldr	r3, [sp, #16]
 8008496:	9a08      	ldr	r2, [sp, #32]
 8008498:	f803 9c01 	strb.w	r9, [r3, #-1]
 800849c:	4293      	cmp	r3, r2
 800849e:	d043      	beq.n	8008528 <_dtoa_r+0xb78>
 80084a0:	4651      	mov	r1, sl
 80084a2:	2300      	movs	r3, #0
 80084a4:	220a      	movs	r2, #10
 80084a6:	4620      	mov	r0, r4
 80084a8:	f000 f9d6 	bl	8008858 <__multadd>
 80084ac:	45b8      	cmp	r8, r7
 80084ae:	4682      	mov	sl, r0
 80084b0:	f04f 0300 	mov.w	r3, #0
 80084b4:	f04f 020a 	mov.w	r2, #10
 80084b8:	4641      	mov	r1, r8
 80084ba:	4620      	mov	r0, r4
 80084bc:	d107      	bne.n	80084ce <_dtoa_r+0xb1e>
 80084be:	f000 f9cb 	bl	8008858 <__multadd>
 80084c2:	4680      	mov	r8, r0
 80084c4:	4607      	mov	r7, r0
 80084c6:	9b04      	ldr	r3, [sp, #16]
 80084c8:	3301      	adds	r3, #1
 80084ca:	9304      	str	r3, [sp, #16]
 80084cc:	e775      	b.n	80083ba <_dtoa_r+0xa0a>
 80084ce:	f000 f9c3 	bl	8008858 <__multadd>
 80084d2:	4639      	mov	r1, r7
 80084d4:	4680      	mov	r8, r0
 80084d6:	2300      	movs	r3, #0
 80084d8:	220a      	movs	r2, #10
 80084da:	4620      	mov	r0, r4
 80084dc:	f000 f9bc 	bl	8008858 <__multadd>
 80084e0:	4607      	mov	r7, r0
 80084e2:	e7f0      	b.n	80084c6 <_dtoa_r+0xb16>
 80084e4:	9b04      	ldr	r3, [sp, #16]
 80084e6:	9301      	str	r3, [sp, #4]
 80084e8:	9d00      	ldr	r5, [sp, #0]
 80084ea:	4631      	mov	r1, r6
 80084ec:	4650      	mov	r0, sl
 80084ee:	f7ff f9d4 	bl	800789a <quorem>
 80084f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80084f6:	9b00      	ldr	r3, [sp, #0]
 80084f8:	f805 9b01 	strb.w	r9, [r5], #1
 80084fc:	1aea      	subs	r2, r5, r3
 80084fe:	9b01      	ldr	r3, [sp, #4]
 8008500:	4293      	cmp	r3, r2
 8008502:	dd07      	ble.n	8008514 <_dtoa_r+0xb64>
 8008504:	4651      	mov	r1, sl
 8008506:	2300      	movs	r3, #0
 8008508:	220a      	movs	r2, #10
 800850a:	4620      	mov	r0, r4
 800850c:	f000 f9a4 	bl	8008858 <__multadd>
 8008510:	4682      	mov	sl, r0
 8008512:	e7ea      	b.n	80084ea <_dtoa_r+0xb3a>
 8008514:	9b01      	ldr	r3, [sp, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	bfc8      	it	gt
 800851a:	461d      	movgt	r5, r3
 800851c:	9b00      	ldr	r3, [sp, #0]
 800851e:	bfd8      	it	le
 8008520:	2501      	movle	r5, #1
 8008522:	441d      	add	r5, r3
 8008524:	f04f 0800 	mov.w	r8, #0
 8008528:	4651      	mov	r1, sl
 800852a:	2201      	movs	r2, #1
 800852c:	4620      	mov	r0, r4
 800852e:	f000 fb41 	bl	8008bb4 <__lshift>
 8008532:	4631      	mov	r1, r6
 8008534:	4682      	mov	sl, r0
 8008536:	f000 fba9 	bl	8008c8c <__mcmp>
 800853a:	2800      	cmp	r0, #0
 800853c:	dc96      	bgt.n	800846c <_dtoa_r+0xabc>
 800853e:	d102      	bne.n	8008546 <_dtoa_r+0xb96>
 8008540:	f019 0f01 	tst.w	r9, #1
 8008544:	d192      	bne.n	800846c <_dtoa_r+0xabc>
 8008546:	462b      	mov	r3, r5
 8008548:	461d      	mov	r5, r3
 800854a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800854e:	2a30      	cmp	r2, #48	; 0x30
 8008550:	d0fa      	beq.n	8008548 <_dtoa_r+0xb98>
 8008552:	e6dd      	b.n	8008310 <_dtoa_r+0x960>
 8008554:	9a00      	ldr	r2, [sp, #0]
 8008556:	429a      	cmp	r2, r3
 8008558:	d189      	bne.n	800846e <_dtoa_r+0xabe>
 800855a:	f10b 0b01 	add.w	fp, fp, #1
 800855e:	2331      	movs	r3, #49	; 0x31
 8008560:	e796      	b.n	8008490 <_dtoa_r+0xae0>
 8008562:	4b0a      	ldr	r3, [pc, #40]	; (800858c <_dtoa_r+0xbdc>)
 8008564:	f7ff ba99 	b.w	8007a9a <_dtoa_r+0xea>
 8008568:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800856a:	2b00      	cmp	r3, #0
 800856c:	f47f aa6d 	bne.w	8007a4a <_dtoa_r+0x9a>
 8008570:	4b07      	ldr	r3, [pc, #28]	; (8008590 <_dtoa_r+0xbe0>)
 8008572:	f7ff ba92 	b.w	8007a9a <_dtoa_r+0xea>
 8008576:	9b01      	ldr	r3, [sp, #4]
 8008578:	2b00      	cmp	r3, #0
 800857a:	dcb5      	bgt.n	80084e8 <_dtoa_r+0xb38>
 800857c:	9b07      	ldr	r3, [sp, #28]
 800857e:	2b02      	cmp	r3, #2
 8008580:	f73f aeb1 	bgt.w	80082e6 <_dtoa_r+0x936>
 8008584:	e7b0      	b.n	80084e8 <_dtoa_r+0xb38>
 8008586:	bf00      	nop
 8008588:	08009a9c 	.word	0x08009a9c
 800858c:	080099fc 	.word	0x080099fc
 8008590:	08009a20 	.word	0x08009a20

08008594 <_free_r>:
 8008594:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008596:	2900      	cmp	r1, #0
 8008598:	d044      	beq.n	8008624 <_free_r+0x90>
 800859a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800859e:	9001      	str	r0, [sp, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	f1a1 0404 	sub.w	r4, r1, #4
 80085a6:	bfb8      	it	lt
 80085a8:	18e4      	addlt	r4, r4, r3
 80085aa:	f000 f8e7 	bl	800877c <__malloc_lock>
 80085ae:	4a1e      	ldr	r2, [pc, #120]	; (8008628 <_free_r+0x94>)
 80085b0:	9801      	ldr	r0, [sp, #4]
 80085b2:	6813      	ldr	r3, [r2, #0]
 80085b4:	b933      	cbnz	r3, 80085c4 <_free_r+0x30>
 80085b6:	6063      	str	r3, [r4, #4]
 80085b8:	6014      	str	r4, [r2, #0]
 80085ba:	b003      	add	sp, #12
 80085bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80085c0:	f000 b8e2 	b.w	8008788 <__malloc_unlock>
 80085c4:	42a3      	cmp	r3, r4
 80085c6:	d908      	bls.n	80085da <_free_r+0x46>
 80085c8:	6825      	ldr	r5, [r4, #0]
 80085ca:	1961      	adds	r1, r4, r5
 80085cc:	428b      	cmp	r3, r1
 80085ce:	bf01      	itttt	eq
 80085d0:	6819      	ldreq	r1, [r3, #0]
 80085d2:	685b      	ldreq	r3, [r3, #4]
 80085d4:	1949      	addeq	r1, r1, r5
 80085d6:	6021      	streq	r1, [r4, #0]
 80085d8:	e7ed      	b.n	80085b6 <_free_r+0x22>
 80085da:	461a      	mov	r2, r3
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	b10b      	cbz	r3, 80085e4 <_free_r+0x50>
 80085e0:	42a3      	cmp	r3, r4
 80085e2:	d9fa      	bls.n	80085da <_free_r+0x46>
 80085e4:	6811      	ldr	r1, [r2, #0]
 80085e6:	1855      	adds	r5, r2, r1
 80085e8:	42a5      	cmp	r5, r4
 80085ea:	d10b      	bne.n	8008604 <_free_r+0x70>
 80085ec:	6824      	ldr	r4, [r4, #0]
 80085ee:	4421      	add	r1, r4
 80085f0:	1854      	adds	r4, r2, r1
 80085f2:	42a3      	cmp	r3, r4
 80085f4:	6011      	str	r1, [r2, #0]
 80085f6:	d1e0      	bne.n	80085ba <_free_r+0x26>
 80085f8:	681c      	ldr	r4, [r3, #0]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	6053      	str	r3, [r2, #4]
 80085fe:	440c      	add	r4, r1
 8008600:	6014      	str	r4, [r2, #0]
 8008602:	e7da      	b.n	80085ba <_free_r+0x26>
 8008604:	d902      	bls.n	800860c <_free_r+0x78>
 8008606:	230c      	movs	r3, #12
 8008608:	6003      	str	r3, [r0, #0]
 800860a:	e7d6      	b.n	80085ba <_free_r+0x26>
 800860c:	6825      	ldr	r5, [r4, #0]
 800860e:	1961      	adds	r1, r4, r5
 8008610:	428b      	cmp	r3, r1
 8008612:	bf04      	itt	eq
 8008614:	6819      	ldreq	r1, [r3, #0]
 8008616:	685b      	ldreq	r3, [r3, #4]
 8008618:	6063      	str	r3, [r4, #4]
 800861a:	bf04      	itt	eq
 800861c:	1949      	addeq	r1, r1, r5
 800861e:	6021      	streq	r1, [r4, #0]
 8008620:	6054      	str	r4, [r2, #4]
 8008622:	e7ca      	b.n	80085ba <_free_r+0x26>
 8008624:	b003      	add	sp, #12
 8008626:	bd30      	pop	{r4, r5, pc}
 8008628:	20000604 	.word	0x20000604

0800862c <malloc>:
 800862c:	4b02      	ldr	r3, [pc, #8]	; (8008638 <malloc+0xc>)
 800862e:	4601      	mov	r1, r0
 8008630:	6818      	ldr	r0, [r3, #0]
 8008632:	f000 b823 	b.w	800867c <_malloc_r>
 8008636:	bf00      	nop
 8008638:	20000068 	.word	0x20000068

0800863c <sbrk_aligned>:
 800863c:	b570      	push	{r4, r5, r6, lr}
 800863e:	4e0e      	ldr	r6, [pc, #56]	; (8008678 <sbrk_aligned+0x3c>)
 8008640:	460c      	mov	r4, r1
 8008642:	6831      	ldr	r1, [r6, #0]
 8008644:	4605      	mov	r5, r0
 8008646:	b911      	cbnz	r1, 800864e <sbrk_aligned+0x12>
 8008648:	f000 fe40 	bl	80092cc <_sbrk_r>
 800864c:	6030      	str	r0, [r6, #0]
 800864e:	4621      	mov	r1, r4
 8008650:	4628      	mov	r0, r5
 8008652:	f000 fe3b 	bl	80092cc <_sbrk_r>
 8008656:	1c43      	adds	r3, r0, #1
 8008658:	d00a      	beq.n	8008670 <sbrk_aligned+0x34>
 800865a:	1cc4      	adds	r4, r0, #3
 800865c:	f024 0403 	bic.w	r4, r4, #3
 8008660:	42a0      	cmp	r0, r4
 8008662:	d007      	beq.n	8008674 <sbrk_aligned+0x38>
 8008664:	1a21      	subs	r1, r4, r0
 8008666:	4628      	mov	r0, r5
 8008668:	f000 fe30 	bl	80092cc <_sbrk_r>
 800866c:	3001      	adds	r0, #1
 800866e:	d101      	bne.n	8008674 <sbrk_aligned+0x38>
 8008670:	f04f 34ff 	mov.w	r4, #4294967295
 8008674:	4620      	mov	r0, r4
 8008676:	bd70      	pop	{r4, r5, r6, pc}
 8008678:	20000608 	.word	0x20000608

0800867c <_malloc_r>:
 800867c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008680:	1ccd      	adds	r5, r1, #3
 8008682:	f025 0503 	bic.w	r5, r5, #3
 8008686:	3508      	adds	r5, #8
 8008688:	2d0c      	cmp	r5, #12
 800868a:	bf38      	it	cc
 800868c:	250c      	movcc	r5, #12
 800868e:	2d00      	cmp	r5, #0
 8008690:	4607      	mov	r7, r0
 8008692:	db01      	blt.n	8008698 <_malloc_r+0x1c>
 8008694:	42a9      	cmp	r1, r5
 8008696:	d905      	bls.n	80086a4 <_malloc_r+0x28>
 8008698:	230c      	movs	r3, #12
 800869a:	603b      	str	r3, [r7, #0]
 800869c:	2600      	movs	r6, #0
 800869e:	4630      	mov	r0, r6
 80086a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008778 <_malloc_r+0xfc>
 80086a8:	f000 f868 	bl	800877c <__malloc_lock>
 80086ac:	f8d8 3000 	ldr.w	r3, [r8]
 80086b0:	461c      	mov	r4, r3
 80086b2:	bb5c      	cbnz	r4, 800870c <_malloc_r+0x90>
 80086b4:	4629      	mov	r1, r5
 80086b6:	4638      	mov	r0, r7
 80086b8:	f7ff ffc0 	bl	800863c <sbrk_aligned>
 80086bc:	1c43      	adds	r3, r0, #1
 80086be:	4604      	mov	r4, r0
 80086c0:	d155      	bne.n	800876e <_malloc_r+0xf2>
 80086c2:	f8d8 4000 	ldr.w	r4, [r8]
 80086c6:	4626      	mov	r6, r4
 80086c8:	2e00      	cmp	r6, #0
 80086ca:	d145      	bne.n	8008758 <_malloc_r+0xdc>
 80086cc:	2c00      	cmp	r4, #0
 80086ce:	d048      	beq.n	8008762 <_malloc_r+0xe6>
 80086d0:	6823      	ldr	r3, [r4, #0]
 80086d2:	4631      	mov	r1, r6
 80086d4:	4638      	mov	r0, r7
 80086d6:	eb04 0903 	add.w	r9, r4, r3
 80086da:	f000 fdf7 	bl	80092cc <_sbrk_r>
 80086de:	4581      	cmp	r9, r0
 80086e0:	d13f      	bne.n	8008762 <_malloc_r+0xe6>
 80086e2:	6821      	ldr	r1, [r4, #0]
 80086e4:	1a6d      	subs	r5, r5, r1
 80086e6:	4629      	mov	r1, r5
 80086e8:	4638      	mov	r0, r7
 80086ea:	f7ff ffa7 	bl	800863c <sbrk_aligned>
 80086ee:	3001      	adds	r0, #1
 80086f0:	d037      	beq.n	8008762 <_malloc_r+0xe6>
 80086f2:	6823      	ldr	r3, [r4, #0]
 80086f4:	442b      	add	r3, r5
 80086f6:	6023      	str	r3, [r4, #0]
 80086f8:	f8d8 3000 	ldr.w	r3, [r8]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d038      	beq.n	8008772 <_malloc_r+0xf6>
 8008700:	685a      	ldr	r2, [r3, #4]
 8008702:	42a2      	cmp	r2, r4
 8008704:	d12b      	bne.n	800875e <_malloc_r+0xe2>
 8008706:	2200      	movs	r2, #0
 8008708:	605a      	str	r2, [r3, #4]
 800870a:	e00f      	b.n	800872c <_malloc_r+0xb0>
 800870c:	6822      	ldr	r2, [r4, #0]
 800870e:	1b52      	subs	r2, r2, r5
 8008710:	d41f      	bmi.n	8008752 <_malloc_r+0xd6>
 8008712:	2a0b      	cmp	r2, #11
 8008714:	d917      	bls.n	8008746 <_malloc_r+0xca>
 8008716:	1961      	adds	r1, r4, r5
 8008718:	42a3      	cmp	r3, r4
 800871a:	6025      	str	r5, [r4, #0]
 800871c:	bf18      	it	ne
 800871e:	6059      	strne	r1, [r3, #4]
 8008720:	6863      	ldr	r3, [r4, #4]
 8008722:	bf08      	it	eq
 8008724:	f8c8 1000 	streq.w	r1, [r8]
 8008728:	5162      	str	r2, [r4, r5]
 800872a:	604b      	str	r3, [r1, #4]
 800872c:	4638      	mov	r0, r7
 800872e:	f104 060b 	add.w	r6, r4, #11
 8008732:	f000 f829 	bl	8008788 <__malloc_unlock>
 8008736:	f026 0607 	bic.w	r6, r6, #7
 800873a:	1d23      	adds	r3, r4, #4
 800873c:	1af2      	subs	r2, r6, r3
 800873e:	d0ae      	beq.n	800869e <_malloc_r+0x22>
 8008740:	1b9b      	subs	r3, r3, r6
 8008742:	50a3      	str	r3, [r4, r2]
 8008744:	e7ab      	b.n	800869e <_malloc_r+0x22>
 8008746:	42a3      	cmp	r3, r4
 8008748:	6862      	ldr	r2, [r4, #4]
 800874a:	d1dd      	bne.n	8008708 <_malloc_r+0x8c>
 800874c:	f8c8 2000 	str.w	r2, [r8]
 8008750:	e7ec      	b.n	800872c <_malloc_r+0xb0>
 8008752:	4623      	mov	r3, r4
 8008754:	6864      	ldr	r4, [r4, #4]
 8008756:	e7ac      	b.n	80086b2 <_malloc_r+0x36>
 8008758:	4634      	mov	r4, r6
 800875a:	6876      	ldr	r6, [r6, #4]
 800875c:	e7b4      	b.n	80086c8 <_malloc_r+0x4c>
 800875e:	4613      	mov	r3, r2
 8008760:	e7cc      	b.n	80086fc <_malloc_r+0x80>
 8008762:	230c      	movs	r3, #12
 8008764:	603b      	str	r3, [r7, #0]
 8008766:	4638      	mov	r0, r7
 8008768:	f000 f80e 	bl	8008788 <__malloc_unlock>
 800876c:	e797      	b.n	800869e <_malloc_r+0x22>
 800876e:	6025      	str	r5, [r4, #0]
 8008770:	e7dc      	b.n	800872c <_malloc_r+0xb0>
 8008772:	605b      	str	r3, [r3, #4]
 8008774:	deff      	udf	#255	; 0xff
 8008776:	bf00      	nop
 8008778:	20000604 	.word	0x20000604

0800877c <__malloc_lock>:
 800877c:	4801      	ldr	r0, [pc, #4]	; (8008784 <__malloc_lock+0x8>)
 800877e:	f7ff b88a 	b.w	8007896 <__retarget_lock_acquire_recursive>
 8008782:	bf00      	nop
 8008784:	20000600 	.word	0x20000600

08008788 <__malloc_unlock>:
 8008788:	4801      	ldr	r0, [pc, #4]	; (8008790 <__malloc_unlock+0x8>)
 800878a:	f7ff b885 	b.w	8007898 <__retarget_lock_release_recursive>
 800878e:	bf00      	nop
 8008790:	20000600 	.word	0x20000600

08008794 <_Balloc>:
 8008794:	b570      	push	{r4, r5, r6, lr}
 8008796:	69c6      	ldr	r6, [r0, #28]
 8008798:	4604      	mov	r4, r0
 800879a:	460d      	mov	r5, r1
 800879c:	b976      	cbnz	r6, 80087bc <_Balloc+0x28>
 800879e:	2010      	movs	r0, #16
 80087a0:	f7ff ff44 	bl	800862c <malloc>
 80087a4:	4602      	mov	r2, r0
 80087a6:	61e0      	str	r0, [r4, #28]
 80087a8:	b920      	cbnz	r0, 80087b4 <_Balloc+0x20>
 80087aa:	4b18      	ldr	r3, [pc, #96]	; (800880c <_Balloc+0x78>)
 80087ac:	4818      	ldr	r0, [pc, #96]	; (8008810 <_Balloc+0x7c>)
 80087ae:	216b      	movs	r1, #107	; 0x6b
 80087b0:	f000 fdaa 	bl	8009308 <__assert_func>
 80087b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087b8:	6006      	str	r6, [r0, #0]
 80087ba:	60c6      	str	r6, [r0, #12]
 80087bc:	69e6      	ldr	r6, [r4, #28]
 80087be:	68f3      	ldr	r3, [r6, #12]
 80087c0:	b183      	cbz	r3, 80087e4 <_Balloc+0x50>
 80087c2:	69e3      	ldr	r3, [r4, #28]
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80087ca:	b9b8      	cbnz	r0, 80087fc <_Balloc+0x68>
 80087cc:	2101      	movs	r1, #1
 80087ce:	fa01 f605 	lsl.w	r6, r1, r5
 80087d2:	1d72      	adds	r2, r6, #5
 80087d4:	0092      	lsls	r2, r2, #2
 80087d6:	4620      	mov	r0, r4
 80087d8:	f000 fdb4 	bl	8009344 <_calloc_r>
 80087dc:	b160      	cbz	r0, 80087f8 <_Balloc+0x64>
 80087de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80087e2:	e00e      	b.n	8008802 <_Balloc+0x6e>
 80087e4:	2221      	movs	r2, #33	; 0x21
 80087e6:	2104      	movs	r1, #4
 80087e8:	4620      	mov	r0, r4
 80087ea:	f000 fdab 	bl	8009344 <_calloc_r>
 80087ee:	69e3      	ldr	r3, [r4, #28]
 80087f0:	60f0      	str	r0, [r6, #12]
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d1e4      	bne.n	80087c2 <_Balloc+0x2e>
 80087f8:	2000      	movs	r0, #0
 80087fa:	bd70      	pop	{r4, r5, r6, pc}
 80087fc:	6802      	ldr	r2, [r0, #0]
 80087fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008802:	2300      	movs	r3, #0
 8008804:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008808:	e7f7      	b.n	80087fa <_Balloc+0x66>
 800880a:	bf00      	nop
 800880c:	08009a2d 	.word	0x08009a2d
 8008810:	08009aad 	.word	0x08009aad

08008814 <_Bfree>:
 8008814:	b570      	push	{r4, r5, r6, lr}
 8008816:	69c6      	ldr	r6, [r0, #28]
 8008818:	4605      	mov	r5, r0
 800881a:	460c      	mov	r4, r1
 800881c:	b976      	cbnz	r6, 800883c <_Bfree+0x28>
 800881e:	2010      	movs	r0, #16
 8008820:	f7ff ff04 	bl	800862c <malloc>
 8008824:	4602      	mov	r2, r0
 8008826:	61e8      	str	r0, [r5, #28]
 8008828:	b920      	cbnz	r0, 8008834 <_Bfree+0x20>
 800882a:	4b09      	ldr	r3, [pc, #36]	; (8008850 <_Bfree+0x3c>)
 800882c:	4809      	ldr	r0, [pc, #36]	; (8008854 <_Bfree+0x40>)
 800882e:	218f      	movs	r1, #143	; 0x8f
 8008830:	f000 fd6a 	bl	8009308 <__assert_func>
 8008834:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008838:	6006      	str	r6, [r0, #0]
 800883a:	60c6      	str	r6, [r0, #12]
 800883c:	b13c      	cbz	r4, 800884e <_Bfree+0x3a>
 800883e:	69eb      	ldr	r3, [r5, #28]
 8008840:	6862      	ldr	r2, [r4, #4]
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008848:	6021      	str	r1, [r4, #0]
 800884a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800884e:	bd70      	pop	{r4, r5, r6, pc}
 8008850:	08009a2d 	.word	0x08009a2d
 8008854:	08009aad 	.word	0x08009aad

08008858 <__multadd>:
 8008858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800885c:	690d      	ldr	r5, [r1, #16]
 800885e:	4607      	mov	r7, r0
 8008860:	460c      	mov	r4, r1
 8008862:	461e      	mov	r6, r3
 8008864:	f101 0c14 	add.w	ip, r1, #20
 8008868:	2000      	movs	r0, #0
 800886a:	f8dc 3000 	ldr.w	r3, [ip]
 800886e:	b299      	uxth	r1, r3
 8008870:	fb02 6101 	mla	r1, r2, r1, r6
 8008874:	0c1e      	lsrs	r6, r3, #16
 8008876:	0c0b      	lsrs	r3, r1, #16
 8008878:	fb02 3306 	mla	r3, r2, r6, r3
 800887c:	b289      	uxth	r1, r1
 800887e:	3001      	adds	r0, #1
 8008880:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008884:	4285      	cmp	r5, r0
 8008886:	f84c 1b04 	str.w	r1, [ip], #4
 800888a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800888e:	dcec      	bgt.n	800886a <__multadd+0x12>
 8008890:	b30e      	cbz	r6, 80088d6 <__multadd+0x7e>
 8008892:	68a3      	ldr	r3, [r4, #8]
 8008894:	42ab      	cmp	r3, r5
 8008896:	dc19      	bgt.n	80088cc <__multadd+0x74>
 8008898:	6861      	ldr	r1, [r4, #4]
 800889a:	4638      	mov	r0, r7
 800889c:	3101      	adds	r1, #1
 800889e:	f7ff ff79 	bl	8008794 <_Balloc>
 80088a2:	4680      	mov	r8, r0
 80088a4:	b928      	cbnz	r0, 80088b2 <__multadd+0x5a>
 80088a6:	4602      	mov	r2, r0
 80088a8:	4b0c      	ldr	r3, [pc, #48]	; (80088dc <__multadd+0x84>)
 80088aa:	480d      	ldr	r0, [pc, #52]	; (80088e0 <__multadd+0x88>)
 80088ac:	21ba      	movs	r1, #186	; 0xba
 80088ae:	f000 fd2b 	bl	8009308 <__assert_func>
 80088b2:	6922      	ldr	r2, [r4, #16]
 80088b4:	3202      	adds	r2, #2
 80088b6:	f104 010c 	add.w	r1, r4, #12
 80088ba:	0092      	lsls	r2, r2, #2
 80088bc:	300c      	adds	r0, #12
 80088be:	f000 fd15 	bl	80092ec <memcpy>
 80088c2:	4621      	mov	r1, r4
 80088c4:	4638      	mov	r0, r7
 80088c6:	f7ff ffa5 	bl	8008814 <_Bfree>
 80088ca:	4644      	mov	r4, r8
 80088cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80088d0:	3501      	adds	r5, #1
 80088d2:	615e      	str	r6, [r3, #20]
 80088d4:	6125      	str	r5, [r4, #16]
 80088d6:	4620      	mov	r0, r4
 80088d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088dc:	08009a9c 	.word	0x08009a9c
 80088e0:	08009aad 	.word	0x08009aad

080088e4 <__hi0bits>:
 80088e4:	0c03      	lsrs	r3, r0, #16
 80088e6:	041b      	lsls	r3, r3, #16
 80088e8:	b9d3      	cbnz	r3, 8008920 <__hi0bits+0x3c>
 80088ea:	0400      	lsls	r0, r0, #16
 80088ec:	2310      	movs	r3, #16
 80088ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80088f2:	bf04      	itt	eq
 80088f4:	0200      	lsleq	r0, r0, #8
 80088f6:	3308      	addeq	r3, #8
 80088f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80088fc:	bf04      	itt	eq
 80088fe:	0100      	lsleq	r0, r0, #4
 8008900:	3304      	addeq	r3, #4
 8008902:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008906:	bf04      	itt	eq
 8008908:	0080      	lsleq	r0, r0, #2
 800890a:	3302      	addeq	r3, #2
 800890c:	2800      	cmp	r0, #0
 800890e:	db05      	blt.n	800891c <__hi0bits+0x38>
 8008910:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008914:	f103 0301 	add.w	r3, r3, #1
 8008918:	bf08      	it	eq
 800891a:	2320      	moveq	r3, #32
 800891c:	4618      	mov	r0, r3
 800891e:	4770      	bx	lr
 8008920:	2300      	movs	r3, #0
 8008922:	e7e4      	b.n	80088ee <__hi0bits+0xa>

08008924 <__lo0bits>:
 8008924:	6803      	ldr	r3, [r0, #0]
 8008926:	f013 0207 	ands.w	r2, r3, #7
 800892a:	d00c      	beq.n	8008946 <__lo0bits+0x22>
 800892c:	07d9      	lsls	r1, r3, #31
 800892e:	d422      	bmi.n	8008976 <__lo0bits+0x52>
 8008930:	079a      	lsls	r2, r3, #30
 8008932:	bf49      	itett	mi
 8008934:	085b      	lsrmi	r3, r3, #1
 8008936:	089b      	lsrpl	r3, r3, #2
 8008938:	6003      	strmi	r3, [r0, #0]
 800893a:	2201      	movmi	r2, #1
 800893c:	bf5c      	itt	pl
 800893e:	6003      	strpl	r3, [r0, #0]
 8008940:	2202      	movpl	r2, #2
 8008942:	4610      	mov	r0, r2
 8008944:	4770      	bx	lr
 8008946:	b299      	uxth	r1, r3
 8008948:	b909      	cbnz	r1, 800894e <__lo0bits+0x2a>
 800894a:	0c1b      	lsrs	r3, r3, #16
 800894c:	2210      	movs	r2, #16
 800894e:	b2d9      	uxtb	r1, r3
 8008950:	b909      	cbnz	r1, 8008956 <__lo0bits+0x32>
 8008952:	3208      	adds	r2, #8
 8008954:	0a1b      	lsrs	r3, r3, #8
 8008956:	0719      	lsls	r1, r3, #28
 8008958:	bf04      	itt	eq
 800895a:	091b      	lsreq	r3, r3, #4
 800895c:	3204      	addeq	r2, #4
 800895e:	0799      	lsls	r1, r3, #30
 8008960:	bf04      	itt	eq
 8008962:	089b      	lsreq	r3, r3, #2
 8008964:	3202      	addeq	r2, #2
 8008966:	07d9      	lsls	r1, r3, #31
 8008968:	d403      	bmi.n	8008972 <__lo0bits+0x4e>
 800896a:	085b      	lsrs	r3, r3, #1
 800896c:	f102 0201 	add.w	r2, r2, #1
 8008970:	d003      	beq.n	800897a <__lo0bits+0x56>
 8008972:	6003      	str	r3, [r0, #0]
 8008974:	e7e5      	b.n	8008942 <__lo0bits+0x1e>
 8008976:	2200      	movs	r2, #0
 8008978:	e7e3      	b.n	8008942 <__lo0bits+0x1e>
 800897a:	2220      	movs	r2, #32
 800897c:	e7e1      	b.n	8008942 <__lo0bits+0x1e>
	...

08008980 <__i2b>:
 8008980:	b510      	push	{r4, lr}
 8008982:	460c      	mov	r4, r1
 8008984:	2101      	movs	r1, #1
 8008986:	f7ff ff05 	bl	8008794 <_Balloc>
 800898a:	4602      	mov	r2, r0
 800898c:	b928      	cbnz	r0, 800899a <__i2b+0x1a>
 800898e:	4b05      	ldr	r3, [pc, #20]	; (80089a4 <__i2b+0x24>)
 8008990:	4805      	ldr	r0, [pc, #20]	; (80089a8 <__i2b+0x28>)
 8008992:	f240 1145 	movw	r1, #325	; 0x145
 8008996:	f000 fcb7 	bl	8009308 <__assert_func>
 800899a:	2301      	movs	r3, #1
 800899c:	6144      	str	r4, [r0, #20]
 800899e:	6103      	str	r3, [r0, #16]
 80089a0:	bd10      	pop	{r4, pc}
 80089a2:	bf00      	nop
 80089a4:	08009a9c 	.word	0x08009a9c
 80089a8:	08009aad 	.word	0x08009aad

080089ac <__multiply>:
 80089ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b0:	4691      	mov	r9, r2
 80089b2:	690a      	ldr	r2, [r1, #16]
 80089b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	bfb8      	it	lt
 80089bc:	460b      	movlt	r3, r1
 80089be:	460c      	mov	r4, r1
 80089c0:	bfbc      	itt	lt
 80089c2:	464c      	movlt	r4, r9
 80089c4:	4699      	movlt	r9, r3
 80089c6:	6927      	ldr	r7, [r4, #16]
 80089c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80089cc:	68a3      	ldr	r3, [r4, #8]
 80089ce:	6861      	ldr	r1, [r4, #4]
 80089d0:	eb07 060a 	add.w	r6, r7, sl
 80089d4:	42b3      	cmp	r3, r6
 80089d6:	b085      	sub	sp, #20
 80089d8:	bfb8      	it	lt
 80089da:	3101      	addlt	r1, #1
 80089dc:	f7ff feda 	bl	8008794 <_Balloc>
 80089e0:	b930      	cbnz	r0, 80089f0 <__multiply+0x44>
 80089e2:	4602      	mov	r2, r0
 80089e4:	4b44      	ldr	r3, [pc, #272]	; (8008af8 <__multiply+0x14c>)
 80089e6:	4845      	ldr	r0, [pc, #276]	; (8008afc <__multiply+0x150>)
 80089e8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80089ec:	f000 fc8c 	bl	8009308 <__assert_func>
 80089f0:	f100 0514 	add.w	r5, r0, #20
 80089f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80089f8:	462b      	mov	r3, r5
 80089fa:	2200      	movs	r2, #0
 80089fc:	4543      	cmp	r3, r8
 80089fe:	d321      	bcc.n	8008a44 <__multiply+0x98>
 8008a00:	f104 0314 	add.w	r3, r4, #20
 8008a04:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008a08:	f109 0314 	add.w	r3, r9, #20
 8008a0c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008a10:	9202      	str	r2, [sp, #8]
 8008a12:	1b3a      	subs	r2, r7, r4
 8008a14:	3a15      	subs	r2, #21
 8008a16:	f022 0203 	bic.w	r2, r2, #3
 8008a1a:	3204      	adds	r2, #4
 8008a1c:	f104 0115 	add.w	r1, r4, #21
 8008a20:	428f      	cmp	r7, r1
 8008a22:	bf38      	it	cc
 8008a24:	2204      	movcc	r2, #4
 8008a26:	9201      	str	r2, [sp, #4]
 8008a28:	9a02      	ldr	r2, [sp, #8]
 8008a2a:	9303      	str	r3, [sp, #12]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d80c      	bhi.n	8008a4a <__multiply+0x9e>
 8008a30:	2e00      	cmp	r6, #0
 8008a32:	dd03      	ble.n	8008a3c <__multiply+0x90>
 8008a34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d05b      	beq.n	8008af4 <__multiply+0x148>
 8008a3c:	6106      	str	r6, [r0, #16]
 8008a3e:	b005      	add	sp, #20
 8008a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a44:	f843 2b04 	str.w	r2, [r3], #4
 8008a48:	e7d8      	b.n	80089fc <__multiply+0x50>
 8008a4a:	f8b3 a000 	ldrh.w	sl, [r3]
 8008a4e:	f1ba 0f00 	cmp.w	sl, #0
 8008a52:	d024      	beq.n	8008a9e <__multiply+0xf2>
 8008a54:	f104 0e14 	add.w	lr, r4, #20
 8008a58:	46a9      	mov	r9, r5
 8008a5a:	f04f 0c00 	mov.w	ip, #0
 8008a5e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008a62:	f8d9 1000 	ldr.w	r1, [r9]
 8008a66:	fa1f fb82 	uxth.w	fp, r2
 8008a6a:	b289      	uxth	r1, r1
 8008a6c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008a70:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008a74:	f8d9 2000 	ldr.w	r2, [r9]
 8008a78:	4461      	add	r1, ip
 8008a7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008a7e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008a82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008a86:	b289      	uxth	r1, r1
 8008a88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008a8c:	4577      	cmp	r7, lr
 8008a8e:	f849 1b04 	str.w	r1, [r9], #4
 8008a92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008a96:	d8e2      	bhi.n	8008a5e <__multiply+0xb2>
 8008a98:	9a01      	ldr	r2, [sp, #4]
 8008a9a:	f845 c002 	str.w	ip, [r5, r2]
 8008a9e:	9a03      	ldr	r2, [sp, #12]
 8008aa0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008aa4:	3304      	adds	r3, #4
 8008aa6:	f1b9 0f00 	cmp.w	r9, #0
 8008aaa:	d021      	beq.n	8008af0 <__multiply+0x144>
 8008aac:	6829      	ldr	r1, [r5, #0]
 8008aae:	f104 0c14 	add.w	ip, r4, #20
 8008ab2:	46ae      	mov	lr, r5
 8008ab4:	f04f 0a00 	mov.w	sl, #0
 8008ab8:	f8bc b000 	ldrh.w	fp, [ip]
 8008abc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008ac0:	fb09 220b 	mla	r2, r9, fp, r2
 8008ac4:	4452      	add	r2, sl
 8008ac6:	b289      	uxth	r1, r1
 8008ac8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008acc:	f84e 1b04 	str.w	r1, [lr], #4
 8008ad0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008ad4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008ad8:	f8be 1000 	ldrh.w	r1, [lr]
 8008adc:	fb09 110a 	mla	r1, r9, sl, r1
 8008ae0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008ae4:	4567      	cmp	r7, ip
 8008ae6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008aea:	d8e5      	bhi.n	8008ab8 <__multiply+0x10c>
 8008aec:	9a01      	ldr	r2, [sp, #4]
 8008aee:	50a9      	str	r1, [r5, r2]
 8008af0:	3504      	adds	r5, #4
 8008af2:	e799      	b.n	8008a28 <__multiply+0x7c>
 8008af4:	3e01      	subs	r6, #1
 8008af6:	e79b      	b.n	8008a30 <__multiply+0x84>
 8008af8:	08009a9c 	.word	0x08009a9c
 8008afc:	08009aad 	.word	0x08009aad

08008b00 <__pow5mult>:
 8008b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b04:	4615      	mov	r5, r2
 8008b06:	f012 0203 	ands.w	r2, r2, #3
 8008b0a:	4606      	mov	r6, r0
 8008b0c:	460f      	mov	r7, r1
 8008b0e:	d007      	beq.n	8008b20 <__pow5mult+0x20>
 8008b10:	4c25      	ldr	r4, [pc, #148]	; (8008ba8 <__pow5mult+0xa8>)
 8008b12:	3a01      	subs	r2, #1
 8008b14:	2300      	movs	r3, #0
 8008b16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008b1a:	f7ff fe9d 	bl	8008858 <__multadd>
 8008b1e:	4607      	mov	r7, r0
 8008b20:	10ad      	asrs	r5, r5, #2
 8008b22:	d03d      	beq.n	8008ba0 <__pow5mult+0xa0>
 8008b24:	69f4      	ldr	r4, [r6, #28]
 8008b26:	b97c      	cbnz	r4, 8008b48 <__pow5mult+0x48>
 8008b28:	2010      	movs	r0, #16
 8008b2a:	f7ff fd7f 	bl	800862c <malloc>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	61f0      	str	r0, [r6, #28]
 8008b32:	b928      	cbnz	r0, 8008b40 <__pow5mult+0x40>
 8008b34:	4b1d      	ldr	r3, [pc, #116]	; (8008bac <__pow5mult+0xac>)
 8008b36:	481e      	ldr	r0, [pc, #120]	; (8008bb0 <__pow5mult+0xb0>)
 8008b38:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008b3c:	f000 fbe4 	bl	8009308 <__assert_func>
 8008b40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b44:	6004      	str	r4, [r0, #0]
 8008b46:	60c4      	str	r4, [r0, #12]
 8008b48:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008b4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008b50:	b94c      	cbnz	r4, 8008b66 <__pow5mult+0x66>
 8008b52:	f240 2171 	movw	r1, #625	; 0x271
 8008b56:	4630      	mov	r0, r6
 8008b58:	f7ff ff12 	bl	8008980 <__i2b>
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008b62:	4604      	mov	r4, r0
 8008b64:	6003      	str	r3, [r0, #0]
 8008b66:	f04f 0900 	mov.w	r9, #0
 8008b6a:	07eb      	lsls	r3, r5, #31
 8008b6c:	d50a      	bpl.n	8008b84 <__pow5mult+0x84>
 8008b6e:	4639      	mov	r1, r7
 8008b70:	4622      	mov	r2, r4
 8008b72:	4630      	mov	r0, r6
 8008b74:	f7ff ff1a 	bl	80089ac <__multiply>
 8008b78:	4639      	mov	r1, r7
 8008b7a:	4680      	mov	r8, r0
 8008b7c:	4630      	mov	r0, r6
 8008b7e:	f7ff fe49 	bl	8008814 <_Bfree>
 8008b82:	4647      	mov	r7, r8
 8008b84:	106d      	asrs	r5, r5, #1
 8008b86:	d00b      	beq.n	8008ba0 <__pow5mult+0xa0>
 8008b88:	6820      	ldr	r0, [r4, #0]
 8008b8a:	b938      	cbnz	r0, 8008b9c <__pow5mult+0x9c>
 8008b8c:	4622      	mov	r2, r4
 8008b8e:	4621      	mov	r1, r4
 8008b90:	4630      	mov	r0, r6
 8008b92:	f7ff ff0b 	bl	80089ac <__multiply>
 8008b96:	6020      	str	r0, [r4, #0]
 8008b98:	f8c0 9000 	str.w	r9, [r0]
 8008b9c:	4604      	mov	r4, r0
 8008b9e:	e7e4      	b.n	8008b6a <__pow5mult+0x6a>
 8008ba0:	4638      	mov	r0, r7
 8008ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ba6:	bf00      	nop
 8008ba8:	08009bf8 	.word	0x08009bf8
 8008bac:	08009a2d 	.word	0x08009a2d
 8008bb0:	08009aad 	.word	0x08009aad

08008bb4 <__lshift>:
 8008bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bb8:	460c      	mov	r4, r1
 8008bba:	6849      	ldr	r1, [r1, #4]
 8008bbc:	6923      	ldr	r3, [r4, #16]
 8008bbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008bc2:	68a3      	ldr	r3, [r4, #8]
 8008bc4:	4607      	mov	r7, r0
 8008bc6:	4691      	mov	r9, r2
 8008bc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008bcc:	f108 0601 	add.w	r6, r8, #1
 8008bd0:	42b3      	cmp	r3, r6
 8008bd2:	db0b      	blt.n	8008bec <__lshift+0x38>
 8008bd4:	4638      	mov	r0, r7
 8008bd6:	f7ff fddd 	bl	8008794 <_Balloc>
 8008bda:	4605      	mov	r5, r0
 8008bdc:	b948      	cbnz	r0, 8008bf2 <__lshift+0x3e>
 8008bde:	4602      	mov	r2, r0
 8008be0:	4b28      	ldr	r3, [pc, #160]	; (8008c84 <__lshift+0xd0>)
 8008be2:	4829      	ldr	r0, [pc, #164]	; (8008c88 <__lshift+0xd4>)
 8008be4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008be8:	f000 fb8e 	bl	8009308 <__assert_func>
 8008bec:	3101      	adds	r1, #1
 8008bee:	005b      	lsls	r3, r3, #1
 8008bf0:	e7ee      	b.n	8008bd0 <__lshift+0x1c>
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	f100 0114 	add.w	r1, r0, #20
 8008bf8:	f100 0210 	add.w	r2, r0, #16
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	4553      	cmp	r3, sl
 8008c00:	db33      	blt.n	8008c6a <__lshift+0xb6>
 8008c02:	6920      	ldr	r0, [r4, #16]
 8008c04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c08:	f104 0314 	add.w	r3, r4, #20
 8008c0c:	f019 091f 	ands.w	r9, r9, #31
 8008c10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008c14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008c18:	d02b      	beq.n	8008c72 <__lshift+0xbe>
 8008c1a:	f1c9 0e20 	rsb	lr, r9, #32
 8008c1e:	468a      	mov	sl, r1
 8008c20:	2200      	movs	r2, #0
 8008c22:	6818      	ldr	r0, [r3, #0]
 8008c24:	fa00 f009 	lsl.w	r0, r0, r9
 8008c28:	4310      	orrs	r0, r2
 8008c2a:	f84a 0b04 	str.w	r0, [sl], #4
 8008c2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c32:	459c      	cmp	ip, r3
 8008c34:	fa22 f20e 	lsr.w	r2, r2, lr
 8008c38:	d8f3      	bhi.n	8008c22 <__lshift+0x6e>
 8008c3a:	ebac 0304 	sub.w	r3, ip, r4
 8008c3e:	3b15      	subs	r3, #21
 8008c40:	f023 0303 	bic.w	r3, r3, #3
 8008c44:	3304      	adds	r3, #4
 8008c46:	f104 0015 	add.w	r0, r4, #21
 8008c4a:	4584      	cmp	ip, r0
 8008c4c:	bf38      	it	cc
 8008c4e:	2304      	movcc	r3, #4
 8008c50:	50ca      	str	r2, [r1, r3]
 8008c52:	b10a      	cbz	r2, 8008c58 <__lshift+0xa4>
 8008c54:	f108 0602 	add.w	r6, r8, #2
 8008c58:	3e01      	subs	r6, #1
 8008c5a:	4638      	mov	r0, r7
 8008c5c:	612e      	str	r6, [r5, #16]
 8008c5e:	4621      	mov	r1, r4
 8008c60:	f7ff fdd8 	bl	8008814 <_Bfree>
 8008c64:	4628      	mov	r0, r5
 8008c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008c6e:	3301      	adds	r3, #1
 8008c70:	e7c5      	b.n	8008bfe <__lshift+0x4a>
 8008c72:	3904      	subs	r1, #4
 8008c74:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c78:	f841 2f04 	str.w	r2, [r1, #4]!
 8008c7c:	459c      	cmp	ip, r3
 8008c7e:	d8f9      	bhi.n	8008c74 <__lshift+0xc0>
 8008c80:	e7ea      	b.n	8008c58 <__lshift+0xa4>
 8008c82:	bf00      	nop
 8008c84:	08009a9c 	.word	0x08009a9c
 8008c88:	08009aad 	.word	0x08009aad

08008c8c <__mcmp>:
 8008c8c:	b530      	push	{r4, r5, lr}
 8008c8e:	6902      	ldr	r2, [r0, #16]
 8008c90:	690c      	ldr	r4, [r1, #16]
 8008c92:	1b12      	subs	r2, r2, r4
 8008c94:	d10e      	bne.n	8008cb4 <__mcmp+0x28>
 8008c96:	f100 0314 	add.w	r3, r0, #20
 8008c9a:	3114      	adds	r1, #20
 8008c9c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008ca0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008ca4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008ca8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008cac:	42a5      	cmp	r5, r4
 8008cae:	d003      	beq.n	8008cb8 <__mcmp+0x2c>
 8008cb0:	d305      	bcc.n	8008cbe <__mcmp+0x32>
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	4610      	mov	r0, r2
 8008cb6:	bd30      	pop	{r4, r5, pc}
 8008cb8:	4283      	cmp	r3, r0
 8008cba:	d3f3      	bcc.n	8008ca4 <__mcmp+0x18>
 8008cbc:	e7fa      	b.n	8008cb4 <__mcmp+0x28>
 8008cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8008cc2:	e7f7      	b.n	8008cb4 <__mcmp+0x28>

08008cc4 <__mdiff>:
 8008cc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc8:	460c      	mov	r4, r1
 8008cca:	4606      	mov	r6, r0
 8008ccc:	4611      	mov	r1, r2
 8008cce:	4620      	mov	r0, r4
 8008cd0:	4690      	mov	r8, r2
 8008cd2:	f7ff ffdb 	bl	8008c8c <__mcmp>
 8008cd6:	1e05      	subs	r5, r0, #0
 8008cd8:	d110      	bne.n	8008cfc <__mdiff+0x38>
 8008cda:	4629      	mov	r1, r5
 8008cdc:	4630      	mov	r0, r6
 8008cde:	f7ff fd59 	bl	8008794 <_Balloc>
 8008ce2:	b930      	cbnz	r0, 8008cf2 <__mdiff+0x2e>
 8008ce4:	4b3a      	ldr	r3, [pc, #232]	; (8008dd0 <__mdiff+0x10c>)
 8008ce6:	4602      	mov	r2, r0
 8008ce8:	f240 2137 	movw	r1, #567	; 0x237
 8008cec:	4839      	ldr	r0, [pc, #228]	; (8008dd4 <__mdiff+0x110>)
 8008cee:	f000 fb0b 	bl	8009308 <__assert_func>
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008cf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cfc:	bfa4      	itt	ge
 8008cfe:	4643      	movge	r3, r8
 8008d00:	46a0      	movge	r8, r4
 8008d02:	4630      	mov	r0, r6
 8008d04:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008d08:	bfa6      	itte	ge
 8008d0a:	461c      	movge	r4, r3
 8008d0c:	2500      	movge	r5, #0
 8008d0e:	2501      	movlt	r5, #1
 8008d10:	f7ff fd40 	bl	8008794 <_Balloc>
 8008d14:	b920      	cbnz	r0, 8008d20 <__mdiff+0x5c>
 8008d16:	4b2e      	ldr	r3, [pc, #184]	; (8008dd0 <__mdiff+0x10c>)
 8008d18:	4602      	mov	r2, r0
 8008d1a:	f240 2145 	movw	r1, #581	; 0x245
 8008d1e:	e7e5      	b.n	8008cec <__mdiff+0x28>
 8008d20:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008d24:	6926      	ldr	r6, [r4, #16]
 8008d26:	60c5      	str	r5, [r0, #12]
 8008d28:	f104 0914 	add.w	r9, r4, #20
 8008d2c:	f108 0514 	add.w	r5, r8, #20
 8008d30:	f100 0e14 	add.w	lr, r0, #20
 8008d34:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008d38:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008d3c:	f108 0210 	add.w	r2, r8, #16
 8008d40:	46f2      	mov	sl, lr
 8008d42:	2100      	movs	r1, #0
 8008d44:	f859 3b04 	ldr.w	r3, [r9], #4
 8008d48:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008d4c:	fa11 f88b 	uxtah	r8, r1, fp
 8008d50:	b299      	uxth	r1, r3
 8008d52:	0c1b      	lsrs	r3, r3, #16
 8008d54:	eba8 0801 	sub.w	r8, r8, r1
 8008d58:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008d5c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008d60:	fa1f f888 	uxth.w	r8, r8
 8008d64:	1419      	asrs	r1, r3, #16
 8008d66:	454e      	cmp	r6, r9
 8008d68:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008d6c:	f84a 3b04 	str.w	r3, [sl], #4
 8008d70:	d8e8      	bhi.n	8008d44 <__mdiff+0x80>
 8008d72:	1b33      	subs	r3, r6, r4
 8008d74:	3b15      	subs	r3, #21
 8008d76:	f023 0303 	bic.w	r3, r3, #3
 8008d7a:	3304      	adds	r3, #4
 8008d7c:	3415      	adds	r4, #21
 8008d7e:	42a6      	cmp	r6, r4
 8008d80:	bf38      	it	cc
 8008d82:	2304      	movcc	r3, #4
 8008d84:	441d      	add	r5, r3
 8008d86:	4473      	add	r3, lr
 8008d88:	469e      	mov	lr, r3
 8008d8a:	462e      	mov	r6, r5
 8008d8c:	4566      	cmp	r6, ip
 8008d8e:	d30e      	bcc.n	8008dae <__mdiff+0xea>
 8008d90:	f10c 0203 	add.w	r2, ip, #3
 8008d94:	1b52      	subs	r2, r2, r5
 8008d96:	f022 0203 	bic.w	r2, r2, #3
 8008d9a:	3d03      	subs	r5, #3
 8008d9c:	45ac      	cmp	ip, r5
 8008d9e:	bf38      	it	cc
 8008da0:	2200      	movcc	r2, #0
 8008da2:	4413      	add	r3, r2
 8008da4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008da8:	b17a      	cbz	r2, 8008dca <__mdiff+0x106>
 8008daa:	6107      	str	r7, [r0, #16]
 8008dac:	e7a4      	b.n	8008cf8 <__mdiff+0x34>
 8008dae:	f856 8b04 	ldr.w	r8, [r6], #4
 8008db2:	fa11 f288 	uxtah	r2, r1, r8
 8008db6:	1414      	asrs	r4, r2, #16
 8008db8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008dbc:	b292      	uxth	r2, r2
 8008dbe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008dc2:	f84e 2b04 	str.w	r2, [lr], #4
 8008dc6:	1421      	asrs	r1, r4, #16
 8008dc8:	e7e0      	b.n	8008d8c <__mdiff+0xc8>
 8008dca:	3f01      	subs	r7, #1
 8008dcc:	e7ea      	b.n	8008da4 <__mdiff+0xe0>
 8008dce:	bf00      	nop
 8008dd0:	08009a9c 	.word	0x08009a9c
 8008dd4:	08009aad 	.word	0x08009aad

08008dd8 <__d2b>:
 8008dd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ddc:	460f      	mov	r7, r1
 8008dde:	2101      	movs	r1, #1
 8008de0:	ec59 8b10 	vmov	r8, r9, d0
 8008de4:	4616      	mov	r6, r2
 8008de6:	f7ff fcd5 	bl	8008794 <_Balloc>
 8008dea:	4604      	mov	r4, r0
 8008dec:	b930      	cbnz	r0, 8008dfc <__d2b+0x24>
 8008dee:	4602      	mov	r2, r0
 8008df0:	4b24      	ldr	r3, [pc, #144]	; (8008e84 <__d2b+0xac>)
 8008df2:	4825      	ldr	r0, [pc, #148]	; (8008e88 <__d2b+0xb0>)
 8008df4:	f240 310f 	movw	r1, #783	; 0x30f
 8008df8:	f000 fa86 	bl	8009308 <__assert_func>
 8008dfc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008e00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e04:	bb2d      	cbnz	r5, 8008e52 <__d2b+0x7a>
 8008e06:	9301      	str	r3, [sp, #4]
 8008e08:	f1b8 0300 	subs.w	r3, r8, #0
 8008e0c:	d026      	beq.n	8008e5c <__d2b+0x84>
 8008e0e:	4668      	mov	r0, sp
 8008e10:	9300      	str	r3, [sp, #0]
 8008e12:	f7ff fd87 	bl	8008924 <__lo0bits>
 8008e16:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008e1a:	b1e8      	cbz	r0, 8008e58 <__d2b+0x80>
 8008e1c:	f1c0 0320 	rsb	r3, r0, #32
 8008e20:	fa02 f303 	lsl.w	r3, r2, r3
 8008e24:	430b      	orrs	r3, r1
 8008e26:	40c2      	lsrs	r2, r0
 8008e28:	6163      	str	r3, [r4, #20]
 8008e2a:	9201      	str	r2, [sp, #4]
 8008e2c:	9b01      	ldr	r3, [sp, #4]
 8008e2e:	61a3      	str	r3, [r4, #24]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	bf14      	ite	ne
 8008e34:	2202      	movne	r2, #2
 8008e36:	2201      	moveq	r2, #1
 8008e38:	6122      	str	r2, [r4, #16]
 8008e3a:	b1bd      	cbz	r5, 8008e6c <__d2b+0x94>
 8008e3c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008e40:	4405      	add	r5, r0
 8008e42:	603d      	str	r5, [r7, #0]
 8008e44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008e48:	6030      	str	r0, [r6, #0]
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	b003      	add	sp, #12
 8008e4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e56:	e7d6      	b.n	8008e06 <__d2b+0x2e>
 8008e58:	6161      	str	r1, [r4, #20]
 8008e5a:	e7e7      	b.n	8008e2c <__d2b+0x54>
 8008e5c:	a801      	add	r0, sp, #4
 8008e5e:	f7ff fd61 	bl	8008924 <__lo0bits>
 8008e62:	9b01      	ldr	r3, [sp, #4]
 8008e64:	6163      	str	r3, [r4, #20]
 8008e66:	3020      	adds	r0, #32
 8008e68:	2201      	movs	r2, #1
 8008e6a:	e7e5      	b.n	8008e38 <__d2b+0x60>
 8008e6c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008e70:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008e74:	6038      	str	r0, [r7, #0]
 8008e76:	6918      	ldr	r0, [r3, #16]
 8008e78:	f7ff fd34 	bl	80088e4 <__hi0bits>
 8008e7c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008e80:	e7e2      	b.n	8008e48 <__d2b+0x70>
 8008e82:	bf00      	nop
 8008e84:	08009a9c 	.word	0x08009a9c
 8008e88:	08009aad 	.word	0x08009aad

08008e8c <__ssputs_r>:
 8008e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e90:	688e      	ldr	r6, [r1, #8]
 8008e92:	461f      	mov	r7, r3
 8008e94:	42be      	cmp	r6, r7
 8008e96:	680b      	ldr	r3, [r1, #0]
 8008e98:	4682      	mov	sl, r0
 8008e9a:	460c      	mov	r4, r1
 8008e9c:	4690      	mov	r8, r2
 8008e9e:	d82c      	bhi.n	8008efa <__ssputs_r+0x6e>
 8008ea0:	898a      	ldrh	r2, [r1, #12]
 8008ea2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ea6:	d026      	beq.n	8008ef6 <__ssputs_r+0x6a>
 8008ea8:	6965      	ldr	r5, [r4, #20]
 8008eaa:	6909      	ldr	r1, [r1, #16]
 8008eac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008eb0:	eba3 0901 	sub.w	r9, r3, r1
 8008eb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008eb8:	1c7b      	adds	r3, r7, #1
 8008eba:	444b      	add	r3, r9
 8008ebc:	106d      	asrs	r5, r5, #1
 8008ebe:	429d      	cmp	r5, r3
 8008ec0:	bf38      	it	cc
 8008ec2:	461d      	movcc	r5, r3
 8008ec4:	0553      	lsls	r3, r2, #21
 8008ec6:	d527      	bpl.n	8008f18 <__ssputs_r+0x8c>
 8008ec8:	4629      	mov	r1, r5
 8008eca:	f7ff fbd7 	bl	800867c <_malloc_r>
 8008ece:	4606      	mov	r6, r0
 8008ed0:	b360      	cbz	r0, 8008f2c <__ssputs_r+0xa0>
 8008ed2:	6921      	ldr	r1, [r4, #16]
 8008ed4:	464a      	mov	r2, r9
 8008ed6:	f000 fa09 	bl	80092ec <memcpy>
 8008eda:	89a3      	ldrh	r3, [r4, #12]
 8008edc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ee4:	81a3      	strh	r3, [r4, #12]
 8008ee6:	6126      	str	r6, [r4, #16]
 8008ee8:	6165      	str	r5, [r4, #20]
 8008eea:	444e      	add	r6, r9
 8008eec:	eba5 0509 	sub.w	r5, r5, r9
 8008ef0:	6026      	str	r6, [r4, #0]
 8008ef2:	60a5      	str	r5, [r4, #8]
 8008ef4:	463e      	mov	r6, r7
 8008ef6:	42be      	cmp	r6, r7
 8008ef8:	d900      	bls.n	8008efc <__ssputs_r+0x70>
 8008efa:	463e      	mov	r6, r7
 8008efc:	6820      	ldr	r0, [r4, #0]
 8008efe:	4632      	mov	r2, r6
 8008f00:	4641      	mov	r1, r8
 8008f02:	f000 f9c9 	bl	8009298 <memmove>
 8008f06:	68a3      	ldr	r3, [r4, #8]
 8008f08:	1b9b      	subs	r3, r3, r6
 8008f0a:	60a3      	str	r3, [r4, #8]
 8008f0c:	6823      	ldr	r3, [r4, #0]
 8008f0e:	4433      	add	r3, r6
 8008f10:	6023      	str	r3, [r4, #0]
 8008f12:	2000      	movs	r0, #0
 8008f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f18:	462a      	mov	r2, r5
 8008f1a:	f000 fa3b 	bl	8009394 <_realloc_r>
 8008f1e:	4606      	mov	r6, r0
 8008f20:	2800      	cmp	r0, #0
 8008f22:	d1e0      	bne.n	8008ee6 <__ssputs_r+0x5a>
 8008f24:	6921      	ldr	r1, [r4, #16]
 8008f26:	4650      	mov	r0, sl
 8008f28:	f7ff fb34 	bl	8008594 <_free_r>
 8008f2c:	230c      	movs	r3, #12
 8008f2e:	f8ca 3000 	str.w	r3, [sl]
 8008f32:	89a3      	ldrh	r3, [r4, #12]
 8008f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f38:	81a3      	strh	r3, [r4, #12]
 8008f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f3e:	e7e9      	b.n	8008f14 <__ssputs_r+0x88>

08008f40 <_svfiprintf_r>:
 8008f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f44:	4698      	mov	r8, r3
 8008f46:	898b      	ldrh	r3, [r1, #12]
 8008f48:	061b      	lsls	r3, r3, #24
 8008f4a:	b09d      	sub	sp, #116	; 0x74
 8008f4c:	4607      	mov	r7, r0
 8008f4e:	460d      	mov	r5, r1
 8008f50:	4614      	mov	r4, r2
 8008f52:	d50e      	bpl.n	8008f72 <_svfiprintf_r+0x32>
 8008f54:	690b      	ldr	r3, [r1, #16]
 8008f56:	b963      	cbnz	r3, 8008f72 <_svfiprintf_r+0x32>
 8008f58:	2140      	movs	r1, #64	; 0x40
 8008f5a:	f7ff fb8f 	bl	800867c <_malloc_r>
 8008f5e:	6028      	str	r0, [r5, #0]
 8008f60:	6128      	str	r0, [r5, #16]
 8008f62:	b920      	cbnz	r0, 8008f6e <_svfiprintf_r+0x2e>
 8008f64:	230c      	movs	r3, #12
 8008f66:	603b      	str	r3, [r7, #0]
 8008f68:	f04f 30ff 	mov.w	r0, #4294967295
 8008f6c:	e0d0      	b.n	8009110 <_svfiprintf_r+0x1d0>
 8008f6e:	2340      	movs	r3, #64	; 0x40
 8008f70:	616b      	str	r3, [r5, #20]
 8008f72:	2300      	movs	r3, #0
 8008f74:	9309      	str	r3, [sp, #36]	; 0x24
 8008f76:	2320      	movs	r3, #32
 8008f78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f80:	2330      	movs	r3, #48	; 0x30
 8008f82:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009128 <_svfiprintf_r+0x1e8>
 8008f86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f8a:	f04f 0901 	mov.w	r9, #1
 8008f8e:	4623      	mov	r3, r4
 8008f90:	469a      	mov	sl, r3
 8008f92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f96:	b10a      	cbz	r2, 8008f9c <_svfiprintf_r+0x5c>
 8008f98:	2a25      	cmp	r2, #37	; 0x25
 8008f9a:	d1f9      	bne.n	8008f90 <_svfiprintf_r+0x50>
 8008f9c:	ebba 0b04 	subs.w	fp, sl, r4
 8008fa0:	d00b      	beq.n	8008fba <_svfiprintf_r+0x7a>
 8008fa2:	465b      	mov	r3, fp
 8008fa4:	4622      	mov	r2, r4
 8008fa6:	4629      	mov	r1, r5
 8008fa8:	4638      	mov	r0, r7
 8008faa:	f7ff ff6f 	bl	8008e8c <__ssputs_r>
 8008fae:	3001      	adds	r0, #1
 8008fb0:	f000 80a9 	beq.w	8009106 <_svfiprintf_r+0x1c6>
 8008fb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fb6:	445a      	add	r2, fp
 8008fb8:	9209      	str	r2, [sp, #36]	; 0x24
 8008fba:	f89a 3000 	ldrb.w	r3, [sl]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	f000 80a1 	beq.w	8009106 <_svfiprintf_r+0x1c6>
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8008fca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fce:	f10a 0a01 	add.w	sl, sl, #1
 8008fd2:	9304      	str	r3, [sp, #16]
 8008fd4:	9307      	str	r3, [sp, #28]
 8008fd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fda:	931a      	str	r3, [sp, #104]	; 0x68
 8008fdc:	4654      	mov	r4, sl
 8008fde:	2205      	movs	r2, #5
 8008fe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fe4:	4850      	ldr	r0, [pc, #320]	; (8009128 <_svfiprintf_r+0x1e8>)
 8008fe6:	f7f7 f8fb 	bl	80001e0 <memchr>
 8008fea:	9a04      	ldr	r2, [sp, #16]
 8008fec:	b9d8      	cbnz	r0, 8009026 <_svfiprintf_r+0xe6>
 8008fee:	06d0      	lsls	r0, r2, #27
 8008ff0:	bf44      	itt	mi
 8008ff2:	2320      	movmi	r3, #32
 8008ff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ff8:	0711      	lsls	r1, r2, #28
 8008ffa:	bf44      	itt	mi
 8008ffc:	232b      	movmi	r3, #43	; 0x2b
 8008ffe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009002:	f89a 3000 	ldrb.w	r3, [sl]
 8009006:	2b2a      	cmp	r3, #42	; 0x2a
 8009008:	d015      	beq.n	8009036 <_svfiprintf_r+0xf6>
 800900a:	9a07      	ldr	r2, [sp, #28]
 800900c:	4654      	mov	r4, sl
 800900e:	2000      	movs	r0, #0
 8009010:	f04f 0c0a 	mov.w	ip, #10
 8009014:	4621      	mov	r1, r4
 8009016:	f811 3b01 	ldrb.w	r3, [r1], #1
 800901a:	3b30      	subs	r3, #48	; 0x30
 800901c:	2b09      	cmp	r3, #9
 800901e:	d94d      	bls.n	80090bc <_svfiprintf_r+0x17c>
 8009020:	b1b0      	cbz	r0, 8009050 <_svfiprintf_r+0x110>
 8009022:	9207      	str	r2, [sp, #28]
 8009024:	e014      	b.n	8009050 <_svfiprintf_r+0x110>
 8009026:	eba0 0308 	sub.w	r3, r0, r8
 800902a:	fa09 f303 	lsl.w	r3, r9, r3
 800902e:	4313      	orrs	r3, r2
 8009030:	9304      	str	r3, [sp, #16]
 8009032:	46a2      	mov	sl, r4
 8009034:	e7d2      	b.n	8008fdc <_svfiprintf_r+0x9c>
 8009036:	9b03      	ldr	r3, [sp, #12]
 8009038:	1d19      	adds	r1, r3, #4
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	9103      	str	r1, [sp, #12]
 800903e:	2b00      	cmp	r3, #0
 8009040:	bfbb      	ittet	lt
 8009042:	425b      	neglt	r3, r3
 8009044:	f042 0202 	orrlt.w	r2, r2, #2
 8009048:	9307      	strge	r3, [sp, #28]
 800904a:	9307      	strlt	r3, [sp, #28]
 800904c:	bfb8      	it	lt
 800904e:	9204      	strlt	r2, [sp, #16]
 8009050:	7823      	ldrb	r3, [r4, #0]
 8009052:	2b2e      	cmp	r3, #46	; 0x2e
 8009054:	d10c      	bne.n	8009070 <_svfiprintf_r+0x130>
 8009056:	7863      	ldrb	r3, [r4, #1]
 8009058:	2b2a      	cmp	r3, #42	; 0x2a
 800905a:	d134      	bne.n	80090c6 <_svfiprintf_r+0x186>
 800905c:	9b03      	ldr	r3, [sp, #12]
 800905e:	1d1a      	adds	r2, r3, #4
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	9203      	str	r2, [sp, #12]
 8009064:	2b00      	cmp	r3, #0
 8009066:	bfb8      	it	lt
 8009068:	f04f 33ff 	movlt.w	r3, #4294967295
 800906c:	3402      	adds	r4, #2
 800906e:	9305      	str	r3, [sp, #20]
 8009070:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009138 <_svfiprintf_r+0x1f8>
 8009074:	7821      	ldrb	r1, [r4, #0]
 8009076:	2203      	movs	r2, #3
 8009078:	4650      	mov	r0, sl
 800907a:	f7f7 f8b1 	bl	80001e0 <memchr>
 800907e:	b138      	cbz	r0, 8009090 <_svfiprintf_r+0x150>
 8009080:	9b04      	ldr	r3, [sp, #16]
 8009082:	eba0 000a 	sub.w	r0, r0, sl
 8009086:	2240      	movs	r2, #64	; 0x40
 8009088:	4082      	lsls	r2, r0
 800908a:	4313      	orrs	r3, r2
 800908c:	3401      	adds	r4, #1
 800908e:	9304      	str	r3, [sp, #16]
 8009090:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009094:	4825      	ldr	r0, [pc, #148]	; (800912c <_svfiprintf_r+0x1ec>)
 8009096:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800909a:	2206      	movs	r2, #6
 800909c:	f7f7 f8a0 	bl	80001e0 <memchr>
 80090a0:	2800      	cmp	r0, #0
 80090a2:	d038      	beq.n	8009116 <_svfiprintf_r+0x1d6>
 80090a4:	4b22      	ldr	r3, [pc, #136]	; (8009130 <_svfiprintf_r+0x1f0>)
 80090a6:	bb1b      	cbnz	r3, 80090f0 <_svfiprintf_r+0x1b0>
 80090a8:	9b03      	ldr	r3, [sp, #12]
 80090aa:	3307      	adds	r3, #7
 80090ac:	f023 0307 	bic.w	r3, r3, #7
 80090b0:	3308      	adds	r3, #8
 80090b2:	9303      	str	r3, [sp, #12]
 80090b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090b6:	4433      	add	r3, r6
 80090b8:	9309      	str	r3, [sp, #36]	; 0x24
 80090ba:	e768      	b.n	8008f8e <_svfiprintf_r+0x4e>
 80090bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80090c0:	460c      	mov	r4, r1
 80090c2:	2001      	movs	r0, #1
 80090c4:	e7a6      	b.n	8009014 <_svfiprintf_r+0xd4>
 80090c6:	2300      	movs	r3, #0
 80090c8:	3401      	adds	r4, #1
 80090ca:	9305      	str	r3, [sp, #20]
 80090cc:	4619      	mov	r1, r3
 80090ce:	f04f 0c0a 	mov.w	ip, #10
 80090d2:	4620      	mov	r0, r4
 80090d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090d8:	3a30      	subs	r2, #48	; 0x30
 80090da:	2a09      	cmp	r2, #9
 80090dc:	d903      	bls.n	80090e6 <_svfiprintf_r+0x1a6>
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d0c6      	beq.n	8009070 <_svfiprintf_r+0x130>
 80090e2:	9105      	str	r1, [sp, #20]
 80090e4:	e7c4      	b.n	8009070 <_svfiprintf_r+0x130>
 80090e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80090ea:	4604      	mov	r4, r0
 80090ec:	2301      	movs	r3, #1
 80090ee:	e7f0      	b.n	80090d2 <_svfiprintf_r+0x192>
 80090f0:	ab03      	add	r3, sp, #12
 80090f2:	9300      	str	r3, [sp, #0]
 80090f4:	462a      	mov	r2, r5
 80090f6:	4b0f      	ldr	r3, [pc, #60]	; (8009134 <_svfiprintf_r+0x1f4>)
 80090f8:	a904      	add	r1, sp, #16
 80090fa:	4638      	mov	r0, r7
 80090fc:	f7fd fe62 	bl	8006dc4 <_printf_float>
 8009100:	1c42      	adds	r2, r0, #1
 8009102:	4606      	mov	r6, r0
 8009104:	d1d6      	bne.n	80090b4 <_svfiprintf_r+0x174>
 8009106:	89ab      	ldrh	r3, [r5, #12]
 8009108:	065b      	lsls	r3, r3, #25
 800910a:	f53f af2d 	bmi.w	8008f68 <_svfiprintf_r+0x28>
 800910e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009110:	b01d      	add	sp, #116	; 0x74
 8009112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009116:	ab03      	add	r3, sp, #12
 8009118:	9300      	str	r3, [sp, #0]
 800911a:	462a      	mov	r2, r5
 800911c:	4b05      	ldr	r3, [pc, #20]	; (8009134 <_svfiprintf_r+0x1f4>)
 800911e:	a904      	add	r1, sp, #16
 8009120:	4638      	mov	r0, r7
 8009122:	f7fe f8f3 	bl	800730c <_printf_i>
 8009126:	e7eb      	b.n	8009100 <_svfiprintf_r+0x1c0>
 8009128:	08009c04 	.word	0x08009c04
 800912c:	08009c0e 	.word	0x08009c0e
 8009130:	08006dc5 	.word	0x08006dc5
 8009134:	08008e8d 	.word	0x08008e8d
 8009138:	08009c0a 	.word	0x08009c0a

0800913c <__sflush_r>:
 800913c:	898a      	ldrh	r2, [r1, #12]
 800913e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009142:	4605      	mov	r5, r0
 8009144:	0710      	lsls	r0, r2, #28
 8009146:	460c      	mov	r4, r1
 8009148:	d458      	bmi.n	80091fc <__sflush_r+0xc0>
 800914a:	684b      	ldr	r3, [r1, #4]
 800914c:	2b00      	cmp	r3, #0
 800914e:	dc05      	bgt.n	800915c <__sflush_r+0x20>
 8009150:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009152:	2b00      	cmp	r3, #0
 8009154:	dc02      	bgt.n	800915c <__sflush_r+0x20>
 8009156:	2000      	movs	r0, #0
 8009158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800915c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800915e:	2e00      	cmp	r6, #0
 8009160:	d0f9      	beq.n	8009156 <__sflush_r+0x1a>
 8009162:	2300      	movs	r3, #0
 8009164:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009168:	682f      	ldr	r7, [r5, #0]
 800916a:	6a21      	ldr	r1, [r4, #32]
 800916c:	602b      	str	r3, [r5, #0]
 800916e:	d032      	beq.n	80091d6 <__sflush_r+0x9a>
 8009170:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009172:	89a3      	ldrh	r3, [r4, #12]
 8009174:	075a      	lsls	r2, r3, #29
 8009176:	d505      	bpl.n	8009184 <__sflush_r+0x48>
 8009178:	6863      	ldr	r3, [r4, #4]
 800917a:	1ac0      	subs	r0, r0, r3
 800917c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800917e:	b10b      	cbz	r3, 8009184 <__sflush_r+0x48>
 8009180:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009182:	1ac0      	subs	r0, r0, r3
 8009184:	2300      	movs	r3, #0
 8009186:	4602      	mov	r2, r0
 8009188:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800918a:	6a21      	ldr	r1, [r4, #32]
 800918c:	4628      	mov	r0, r5
 800918e:	47b0      	blx	r6
 8009190:	1c43      	adds	r3, r0, #1
 8009192:	89a3      	ldrh	r3, [r4, #12]
 8009194:	d106      	bne.n	80091a4 <__sflush_r+0x68>
 8009196:	6829      	ldr	r1, [r5, #0]
 8009198:	291d      	cmp	r1, #29
 800919a:	d82b      	bhi.n	80091f4 <__sflush_r+0xb8>
 800919c:	4a29      	ldr	r2, [pc, #164]	; (8009244 <__sflush_r+0x108>)
 800919e:	410a      	asrs	r2, r1
 80091a0:	07d6      	lsls	r6, r2, #31
 80091a2:	d427      	bmi.n	80091f4 <__sflush_r+0xb8>
 80091a4:	2200      	movs	r2, #0
 80091a6:	6062      	str	r2, [r4, #4]
 80091a8:	04d9      	lsls	r1, r3, #19
 80091aa:	6922      	ldr	r2, [r4, #16]
 80091ac:	6022      	str	r2, [r4, #0]
 80091ae:	d504      	bpl.n	80091ba <__sflush_r+0x7e>
 80091b0:	1c42      	adds	r2, r0, #1
 80091b2:	d101      	bne.n	80091b8 <__sflush_r+0x7c>
 80091b4:	682b      	ldr	r3, [r5, #0]
 80091b6:	b903      	cbnz	r3, 80091ba <__sflush_r+0x7e>
 80091b8:	6560      	str	r0, [r4, #84]	; 0x54
 80091ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091bc:	602f      	str	r7, [r5, #0]
 80091be:	2900      	cmp	r1, #0
 80091c0:	d0c9      	beq.n	8009156 <__sflush_r+0x1a>
 80091c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091c6:	4299      	cmp	r1, r3
 80091c8:	d002      	beq.n	80091d0 <__sflush_r+0x94>
 80091ca:	4628      	mov	r0, r5
 80091cc:	f7ff f9e2 	bl	8008594 <_free_r>
 80091d0:	2000      	movs	r0, #0
 80091d2:	6360      	str	r0, [r4, #52]	; 0x34
 80091d4:	e7c0      	b.n	8009158 <__sflush_r+0x1c>
 80091d6:	2301      	movs	r3, #1
 80091d8:	4628      	mov	r0, r5
 80091da:	47b0      	blx	r6
 80091dc:	1c41      	adds	r1, r0, #1
 80091de:	d1c8      	bne.n	8009172 <__sflush_r+0x36>
 80091e0:	682b      	ldr	r3, [r5, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d0c5      	beq.n	8009172 <__sflush_r+0x36>
 80091e6:	2b1d      	cmp	r3, #29
 80091e8:	d001      	beq.n	80091ee <__sflush_r+0xb2>
 80091ea:	2b16      	cmp	r3, #22
 80091ec:	d101      	bne.n	80091f2 <__sflush_r+0xb6>
 80091ee:	602f      	str	r7, [r5, #0]
 80091f0:	e7b1      	b.n	8009156 <__sflush_r+0x1a>
 80091f2:	89a3      	ldrh	r3, [r4, #12]
 80091f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091f8:	81a3      	strh	r3, [r4, #12]
 80091fa:	e7ad      	b.n	8009158 <__sflush_r+0x1c>
 80091fc:	690f      	ldr	r7, [r1, #16]
 80091fe:	2f00      	cmp	r7, #0
 8009200:	d0a9      	beq.n	8009156 <__sflush_r+0x1a>
 8009202:	0793      	lsls	r3, r2, #30
 8009204:	680e      	ldr	r6, [r1, #0]
 8009206:	bf08      	it	eq
 8009208:	694b      	ldreq	r3, [r1, #20]
 800920a:	600f      	str	r7, [r1, #0]
 800920c:	bf18      	it	ne
 800920e:	2300      	movne	r3, #0
 8009210:	eba6 0807 	sub.w	r8, r6, r7
 8009214:	608b      	str	r3, [r1, #8]
 8009216:	f1b8 0f00 	cmp.w	r8, #0
 800921a:	dd9c      	ble.n	8009156 <__sflush_r+0x1a>
 800921c:	6a21      	ldr	r1, [r4, #32]
 800921e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009220:	4643      	mov	r3, r8
 8009222:	463a      	mov	r2, r7
 8009224:	4628      	mov	r0, r5
 8009226:	47b0      	blx	r6
 8009228:	2800      	cmp	r0, #0
 800922a:	dc06      	bgt.n	800923a <__sflush_r+0xfe>
 800922c:	89a3      	ldrh	r3, [r4, #12]
 800922e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009232:	81a3      	strh	r3, [r4, #12]
 8009234:	f04f 30ff 	mov.w	r0, #4294967295
 8009238:	e78e      	b.n	8009158 <__sflush_r+0x1c>
 800923a:	4407      	add	r7, r0
 800923c:	eba8 0800 	sub.w	r8, r8, r0
 8009240:	e7e9      	b.n	8009216 <__sflush_r+0xda>
 8009242:	bf00      	nop
 8009244:	dfbffffe 	.word	0xdfbffffe

08009248 <_fflush_r>:
 8009248:	b538      	push	{r3, r4, r5, lr}
 800924a:	690b      	ldr	r3, [r1, #16]
 800924c:	4605      	mov	r5, r0
 800924e:	460c      	mov	r4, r1
 8009250:	b913      	cbnz	r3, 8009258 <_fflush_r+0x10>
 8009252:	2500      	movs	r5, #0
 8009254:	4628      	mov	r0, r5
 8009256:	bd38      	pop	{r3, r4, r5, pc}
 8009258:	b118      	cbz	r0, 8009262 <_fflush_r+0x1a>
 800925a:	6a03      	ldr	r3, [r0, #32]
 800925c:	b90b      	cbnz	r3, 8009262 <_fflush_r+0x1a>
 800925e:	f7fe fa03 	bl	8007668 <__sinit>
 8009262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d0f3      	beq.n	8009252 <_fflush_r+0xa>
 800926a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800926c:	07d0      	lsls	r0, r2, #31
 800926e:	d404      	bmi.n	800927a <_fflush_r+0x32>
 8009270:	0599      	lsls	r1, r3, #22
 8009272:	d402      	bmi.n	800927a <_fflush_r+0x32>
 8009274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009276:	f7fe fb0e 	bl	8007896 <__retarget_lock_acquire_recursive>
 800927a:	4628      	mov	r0, r5
 800927c:	4621      	mov	r1, r4
 800927e:	f7ff ff5d 	bl	800913c <__sflush_r>
 8009282:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009284:	07da      	lsls	r2, r3, #31
 8009286:	4605      	mov	r5, r0
 8009288:	d4e4      	bmi.n	8009254 <_fflush_r+0xc>
 800928a:	89a3      	ldrh	r3, [r4, #12]
 800928c:	059b      	lsls	r3, r3, #22
 800928e:	d4e1      	bmi.n	8009254 <_fflush_r+0xc>
 8009290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009292:	f7fe fb01 	bl	8007898 <__retarget_lock_release_recursive>
 8009296:	e7dd      	b.n	8009254 <_fflush_r+0xc>

08009298 <memmove>:
 8009298:	4288      	cmp	r0, r1
 800929a:	b510      	push	{r4, lr}
 800929c:	eb01 0402 	add.w	r4, r1, r2
 80092a0:	d902      	bls.n	80092a8 <memmove+0x10>
 80092a2:	4284      	cmp	r4, r0
 80092a4:	4623      	mov	r3, r4
 80092a6:	d807      	bhi.n	80092b8 <memmove+0x20>
 80092a8:	1e43      	subs	r3, r0, #1
 80092aa:	42a1      	cmp	r1, r4
 80092ac:	d008      	beq.n	80092c0 <memmove+0x28>
 80092ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80092b6:	e7f8      	b.n	80092aa <memmove+0x12>
 80092b8:	4402      	add	r2, r0
 80092ba:	4601      	mov	r1, r0
 80092bc:	428a      	cmp	r2, r1
 80092be:	d100      	bne.n	80092c2 <memmove+0x2a>
 80092c0:	bd10      	pop	{r4, pc}
 80092c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80092ca:	e7f7      	b.n	80092bc <memmove+0x24>

080092cc <_sbrk_r>:
 80092cc:	b538      	push	{r3, r4, r5, lr}
 80092ce:	4d06      	ldr	r5, [pc, #24]	; (80092e8 <_sbrk_r+0x1c>)
 80092d0:	2300      	movs	r3, #0
 80092d2:	4604      	mov	r4, r0
 80092d4:	4608      	mov	r0, r1
 80092d6:	602b      	str	r3, [r5, #0]
 80092d8:	f7f9 fb30 	bl	800293c <_sbrk>
 80092dc:	1c43      	adds	r3, r0, #1
 80092de:	d102      	bne.n	80092e6 <_sbrk_r+0x1a>
 80092e0:	682b      	ldr	r3, [r5, #0]
 80092e2:	b103      	cbz	r3, 80092e6 <_sbrk_r+0x1a>
 80092e4:	6023      	str	r3, [r4, #0]
 80092e6:	bd38      	pop	{r3, r4, r5, pc}
 80092e8:	200005fc 	.word	0x200005fc

080092ec <memcpy>:
 80092ec:	440a      	add	r2, r1
 80092ee:	4291      	cmp	r1, r2
 80092f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80092f4:	d100      	bne.n	80092f8 <memcpy+0xc>
 80092f6:	4770      	bx	lr
 80092f8:	b510      	push	{r4, lr}
 80092fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009302:	4291      	cmp	r1, r2
 8009304:	d1f9      	bne.n	80092fa <memcpy+0xe>
 8009306:	bd10      	pop	{r4, pc}

08009308 <__assert_func>:
 8009308:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800930a:	4614      	mov	r4, r2
 800930c:	461a      	mov	r2, r3
 800930e:	4b09      	ldr	r3, [pc, #36]	; (8009334 <__assert_func+0x2c>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4605      	mov	r5, r0
 8009314:	68d8      	ldr	r0, [r3, #12]
 8009316:	b14c      	cbz	r4, 800932c <__assert_func+0x24>
 8009318:	4b07      	ldr	r3, [pc, #28]	; (8009338 <__assert_func+0x30>)
 800931a:	9100      	str	r1, [sp, #0]
 800931c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009320:	4906      	ldr	r1, [pc, #24]	; (800933c <__assert_func+0x34>)
 8009322:	462b      	mov	r3, r5
 8009324:	f000 f872 	bl	800940c <fiprintf>
 8009328:	f000 f882 	bl	8009430 <abort>
 800932c:	4b04      	ldr	r3, [pc, #16]	; (8009340 <__assert_func+0x38>)
 800932e:	461c      	mov	r4, r3
 8009330:	e7f3      	b.n	800931a <__assert_func+0x12>
 8009332:	bf00      	nop
 8009334:	20000068 	.word	0x20000068
 8009338:	08009c1f 	.word	0x08009c1f
 800933c:	08009c2c 	.word	0x08009c2c
 8009340:	08009c5a 	.word	0x08009c5a

08009344 <_calloc_r>:
 8009344:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009346:	fba1 2402 	umull	r2, r4, r1, r2
 800934a:	b94c      	cbnz	r4, 8009360 <_calloc_r+0x1c>
 800934c:	4611      	mov	r1, r2
 800934e:	9201      	str	r2, [sp, #4]
 8009350:	f7ff f994 	bl	800867c <_malloc_r>
 8009354:	9a01      	ldr	r2, [sp, #4]
 8009356:	4605      	mov	r5, r0
 8009358:	b930      	cbnz	r0, 8009368 <_calloc_r+0x24>
 800935a:	4628      	mov	r0, r5
 800935c:	b003      	add	sp, #12
 800935e:	bd30      	pop	{r4, r5, pc}
 8009360:	220c      	movs	r2, #12
 8009362:	6002      	str	r2, [r0, #0]
 8009364:	2500      	movs	r5, #0
 8009366:	e7f8      	b.n	800935a <_calloc_r+0x16>
 8009368:	4621      	mov	r1, r4
 800936a:	f7fe fa16 	bl	800779a <memset>
 800936e:	e7f4      	b.n	800935a <_calloc_r+0x16>

08009370 <__ascii_mbtowc>:
 8009370:	b082      	sub	sp, #8
 8009372:	b901      	cbnz	r1, 8009376 <__ascii_mbtowc+0x6>
 8009374:	a901      	add	r1, sp, #4
 8009376:	b142      	cbz	r2, 800938a <__ascii_mbtowc+0x1a>
 8009378:	b14b      	cbz	r3, 800938e <__ascii_mbtowc+0x1e>
 800937a:	7813      	ldrb	r3, [r2, #0]
 800937c:	600b      	str	r3, [r1, #0]
 800937e:	7812      	ldrb	r2, [r2, #0]
 8009380:	1e10      	subs	r0, r2, #0
 8009382:	bf18      	it	ne
 8009384:	2001      	movne	r0, #1
 8009386:	b002      	add	sp, #8
 8009388:	4770      	bx	lr
 800938a:	4610      	mov	r0, r2
 800938c:	e7fb      	b.n	8009386 <__ascii_mbtowc+0x16>
 800938e:	f06f 0001 	mvn.w	r0, #1
 8009392:	e7f8      	b.n	8009386 <__ascii_mbtowc+0x16>

08009394 <_realloc_r>:
 8009394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009398:	4680      	mov	r8, r0
 800939a:	4614      	mov	r4, r2
 800939c:	460e      	mov	r6, r1
 800939e:	b921      	cbnz	r1, 80093aa <_realloc_r+0x16>
 80093a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093a4:	4611      	mov	r1, r2
 80093a6:	f7ff b969 	b.w	800867c <_malloc_r>
 80093aa:	b92a      	cbnz	r2, 80093b8 <_realloc_r+0x24>
 80093ac:	f7ff f8f2 	bl	8008594 <_free_r>
 80093b0:	4625      	mov	r5, r4
 80093b2:	4628      	mov	r0, r5
 80093b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093b8:	f000 f841 	bl	800943e <_malloc_usable_size_r>
 80093bc:	4284      	cmp	r4, r0
 80093be:	4607      	mov	r7, r0
 80093c0:	d802      	bhi.n	80093c8 <_realloc_r+0x34>
 80093c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80093c6:	d812      	bhi.n	80093ee <_realloc_r+0x5a>
 80093c8:	4621      	mov	r1, r4
 80093ca:	4640      	mov	r0, r8
 80093cc:	f7ff f956 	bl	800867c <_malloc_r>
 80093d0:	4605      	mov	r5, r0
 80093d2:	2800      	cmp	r0, #0
 80093d4:	d0ed      	beq.n	80093b2 <_realloc_r+0x1e>
 80093d6:	42bc      	cmp	r4, r7
 80093d8:	4622      	mov	r2, r4
 80093da:	4631      	mov	r1, r6
 80093dc:	bf28      	it	cs
 80093de:	463a      	movcs	r2, r7
 80093e0:	f7ff ff84 	bl	80092ec <memcpy>
 80093e4:	4631      	mov	r1, r6
 80093e6:	4640      	mov	r0, r8
 80093e8:	f7ff f8d4 	bl	8008594 <_free_r>
 80093ec:	e7e1      	b.n	80093b2 <_realloc_r+0x1e>
 80093ee:	4635      	mov	r5, r6
 80093f0:	e7df      	b.n	80093b2 <_realloc_r+0x1e>

080093f2 <__ascii_wctomb>:
 80093f2:	b149      	cbz	r1, 8009408 <__ascii_wctomb+0x16>
 80093f4:	2aff      	cmp	r2, #255	; 0xff
 80093f6:	bf85      	ittet	hi
 80093f8:	238a      	movhi	r3, #138	; 0x8a
 80093fa:	6003      	strhi	r3, [r0, #0]
 80093fc:	700a      	strbls	r2, [r1, #0]
 80093fe:	f04f 30ff 	movhi.w	r0, #4294967295
 8009402:	bf98      	it	ls
 8009404:	2001      	movls	r0, #1
 8009406:	4770      	bx	lr
 8009408:	4608      	mov	r0, r1
 800940a:	4770      	bx	lr

0800940c <fiprintf>:
 800940c:	b40e      	push	{r1, r2, r3}
 800940e:	b503      	push	{r0, r1, lr}
 8009410:	4601      	mov	r1, r0
 8009412:	ab03      	add	r3, sp, #12
 8009414:	4805      	ldr	r0, [pc, #20]	; (800942c <fiprintf+0x20>)
 8009416:	f853 2b04 	ldr.w	r2, [r3], #4
 800941a:	6800      	ldr	r0, [r0, #0]
 800941c:	9301      	str	r3, [sp, #4]
 800941e:	f000 f83f 	bl	80094a0 <_vfiprintf_r>
 8009422:	b002      	add	sp, #8
 8009424:	f85d eb04 	ldr.w	lr, [sp], #4
 8009428:	b003      	add	sp, #12
 800942a:	4770      	bx	lr
 800942c:	20000068 	.word	0x20000068

08009430 <abort>:
 8009430:	b508      	push	{r3, lr}
 8009432:	2006      	movs	r0, #6
 8009434:	f000 fa0c 	bl	8009850 <raise>
 8009438:	2001      	movs	r0, #1
 800943a:	f7f9 fa07 	bl	800284c <_exit>

0800943e <_malloc_usable_size_r>:
 800943e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009442:	1f18      	subs	r0, r3, #4
 8009444:	2b00      	cmp	r3, #0
 8009446:	bfbc      	itt	lt
 8009448:	580b      	ldrlt	r3, [r1, r0]
 800944a:	18c0      	addlt	r0, r0, r3
 800944c:	4770      	bx	lr

0800944e <__sfputc_r>:
 800944e:	6893      	ldr	r3, [r2, #8]
 8009450:	3b01      	subs	r3, #1
 8009452:	2b00      	cmp	r3, #0
 8009454:	b410      	push	{r4}
 8009456:	6093      	str	r3, [r2, #8]
 8009458:	da08      	bge.n	800946c <__sfputc_r+0x1e>
 800945a:	6994      	ldr	r4, [r2, #24]
 800945c:	42a3      	cmp	r3, r4
 800945e:	db01      	blt.n	8009464 <__sfputc_r+0x16>
 8009460:	290a      	cmp	r1, #10
 8009462:	d103      	bne.n	800946c <__sfputc_r+0x1e>
 8009464:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009468:	f000 b934 	b.w	80096d4 <__swbuf_r>
 800946c:	6813      	ldr	r3, [r2, #0]
 800946e:	1c58      	adds	r0, r3, #1
 8009470:	6010      	str	r0, [r2, #0]
 8009472:	7019      	strb	r1, [r3, #0]
 8009474:	4608      	mov	r0, r1
 8009476:	f85d 4b04 	ldr.w	r4, [sp], #4
 800947a:	4770      	bx	lr

0800947c <__sfputs_r>:
 800947c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800947e:	4606      	mov	r6, r0
 8009480:	460f      	mov	r7, r1
 8009482:	4614      	mov	r4, r2
 8009484:	18d5      	adds	r5, r2, r3
 8009486:	42ac      	cmp	r4, r5
 8009488:	d101      	bne.n	800948e <__sfputs_r+0x12>
 800948a:	2000      	movs	r0, #0
 800948c:	e007      	b.n	800949e <__sfputs_r+0x22>
 800948e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009492:	463a      	mov	r2, r7
 8009494:	4630      	mov	r0, r6
 8009496:	f7ff ffda 	bl	800944e <__sfputc_r>
 800949a:	1c43      	adds	r3, r0, #1
 800949c:	d1f3      	bne.n	8009486 <__sfputs_r+0xa>
 800949e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080094a0 <_vfiprintf_r>:
 80094a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a4:	460d      	mov	r5, r1
 80094a6:	b09d      	sub	sp, #116	; 0x74
 80094a8:	4614      	mov	r4, r2
 80094aa:	4698      	mov	r8, r3
 80094ac:	4606      	mov	r6, r0
 80094ae:	b118      	cbz	r0, 80094b8 <_vfiprintf_r+0x18>
 80094b0:	6a03      	ldr	r3, [r0, #32]
 80094b2:	b90b      	cbnz	r3, 80094b8 <_vfiprintf_r+0x18>
 80094b4:	f7fe f8d8 	bl	8007668 <__sinit>
 80094b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094ba:	07d9      	lsls	r1, r3, #31
 80094bc:	d405      	bmi.n	80094ca <_vfiprintf_r+0x2a>
 80094be:	89ab      	ldrh	r3, [r5, #12]
 80094c0:	059a      	lsls	r2, r3, #22
 80094c2:	d402      	bmi.n	80094ca <_vfiprintf_r+0x2a>
 80094c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094c6:	f7fe f9e6 	bl	8007896 <__retarget_lock_acquire_recursive>
 80094ca:	89ab      	ldrh	r3, [r5, #12]
 80094cc:	071b      	lsls	r3, r3, #28
 80094ce:	d501      	bpl.n	80094d4 <_vfiprintf_r+0x34>
 80094d0:	692b      	ldr	r3, [r5, #16]
 80094d2:	b99b      	cbnz	r3, 80094fc <_vfiprintf_r+0x5c>
 80094d4:	4629      	mov	r1, r5
 80094d6:	4630      	mov	r0, r6
 80094d8:	f000 f93a 	bl	8009750 <__swsetup_r>
 80094dc:	b170      	cbz	r0, 80094fc <_vfiprintf_r+0x5c>
 80094de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094e0:	07dc      	lsls	r4, r3, #31
 80094e2:	d504      	bpl.n	80094ee <_vfiprintf_r+0x4e>
 80094e4:	f04f 30ff 	mov.w	r0, #4294967295
 80094e8:	b01d      	add	sp, #116	; 0x74
 80094ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ee:	89ab      	ldrh	r3, [r5, #12]
 80094f0:	0598      	lsls	r0, r3, #22
 80094f2:	d4f7      	bmi.n	80094e4 <_vfiprintf_r+0x44>
 80094f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094f6:	f7fe f9cf 	bl	8007898 <__retarget_lock_release_recursive>
 80094fa:	e7f3      	b.n	80094e4 <_vfiprintf_r+0x44>
 80094fc:	2300      	movs	r3, #0
 80094fe:	9309      	str	r3, [sp, #36]	; 0x24
 8009500:	2320      	movs	r3, #32
 8009502:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009506:	f8cd 800c 	str.w	r8, [sp, #12]
 800950a:	2330      	movs	r3, #48	; 0x30
 800950c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80096c0 <_vfiprintf_r+0x220>
 8009510:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009514:	f04f 0901 	mov.w	r9, #1
 8009518:	4623      	mov	r3, r4
 800951a:	469a      	mov	sl, r3
 800951c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009520:	b10a      	cbz	r2, 8009526 <_vfiprintf_r+0x86>
 8009522:	2a25      	cmp	r2, #37	; 0x25
 8009524:	d1f9      	bne.n	800951a <_vfiprintf_r+0x7a>
 8009526:	ebba 0b04 	subs.w	fp, sl, r4
 800952a:	d00b      	beq.n	8009544 <_vfiprintf_r+0xa4>
 800952c:	465b      	mov	r3, fp
 800952e:	4622      	mov	r2, r4
 8009530:	4629      	mov	r1, r5
 8009532:	4630      	mov	r0, r6
 8009534:	f7ff ffa2 	bl	800947c <__sfputs_r>
 8009538:	3001      	adds	r0, #1
 800953a:	f000 80a9 	beq.w	8009690 <_vfiprintf_r+0x1f0>
 800953e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009540:	445a      	add	r2, fp
 8009542:	9209      	str	r2, [sp, #36]	; 0x24
 8009544:	f89a 3000 	ldrb.w	r3, [sl]
 8009548:	2b00      	cmp	r3, #0
 800954a:	f000 80a1 	beq.w	8009690 <_vfiprintf_r+0x1f0>
 800954e:	2300      	movs	r3, #0
 8009550:	f04f 32ff 	mov.w	r2, #4294967295
 8009554:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009558:	f10a 0a01 	add.w	sl, sl, #1
 800955c:	9304      	str	r3, [sp, #16]
 800955e:	9307      	str	r3, [sp, #28]
 8009560:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009564:	931a      	str	r3, [sp, #104]	; 0x68
 8009566:	4654      	mov	r4, sl
 8009568:	2205      	movs	r2, #5
 800956a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800956e:	4854      	ldr	r0, [pc, #336]	; (80096c0 <_vfiprintf_r+0x220>)
 8009570:	f7f6 fe36 	bl	80001e0 <memchr>
 8009574:	9a04      	ldr	r2, [sp, #16]
 8009576:	b9d8      	cbnz	r0, 80095b0 <_vfiprintf_r+0x110>
 8009578:	06d1      	lsls	r1, r2, #27
 800957a:	bf44      	itt	mi
 800957c:	2320      	movmi	r3, #32
 800957e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009582:	0713      	lsls	r3, r2, #28
 8009584:	bf44      	itt	mi
 8009586:	232b      	movmi	r3, #43	; 0x2b
 8009588:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800958c:	f89a 3000 	ldrb.w	r3, [sl]
 8009590:	2b2a      	cmp	r3, #42	; 0x2a
 8009592:	d015      	beq.n	80095c0 <_vfiprintf_r+0x120>
 8009594:	9a07      	ldr	r2, [sp, #28]
 8009596:	4654      	mov	r4, sl
 8009598:	2000      	movs	r0, #0
 800959a:	f04f 0c0a 	mov.w	ip, #10
 800959e:	4621      	mov	r1, r4
 80095a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095a4:	3b30      	subs	r3, #48	; 0x30
 80095a6:	2b09      	cmp	r3, #9
 80095a8:	d94d      	bls.n	8009646 <_vfiprintf_r+0x1a6>
 80095aa:	b1b0      	cbz	r0, 80095da <_vfiprintf_r+0x13a>
 80095ac:	9207      	str	r2, [sp, #28]
 80095ae:	e014      	b.n	80095da <_vfiprintf_r+0x13a>
 80095b0:	eba0 0308 	sub.w	r3, r0, r8
 80095b4:	fa09 f303 	lsl.w	r3, r9, r3
 80095b8:	4313      	orrs	r3, r2
 80095ba:	9304      	str	r3, [sp, #16]
 80095bc:	46a2      	mov	sl, r4
 80095be:	e7d2      	b.n	8009566 <_vfiprintf_r+0xc6>
 80095c0:	9b03      	ldr	r3, [sp, #12]
 80095c2:	1d19      	adds	r1, r3, #4
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	9103      	str	r1, [sp, #12]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	bfbb      	ittet	lt
 80095cc:	425b      	neglt	r3, r3
 80095ce:	f042 0202 	orrlt.w	r2, r2, #2
 80095d2:	9307      	strge	r3, [sp, #28]
 80095d4:	9307      	strlt	r3, [sp, #28]
 80095d6:	bfb8      	it	lt
 80095d8:	9204      	strlt	r2, [sp, #16]
 80095da:	7823      	ldrb	r3, [r4, #0]
 80095dc:	2b2e      	cmp	r3, #46	; 0x2e
 80095de:	d10c      	bne.n	80095fa <_vfiprintf_r+0x15a>
 80095e0:	7863      	ldrb	r3, [r4, #1]
 80095e2:	2b2a      	cmp	r3, #42	; 0x2a
 80095e4:	d134      	bne.n	8009650 <_vfiprintf_r+0x1b0>
 80095e6:	9b03      	ldr	r3, [sp, #12]
 80095e8:	1d1a      	adds	r2, r3, #4
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	9203      	str	r2, [sp, #12]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	bfb8      	it	lt
 80095f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80095f6:	3402      	adds	r4, #2
 80095f8:	9305      	str	r3, [sp, #20]
 80095fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80096d0 <_vfiprintf_r+0x230>
 80095fe:	7821      	ldrb	r1, [r4, #0]
 8009600:	2203      	movs	r2, #3
 8009602:	4650      	mov	r0, sl
 8009604:	f7f6 fdec 	bl	80001e0 <memchr>
 8009608:	b138      	cbz	r0, 800961a <_vfiprintf_r+0x17a>
 800960a:	9b04      	ldr	r3, [sp, #16]
 800960c:	eba0 000a 	sub.w	r0, r0, sl
 8009610:	2240      	movs	r2, #64	; 0x40
 8009612:	4082      	lsls	r2, r0
 8009614:	4313      	orrs	r3, r2
 8009616:	3401      	adds	r4, #1
 8009618:	9304      	str	r3, [sp, #16]
 800961a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800961e:	4829      	ldr	r0, [pc, #164]	; (80096c4 <_vfiprintf_r+0x224>)
 8009620:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009624:	2206      	movs	r2, #6
 8009626:	f7f6 fddb 	bl	80001e0 <memchr>
 800962a:	2800      	cmp	r0, #0
 800962c:	d03f      	beq.n	80096ae <_vfiprintf_r+0x20e>
 800962e:	4b26      	ldr	r3, [pc, #152]	; (80096c8 <_vfiprintf_r+0x228>)
 8009630:	bb1b      	cbnz	r3, 800967a <_vfiprintf_r+0x1da>
 8009632:	9b03      	ldr	r3, [sp, #12]
 8009634:	3307      	adds	r3, #7
 8009636:	f023 0307 	bic.w	r3, r3, #7
 800963a:	3308      	adds	r3, #8
 800963c:	9303      	str	r3, [sp, #12]
 800963e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009640:	443b      	add	r3, r7
 8009642:	9309      	str	r3, [sp, #36]	; 0x24
 8009644:	e768      	b.n	8009518 <_vfiprintf_r+0x78>
 8009646:	fb0c 3202 	mla	r2, ip, r2, r3
 800964a:	460c      	mov	r4, r1
 800964c:	2001      	movs	r0, #1
 800964e:	e7a6      	b.n	800959e <_vfiprintf_r+0xfe>
 8009650:	2300      	movs	r3, #0
 8009652:	3401      	adds	r4, #1
 8009654:	9305      	str	r3, [sp, #20]
 8009656:	4619      	mov	r1, r3
 8009658:	f04f 0c0a 	mov.w	ip, #10
 800965c:	4620      	mov	r0, r4
 800965e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009662:	3a30      	subs	r2, #48	; 0x30
 8009664:	2a09      	cmp	r2, #9
 8009666:	d903      	bls.n	8009670 <_vfiprintf_r+0x1d0>
 8009668:	2b00      	cmp	r3, #0
 800966a:	d0c6      	beq.n	80095fa <_vfiprintf_r+0x15a>
 800966c:	9105      	str	r1, [sp, #20]
 800966e:	e7c4      	b.n	80095fa <_vfiprintf_r+0x15a>
 8009670:	fb0c 2101 	mla	r1, ip, r1, r2
 8009674:	4604      	mov	r4, r0
 8009676:	2301      	movs	r3, #1
 8009678:	e7f0      	b.n	800965c <_vfiprintf_r+0x1bc>
 800967a:	ab03      	add	r3, sp, #12
 800967c:	9300      	str	r3, [sp, #0]
 800967e:	462a      	mov	r2, r5
 8009680:	4b12      	ldr	r3, [pc, #72]	; (80096cc <_vfiprintf_r+0x22c>)
 8009682:	a904      	add	r1, sp, #16
 8009684:	4630      	mov	r0, r6
 8009686:	f7fd fb9d 	bl	8006dc4 <_printf_float>
 800968a:	4607      	mov	r7, r0
 800968c:	1c78      	adds	r0, r7, #1
 800968e:	d1d6      	bne.n	800963e <_vfiprintf_r+0x19e>
 8009690:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009692:	07d9      	lsls	r1, r3, #31
 8009694:	d405      	bmi.n	80096a2 <_vfiprintf_r+0x202>
 8009696:	89ab      	ldrh	r3, [r5, #12]
 8009698:	059a      	lsls	r2, r3, #22
 800969a:	d402      	bmi.n	80096a2 <_vfiprintf_r+0x202>
 800969c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800969e:	f7fe f8fb 	bl	8007898 <__retarget_lock_release_recursive>
 80096a2:	89ab      	ldrh	r3, [r5, #12]
 80096a4:	065b      	lsls	r3, r3, #25
 80096a6:	f53f af1d 	bmi.w	80094e4 <_vfiprintf_r+0x44>
 80096aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096ac:	e71c      	b.n	80094e8 <_vfiprintf_r+0x48>
 80096ae:	ab03      	add	r3, sp, #12
 80096b0:	9300      	str	r3, [sp, #0]
 80096b2:	462a      	mov	r2, r5
 80096b4:	4b05      	ldr	r3, [pc, #20]	; (80096cc <_vfiprintf_r+0x22c>)
 80096b6:	a904      	add	r1, sp, #16
 80096b8:	4630      	mov	r0, r6
 80096ba:	f7fd fe27 	bl	800730c <_printf_i>
 80096be:	e7e4      	b.n	800968a <_vfiprintf_r+0x1ea>
 80096c0:	08009c04 	.word	0x08009c04
 80096c4:	08009c0e 	.word	0x08009c0e
 80096c8:	08006dc5 	.word	0x08006dc5
 80096cc:	0800947d 	.word	0x0800947d
 80096d0:	08009c0a 	.word	0x08009c0a

080096d4 <__swbuf_r>:
 80096d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096d6:	460e      	mov	r6, r1
 80096d8:	4614      	mov	r4, r2
 80096da:	4605      	mov	r5, r0
 80096dc:	b118      	cbz	r0, 80096e6 <__swbuf_r+0x12>
 80096de:	6a03      	ldr	r3, [r0, #32]
 80096e0:	b90b      	cbnz	r3, 80096e6 <__swbuf_r+0x12>
 80096e2:	f7fd ffc1 	bl	8007668 <__sinit>
 80096e6:	69a3      	ldr	r3, [r4, #24]
 80096e8:	60a3      	str	r3, [r4, #8]
 80096ea:	89a3      	ldrh	r3, [r4, #12]
 80096ec:	071a      	lsls	r2, r3, #28
 80096ee:	d525      	bpl.n	800973c <__swbuf_r+0x68>
 80096f0:	6923      	ldr	r3, [r4, #16]
 80096f2:	b31b      	cbz	r3, 800973c <__swbuf_r+0x68>
 80096f4:	6823      	ldr	r3, [r4, #0]
 80096f6:	6922      	ldr	r2, [r4, #16]
 80096f8:	1a98      	subs	r0, r3, r2
 80096fa:	6963      	ldr	r3, [r4, #20]
 80096fc:	b2f6      	uxtb	r6, r6
 80096fe:	4283      	cmp	r3, r0
 8009700:	4637      	mov	r7, r6
 8009702:	dc04      	bgt.n	800970e <__swbuf_r+0x3a>
 8009704:	4621      	mov	r1, r4
 8009706:	4628      	mov	r0, r5
 8009708:	f7ff fd9e 	bl	8009248 <_fflush_r>
 800970c:	b9e0      	cbnz	r0, 8009748 <__swbuf_r+0x74>
 800970e:	68a3      	ldr	r3, [r4, #8]
 8009710:	3b01      	subs	r3, #1
 8009712:	60a3      	str	r3, [r4, #8]
 8009714:	6823      	ldr	r3, [r4, #0]
 8009716:	1c5a      	adds	r2, r3, #1
 8009718:	6022      	str	r2, [r4, #0]
 800971a:	701e      	strb	r6, [r3, #0]
 800971c:	6962      	ldr	r2, [r4, #20]
 800971e:	1c43      	adds	r3, r0, #1
 8009720:	429a      	cmp	r2, r3
 8009722:	d004      	beq.n	800972e <__swbuf_r+0x5a>
 8009724:	89a3      	ldrh	r3, [r4, #12]
 8009726:	07db      	lsls	r3, r3, #31
 8009728:	d506      	bpl.n	8009738 <__swbuf_r+0x64>
 800972a:	2e0a      	cmp	r6, #10
 800972c:	d104      	bne.n	8009738 <__swbuf_r+0x64>
 800972e:	4621      	mov	r1, r4
 8009730:	4628      	mov	r0, r5
 8009732:	f7ff fd89 	bl	8009248 <_fflush_r>
 8009736:	b938      	cbnz	r0, 8009748 <__swbuf_r+0x74>
 8009738:	4638      	mov	r0, r7
 800973a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800973c:	4621      	mov	r1, r4
 800973e:	4628      	mov	r0, r5
 8009740:	f000 f806 	bl	8009750 <__swsetup_r>
 8009744:	2800      	cmp	r0, #0
 8009746:	d0d5      	beq.n	80096f4 <__swbuf_r+0x20>
 8009748:	f04f 37ff 	mov.w	r7, #4294967295
 800974c:	e7f4      	b.n	8009738 <__swbuf_r+0x64>
	...

08009750 <__swsetup_r>:
 8009750:	b538      	push	{r3, r4, r5, lr}
 8009752:	4b2a      	ldr	r3, [pc, #168]	; (80097fc <__swsetup_r+0xac>)
 8009754:	4605      	mov	r5, r0
 8009756:	6818      	ldr	r0, [r3, #0]
 8009758:	460c      	mov	r4, r1
 800975a:	b118      	cbz	r0, 8009764 <__swsetup_r+0x14>
 800975c:	6a03      	ldr	r3, [r0, #32]
 800975e:	b90b      	cbnz	r3, 8009764 <__swsetup_r+0x14>
 8009760:	f7fd ff82 	bl	8007668 <__sinit>
 8009764:	89a3      	ldrh	r3, [r4, #12]
 8009766:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800976a:	0718      	lsls	r0, r3, #28
 800976c:	d422      	bmi.n	80097b4 <__swsetup_r+0x64>
 800976e:	06d9      	lsls	r1, r3, #27
 8009770:	d407      	bmi.n	8009782 <__swsetup_r+0x32>
 8009772:	2309      	movs	r3, #9
 8009774:	602b      	str	r3, [r5, #0]
 8009776:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800977a:	81a3      	strh	r3, [r4, #12]
 800977c:	f04f 30ff 	mov.w	r0, #4294967295
 8009780:	e034      	b.n	80097ec <__swsetup_r+0x9c>
 8009782:	0758      	lsls	r0, r3, #29
 8009784:	d512      	bpl.n	80097ac <__swsetup_r+0x5c>
 8009786:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009788:	b141      	cbz	r1, 800979c <__swsetup_r+0x4c>
 800978a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800978e:	4299      	cmp	r1, r3
 8009790:	d002      	beq.n	8009798 <__swsetup_r+0x48>
 8009792:	4628      	mov	r0, r5
 8009794:	f7fe fefe 	bl	8008594 <_free_r>
 8009798:	2300      	movs	r3, #0
 800979a:	6363      	str	r3, [r4, #52]	; 0x34
 800979c:	89a3      	ldrh	r3, [r4, #12]
 800979e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80097a2:	81a3      	strh	r3, [r4, #12]
 80097a4:	2300      	movs	r3, #0
 80097a6:	6063      	str	r3, [r4, #4]
 80097a8:	6923      	ldr	r3, [r4, #16]
 80097aa:	6023      	str	r3, [r4, #0]
 80097ac:	89a3      	ldrh	r3, [r4, #12]
 80097ae:	f043 0308 	orr.w	r3, r3, #8
 80097b2:	81a3      	strh	r3, [r4, #12]
 80097b4:	6923      	ldr	r3, [r4, #16]
 80097b6:	b94b      	cbnz	r3, 80097cc <__swsetup_r+0x7c>
 80097b8:	89a3      	ldrh	r3, [r4, #12]
 80097ba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80097be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097c2:	d003      	beq.n	80097cc <__swsetup_r+0x7c>
 80097c4:	4621      	mov	r1, r4
 80097c6:	4628      	mov	r0, r5
 80097c8:	f000 f884 	bl	80098d4 <__smakebuf_r>
 80097cc:	89a0      	ldrh	r0, [r4, #12]
 80097ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097d2:	f010 0301 	ands.w	r3, r0, #1
 80097d6:	d00a      	beq.n	80097ee <__swsetup_r+0x9e>
 80097d8:	2300      	movs	r3, #0
 80097da:	60a3      	str	r3, [r4, #8]
 80097dc:	6963      	ldr	r3, [r4, #20]
 80097de:	425b      	negs	r3, r3
 80097e0:	61a3      	str	r3, [r4, #24]
 80097e2:	6923      	ldr	r3, [r4, #16]
 80097e4:	b943      	cbnz	r3, 80097f8 <__swsetup_r+0xa8>
 80097e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80097ea:	d1c4      	bne.n	8009776 <__swsetup_r+0x26>
 80097ec:	bd38      	pop	{r3, r4, r5, pc}
 80097ee:	0781      	lsls	r1, r0, #30
 80097f0:	bf58      	it	pl
 80097f2:	6963      	ldrpl	r3, [r4, #20]
 80097f4:	60a3      	str	r3, [r4, #8]
 80097f6:	e7f4      	b.n	80097e2 <__swsetup_r+0x92>
 80097f8:	2000      	movs	r0, #0
 80097fa:	e7f7      	b.n	80097ec <__swsetup_r+0x9c>
 80097fc:	20000068 	.word	0x20000068

08009800 <_raise_r>:
 8009800:	291f      	cmp	r1, #31
 8009802:	b538      	push	{r3, r4, r5, lr}
 8009804:	4604      	mov	r4, r0
 8009806:	460d      	mov	r5, r1
 8009808:	d904      	bls.n	8009814 <_raise_r+0x14>
 800980a:	2316      	movs	r3, #22
 800980c:	6003      	str	r3, [r0, #0]
 800980e:	f04f 30ff 	mov.w	r0, #4294967295
 8009812:	bd38      	pop	{r3, r4, r5, pc}
 8009814:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009816:	b112      	cbz	r2, 800981e <_raise_r+0x1e>
 8009818:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800981c:	b94b      	cbnz	r3, 8009832 <_raise_r+0x32>
 800981e:	4620      	mov	r0, r4
 8009820:	f000 f830 	bl	8009884 <_getpid_r>
 8009824:	462a      	mov	r2, r5
 8009826:	4601      	mov	r1, r0
 8009828:	4620      	mov	r0, r4
 800982a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800982e:	f000 b817 	b.w	8009860 <_kill_r>
 8009832:	2b01      	cmp	r3, #1
 8009834:	d00a      	beq.n	800984c <_raise_r+0x4c>
 8009836:	1c59      	adds	r1, r3, #1
 8009838:	d103      	bne.n	8009842 <_raise_r+0x42>
 800983a:	2316      	movs	r3, #22
 800983c:	6003      	str	r3, [r0, #0]
 800983e:	2001      	movs	r0, #1
 8009840:	e7e7      	b.n	8009812 <_raise_r+0x12>
 8009842:	2400      	movs	r4, #0
 8009844:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009848:	4628      	mov	r0, r5
 800984a:	4798      	blx	r3
 800984c:	2000      	movs	r0, #0
 800984e:	e7e0      	b.n	8009812 <_raise_r+0x12>

08009850 <raise>:
 8009850:	4b02      	ldr	r3, [pc, #8]	; (800985c <raise+0xc>)
 8009852:	4601      	mov	r1, r0
 8009854:	6818      	ldr	r0, [r3, #0]
 8009856:	f7ff bfd3 	b.w	8009800 <_raise_r>
 800985a:	bf00      	nop
 800985c:	20000068 	.word	0x20000068

08009860 <_kill_r>:
 8009860:	b538      	push	{r3, r4, r5, lr}
 8009862:	4d07      	ldr	r5, [pc, #28]	; (8009880 <_kill_r+0x20>)
 8009864:	2300      	movs	r3, #0
 8009866:	4604      	mov	r4, r0
 8009868:	4608      	mov	r0, r1
 800986a:	4611      	mov	r1, r2
 800986c:	602b      	str	r3, [r5, #0]
 800986e:	f7f8 ffdd 	bl	800282c <_kill>
 8009872:	1c43      	adds	r3, r0, #1
 8009874:	d102      	bne.n	800987c <_kill_r+0x1c>
 8009876:	682b      	ldr	r3, [r5, #0]
 8009878:	b103      	cbz	r3, 800987c <_kill_r+0x1c>
 800987a:	6023      	str	r3, [r4, #0]
 800987c:	bd38      	pop	{r3, r4, r5, pc}
 800987e:	bf00      	nop
 8009880:	200005fc 	.word	0x200005fc

08009884 <_getpid_r>:
 8009884:	f7f8 bfca 	b.w	800281c <_getpid>

08009888 <__swhatbuf_r>:
 8009888:	b570      	push	{r4, r5, r6, lr}
 800988a:	460c      	mov	r4, r1
 800988c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009890:	2900      	cmp	r1, #0
 8009892:	b096      	sub	sp, #88	; 0x58
 8009894:	4615      	mov	r5, r2
 8009896:	461e      	mov	r6, r3
 8009898:	da0d      	bge.n	80098b6 <__swhatbuf_r+0x2e>
 800989a:	89a3      	ldrh	r3, [r4, #12]
 800989c:	f013 0f80 	tst.w	r3, #128	; 0x80
 80098a0:	f04f 0100 	mov.w	r1, #0
 80098a4:	bf0c      	ite	eq
 80098a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80098aa:	2340      	movne	r3, #64	; 0x40
 80098ac:	2000      	movs	r0, #0
 80098ae:	6031      	str	r1, [r6, #0]
 80098b0:	602b      	str	r3, [r5, #0]
 80098b2:	b016      	add	sp, #88	; 0x58
 80098b4:	bd70      	pop	{r4, r5, r6, pc}
 80098b6:	466a      	mov	r2, sp
 80098b8:	f000 f848 	bl	800994c <_fstat_r>
 80098bc:	2800      	cmp	r0, #0
 80098be:	dbec      	blt.n	800989a <__swhatbuf_r+0x12>
 80098c0:	9901      	ldr	r1, [sp, #4]
 80098c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80098c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80098ca:	4259      	negs	r1, r3
 80098cc:	4159      	adcs	r1, r3
 80098ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098d2:	e7eb      	b.n	80098ac <__swhatbuf_r+0x24>

080098d4 <__smakebuf_r>:
 80098d4:	898b      	ldrh	r3, [r1, #12]
 80098d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80098d8:	079d      	lsls	r5, r3, #30
 80098da:	4606      	mov	r6, r0
 80098dc:	460c      	mov	r4, r1
 80098de:	d507      	bpl.n	80098f0 <__smakebuf_r+0x1c>
 80098e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80098e4:	6023      	str	r3, [r4, #0]
 80098e6:	6123      	str	r3, [r4, #16]
 80098e8:	2301      	movs	r3, #1
 80098ea:	6163      	str	r3, [r4, #20]
 80098ec:	b002      	add	sp, #8
 80098ee:	bd70      	pop	{r4, r5, r6, pc}
 80098f0:	ab01      	add	r3, sp, #4
 80098f2:	466a      	mov	r2, sp
 80098f4:	f7ff ffc8 	bl	8009888 <__swhatbuf_r>
 80098f8:	9900      	ldr	r1, [sp, #0]
 80098fa:	4605      	mov	r5, r0
 80098fc:	4630      	mov	r0, r6
 80098fe:	f7fe febd 	bl	800867c <_malloc_r>
 8009902:	b948      	cbnz	r0, 8009918 <__smakebuf_r+0x44>
 8009904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009908:	059a      	lsls	r2, r3, #22
 800990a:	d4ef      	bmi.n	80098ec <__smakebuf_r+0x18>
 800990c:	f023 0303 	bic.w	r3, r3, #3
 8009910:	f043 0302 	orr.w	r3, r3, #2
 8009914:	81a3      	strh	r3, [r4, #12]
 8009916:	e7e3      	b.n	80098e0 <__smakebuf_r+0xc>
 8009918:	89a3      	ldrh	r3, [r4, #12]
 800991a:	6020      	str	r0, [r4, #0]
 800991c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009920:	81a3      	strh	r3, [r4, #12]
 8009922:	9b00      	ldr	r3, [sp, #0]
 8009924:	6163      	str	r3, [r4, #20]
 8009926:	9b01      	ldr	r3, [sp, #4]
 8009928:	6120      	str	r0, [r4, #16]
 800992a:	b15b      	cbz	r3, 8009944 <__smakebuf_r+0x70>
 800992c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009930:	4630      	mov	r0, r6
 8009932:	f000 f81d 	bl	8009970 <_isatty_r>
 8009936:	b128      	cbz	r0, 8009944 <__smakebuf_r+0x70>
 8009938:	89a3      	ldrh	r3, [r4, #12]
 800993a:	f023 0303 	bic.w	r3, r3, #3
 800993e:	f043 0301 	orr.w	r3, r3, #1
 8009942:	81a3      	strh	r3, [r4, #12]
 8009944:	89a3      	ldrh	r3, [r4, #12]
 8009946:	431d      	orrs	r5, r3
 8009948:	81a5      	strh	r5, [r4, #12]
 800994a:	e7cf      	b.n	80098ec <__smakebuf_r+0x18>

0800994c <_fstat_r>:
 800994c:	b538      	push	{r3, r4, r5, lr}
 800994e:	4d07      	ldr	r5, [pc, #28]	; (800996c <_fstat_r+0x20>)
 8009950:	2300      	movs	r3, #0
 8009952:	4604      	mov	r4, r0
 8009954:	4608      	mov	r0, r1
 8009956:	4611      	mov	r1, r2
 8009958:	602b      	str	r3, [r5, #0]
 800995a:	f7f8 ffc6 	bl	80028ea <_fstat>
 800995e:	1c43      	adds	r3, r0, #1
 8009960:	d102      	bne.n	8009968 <_fstat_r+0x1c>
 8009962:	682b      	ldr	r3, [r5, #0]
 8009964:	b103      	cbz	r3, 8009968 <_fstat_r+0x1c>
 8009966:	6023      	str	r3, [r4, #0]
 8009968:	bd38      	pop	{r3, r4, r5, pc}
 800996a:	bf00      	nop
 800996c:	200005fc 	.word	0x200005fc

08009970 <_isatty_r>:
 8009970:	b538      	push	{r3, r4, r5, lr}
 8009972:	4d06      	ldr	r5, [pc, #24]	; (800998c <_isatty_r+0x1c>)
 8009974:	2300      	movs	r3, #0
 8009976:	4604      	mov	r4, r0
 8009978:	4608      	mov	r0, r1
 800997a:	602b      	str	r3, [r5, #0]
 800997c:	f7f8 ffc5 	bl	800290a <_isatty>
 8009980:	1c43      	adds	r3, r0, #1
 8009982:	d102      	bne.n	800998a <_isatty_r+0x1a>
 8009984:	682b      	ldr	r3, [r5, #0]
 8009986:	b103      	cbz	r3, 800998a <_isatty_r+0x1a>
 8009988:	6023      	str	r3, [r4, #0]
 800998a:	bd38      	pop	{r3, r4, r5, pc}
 800998c:	200005fc 	.word	0x200005fc

08009990 <_init>:
 8009990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009992:	bf00      	nop
 8009994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009996:	bc08      	pop	{r3}
 8009998:	469e      	mov	lr, r3
 800999a:	4770      	bx	lr

0800999c <_fini>:
 800999c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800999e:	bf00      	nop
 80099a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099a2:	bc08      	pop	{r3}
 80099a4:	469e      	mov	lr, r3
 80099a6:	4770      	bx	lr
